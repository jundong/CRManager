/**
 * Require the module at `name`.
 *
 * @param {String} name
 * @return {Object} exports
 * @api public
 */

function require(name) {
  var module = require.modules[name];
  if (!module) throw new Error('failed to require "' + name + '"');

  if (!('exports' in module) && typeof module.definition === 'function') {
    module.client = module.component = true;
    module.definition.call(this, module.exports = {}, module);
    delete module.definition;
  }

  return module.exports;
}

/**
 * Meta info, accessible in the global scope unless you use AMD option.
 */

require.loader = 'component';

/**
 * Internal helper object, contains a sorting function for semantiv versioning
 */
require.helper = {};
require.helper.semVerSort = function(a, b) {
  var aArray = a.version.split('.');
  var bArray = b.version.split('.');
  for (var i=0; i<aArray.length; ++i) {
    var aInt = parseInt(aArray[i], 10);
    var bInt = parseInt(bArray[i], 10);
    if (aInt === bInt) {
      var aLex = aArray[i].substr((""+aInt).length);
      var bLex = bArray[i].substr((""+bInt).length);
      if (aLex === '' && bLex !== '') return 1;
      if (aLex !== '' && bLex === '') return -1;
      if (aLex !== '' && bLex !== '') return aLex > bLex ? 1 : -1;
      continue;
    } else if (aInt > bInt) {
      return 1;
    } else {
      return -1;
    }
  }
  return 0;
}

/**
 * Find and require a module which name starts with the provided name.
 * If multiple modules exists, the highest semver is used. 
 * This function can only be used for remote dependencies.

 * @param {String} name - module name: `user~repo`
 * @param {Boolean} returnPath - returns the canonical require path if true, 
 *                               otherwise it returns the epxorted module
 */
require.latest = function (name, returnPath) {
  function showError(name) {
    throw new Error('failed to find latest module of "' + name + '"');
  }
  // only remotes with semvers, ignore local files conataining a '/'
  var versionRegexp = /(.*)~(.*)@v?(\d+\.\d+\.\d+[^\/]*)$/;
  var remoteRegexp = /(.*)~(.*)/;
  if (!remoteRegexp.test(name)) showError(name);
  var moduleNames = Object.keys(require.modules);
  var semVerCandidates = [];
  var otherCandidates = []; // for instance: name of the git branch
  for (var i=0; i<moduleNames.length; i++) {
    var moduleName = moduleNames[i];
    if (new RegExp(name + '@').test(moduleName)) {
        var version = moduleName.substr(name.length+1);
        var semVerMatch = versionRegexp.exec(moduleName);
        if (semVerMatch != null) {
          semVerCandidates.push({version: version, name: moduleName});
        } else {
          otherCandidates.push({version: version, name: moduleName});
        } 
    }
  }
  if (semVerCandidates.concat(otherCandidates).length === 0) {
    showError(name);
  }
  if (semVerCandidates.length > 0) {
    var module = semVerCandidates.sort(require.helper.semVerSort).pop().name;
    if (returnPath === true) {
      return module;
    }
    return require(module);
  }
  // if the build contains more than one branch of the same module
  // you should not use this funciton
  var module = otherCandidates.sort(function(a, b) {return a.name > b.name})[0].name;
  if (returnPath === true) {
    return module;
  }
  return require(module);
}

/**
 * Registered modules.
 */

require.modules = {};

/**
 * Register module at `name` with callback `definition`.
 *
 * @param {String} name
 * @param {Function} definition
 * @api private
 */

require.register = function (name, definition) {
  require.modules[name] = {
    definition: definition
  };
};

/**
 * Define a module's exports immediately with `exports`.
 *
 * @param {String} name
 * @param {Generic} exports
 * @api private
 */

require.define = function (name, exports) {
  require.modules[name] = {
    exports: exports
  };
};
require.register("visionmedia~mocha@2.1.0", function (exports, module) {
;(function(){

// CommonJS require()

function require(p){
    var path = require.resolve(p)
      , mod = require.modules[path];
    if (!mod) throw new Error('failed to require "' + p + '"');
    if (!mod.exports) {
      mod.exports = {};
      mod.call(mod.exports, mod, mod.exports, require.relative(path));
    }
    return mod.exports;
  }

require.modules = {};

require.resolve = function (path){
    var orig = path
      , reg = path + '.js'
      , index = path + '/index.js';
    return require.modules[reg] && reg
      || require.modules[index] && index
      || orig;
  };

require.register = function (path, fn){
    require.modules[path] = fn;
  };

require.relative = function (parent) {
    return function(p){
      if ('.' != p.charAt(0)) return require(p);

      var path = parent.split('/')
        , segs = p.split('/');
      path.pop();

      for (var i = 0; i < segs.length; i++) {
        var seg = segs[i];
        if ('..' == seg) path.pop();
        else if ('.' != seg) path.push(seg);
      }

      return require(path.join('/'));
    };
  };


require.register("browser/debug.js", function(module, exports, require){
module.exports = function(type){
  return function(){
  }
};

}); // module: browser/debug.js

require.register("browser/diff.js", function(module, exports, require){
/* See LICENSE file for terms of use */

/*
 * Text diff implementation.
 *
 * This library supports the following APIS:
 * JsDiff.diffChars: Character by character diff
 * JsDiff.diffWords: Word (as defined by \b regex) diff which ignores whitespace
 * JsDiff.diffLines: Line based diff
 *
 * JsDiff.diffCss: Diff targeted at CSS content
 *
 * These methods are based on the implementation proposed in
 * "An O(ND) Difference Algorithm and its Variations" (Myers, 1986).
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927
 */
var JsDiff = (function() {
  /*jshint maxparams: 5*/
  function clonePath(path) {
    return { newPos: path.newPos, components: path.components.slice(0) };
  }
  function removeEmpty(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  }
  function escapeHTML(s) {
    var n = s;
    n = n.replace(/&/g, '&amp;');
    n = n.replace(/</g, '&lt;');
    n = n.replace(/>/g, '&gt;');
    n = n.replace(/"/g, '&quot;');

    return n;
  }

  var Diff = function(ignoreWhitespace) {
    this.ignoreWhitespace = ignoreWhitespace;
  };
  Diff.prototype = {
      diff: function(oldString, newString) {
        // Handle the identity case (this is due to unrolling editLength == 0
        if (newString === oldString) {
          return [{ value: newString }];
        }
        if (!newString) {
          return [{ value: oldString, removed: true }];
        }
        if (!oldString) {
          return [{ value: newString, added: true }];
        }

        newString = this.tokenize(newString);
        oldString = this.tokenize(oldString);

        var newLen = newString.length, oldLen = oldString.length;
        var maxEditLength = newLen + oldLen;
        var bestPath = [{ newPos: -1, components: [] }];

        // Seed editLength = 0
        var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
        if (bestPath[0].newPos+1 >= newLen && oldPos+1 >= oldLen) {
          return bestPath[0].components;
        }

        for (var editLength = 1; editLength <= maxEditLength; editLength++) {
          for (var diagonalPath = -1*editLength; diagonalPath <= editLength; diagonalPath+=2) {
            var basePath;
            var addPath = bestPath[diagonalPath-1],
                removePath = bestPath[diagonalPath+1];
            oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
            if (addPath) {
              // No one else is going to attempt to use this value, clear it
              bestPath[diagonalPath-1] = undefined;
            }

            var canAdd = addPath && addPath.newPos+1 < newLen;
            var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;
            if (!canAdd && !canRemove) {
              bestPath[diagonalPath] = undefined;
              continue;
            }

            // Select the diagonal that we want to branch from. We select the prior
            // path whose position in the new string is the farthest from the origin
            // and does not pass the bounds of the diff graph
            if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {
              basePath = clonePath(removePath);
              this.pushComponent(basePath.components, oldString[oldPos], undefined, true);
            } else {
              basePath = clonePath(addPath);
              basePath.newPos++;
              this.pushComponent(basePath.components, newString[basePath.newPos], true, undefined);
            }

            var oldPos = this.extractCommon(basePath, newString, oldString, diagonalPath);

            if (basePath.newPos+1 >= newLen && oldPos+1 >= oldLen) {
              return basePath.components;
            } else {
              bestPath[diagonalPath] = basePath;
            }
          }
        }
      },

      pushComponent: function(components, value, added, removed) {
        var last = components[components.length-1];
        if (last && last.added === added && last.removed === removed) {
          // We need to clone here as the component clone operation is just
          // as shallow array clone
          components[components.length-1] =
            {value: this.join(last.value, value), added: added, removed: removed };
        } else {
          components.push({value: value, added: added, removed: removed });
        }
      },
      extractCommon: function(basePath, newString, oldString, diagonalPath) {
        var newLen = newString.length,
            oldLen = oldString.length,
            newPos = basePath.newPos,
            oldPos = newPos - diagonalPath;
        while (newPos+1 < newLen && oldPos+1 < oldLen && this.equals(newString[newPos+1], oldString[oldPos+1])) {
          newPos++;
          oldPos++;

          this.pushComponent(basePath.components, newString[newPos], undefined, undefined);
        }
        basePath.newPos = newPos;
        return oldPos;
      },

      equals: function(left, right) {
        var reWhitespace = /\S/;
        if (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right)) {
          return true;
        } else {
          return left === right;
        }
      },
      join: function(left, right) {
        return left + right;
      },
      tokenize: function(value) {
        return value;
      }
  };

  var CharDiff = new Diff();

  var WordDiff = new Diff(true);
  var WordWithSpaceDiff = new Diff();
  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {
    return removeEmpty(value.split(/(\s+|\b)/));
  };

  var CssDiff = new Diff(true);
  CssDiff.tokenize = function(value) {
    return removeEmpty(value.split(/([{}:;,]|\s+)/));
  };

  var LineDiff = new Diff();
  LineDiff.tokenize = function(value) {
    var retLines = [],
        lines = value.split(/^/m);

    for(var i = 0; i < lines.length; i++) {
      var line = lines[i],
          lastLine = lines[i - 1];

      // Merge lines that may contain windows new lines
      if (line == '\n' && lastLine && lastLine[lastLine.length - 1] === '\r') {
        retLines[retLines.length - 1] += '\n';
      } else if (line) {
        retLines.push(line);
      }
    }

    return retLines;
  };

  return {
    Diff: Diff,

    diffChars: function(oldStr, newStr) { return CharDiff.diff(oldStr, newStr); },
    diffWords: function(oldStr, newStr) { return WordDiff.diff(oldStr, newStr); },
    diffWordsWithSpace: function(oldStr, newStr) { return WordWithSpaceDiff.diff(oldStr, newStr); },
    diffLines: function(oldStr, newStr) { return LineDiff.diff(oldStr, newStr); },

    diffCss: function(oldStr, newStr) { return CssDiff.diff(oldStr, newStr); },

    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {
      var ret = [];

      ret.push('Index: ' + fileName);
      ret.push('===================================================================');
      ret.push('--- ' + fileName + (typeof oldHeader === 'undefined' ? '' : '\t' + oldHeader));
      ret.push('+++ ' + fileName + (typeof newHeader === 'undefined' ? '' : '\t' + newHeader));

      var diff = LineDiff.diff(oldStr, newStr);
      if (!diff[diff.length-1].value) {
        diff.pop();   // Remove trailing newline add
      }
      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier

      function contextLines(lines) {
        return lines.map(function(entry) { return ' ' + entry; });
      }
      function eofNL(curRange, i, current) {
        var last = diff[diff.length-2],
            isLast = i === diff.length-2,
            isLastOfType = i === diff.length-3 && (current.added !== last.added || current.removed !== last.removed);

        // Figure out if this is the last line for the given file and missing NL
        if (!/\n$/.test(current.value) && (isLast || isLastOfType)) {
          curRange.push('\\ No newline at end of file');
        }
      }

      var oldRangeStart = 0, newRangeStart = 0, curRange = [],
          oldLine = 1, newLine = 1;
      for (var i = 0; i < diff.length; i++) {
        var current = diff[i],
            lines = current.lines || current.value.replace(/\n$/, '').split('\n');
        current.lines = lines;

        if (current.added || current.removed) {
          if (!oldRangeStart) {
            var prev = diff[i-1];
            oldRangeStart = oldLine;
            newRangeStart = newLine;

            if (prev) {
              curRange = contextLines(prev.lines.slice(-4));
              oldRangeStart -= curRange.length;
              newRangeStart -= curRange.length;
            }
          }
          curRange.push.apply(curRange, lines.map(function(entry) { return (current.added?'+':'-') + entry; }));
          eofNL(curRange, i, current);

          if (current.added) {
            newLine += lines.length;
          } else {
            oldLine += lines.length;
          }
        } else {
          if (oldRangeStart) {
            // Close out any changes that have been output (or join overlapping)
            if (lines.length <= 8 && i < diff.length-2) {
              // Overlapping
              curRange.push.apply(curRange, contextLines(lines));
            } else {
              // end the range and output
              var contextSize = Math.min(lines.length, 4);
              ret.push(
                  '@@ -' + oldRangeStart + ',' + (oldLine-oldRangeStart+contextSize)
                  + ' +' + newRangeStart + ',' + (newLine-newRangeStart+contextSize)
                  + ' @@');
              ret.push.apply(ret, curRange);
              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));
              if (lines.length <= 4) {
                eofNL(ret, i, current);
              }

              oldRangeStart = 0;  newRangeStart = 0; curRange = [];
            }
          }
          oldLine += lines.length;
          newLine += lines.length;
        }
      }

      return ret.join('\n') + '\n';
    },

    applyPatch: function(oldStr, uniDiff) {
      var diffstr = uniDiff.split('\n');
      var diff = [];
      var remEOFNL = false,
          addEOFNL = false;

      for (var i = (diffstr[0][0]==='I'?4:0); i < diffstr.length; i++) {
        if(diffstr[i][0] === '@') {
          var meh = diffstr[i].split(/@@ -(\d+),(\d+) \+(\d+),(\d+) @@/);
          diff.unshift({
            start:meh[3],
            oldlength:meh[2],
            oldlines:[],
            newlength:meh[4],
            newlines:[]
          });
        } else if(diffstr[i][0] === '+') {
          diff[0].newlines.push(diffstr[i].substr(1));
        } else if(diffstr[i][0] === '-') {
          diff[0].oldlines.push(diffstr[i].substr(1));
        } else if(diffstr[i][0] === ' ') {
          diff[0].newlines.push(diffstr[i].substr(1));
          diff[0].oldlines.push(diffstr[i].substr(1));
        } else if(diffstr[i][0] === '\\') {
          if (diffstr[i-1][0] === '+') {
            remEOFNL = true;
          } else if(diffstr[i-1][0] === '-') {
            addEOFNL = true;
          }
        }
      }

      var str = oldStr.split('\n');
      for (var i = diff.length - 1; i >= 0; i--) {
        var d = diff[i];
        for (var j = 0; j < d.oldlength; j++) {
          if(str[d.start-1+j] !== d.oldlines[j]) {
            return false;
          }
        }
        Array.prototype.splice.apply(str,[d.start-1,+d.oldlength].concat(d.newlines));
      }

      if (remEOFNL) {
        while (!str[str.length-1]) {
          str.pop();
        }
      } else if (addEOFNL) {
        str.push('');
      }
      return str.join('\n');
    },

    convertChangesToXML: function(changes){
      var ret = [];
      for ( var i = 0; i < changes.length; i++) {
        var change = changes[i];
        if (change.added) {
          ret.push('<ins>');
        } else if (change.removed) {
          ret.push('<del>');
        }

        ret.push(escapeHTML(change.value));

        if (change.added) {
          ret.push('</ins>');
        } else if (change.removed) {
          ret.push('</del>');
        }
      }
      return ret.join('');
    },

    // See: http://code.google.com/p/google-diff-match-patch/wiki/API
    convertChangesToDMP: function(changes){
      var ret = [], change;
      for ( var i = 0; i < changes.length; i++) {
        change = changes[i];
        ret.push([(change.added ? 1 : change.removed ? -1 : 0), change.value]);
      }
      return ret;
    }
  };
})();

if (typeof module !== 'undefined') {
    module.exports = JsDiff;
}

}); // module: browser/diff.js

require.register("browser/escape-string-regexp.js", function(module, exports, require){
'use strict';

var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

module.exports = function (str) {
  if (typeof str !== 'string') {
    throw new TypeError('Expected a string');
  }

  return str.replace(matchOperatorsRe,  '\\$&');
};

}); // module: browser/escape-string-regexp.js

require.register("browser/events.js", function(module, exports, require){
/**
 * Module exports.
 */

exports.EventEmitter = EventEmitter;

/**
 * Check if `obj` is an array.
 */

function isArray(obj) {
  return '[object Array]' == {}.toString.call(obj);
}

/**
 * Event emitter constructor.
 *
 * @api public
 */

function EventEmitter(){};

/**
 * Adds a listener.
 *
 * @api public
 */

EventEmitter.prototype.on = function (name, fn) {
  if (!this.$events) {
    this.$events = {};
  }

  if (!this.$events[name]) {
    this.$events[name] = fn;
  } else if (isArray(this.$events[name])) {
    this.$events[name].push(fn);
  } else {
    this.$events[name] = [this.$events[name], fn];
  }

  return this;
};

EventEmitter.prototype.addListener = EventEmitter.prototype.on;

/**
 * Adds a volatile listener.
 *
 * @api public
 */

EventEmitter.prototype.once = function (name, fn) {
  var self = this;

  function on () {
    self.removeListener(name, on);
    fn.apply(this, arguments);
  };

  on.listener = fn;
  this.on(name, on);

  return this;
};

/**
 * Removes a listener.
 *
 * @api public
 */

EventEmitter.prototype.removeListener = function (name, fn) {
  if (this.$events && this.$events[name]) {
    var list = this.$events[name];

    if (isArray(list)) {
      var pos = -1;

      for (var i = 0, l = list.length; i < l; i++) {
        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {
          pos = i;
          break;
        }
      }

      if (pos < 0) {
        return this;
      }

      list.splice(pos, 1);

      if (!list.length) {
        delete this.$events[name];
      }
    } else if (list === fn || (list.listener && list.listener === fn)) {
      delete this.$events[name];
    }
  }

  return this;
};

/**
 * Removes all listeners for an event.
 *
 * @api public
 */

EventEmitter.prototype.removeAllListeners = function (name) {
  if (name === undefined) {
    this.$events = {};
    return this;
  }

  if (this.$events && this.$events[name]) {
    this.$events[name] = null;
  }

  return this;
};

/**
 * Gets all listeners for a certain event.
 *
 * @api public
 */

EventEmitter.prototype.listeners = function (name) {
  if (!this.$events) {
    this.$events = {};
  }

  if (!this.$events[name]) {
    this.$events[name] = [];
  }

  if (!isArray(this.$events[name])) {
    this.$events[name] = [this.$events[name]];
  }

  return this.$events[name];
};

/**
 * Emits an event.
 *
 * @api public
 */

EventEmitter.prototype.emit = function (name) {
  if (!this.$events) {
    return false;
  }

  var handler = this.$events[name];

  if (!handler) {
    return false;
  }

  var args = [].slice.call(arguments, 1);

  if ('function' == typeof handler) {
    handler.apply(this, args);
  } else if (isArray(handler)) {
    var listeners = handler.slice();

    for (var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].apply(this, args);
    }
  } else {
    return false;
  }

  return true;
};

}); // module: browser/events.js

require.register("browser/fs.js", function(module, exports, require){

}); // module: browser/fs.js

require.register("browser/glob.js", function(module, exports, require){

}); // module: browser/glob.js

require.register("browser/path.js", function(module, exports, require){

}); // module: browser/path.js

require.register("browser/progress.js", function(module, exports, require){
/**
 * Expose `Progress`.
 */

module.exports = Progress;

/**
 * Initialize a new `Progress` indicator.
 */

function Progress() {
  this.percent = 0;
  this.size(0);
  this.fontSize(11);
  this.font('helvetica, arial, sans-serif');
}

/**
 * Set progress size to `n`.
 *
 * @param {Number} n
 * @return {Progress} for chaining
 * @api public
 */

Progress.prototype.size = function(n){
  this._size = n;
  return this;
};

/**
 * Set text to `str`.
 *
 * @param {String} str
 * @return {Progress} for chaining
 * @api public
 */

Progress.prototype.text = function(str){
  this._text = str;
  return this;
};

/**
 * Set font size to `n`.
 *
 * @param {Number} n
 * @return {Progress} for chaining
 * @api public
 */

Progress.prototype.fontSize = function(n){
  this._fontSize = n;
  return this;
};

/**
 * Set font `family`.
 *
 * @param {String} family
 * @return {Progress} for chaining
 */

Progress.prototype.font = function(family){
  this._font = family;
  return this;
};

/**
 * Update percentage to `n`.
 *
 * @param {Number} n
 * @return {Progress} for chaining
 */

Progress.prototype.update = function(n){
  this.percent = n;
  return this;
};

/**
 * Draw on `ctx`.
 *
 * @param {CanvasRenderingContext2d} ctx
 * @return {Progress} for chaining
 */

Progress.prototype.draw = function(ctx){
  try {
    var percent = Math.min(this.percent, 100)
      , size = this._size
      , half = size / 2
      , x = half
      , y = half
      , rad = half - 1
      , fontSize = this._fontSize;

    ctx.font = fontSize + 'px ' + this._font;

    var angle = Math.PI * 2 * (percent / 100);
    ctx.clearRect(0, 0, size, size);

    // outer circle
    ctx.strokeStyle = '#9f9f9f';
    ctx.beginPath();
    ctx.arc(x, y, rad, 0, angle, false);
    ctx.stroke();

    // inner circle
    ctx.strokeStyle = '#eee';
    ctx.beginPath();
    ctx.arc(x, y, rad - 1, 0, angle, true);
    ctx.stroke();

    // text
    var text = this._text || (percent | 0) + '%'
      , w = ctx.measureText(text).width;

    ctx.fillText(
        text
      , x - w / 2 + 1
      , y + fontSize / 2 - 1);
  } catch (ex) {} //don't fail if we can't render progress
  return this;
};

}); // module: browser/progress.js

require.register("browser/tty.js", function(module, exports, require){
exports.isatty = function(){
  return true;
};

exports.getWindowSize = function(){
  if ('innerHeight' in global) {
    return [global.innerHeight, global.innerWidth];
  } else {
    // In a Web Worker, the DOM Window is not available.
    return [640, 480];
  }
};

}); // module: browser/tty.js

require.register("context.js", function(module, exports, require){
/**
 * Expose `Context`.
 */

module.exports = Context;

/**
 * Initialize a new `Context`.
 *
 * @api private
 */

function Context(){}

/**
 * Set or get the context `Runnable` to `runnable`.
 *
 * @param {Runnable} runnable
 * @return {Context}
 * @api private
 */

Context.prototype.runnable = function(runnable){
  if (0 == arguments.length) return this._runnable;
  this.test = this._runnable = runnable;
  return this;
};

/**
 * Set test timeout `ms`.
 *
 * @param {Number} ms
 * @return {Context} self
 * @api private
 */

Context.prototype.timeout = function(ms){
  if (arguments.length === 0) return this.runnable().timeout();
  this.runnable().timeout(ms);
  return this;
};

/**
 * Set test timeout `enabled`.
 *
 * @param {Boolean} enabled
 * @return {Context} self
 * @api private
 */

Context.prototype.enableTimeouts = function (enabled) {
  this.runnable().enableTimeouts(enabled);
  return this;
};


/**
 * Set test slowness threshold `ms`.
 *
 * @param {Number} ms
 * @return {Context} self
 * @api private
 */

Context.prototype.slow = function(ms){
  this.runnable().slow(ms);
  return this;
};

/**
 * Inspect the context void of `._runnable`.
 *
 * @return {String}
 * @api private
 */

Context.prototype.inspect = function(){
  return JSON.stringify(this, function(key, val){
    if ('_runnable' == key) return;
    if ('test' == key) return;
    return val;
  }, 2);
};

}); // module: context.js

require.register("hook.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Runnable = require('./runnable');

/**
 * Expose `Hook`.
 */

module.exports = Hook;

/**
 * Initialize a new `Hook` with the given `title` and callback `fn`.
 *
 * @param {String} title
 * @param {Function} fn
 * @api private
 */

function Hook(title, fn) {
  Runnable.call(this, title, fn);
  this.type = 'hook';
}

/**
 * Inherit from `Runnable.prototype`.
 */

function F(){};
F.prototype = Runnable.prototype;
Hook.prototype = new F;
Hook.prototype.constructor = Hook;


/**
 * Get or set the test `err`.
 *
 * @param {Error} err
 * @return {Error}
 * @api public
 */

Hook.prototype.error = function(err){
  if (0 == arguments.length) {
    var err = this._error;
    this._error = null;
    return err;
  }

  this._error = err;
};

}); // module: hook.js

require.register("interfaces/bdd.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Suite = require('../suite')
  , Test = require('../test')
  , utils = require('../utils')
  , escapeRe = require('browser/escape-string-regexp');

/**
 * BDD-style interface:
 *
 *      describe('Array', function(){
 *        describe('#indexOf()', function(){
 *          it('should return -1 when not present', function(){
 *
 *          });
 *
 *          it('should return the index when present', function(){
 *
 *          });
 *        });
 *      });
 *
 */

module.exports = function(suite){
  var suites = [suite];

  suite.on('pre-require', function(context, file, mocha){

    /**
     * Execute before running tests.
     */

    context.before = function(name, fn){
      suites[0].beforeAll(name, fn);
    };

    /**
     * Execute after running tests.
     */

    context.after = function(name, fn){
      suites[0].afterAll(name, fn);
    };

    /**
     * Execute before each test case.
     */

    context.beforeEach = function(name, fn){
      suites[0].beforeEach(name, fn);
    };

    /**
     * Execute after each test case.
     */

    context.afterEach = function(name, fn){
      suites[0].afterEach(name, fn);
    };

    /**
     * Describe a "suite" with the given `title`
     * and callback `fn` containing nested suites
     * and/or tests.
     */

    context.describe = context.context = function(title, fn){
      var suite = Suite.create(suites[0], title);
      suite.file = file;
      suites.unshift(suite);
      fn.call(suite);
      suites.shift();
      return suite;
    };

    /**
     * Pending describe.
     */

    context.xdescribe =
    context.xcontext =
    context.describe.skip = function(title, fn){
      var suite = Suite.create(suites[0], title);
      suite.pending = true;
      suites.unshift(suite);
      fn.call(suite);
      suites.shift();
    };

    /**
     * Exclusive suite.
     */

    context.describe.only = function(title, fn){
      var suite = context.describe(title, fn);
      mocha.grep(suite.fullTitle());
      return suite;
    };

    /**
     * Describe a specification or test-case
     * with the given `title` and callback `fn`
     * acting as a thunk.
     */

    context.it = context.specify = function(title, fn){
      var suite = suites[0];
      if (suite.pending) fn = null;
      var test = new Test(title, fn);
      test.file = file;
      suite.addTest(test);
      return test;
    };

    /**
     * Exclusive test-case.
     */

    context.it.only = function(title, fn){
      var test = context.it(title, fn);
      var reString = '^' + escapeRe(test.fullTitle()) + '$';
      mocha.grep(new RegExp(reString));
      return test;
    };

    /**
     * Pending test case.
     */

    context.xit =
    context.xspecify =
    context.it.skip = function(title){
      context.it(title);
    };
  });
};

}); // module: interfaces/bdd.js

require.register("interfaces/exports.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Suite = require('../suite')
  , Test = require('../test');

/**
 * TDD-style interface:
 *
 *     exports.Array = {
 *       '#indexOf()': {
 *         'should return -1 when the value is not present': function(){
 *
 *         },
 *
 *         'should return the correct index when the value is present': function(){
 *
 *         }
 *       }
 *     };
 *
 */

module.exports = function(suite){
  var suites = [suite];

  suite.on('require', visit);

  function visit(obj, file) {
    var suite;
    for (var key in obj) {
      if ('function' == typeof obj[key]) {
        var fn = obj[key];
        switch (key) {
          case 'before':
            suites[0].beforeAll(fn);
            break;
          case 'after':
            suites[0].afterAll(fn);
            break;
          case 'beforeEach':
            suites[0].beforeEach(fn);
            break;
          case 'afterEach':
            suites[0].afterEach(fn);
            break;
          default:
            var test = new Test(key, fn);
            test.file = file;
            suites[0].addTest(test);
        }
      } else {
        suite = Suite.create(suites[0], key);
        suites.unshift(suite);
        visit(obj[key]);
        suites.shift();
      }
    }
  }
};

}); // module: interfaces/exports.js

require.register("interfaces/index.js", function(module, exports, require){
exports.bdd = require('./bdd');
exports.tdd = require('./tdd');
exports.qunit = require('./qunit');
exports.exports = require('./exports');

}); // module: interfaces/index.js

require.register("interfaces/qunit.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Suite = require('../suite')
  , Test = require('../test')
  , escapeRe = require('browser/escape-string-regexp')
  , utils = require('../utils');

/**
 * QUnit-style interface:
 *
 *     suite('Array');
 *
 *     test('#length', function(){
 *       var arr = [1,2,3];
 *       ok(arr.length == 3);
 *     });
 *
 *     test('#indexOf()', function(){
 *       var arr = [1,2,3];
 *       ok(arr.indexOf(1) == 0);
 *       ok(arr.indexOf(2) == 1);
 *       ok(arr.indexOf(3) == 2);
 *     });
 *
 *     suite('String');
 *
 *     test('#length', function(){
 *       ok('foo'.length == 3);
 *     });
 *
 */

module.exports = function(suite){
  var suites = [suite];

  suite.on('pre-require', function(context, file, mocha){

    /**
     * Execute before running tests.
     */

    context.before = function(name, fn){
      suites[0].beforeAll(name, fn);
    };

    /**
     * Execute after running tests.
     */

    context.after = function(name, fn){
      suites[0].afterAll(name, fn);
    };

    /**
     * Execute before each test case.
     */

    context.beforeEach = function(name, fn){
      suites[0].beforeEach(name, fn);
    };

    /**
     * Execute after each test case.
     */

    context.afterEach = function(name, fn){
      suites[0].afterEach(name, fn);
    };

    /**
     * Describe a "suite" with the given `title`.
     */

    context.suite = function(title){
      if (suites.length > 1) suites.shift();
      var suite = Suite.create(suites[0], title);
      suite.file = file;
      suites.unshift(suite);
      return suite;
    };

    /**
     * Exclusive test-case.
     */

    context.suite.only = function(title, fn){
      var suite = context.suite(title, fn);
      mocha.grep(suite.fullTitle());
    };

    /**
     * Describe a specification or test-case
     * with the given `title` and callback `fn`
     * acting as a thunk.
     */

    context.test = function(title, fn){
      var test = new Test(title, fn);
      test.file = file;
      suites[0].addTest(test);
      return test;
    };

    /**
     * Exclusive test-case.
     */

    context.test.only = function(title, fn){
      var test = context.test(title, fn);
      var reString = '^' + escapeRe(test.fullTitle()) + '$';
      mocha.grep(new RegExp(reString));
    };

    /**
     * Pending test case.
     */

    context.test.skip = function(title){
      context.test(title);
    };
  });
};

}); // module: interfaces/qunit.js

require.register("interfaces/tdd.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Suite = require('../suite')
  , Test = require('../test')
  , escapeRe = require('browser/escape-string-regexp')
  , utils = require('../utils');

/**
 * TDD-style interface:
 *
 *      suite('Array', function(){
 *        suite('#indexOf()', function(){
 *          suiteSetup(function(){
 *
 *          });
 *
 *          test('should return -1 when not present', function(){
 *
 *          });
 *
 *          test('should return the index when present', function(){
 *
 *          });
 *
 *          suiteTeardown(function(){
 *
 *          });
 *        });
 *      });
 *
 */

module.exports = function(suite){
  var suites = [suite];

  suite.on('pre-require', function(context, file, mocha){

    /**
     * Execute before each test case.
     */

    context.setup = function(name, fn){
      suites[0].beforeEach(name, fn);
    };

    /**
     * Execute after each test case.
     */

    context.teardown = function(name, fn){
      suites[0].afterEach(name, fn);
    };

    /**
     * Execute before the suite.
     */

    context.suiteSetup = function(name, fn){
      suites[0].beforeAll(name, fn);
    };

    /**
     * Execute after the suite.
     */

    context.suiteTeardown = function(name, fn){
      suites[0].afterAll(name, fn);
    };

    /**
     * Describe a "suite" with the given `title`
     * and callback `fn` containing nested suites
     * and/or tests.
     */

    context.suite = function(title, fn){
      var suite = Suite.create(suites[0], title);
      suite.file = file;
      suites.unshift(suite);
      fn.call(suite);
      suites.shift();
      return suite;
    };

    /**
     * Pending suite.
     */
    context.suite.skip = function(title, fn) {
      var suite = Suite.create(suites[0], title);
      suite.pending = true;
      suites.unshift(suite);
      fn.call(suite);
      suites.shift();
    };

    /**
     * Exclusive test-case.
     */

    context.suite.only = function(title, fn){
      var suite = context.suite(title, fn);
      mocha.grep(suite.fullTitle());
    };

    /**
     * Describe a specification or test-case
     * with the given `title` and callback `fn`
     * acting as a thunk.
     */

    context.test = function(title, fn){
      var suite = suites[0];
      if (suite.pending) fn = null;
      var test = new Test(title, fn);
      test.file = file;
      suite.addTest(test);
      return test;
    };

    /**
     * Exclusive test-case.
     */

    context.test.only = function(title, fn){
      var test = context.test(title, fn);
      var reString = '^' + escapeRe(test.fullTitle()) + '$';
      mocha.grep(new RegExp(reString));
    };

    /**
     * Pending test case.
     */

    context.test.skip = function(title){
      context.test(title);
    };
  });
};

}); // module: interfaces/tdd.js

require.register("mocha.js", function(module, exports, require){
/*!
 * mocha
 * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var path = require('browser/path')
  , escapeRe = require('browser/escape-string-regexp')
  , utils = require('./utils');

/**
 * Expose `Mocha`.
 */

exports = module.exports = Mocha;

/**
 * To require local UIs and reporters when running in node.
 */

if (typeof process !== 'undefined' && typeof process.cwd === 'function') {
  var join = path.join
    , cwd = process.cwd();
  module.paths.push(cwd, join(cwd, 'node_modules'));
}

/**
 * Expose internals.
 */

exports.utils = utils;
exports.interfaces = require('./interfaces');
exports.reporters = require('./reporters');
exports.Runnable = require('./runnable');
exports.Context = require('./context');
exports.Runner = require('./runner');
exports.Suite = require('./suite');
exports.Hook = require('./hook');
exports.Test = require('./test');

/**
 * Return image `name` path.
 *
 * @param {String} name
 * @return {String}
 * @api private
 */

function image(name) {
  return __dirname + '/../images/' + name + '.png';
}

/**
 * Setup mocha with `options`.
 *
 * Options:
 *
 *   - `ui` name "bdd", "tdd", "exports" etc
 *   - `reporter` reporter instance, defaults to `mocha.reporters.spec`
 *   - `globals` array of accepted globals
 *   - `timeout` timeout in milliseconds
 *   - `bail` bail on the first test failure
 *   - `slow` milliseconds to wait before considering a test slow
 *   - `ignoreLeaks` ignore global leaks
 *   - `grep` string or regexp to filter tests with
 *
 * @param {Object} options
 * @api public
 */

function Mocha(options) {
  options = options || {};
  this.files = [];
  this.options = options;
  this.grep(options.grep);
  this.suite = new exports.Suite('', new exports.Context);
  this.ui(options.ui);
  this.bail(options.bail);
  this.reporter(options.reporter, options.reporterOptions);
  if (null != options.timeout) this.timeout(options.timeout);
  this.useColors(options.useColors)
  if (options.enableTimeouts !== null) this.enableTimeouts(options.enableTimeouts);
  if (options.slow) this.slow(options.slow);

  this.suite.on('pre-require', function (context) {
    exports.afterEach = context.afterEach || context.teardown;
    exports.after = context.after || context.suiteTeardown;
    exports.beforeEach = context.beforeEach || context.setup;
    exports.before = context.before || context.suiteSetup;
    exports.describe = context.describe || context.suite;
    exports.it = context.it || context.test;
    exports.setup = context.setup || context.beforeEach;
    exports.suiteSetup = context.suiteSetup || context.before;
    exports.suiteTeardown = context.suiteTeardown || context.after;
    exports.suite = context.suite || context.describe;
    exports.teardown = context.teardown || context.afterEach;
    exports.test = context.test || context.it;
  });
}

/**
 * Enable or disable bailing on the first failure.
 *
 * @param {Boolean} [bail]
 * @api public
 */

Mocha.prototype.bail = function(bail){
  if (0 == arguments.length) bail = true;
  this.suite.bail(bail);
  return this;
};

/**
 * Add test `file`.
 *
 * @param {String} file
 * @api public
 */

Mocha.prototype.addFile = function(file){
  this.files.push(file);
  return this;
};

/**
 * Set reporter to `reporter`, defaults to "spec".
 *
 * @param {String|Function} reporter name or constructor
 * @param {Object} reporterOptions optional options
 * @api public
 */
Mocha.prototype.reporter = function(reporter, reporterOptions){
  if ('function' == typeof reporter) {
    this._reporter = reporter;
  } else {
    reporter = reporter || 'spec';
    var _reporter;
    try { _reporter = require('./reporters/' + reporter); } catch (err) {};
    if (!_reporter) try { _reporter = require(reporter); } catch (err) {};
    if (!_reporter && reporter === 'teamcity')
      console.warn('The Teamcity reporter was moved to a package named ' +
        'mocha-teamcity-reporter ' +
        '(https://npmjs.org/package/mocha-teamcity-reporter).');
    if (!_reporter) throw new Error('invalid reporter "' + reporter + '"');
    this._reporter = _reporter;
  }
  this.options.reporterOptions = reporterOptions;
  return this;
};

/**
 * Set test UI `name`, defaults to "bdd".
 *
 * @param {String} bdd
 * @api public
 */

Mocha.prototype.ui = function(name){
  name = name || 'bdd';
  this._ui = exports.interfaces[name];
  if (!this._ui) try { this._ui = require(name); } catch (err) {};
  if (!this._ui) throw new Error('invalid interface "' + name + '"');
  this._ui = this._ui(this.suite);
  return this;
};

/**
 * Load registered files.
 *
 * @api private
 */

Mocha.prototype.loadFiles = function(fn){
  var self = this;
  var suite = this.suite;
  var pending = this.files.length;
  this.files.forEach(function(file){
    file = path.resolve(file);
    suite.emit('pre-require', global, file, self);
    suite.emit('require', require(file), file, self);
    suite.emit('post-require', global, file, self);
    --pending || (fn && fn());
  });
};

/**
 * Enable growl support.
 *
 * @api private
 */

Mocha.prototype._growl = function(runner, reporter) {
  var notify = require('growl');

  runner.on('end', function(){
    var stats = reporter.stats;
    if (stats.failures) {
      var msg = stats.failures + ' of ' + runner.total + ' tests failed';
      notify(msg, { name: 'mocha', title: 'Failed', image: image('error') });
    } else {
      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {
          name: 'mocha'
        , title: 'Passed'
        , image: image('ok')
      });
    }
  });
};

/**
 * Add regexp to grep, if `re` is a string it is escaped.
 *
 * @param {RegExp|String} re
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.grep = function(re){
  this.options.grep = 'string' == typeof re
    ? new RegExp(escapeRe(re))
    : re;
  return this;
};

/**
 * Invert `.grep()` matches.
 *
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.invert = function(){
  this.options.invert = true;
  return this;
};

/**
 * Ignore global leaks.
 *
 * @param {Boolean} ignore
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.ignoreLeaks = function(ignore){
  this.options.ignoreLeaks = !!ignore;
  return this;
};

/**
 * Enable global leak checking.
 *
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.checkLeaks = function(){
  this.options.ignoreLeaks = false;
  return this;
};

/**
 * Enable growl support.
 *
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.growl = function(){
  this.options.growl = true;
  return this;
};

/**
 * Ignore `globals` array or string.
 *
 * @param {Array|String} globals
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.globals = function(globals){
  this.options.globals = (this.options.globals || []).concat(globals);
  return this;
};

/**
 * Emit color output.
 *
 * @param {Boolean} colors
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.useColors = function(colors){
  if (colors !== undefined) {
    this.options.useColors = colors;
  }
  return this;
};

/**
 * Use inline diffs rather than +/-.
 *
 * @param {Boolean} inlineDiffs
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.useInlineDiffs = function(inlineDiffs) {
  this.options.useInlineDiffs = arguments.length && inlineDiffs != undefined
  ? inlineDiffs
  : false;
  return this;
};

/**
 * Set the timeout in milliseconds.
 *
 * @param {Number} timeout
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.timeout = function(timeout){
  this.suite.timeout(timeout);
  return this;
};

/**
 * Set slowness threshold in milliseconds.
 *
 * @param {Number} slow
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.slow = function(slow){
  this.suite.slow(slow);
  return this;
};

/**
 * Enable timeouts.
 *
 * @param {Boolean} enabled
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.enableTimeouts = function(enabled) {
  this.suite.enableTimeouts(arguments.length && enabled !== undefined
    ? enabled
    : true);
  return this
};

/**
 * Makes all tests async (accepting a callback)
 *
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.asyncOnly = function(){
  this.options.asyncOnly = true;
  return this;
};

/**
 * Disable syntax highlighting (in browser).
 * @returns {Mocha}
 * @api public
 */
Mocha.prototype.noHighlighting = function() {
  this.options.noHighlighting = true;
  return this;
};

/**
 * Run tests and invoke `fn()` when complete.
 *
 * @param {Function} fn
 * @return {Runner}
 * @api public
 */

Mocha.prototype.run = function(fn){
  if (this.files.length) this.loadFiles();
  var suite = this.suite;
  var options = this.options;
  options.files = this.files;
  var runner = new exports.Runner(suite);
  var reporter = new this._reporter(runner, options);
  runner.ignoreLeaks = false !== options.ignoreLeaks;
  runner.asyncOnly = options.asyncOnly;
  if (options.grep) runner.grep(options.grep, options.invert);
  if (options.globals) runner.globals(options.globals);
  if (options.growl) this._growl(runner, reporter);
  if (options.useColors !== undefined) {
    exports.reporters.Base.useColors = options.useColors;
  }
  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;

  function done(failures) {
      if (reporter.done) {
          reporter.done(failures, fn);
      } else {
          fn(failures);
      }
  }

  return runner.run(done);
};

}); // module: mocha.js

require.register("ms.js", function(module, exports, require){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options['long'] ? longFormat(val) : shortFormat(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 's':
      return n * s;
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function shortFormat(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function longFormat(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

}); // module: ms.js

require.register("reporters/base.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var tty = require('browser/tty')
  , diff = require('browser/diff')
  , ms = require('../ms')
  , utils = require('../utils');

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date
  , setTimeout = global.setTimeout
  , setInterval = global.setInterval
  , clearTimeout = global.clearTimeout
  , clearInterval = global.clearInterval;

/**
 * Check if both stdio streams are associated with a tty.
 */

var isatty = tty.isatty(1) && tty.isatty(2);

/**
 * Expose `Base`.
 */

exports = module.exports = Base;

/**
 * Enable coloring by default.
 */

exports.useColors = isatty || (process.env.MOCHA_COLORS !== undefined);

/**
 * Inline diffs instead of +/-
 */

exports.inlineDiffs = false;

/**
 * Default color map.
 */

exports.colors = {
    'pass': 90
  , 'fail': 31
  , 'bright pass': 92
  , 'bright fail': 91
  , 'bright yellow': 93
  , 'pending': 36
  , 'suite': 0
  , 'error title': 0
  , 'error message': 31
  , 'error stack': 90
  , 'checkmark': 32
  , 'fast': 90
  , 'medium': 33
  , 'slow': 31
  , 'green': 32
  , 'light': 90
  , 'diff gutter': 90
  , 'diff added': 42
  , 'diff removed': 41
};

/**
 * Default symbol map.
 */

exports.symbols = {
  ok: '✓',
  err: '✖',
  dot: '․'
};

// With node.js on Windows: use symbols available in terminal default fonts
if ('win32' == process.platform) {
  exports.symbols.ok = '\u221A';
  exports.symbols.err = '\u00D7';
  exports.symbols.dot = '.';
}

/**
 * Color `str` with the given `type`,
 * allowing colors to be disabled,
 * as well as user-defined color
 * schemes.
 *
 * @param {String} type
 * @param {String} str
 * @return {String}
 * @api private
 */

var color = exports.color = function(type, str) {
  if (!exports.useColors) return String(str);
  return '\u001b[' + exports.colors[type] + 'm' + str + '\u001b[0m';
};

/**
 * Expose term window size, with some
 * defaults for when stderr is not a tty.
 */

exports.window = {
  width: isatty
    ? process.stdout.getWindowSize
      ? process.stdout.getWindowSize(1)[0]
      : tty.getWindowSize()[1]
    : 75
};

/**
 * Expose some basic cursor interactions
 * that are common among reporters.
 */

exports.cursor = {
  hide: function(){
    isatty && process.stdout.write('\u001b[?25l');
  },

  show: function(){
    isatty && process.stdout.write('\u001b[?25h');
  },

  deleteLine: function(){
    isatty && process.stdout.write('\u001b[2K');
  },

  beginningOfLine: function(){
    isatty && process.stdout.write('\u001b[0G');
  },

  CR: function(){
    if (isatty) {
      exports.cursor.deleteLine();
      exports.cursor.beginningOfLine();
    } else {
      process.stdout.write('\r');
    }
  }
};

/**
 * Outut the given `failures` as a list.
 *
 * @param {Array} failures
 * @api public
 */

exports.list = function(failures){
  console.log();
  failures.forEach(function(test, i){
    // format
    var fmt = color('error title', '  %s) %s:\n')
      + color('error message', '     %s')
      + color('error stack', '\n%s\n');

    // msg
    var err = test.err
      , message = err.message || ''
      , stack = err.stack || message
      , index = stack.indexOf(message) + message.length
      , msg = stack.slice(0, index)
      , actual = err.actual
      , expected = err.expected
      , escape = true;

    // uncaught
    if (err.uncaught) {
      msg = 'Uncaught ' + msg;
    }

    // explicitly show diff
    if (err.showDiff && sameType(actual, expected)) {

      if ('string' !== typeof actual) {
        escape = false;
        err.actual = actual = utils.stringify(actual);
        err.expected = expected = utils.stringify(expected);
      }

      fmt = color('error title', '  %s) %s:\n%s') + color('error stack', '\n%s\n');
      var match = message.match(/^([^:]+): expected/);
      msg = '\n      ' + color('error message', match ? match[1] : msg);

      if (exports.inlineDiffs) {
        msg += inlineDiff(err, escape);
      } else {
        msg += unifiedDiff(err, escape);
      }
    }

    // indent stack trace without msg
    stack = stack.slice(index ? index + 1 : index)
      .replace(/^/gm, '  ');

    console.log(fmt, (i + 1), test.fullTitle(), msg, stack);
  });
};

/**
 * Initialize a new `Base` reporter.
 *
 * All other reporters generally
 * inherit from this reporter, providing
 * stats such as test duration, number
 * of tests passed / failed etc.
 *
 * @param {Runner} runner
 * @api public
 */

function Base(runner) {
  var self = this
    , stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 }
    , failures = this.failures = [];

  if (!runner) return;
  this.runner = runner;

  runner.stats = stats;

  runner.on('start', function(){
    stats.start = new Date;
  });

  runner.on('suite', function(suite){
    stats.suites = stats.suites || 0;
    suite.root || stats.suites++;
  });

  runner.on('test end', function(test){
    stats.tests = stats.tests || 0;
    stats.tests++;
  });

  runner.on('pass', function(test){
    stats.passes = stats.passes || 0;

    var medium = test.slow() / 2;
    test.speed = test.duration > test.slow()
      ? 'slow'
      : test.duration > medium
        ? 'medium'
        : 'fast';

    stats.passes++;
  });

  runner.on('fail', function(test, err){
    stats.failures = stats.failures || 0;
    stats.failures++;
    test.err = err;
    failures.push(test);
  });

  runner.on('end', function(){
    stats.end = new Date;
    stats.duration = new Date - stats.start;
  });

  runner.on('pending', function(){
    stats.pending++;
  });
}

/**
 * Output common epilogue used by many of
 * the bundled reporters.
 *
 * @api public
 */

Base.prototype.epilogue = function(){
  var stats = this.stats;
  var tests;
  var fmt;

  console.log();

  // passes
  fmt = color('bright pass', ' ')
    + color('green', ' %d passing')
    + color('light', ' (%s)');

  console.log(fmt,
    stats.passes || 0,
    ms(stats.duration));

  // pending
  if (stats.pending) {
    fmt = color('pending', ' ')
      + color('pending', ' %d pending');

    console.log(fmt, stats.pending);
  }

  // failures
  if (stats.failures) {
    fmt = color('fail', '  %d failing');

    console.log(fmt, stats.failures);

    Base.list(this.failures);
    console.log();
  }

  console.log();
};

/**
 * Pad the given `str` to `len`.
 *
 * @param {String} str
 * @param {String} len
 * @return {String}
 * @api private
 */

function pad(str, len) {
  str = String(str);
  return Array(len - str.length + 1).join(' ') + str;
}


/**
 * Returns an inline diff between 2 strings with coloured ANSI output
 *
 * @param {Error} Error with actual/expected
 * @return {String} Diff
 * @api private
 */

function inlineDiff(err, escape) {
  var msg = errorDiff(err, 'WordsWithSpace', escape);

  // linenos
  var lines = msg.split('\n');
  if (lines.length > 4) {
    var width = String(lines.length).length;
    msg = lines.map(function(str, i){
      return pad(++i, width) + ' |' + ' ' + str;
    }).join('\n');
  }

  // legend
  msg = '\n'
    + color('diff removed', 'actual')
    + ' '
    + color('diff added', 'expected')
    + '\n\n'
    + msg
    + '\n';

  // indent
  msg = msg.replace(/^/gm, '      ');
  return msg;
}

/**
 * Returns a unified diff between 2 strings
 *
 * @param {Error} Error with actual/expected
 * @return {String} Diff
 * @api private
 */

function unifiedDiff(err, escape) {
  var indent = '      ';
  function cleanUp(line) {
    if (escape) {
      line = escapeInvisibles(line);
    }
    if (line[0] === '+') return indent + colorLines('diff added', line);
    if (line[0] === '-') return indent + colorLines('diff removed', line);
    if (line.match(/\@\@/)) return null;
    if (line.match(/\\ No newline/)) return null;
    else return indent + line;
  }
  function notBlank(line) {
    return line != null;
  }
  msg = diff.createPatch('string', err.actual, err.expected);
  var lines = msg.split('\n').splice(4);
  return '\n      '
         + colorLines('diff added',   '+ expected') + ' '
         + colorLines('diff removed', '- actual')
         + '\n\n'
         + lines.map(cleanUp).filter(notBlank).join('\n');
}

/**
 * Return a character diff for `err`.
 *
 * @param {Error} err
 * @return {String}
 * @api private
 */

function errorDiff(err, type, escape) {
  var actual   = escape ? escapeInvisibles(err.actual)   : err.actual;
  var expected = escape ? escapeInvisibles(err.expected) : err.expected;
  return diff['diff' + type](actual, expected).map(function(str){
    if (str.added) return colorLines('diff added', str.value);
    if (str.removed) return colorLines('diff removed', str.value);
    return str.value;
  }).join('');
}

/**
 * Returns a string with all invisible characters in plain text
 *
 * @param {String} line
 * @return {String}
 * @api private
 */
function escapeInvisibles(line) {
    return line.replace(/\t/g, '<tab>')
               .replace(/\r/g, '<CR>')
               .replace(/\n/g, '<LF>\n');
}

/**
 * Color lines for `str`, using the color `name`.
 *
 * @param {String} name
 * @param {String} str
 * @return {String}
 * @api private
 */

function colorLines(name, str) {
  return str.split('\n').map(function(str){
    return color(name, str);
  }).join('\n');
}

/**
 * Check that a / b have the same type.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Boolean}
 * @api private
 */

function sameType(a, b) {
  a = Object.prototype.toString.call(a);
  b = Object.prototype.toString.call(b);
  return a == b;
}

}); // module: reporters/base.js

require.register("reporters/doc.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , utils = require('../utils');

/**
 * Expose `Doc`.
 */

exports = module.exports = Doc;

/**
 * Initialize a new `Doc` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function Doc(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , total = runner.total
    , indents = 2;

  function indent() {
    return Array(indents).join('  ');
  }

  runner.on('suite', function(suite){
    if (suite.root) return;
    ++indents;
    console.log('%s<section class="suite">', indent());
    ++indents;
    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));
    console.log('%s<dl>', indent());
  });

  runner.on('suite end', function(suite){
    if (suite.root) return;
    console.log('%s</dl>', indent());
    --indents;
    console.log('%s</section>', indent());
    --indents;
  });

  runner.on('pass', function(test){
    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));
    var code = utils.escape(utils.clean(test.fn.toString()));
    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);
  });

  runner.on('fail', function(test, err){
    console.log('%s  <dt class="error">%s</dt>', indent(), utils.escape(test.title));
    var code = utils.escape(utils.clean(test.fn.toString()));
    console.log('%s  <dd class="error"><pre><code>%s</code></pre></dd>', indent(), code);
    console.log('%s  <dd class="error">%s</dd>', indent(), utils.escape(err));
  });
}

}); // module: reporters/doc.js

require.register("reporters/dot.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , color = Base.color;

/**
 * Expose `Dot`.
 */

exports = module.exports = Dot;

/**
 * Initialize a new `Dot` matrix test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function Dot(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , width = Base.window.width * .75 | 0
    , n = -1;

  runner.on('start', function(){
    process.stdout.write('\n  ');
  });

  runner.on('pending', function(test){
    if (++n % width == 0) process.stdout.write('\n  ');
    process.stdout.write(color('pending', Base.symbols.dot));
  });

  runner.on('pass', function(test){
    if (++n % width == 0) process.stdout.write('\n  ');
    if ('slow' == test.speed) {
      process.stdout.write(color('bright yellow', Base.symbols.dot));
    } else {
      process.stdout.write(color(test.speed, Base.symbols.dot));
    }
  });

  runner.on('fail', function(test, err){
    if (++n % width == 0) process.stdout.write('\n  ');
    process.stdout.write(color('fail', Base.symbols.dot));
  });

  runner.on('end', function(){
    console.log();
    self.epilogue();
  });
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
Dot.prototype = new F;
Dot.prototype.constructor = Dot;


}); // module: reporters/dot.js

require.register("reporters/html-cov.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var JSONCov = require('./json-cov')
  , fs = require('browser/fs');

/**
 * Expose `HTMLCov`.
 */

exports = module.exports = HTMLCov;

/**
 * Initialize a new `JsCoverage` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function HTMLCov(runner) {
  var jade = require('jade')
    , file = __dirname + '/templates/coverage.jade'
    , str = fs.readFileSync(file, 'utf8')
    , fn = jade.compile(str, { filename: file })
    , self = this;

  JSONCov.call(this, runner, false);

  runner.on('end', function(){
    process.stdout.write(fn({
        cov: self.cov
      , coverageClass: coverageClass
    }));
  });
}

/**
 * Return coverage class for `n`.
 *
 * @return {String}
 * @api private
 */

function coverageClass(n) {
  if (n >= 75) return 'high';
  if (n >= 50) return 'medium';
  if (n >= 25) return 'low';
  return 'terrible';
}

}); // module: reporters/html-cov.js

require.register("reporters/html.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , utils = require('../utils')
  , Progress = require('../browser/progress')
  , escape = utils.escape;

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date
  , setTimeout = global.setTimeout
  , setInterval = global.setInterval
  , clearTimeout = global.clearTimeout
  , clearInterval = global.clearInterval;

/**
 * Expose `HTML`.
 */

exports = module.exports = HTML;

/**
 * Stats template.
 */

var statsTemplate = '<ul id="mocha-stats">'
  + '<li class="progress"><canvas width="40" height="40"></canvas></li>'
  + '<li class="passes"><a href="#">passes:</a> <em>0</em></li>'
  + '<li class="failures"><a href="#">failures:</a> <em>0</em></li>'
  + '<li class="duration">duration: <em>0</em>s</li>'
  + '</ul>';

/**
 * Initialize a new `HTML` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function HTML(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , total = runner.total
    , stat = fragment(statsTemplate)
    , items = stat.getElementsByTagName('li')
    , passes = items[1].getElementsByTagName('em')[0]
    , passesLink = items[1].getElementsByTagName('a')[0]
    , failures = items[2].getElementsByTagName('em')[0]
    , failuresLink = items[2].getElementsByTagName('a')[0]
    , duration = items[3].getElementsByTagName('em')[0]
    , canvas = stat.getElementsByTagName('canvas')[0]
    , report = fragment('<ul id="mocha-report"></ul>')
    , stack = [report]
    , progress
    , ctx
    , root = document.getElementById('mocha');

  if (canvas.getContext) {
    var ratio = window.devicePixelRatio || 1;
    canvas.style.width = canvas.width;
    canvas.style.height = canvas.height;
    canvas.width *= ratio;
    canvas.height *= ratio;
    ctx = canvas.getContext('2d');
    ctx.scale(ratio, ratio);
    progress = new Progress;
  }

  if (!root) return error('#mocha div missing, add it to your document');

  // pass toggle
  on(passesLink, 'click', function(){
    unhide();
    var name = /pass/.test(report.className) ? '' : ' pass';
    report.className = report.className.replace(/fail|pass/g, '') + name;
    if (report.className.trim()) hideSuitesWithout('test pass');
  });

  // failure toggle
  on(failuresLink, 'click', function(){
    unhide();
    var name = /fail/.test(report.className) ? '' : ' fail';
    report.className = report.className.replace(/fail|pass/g, '') + name;
    if (report.className.trim()) hideSuitesWithout('test fail');
  });

  root.appendChild(stat);
  root.appendChild(report);

  if (progress) progress.size(40);

  runner.on('suite', function(suite){
    if (suite.root) return;

    // suite
    var url = self.suiteURL(suite);
    var el = fragment('<li class="suite"><h1><a href="%s">%s</a></h1></li>', url, escape(suite.title));

    // container
    stack[0].appendChild(el);
    stack.unshift(document.createElement('ul'));
    el.appendChild(stack[0]);
  });

  runner.on('suite end', function(suite){
    if (suite.root) return;
    stack.shift();
  });

  runner.on('fail', function(test, err){
    if ('hook' == test.type) runner.emit('test end', test);
  });

  runner.on('test end', function(test){
    // TODO: add to stats
    var percent = stats.tests / this.total * 100 | 0;
    if (progress) progress.update(percent).draw(ctx);

    // update stats
    var ms = new Date - stats.start;
    text(passes, stats.passes);
    text(failures, stats.failures);
    text(duration, (ms / 1000).toFixed(2));

    // test
    if ('passed' == test.state) {
      var url = self.testURL(test);
      var el = fragment('<li class="test pass %e"><h2>%e<span class="duration">%ems</span> <a href="%s" class="replay">‣</a></h2></li>', test.speed, test.title, test.duration, url);
    } else if (test.pending) {
      var el = fragment('<li class="test pass pending"><h2>%e</h2></li>', test.title);
    } else {
      var el = fragment('<li class="test fail"><h2>%e <a href="%e" class="replay">‣</a></h2></li>', test.title, self.testURL(test));
      var str = test.err.stack || test.err.toString();

      // FF / Opera do not add the message
      if (!~str.indexOf(test.err.message)) {
        str = test.err.message + '\n' + str;
      }

      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we
      // check for the result of the stringifying.
      if ('[object Error]' == str) str = test.err.message;

      // Safari doesn't give you a stack. Let's at least provide a source line.
      if (!test.err.stack && test.err.sourceURL && test.err.line !== undefined) {
        str += "\n(" + test.err.sourceURL + ":" + test.err.line + ")";
      }

      el.appendChild(fragment('<pre class="error">%e</pre>', str));
    }

    // toggle code
    // TODO: defer
    if (!test.pending) {
      var h2 = el.getElementsByTagName('h2')[0];

      on(h2, 'click', function(){
        pre.style.display = 'none' == pre.style.display
          ? 'block'
          : 'none';
      });

      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.fn.toString()));
      el.appendChild(pre);
      pre.style.display = 'none';
    }

    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.
    if (stack[0]) stack[0].appendChild(el);
  });
}

/**
 * Makes a URL, preserving querystring ("search") parameters.
 * @param {string} s
 * @returns {string} your new URL
 */
var makeUrl = function makeUrl(s) {
  var search = window.location.search;
  return window.location.pathname + (search ? search + '&' : '?' ) + 'grep=' + encodeURIComponent(s);
};

/**
 * Provide suite URL
 *
 * @param {Object} [suite]
 */
HTML.prototype.suiteURL = function(suite){
  return makeUrl(suite.fullTitle());
};

/**
 * Provide test URL
 *
 * @param {Object} [test]
 */

HTML.prototype.testURL = function(test){
  return makeUrl(test.fullTitle());
};

/**
 * Display error `msg`.
 */

function error(msg) {
  document.body.appendChild(fragment('<div id="mocha-error">%s</div>', msg));
}

/**
 * Return a DOM fragment from `html`.
 */

function fragment(html) {
  var args = arguments
    , div = document.createElement('div')
    , i = 1;

  div.innerHTML = html.replace(/%([se])/g, function(_, type){
    switch (type) {
      case 's': return String(args[i++]);
      case 'e': return escape(args[i++]);
    }
  });

  return div.firstChild;
}

/**
 * Check for suites that do not have elements
 * with `classname`, and hide them.
 */

function hideSuitesWithout(classname) {
  var suites = document.getElementsByClassName('suite');
  for (var i = 0; i < suites.length; i++) {
    var els = suites[i].getElementsByClassName(classname);
    if (0 == els.length) suites[i].className += ' hidden';
  }
}

/**
 * Unhide .hidden suites.
 */

function unhide() {
  var els = document.getElementsByClassName('suite hidden');
  for (var i = 0; i < els.length; ++i) {
    els[i].className = els[i].className.replace('suite hidden', 'suite');
  }
}

/**
 * Set `el` text to `str`.
 */

function text(el, str) {
  if (el.textContent) {
    el.textContent = str;
  } else {
    el.innerText = str;
  }
}

/**
 * Listen on `event` with callback `fn`.
 */

function on(el, event, fn) {
  if (el.addEventListener) {
    el.addEventListener(event, fn, false);
  } else {
    el.attachEvent('on' + event, fn);
  }
}

}); // module: reporters/html.js

require.register("reporters/index.js", function(module, exports, require){
exports.Base = require('./base');
exports.Dot = require('./dot');
exports.Doc = require('./doc');
exports.TAP = require('./tap');
exports.JSON = require('./json');
exports.HTML = require('./html');
exports.List = require('./list');
exports.Min = require('./min');
exports.Spec = require('./spec');
exports.Nyan = require('./nyan');
exports.XUnit = require('./xunit');
exports.Markdown = require('./markdown');
exports.Progress = require('./progress');
exports.Landing = require('./landing');
exports.JSONCov = require('./json-cov');
exports.HTMLCov = require('./html-cov');
exports.JSONStream = require('./json-stream');

}); // module: reporters/index.js

require.register("reporters/json-cov.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base');

/**
 * Expose `JSONCov`.
 */

exports = module.exports = JSONCov;

/**
 * Initialize a new `JsCoverage` reporter.
 *
 * @param {Runner} runner
 * @param {Boolean} output
 * @api public
 */

function JSONCov(runner, output) {
  var self = this
    , output = 1 == arguments.length ? true : output;

  Base.call(this, runner);

  var tests = []
    , failures = []
    , passes = [];

  runner.on('test end', function(test){
    tests.push(test);
  });

  runner.on('pass', function(test){
    passes.push(test);
  });

  runner.on('fail', function(test){
    failures.push(test);
  });

  runner.on('end', function(){
    var cov = global._$jscoverage || {};
    var result = self.cov = map(cov);
    result.stats = self.stats;
    result.tests = tests.map(clean);
    result.failures = failures.map(clean);
    result.passes = passes.map(clean);
    if (!output) return;
    process.stdout.write(JSON.stringify(result, null, 2 ));
  });
}

/**
 * Map jscoverage data to a JSON structure
 * suitable for reporting.
 *
 * @param {Object} cov
 * @return {Object}
 * @api private
 */

function map(cov) {
  var ret = {
      instrumentation: 'node-jscoverage'
    , sloc: 0
    , hits: 0
    , misses: 0
    , coverage: 0
    , files: []
  };

  for (var filename in cov) {
    var data = coverage(filename, cov[filename]);
    ret.files.push(data);
    ret.hits += data.hits;
    ret.misses += data.misses;
    ret.sloc += data.sloc;
  }

  ret.files.sort(function(a, b) {
    return a.filename.localeCompare(b.filename);
  });

  if (ret.sloc > 0) {
    ret.coverage = (ret.hits / ret.sloc) * 100;
  }

  return ret;
}

/**
 * Map jscoverage data for a single source file
 * to a JSON structure suitable for reporting.
 *
 * @param {String} filename name of the source file
 * @param {Object} data jscoverage coverage data
 * @return {Object}
 * @api private
 */

function coverage(filename, data) {
  var ret = {
    filename: filename,
    coverage: 0,
    hits: 0,
    misses: 0,
    sloc: 0,
    source: {}
  };

  data.source.forEach(function(line, num){
    num++;

    if (data[num] === 0) {
      ret.misses++;
      ret.sloc++;
    } else if (data[num] !== undefined) {
      ret.hits++;
      ret.sloc++;
    }

    ret.source[num] = {
        source: line
      , coverage: data[num] === undefined
        ? ''
        : data[num]
    };
  });

  ret.coverage = ret.hits / ret.sloc * 100;

  return ret;
}

/**
 * Return a plain-object representation of `test`
 * free of cyclic properties etc.
 *
 * @param {Object} test
 * @return {Object}
 * @api private
 */

function clean(test) {
  return {
      title: test.title
    , fullTitle: test.fullTitle()
    , duration: test.duration
  }
}

}); // module: reporters/json-cov.js

require.register("reporters/json-stream.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , color = Base.color;

/**
 * Expose `List`.
 */

exports = module.exports = List;

/**
 * Initialize a new `List` test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function List(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , total = runner.total;

  runner.on('start', function(){
    console.log(JSON.stringify(['start', { total: total }]));
  });

  runner.on('pass', function(test){
    console.log(JSON.stringify(['pass', clean(test)]));
  });

  runner.on('fail', function(test, err){
    test = clean(test);
    test.err = err.message;
    console.log(JSON.stringify(['fail', test]));
  });

  runner.on('end', function(){
    process.stdout.write(JSON.stringify(['end', self.stats]));
  });
}

/**
 * Return a plain-object representation of `test`
 * free of cyclic properties etc.
 *
 * @param {Object} test
 * @return {Object}
 * @api private
 */

function clean(test) {
  return {
      title: test.title
    , fullTitle: test.fullTitle()
    , duration: test.duration
  }
}

}); // module: reporters/json-stream.js

require.register("reporters/json.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `JSON`.
 */

exports = module.exports = JSONReporter;

/**
 * Initialize a new `JSON` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function JSONReporter(runner) {
  var self = this;
  Base.call(this, runner);

  var tests = []
    , pending = []
    , failures = []
    , passes = [];

  runner.on('test end', function(test){
    tests.push(test);
  });

  runner.on('pass', function(test){
    passes.push(test);
  });

  runner.on('fail', function(test){
    failures.push(test);
  });

  runner.on('pending', function(test){
    pending.push(test);
  });

  runner.on('end', function(){
    var obj = {
      stats: self.stats,
      tests: tests.map(clean),
      pending: pending.map(clean),
      failures: failures.map(clean),
      passes: passes.map(clean)
    };

    runner.testResults = obj;

    process.stdout.write(JSON.stringify(obj, null, 2));
  });
}

/**
 * Return a plain-object representation of `test`
 * free of cyclic properties etc.
 *
 * @param {Object} test
 * @return {Object}
 * @api private
 */

function clean(test) {
  return {
    title: test.title,
    fullTitle: test.fullTitle(),
    duration: test.duration,
    err: errorJSON(test.err || {})
  }
}

/**
 * Transform `error` into a JSON object.
 * @param {Error} err
 * @return {Object}
 */

function errorJSON(err) {
  var res = {};
  Object.getOwnPropertyNames(err).forEach(function(key) {
    res[key] = err[key];
  }, err);
  return res;
}

}); // module: reporters/json.js

require.register("reporters/landing.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `Landing`.
 */

exports = module.exports = Landing;

/**
 * Airplane color.
 */

Base.colors.plane = 0;

/**
 * Airplane crash color.
 */

Base.colors['plane crash'] = 31;

/**
 * Runway color.
 */

Base.colors.runway = 90;

/**
 * Initialize a new `Landing` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function Landing(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , width = Base.window.width * .75 | 0
    , total = runner.total
    , stream = process.stdout
    , plane = color('plane', '✈')
    , crashed = -1
    , n = 0;

  function runway() {
    var buf = Array(width).join('-');
    return '  ' + color('runway', buf);
  }

  runner.on('start', function(){
    stream.write('\n\n\n  ');
    cursor.hide();
  });

  runner.on('test end', function(test){
    // check if the plane crashed
    var col = -1 == crashed
      ? width * ++n / total | 0
      : crashed;

    // show the crash
    if ('failed' == test.state) {
      plane = color('plane crash', '✈');
      crashed = col;
    }

    // render landing strip
    stream.write('\u001b['+(width+1)+'D\u001b[2A');
    stream.write(runway());
    stream.write('\n  ');
    stream.write(color('runway', Array(col).join('⋅')));
    stream.write(plane)
    stream.write(color('runway', Array(width - col).join('⋅') + '\n'));
    stream.write(runway());
    stream.write('\u001b[0m');
  });

  runner.on('end', function(){
    cursor.show();
    console.log();
    self.epilogue();
  });
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
Landing.prototype = new F;
Landing.prototype.constructor = Landing;


}); // module: reporters/landing.js

require.register("reporters/list.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `List`.
 */

exports = module.exports = List;

/**
 * Initialize a new `List` test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function List(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , n = 0;

  runner.on('start', function(){
    console.log();
  });

  runner.on('test', function(test){
    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));
  });

  runner.on('pending', function(test){
    var fmt = color('checkmark', '  -')
      + color('pending', ' %s');
    console.log(fmt, test.fullTitle());
  });

  runner.on('pass', function(test){
    var fmt = color('checkmark', '  '+Base.symbols.dot)
      + color('pass', ' %s: ')
      + color(test.speed, '%dms');
    cursor.CR();
    console.log(fmt, test.fullTitle(), test.duration);
  });

  runner.on('fail', function(test, err){
    cursor.CR();
    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());
  });

  runner.on('end', self.epilogue.bind(self));
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
List.prototype = new F;
List.prototype.constructor = List;


}); // module: reporters/list.js

require.register("reporters/markdown.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , utils = require('../utils');

/**
 * Constants
 */

var SUITE_PREFIX = '$';

/**
 * Expose `Markdown`.
 */

exports = module.exports = Markdown;

/**
 * Initialize a new `Markdown` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function Markdown(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , level = 0
    , buf = '';

  function title(str) {
    return Array(level).join('#') + ' ' + str;
  }

  function indent() {
    return Array(level).join('  ');
  }

  function mapTOC(suite, obj) {
    var ret = obj,
        key = SUITE_PREFIX + suite.title;
    obj = obj[key] = obj[key] || { suite: suite };
    suite.suites.forEach(function(suite){
      mapTOC(suite, obj);
    });
    return ret;
  }

  function stringifyTOC(obj, level) {
    ++level;
    var buf = '';
    var link;
    for (var key in obj) {
      if ('suite' == key) continue;
      if (key !== SUITE_PREFIX) {
        link = ' - [' + key.substring(1) + ']';
        link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\n';
        buf += Array(level).join('  ') + link;
      }
      buf += stringifyTOC(obj[key], level);
    }
    return buf;
  }

  function generateTOC(suite) {
    var obj = mapTOC(suite, {});
    return stringifyTOC(obj, 0);
  }

  generateTOC(runner.suite);

  runner.on('suite', function(suite){
    ++level;
    var slug = utils.slug(suite.fullTitle());
    buf += '<a name="' + slug + '"></a>' + '\n';
    buf += title(suite.title) + '\n';
  });

  runner.on('suite end', function(suite){
    --level;
  });

  runner.on('pass', function(test){
    var code = utils.clean(test.fn.toString());
    buf += test.title + '.\n';
    buf += '\n```js\n';
    buf += code + '\n';
    buf += '```\n\n';
  });

  runner.on('end', function(){
    process.stdout.write('# TOC\n');
    process.stdout.write(generateTOC(runner.suite));
    process.stdout.write(buf);
  });
}

}); // module: reporters/markdown.js

require.register("reporters/min.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base');

/**
 * Expose `Min`.
 */

exports = module.exports = Min;

/**
 * Initialize a new `Min` minimal test reporter (best used with --watch).
 *
 * @param {Runner} runner
 * @api public
 */

function Min(runner) {
  Base.call(this, runner);

  runner.on('start', function(){
    // clear screen
    process.stdout.write('\u001b[2J');
    // set cursor position
    process.stdout.write('\u001b[1;3H');
  });

  runner.on('end', this.epilogue.bind(this));
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
Min.prototype = new F;
Min.prototype.constructor = Min;


}); // module: reporters/min.js

require.register("reporters/nyan.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base');

/**
 * Expose `Dot`.
 */

exports = module.exports = NyanCat;

/**
 * Initialize a new `Dot` matrix test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function NyanCat(runner) {
  Base.call(this, runner);
  var self = this
    , stats = this.stats
    , width = Base.window.width * .75 | 0
    , rainbowColors = this.rainbowColors = self.generateColors()
    , colorIndex = this.colorIndex = 0
    , numerOfLines = this.numberOfLines = 4
    , trajectories = this.trajectories = [[], [], [], []]
    , nyanCatWidth = this.nyanCatWidth = 11
    , trajectoryWidthMax = this.trajectoryWidthMax = (width - nyanCatWidth)
    , scoreboardWidth = this.scoreboardWidth = 5
    , tick = this.tick = 0
    , n = 0;

  runner.on('start', function(){
    Base.cursor.hide();
    self.draw();
  });

  runner.on('pending', function(test){
    self.draw();
  });

  runner.on('pass', function(test){
    self.draw();
  });

  runner.on('fail', function(test, err){
    self.draw();
  });

  runner.on('end', function(){
    Base.cursor.show();
    for (var i = 0; i < self.numberOfLines; i++) write('\n');
    self.epilogue();
  });
}

/**
 * Draw the nyan cat
 *
 * @api private
 */

NyanCat.prototype.draw = function(){
  this.appendRainbow();
  this.drawScoreboard();
  this.drawRainbow();
  this.drawNyanCat();
  this.tick = !this.tick;
};

/**
 * Draw the "scoreboard" showing the number
 * of passes, failures and pending tests.
 *
 * @api private
 */

NyanCat.prototype.drawScoreboard = function(){
  var stats = this.stats;

  function draw(type, n) {
    write(' ');
    write(Base.color(type, n));
    write('\n');
  }

  draw('green', stats.passes);
  draw('fail', stats.failures);
  draw('pending', stats.pending);
  write('\n');

  this.cursorUp(this.numberOfLines);
};

/**
 * Append the rainbow.
 *
 * @api private
 */

NyanCat.prototype.appendRainbow = function(){
  var segment = this.tick ? '_' : '-';
  var rainbowified = this.rainbowify(segment);

  for (var index = 0; index < this.numberOfLines; index++) {
    var trajectory = this.trajectories[index];
    if (trajectory.length >= this.trajectoryWidthMax) trajectory.shift();
    trajectory.push(rainbowified);
  }
};

/**
 * Draw the rainbow.
 *
 * @api private
 */

NyanCat.prototype.drawRainbow = function(){
  var self = this;

  this.trajectories.forEach(function(line, index) {
    write('\u001b[' + self.scoreboardWidth + 'C');
    write(line.join(''));
    write('\n');
  });

  this.cursorUp(this.numberOfLines);
};

/**
 * Draw the nyan cat
 *
 * @api private
 */

NyanCat.prototype.drawNyanCat = function() {
  var self = this;
  var startWidth = this.scoreboardWidth + this.trajectories[0].length;
  var dist = '\u001b[' + startWidth + 'C';
  var padding = '';

  write(dist);
  write('_,------,');
  write('\n');

  write(dist);
  padding = self.tick ? '  ' : '   ';
  write('_|' + padding + '/\\_/\\ ');
  write('\n');

  write(dist);
  padding = self.tick ? '_' : '__';
  var tail = self.tick ? '~' : '^';
  var face;
  write(tail + '|' + padding + this.face() + ' ');
  write('\n');

  write(dist);
  padding = self.tick ? ' ' : '  ';
  write(padding + '""  "" ');
  write('\n');

  this.cursorUp(this.numberOfLines);
};

/**
 * Draw nyan cat face.
 *
 * @return {String}
 * @api private
 */

NyanCat.prototype.face = function() {
  var stats = this.stats;
  if (stats.failures) {
    return '( x .x)';
  } else if (stats.pending) {
    return '( o .o)';
  } else if(stats.passes) {
    return '( ^ .^)';
  } else {
    return '( - .-)';
  }
};

/**
 * Move cursor up `n`.
 *
 * @param {Number} n
 * @api private
 */

NyanCat.prototype.cursorUp = function(n) {
  write('\u001b[' + n + 'A');
};

/**
 * Move cursor down `n`.
 *
 * @param {Number} n
 * @api private
 */

NyanCat.prototype.cursorDown = function(n) {
  write('\u001b[' + n + 'B');
};

/**
 * Generate rainbow colors.
 *
 * @return {Array}
 * @api private
 */

NyanCat.prototype.generateColors = function(){
  var colors = [];

  for (var i = 0; i < (6 * 7); i++) {
    var pi3 = Math.floor(Math.PI / 3);
    var n = (i * (1.0 / 6));
    var r = Math.floor(3 * Math.sin(n) + 3);
    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);
    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);
    colors.push(36 * r + 6 * g + b + 16);
  }

  return colors;
};

/**
 * Apply rainbow to the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

NyanCat.prototype.rainbowify = function(str){
  if (!Base.useColors)
    return str;
  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];
  this.colorIndex += 1;
  return '\u001b[38;5;' + color + 'm' + str + '\u001b[0m';
};

/**
 * Stdout helper.
 */

function write(string) {
  process.stdout.write(string);
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
NyanCat.prototype = new F;
NyanCat.prototype.constructor = NyanCat;


}); // module: reporters/nyan.js

require.register("reporters/progress.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `Progress`.
 */

exports = module.exports = Progress;

/**
 * General progress bar color.
 */

Base.colors.progress = 90;

/**
 * Initialize a new `Progress` bar test reporter.
 *
 * @param {Runner} runner
 * @param {Object} options
 * @api public
 */

function Progress(runner, options) {
  Base.call(this, runner);

  var self = this
    , options = options || {}
    , stats = this.stats
    , width = Base.window.width * .50 | 0
    , total = runner.total
    , complete = 0
    , max = Math.max
    , lastN = -1;

  // default chars
  options.open = options.open || '[';
  options.complete = options.complete || '▬';
  options.incomplete = options.incomplete || Base.symbols.dot;
  options.close = options.close || ']';
  options.verbose = false;

  // tests started
  runner.on('start', function(){
    console.log();
    cursor.hide();
  });

  // tests complete
  runner.on('test end', function(){
    complete++;
    var incomplete = total - complete
      , percent = complete / total
      , n = width * percent | 0
      , i = width - n;

    if (lastN === n && !options.verbose) {
      // Don't re-render the line if it hasn't changed
      return;
    }
    lastN = n;

    cursor.CR();
    process.stdout.write('\u001b[J');
    process.stdout.write(color('progress', '  ' + options.open));
    process.stdout.write(Array(n).join(options.complete));
    process.stdout.write(Array(i).join(options.incomplete));
    process.stdout.write(color('progress', options.close));
    if (options.verbose) {
      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));
    }
  });

  // tests are complete, output some stats
  // and the failures if any
  runner.on('end', function(){
    cursor.show();
    console.log();
    self.epilogue();
  });
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
Progress.prototype = new F;
Progress.prototype.constructor = Progress;


}); // module: reporters/progress.js

require.register("reporters/spec.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `Spec`.
 */

exports = module.exports = Spec;

/**
 * Initialize a new `Spec` test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function Spec(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , indents = 0
    , n = 0;

  function indent() {
    return Array(indents).join('  ')
  }

  runner.on('start', function(){
    console.log();
  });

  runner.on('suite', function(suite){
    ++indents;
    console.log(color('suite', '%s%s'), indent(), suite.title);
  });

  runner.on('suite end', function(suite){
    --indents;
    if (1 == indents) console.log();
  });

  runner.on('pending', function(test){
    var fmt = indent() + color('pending', '  - %s');
    console.log(fmt, test.title);
  });

  runner.on('pass', function(test){
    if ('fast' == test.speed) {
      var fmt = indent()
        + color('checkmark', '  ' + Base.symbols.ok)
        + color('pass', ' %s ');
      cursor.CR();
      console.log(fmt, test.title);
    } else {
      var fmt = indent()
        + color('checkmark', '  ' + Base.symbols.ok)
        + color('pass', ' %s ')
        + color(test.speed, '(%dms)');
      cursor.CR();
      console.log(fmt, test.title, test.duration);
    }
  });

  runner.on('fail', function(test, err){
    cursor.CR();
    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);
  });

  runner.on('end', self.epilogue.bind(self));
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
Spec.prototype = new F;
Spec.prototype.constructor = Spec;


}); // module: reporters/spec.js

require.register("reporters/tap.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `TAP`.
 */

exports = module.exports = TAP;

/**
 * Initialize a new `TAP` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function TAP(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , n = 1
    , passes = 0
    , failures = 0;

  runner.on('start', function(){
    var total = runner.grepTotal(runner.suite);
    console.log('%d..%d', 1, total);
  });

  runner.on('test end', function(){
    ++n;
  });

  runner.on('pending', function(test){
    console.log('ok %d %s # SKIP -', n, title(test));
  });

  runner.on('pass', function(test){
    passes++;
    console.log('ok %d %s', n, title(test));
  });

  runner.on('fail', function(test, err){
    failures++;
    console.log('not ok %d %s', n, title(test));
    if (err.stack) console.log(err.stack.replace(/^/gm, '  '));
  });

  runner.on('end', function(){
    console.log('# tests ' + (passes + failures));
    console.log('# pass ' + passes);
    console.log('# fail ' + failures);
  });
}

/**
 * Return a TAP-safe title of `test`
 *
 * @param {Object} test
 * @return {String}
 * @api private
 */

function title(test) {
  return test.fullTitle().replace(/#/g, '');
}

}); // module: reporters/tap.js

require.register("reporters/xunit.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , utils = require('../utils')
  , fs = require('browser/fs')
  , escape = utils.escape;

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date
  , setTimeout = global.setTimeout
  , setInterval = global.setInterval
  , clearTimeout = global.clearTimeout
  , clearInterval = global.clearInterval;

/**
 * Expose `XUnit`.
 */

exports = module.exports = XUnit;

/**
 * Initialize a new `XUnit` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function XUnit(runner, options) {
  Base.call(this, runner);
  var stats = this.stats
    , tests = []
    , self = this;

  if (options.reporterOptions && options.reporterOptions.output) {
      if (! fs.createWriteStream) {
          throw new Error('file output not supported in browser');
      }
      self.fileStream = fs.createWriteStream(options.reporterOptions.output);
  }

  runner.on('pending', function(test){
    tests.push(test);
  });

  runner.on('pass', function(test){
    tests.push(test);
  });

  runner.on('fail', function(test){
    tests.push(test);
  });

  runner.on('end', function(){
    self.write(tag('testsuite', {
        name: 'Mocha Tests'
      , tests: stats.tests
      , failures: stats.failures
      , errors: stats.failures
      , skipped: stats.tests - stats.failures - stats.passes
      , timestamp: (new Date).toUTCString()
      , time: (stats.duration / 1000) || 0
    }, false));

    tests.forEach(function(t) { self.test(t); });
    self.write('</testsuite>');
  });
}

/**
 * Override done to close the stream (if it's a file).
 */
XUnit.prototype.done = function(failures, fn) {
    if (this.fileStream) {
        this.fileStream.end(function() {
            fn(failures);
        });
    } else {
        fn(failures);
    }
};

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
XUnit.prototype = new F;
XUnit.prototype.constructor = XUnit;


/**
 * Write out the given line
 */
XUnit.prototype.write = function(line) {
    if (this.fileStream) {
        this.fileStream.write(line + '\n');
    } else {
        console.log(line);
    }
};

/**
 * Output tag for the given `test.`
 */

XUnit.prototype.test = function(test, ostream) {
  var attrs = {
      classname: test.parent.fullTitle()
    , name: test.title
    , time: (test.duration / 1000) || 0
  };

  if ('failed' == test.state) {
    var err = test.err;
    this.write(tag('testcase', attrs, false, tag('failure', {}, false, cdata(escape(err.message) + "\n" + err.stack))));
  } else if (test.pending) {
    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));
  } else {
    this.write(tag('testcase', attrs, true) );
  }
};

/**
 * HTML tag helper.
 */

function tag(name, attrs, close, content) {
  var end = close ? '/>' : '>'
    , pairs = []
    , tag;

  for (var key in attrs) {
    pairs.push(key + '="' + escape(attrs[key]) + '"');
  }

  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;
  if (content) tag += content + '</' + name + end;
  return tag;
}

/**
 * Return cdata escaped CDATA `str`.
 */

function cdata(str) {
  return '<![CDATA[' + escape(str) + ']]>';
}

}); // module: reporters/xunit.js

require.register("runnable.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var EventEmitter = require('browser/events').EventEmitter
  , debug = require('browser/debug')('mocha:runnable')
  , milliseconds = require('./ms')
  , utils = require('./utils');

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date
  , setTimeout = global.setTimeout
  , setInterval = global.setInterval
  , clearTimeout = global.clearTimeout
  , clearInterval = global.clearInterval;

/**
 * Object#toString().
 */

var toString = Object.prototype.toString;

/**
 * Expose `Runnable`.
 */

module.exports = Runnable;

/**
 * Initialize a new `Runnable` with the given `title` and callback `fn`.
 *
 * @param {String} title
 * @param {Function} fn
 * @api private
 */

function Runnable(title, fn) {
  this.title = title;
  this.fn = fn;
  this.async = fn && fn.length;
  this.sync = ! this.async;
  this._timeout = 2000;
  this._slow = 75;
  this._enableTimeouts = true;
  this.timedOut = false;
  this._trace = new Error('done() called multiple times')
}

/**
 * Inherit from `EventEmitter.prototype`.
 */

function F(){};
F.prototype = EventEmitter.prototype;
Runnable.prototype = new F;
Runnable.prototype.constructor = Runnable;


/**
 * Set & get timeout `ms`.
 *
 * @param {Number|String} ms
 * @return {Runnable|Number} ms or self
 * @api private
 */

Runnable.prototype.timeout = function(ms){
  if (0 == arguments.length) return this._timeout;
  if (ms === 0) this._enableTimeouts = false;
  if ('string' == typeof ms) ms = milliseconds(ms);
  debug('timeout %d', ms);
  this._timeout = ms;
  if (this.timer) this.resetTimeout();
  return this;
};

/**
 * Set & get slow `ms`.
 *
 * @param {Number|String} ms
 * @return {Runnable|Number} ms or self
 * @api private
 */

Runnable.prototype.slow = function(ms){
  if (0 === arguments.length) return this._slow;
  if ('string' == typeof ms) ms = milliseconds(ms);
  debug('timeout %d', ms);
  this._slow = ms;
  return this;
};

/**
 * Set and & get timeout `enabled`.
 *
 * @param {Boolean} enabled
 * @return {Runnable|Boolean} enabled or self
 * @api private
 */

Runnable.prototype.enableTimeouts = function(enabled){
  if (arguments.length === 0) return this._enableTimeouts;
  debug('enableTimeouts %s', enabled);
  this._enableTimeouts = enabled;
  return this;
};

/**
 * Return the full title generated by recursively
 * concatenating the parent's full title.
 *
 * @return {String}
 * @api public
 */

Runnable.prototype.fullTitle = function(){
  return this.parent.fullTitle() + ' ' + this.title;
};

/**
 * Clear the timeout.
 *
 * @api private
 */

Runnable.prototype.clearTimeout = function(){
  clearTimeout(this.timer);
};

/**
 * Inspect the runnable void of private properties.
 *
 * @return {String}
 * @api private
 */

Runnable.prototype.inspect = function(){
  return JSON.stringify(this, function(key, val){
    if ('_' == key[0]) return;
    if ('parent' == key) return '#<Suite>';
    if ('ctx' == key) return '#<Context>';
    return val;
  }, 2);
};

/**
 * Reset the timeout.
 *
 * @api private
 */

Runnable.prototype.resetTimeout = function(){
  var self = this;
  var ms = this.timeout() || 1e9;

  if (!this._enableTimeouts) return;
  this.clearTimeout();
  this.timer = setTimeout(function(){
    if (!self._enableTimeouts) return;
    self.callback(new Error('timeout of ' + ms + 'ms exceeded'));
    self.timedOut = true;
  }, ms);
};

/**
 * Whitelist these globals for this test run
 *
 * @api private
 */
Runnable.prototype.globals = function(arr){
  var self = this;
  this._allowedGlobals = arr;
};

/**
 * Run the test and invoke `fn(err)`.
 *
 * @param {Function} fn
 * @api private
 */

Runnable.prototype.run = function(fn){
  var self = this
    , start = new Date
    , ctx = this.ctx
    , finished
    , emitted;

  // Some times the ctx exists but it is not runnable
  if (ctx && ctx.runnable) ctx.runnable(this);

  // called multiple times
  function multiple(err) {
    if (emitted) return;
    emitted = true;
    self.emit('error', err || new Error('done() called multiple times; stacktrace may be inaccurate'));
  }

  // finished
  function done(err) {
    var ms = self.timeout();
    if (self.timedOut) return;
    if (finished) return multiple(err || self._trace);
    self.clearTimeout();
    self.duration = new Date - start;
    finished = true;
    if (!err && self.duration > ms && self._enableTimeouts) err = new Error('timeout of ' + ms + 'ms exceeded');
    fn(err);
  }

  // for .resetTimeout()
  this.callback = done;

  // explicit async with `done` argument
  if (this.async) {
    this.resetTimeout();

    try {
      this.fn.call(ctx, function(err){
        if (err instanceof Error || toString.call(err) === "[object Error]") return done(err);
        if (null != err) {
          if (Object.prototype.toString.call(err) === '[object Object]') {
            return done(new Error('done() invoked with non-Error: ' + JSON.stringify(err)));
          } else {
            return done(new Error('done() invoked with non-Error: ' + err));
          }
        }
        done();
      });
    } catch (err) {
      done(utils.getError(err));
    }
    return;
  }

  if (this.asyncOnly) {
    return done(new Error('--async-only option in use without declaring `done()`'));
  }

  // sync or promise-returning
  try {
    if (this.pending) {
      done();
    } else {
      callFn(this.fn);
    }
  } catch (err) {
    done(utils.getError(err));
  }

  function callFn(fn) {
    var result = fn.call(ctx);
    if (result && typeof result.then === 'function') {
      self.resetTimeout();
      result
        .then(function() {
          done()
        },
        function(reason) {
          done(reason || new Error('Promise rejected with no or falsy reason'))
        });
    } else {
      done();
    }
  }
};

}); // module: runnable.js

require.register("runner.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var EventEmitter = require('browser/events').EventEmitter
  , debug = require('browser/debug')('mocha:runner')
  , Test = require('./test')
  , utils = require('./utils')
  , filter = utils.filter
  , keys = utils.keys;

/**
 * Non-enumerable globals.
 */

var globals = [
  'setTimeout',
  'clearTimeout',
  'setInterval',
  'clearInterval',
  'XMLHttpRequest',
  'Date',
  'setImmediate',
  'clearImmediate'
];

/**
 * Expose `Runner`.
 */

module.exports = Runner;

/**
 * Initialize a `Runner` for the given `suite`.
 *
 * Events:
 *
 *   - `start`  execution started
 *   - `end`  execution complete
 *   - `suite`  (suite) test suite execution started
 *   - `suite end`  (suite) all tests (and sub-suites) have finished
 *   - `test`  (test) test execution started
 *   - `test end`  (test) test completed
 *   - `hook`  (hook) hook execution started
 *   - `hook end`  (hook) hook complete
 *   - `pass`  (test) test passed
 *   - `fail`  (test, err) test failed
 *   - `pending`  (test) test pending
 *
 * @api public
 */

function Runner(suite) {
  var self = this;
  this._globals = [];
  this._abort = false;
  this.suite = suite;
  this.total = suite.total();
  this.failures = 0;
  this.on('test end', function(test){ self.checkGlobals(test); });
  this.on('hook end', function(hook){ self.checkGlobals(hook); });
  this.grep(/.*/);
  this.globals(this.globalProps().concat(extraGlobals()));
}

/**
 * Wrapper for setImmediate, process.nextTick, or browser polyfill.
 *
 * @param {Function} fn
 * @api private
 */

Runner.immediately = global.setImmediate || process.nextTick;

/**
 * Inherit from `EventEmitter.prototype`.
 */

function F(){};
F.prototype = EventEmitter.prototype;
Runner.prototype = new F;
Runner.prototype.constructor = Runner;


/**
 * Run tests with full titles matching `re`. Updates runner.total
 * with number of tests matched.
 *
 * @param {RegExp} re
 * @param {Boolean} invert
 * @return {Runner} for chaining
 * @api public
 */

Runner.prototype.grep = function(re, invert){
  debug('grep %s', re);
  this._grep = re;
  this._invert = invert;
  this.total = this.grepTotal(this.suite);
  return this;
};

/**
 * Returns the number of tests matching the grep search for the
 * given suite.
 *
 * @param {Suite} suite
 * @return {Number}
 * @api public
 */

Runner.prototype.grepTotal = function(suite) {
  var self = this;
  var total = 0;

  suite.eachTest(function(test){
    var match = self._grep.test(test.fullTitle());
    if (self._invert) match = !match;
    if (match) total++;
  });

  return total;
};

/**
 * Return a list of global properties.
 *
 * @return {Array}
 * @api private
 */

Runner.prototype.globalProps = function() {
  var props = utils.keys(global);

  // non-enumerables
  for (var i = 0; i < globals.length; ++i) {
    if (~utils.indexOf(props, globals[i])) continue;
    props.push(globals[i]);
  }

  return props;
};

/**
 * Allow the given `arr` of globals.
 *
 * @param {Array} arr
 * @return {Runner} for chaining
 * @api public
 */

Runner.prototype.globals = function(arr){
  if (0 == arguments.length) return this._globals;
  debug('globals %j', arr);
  this._globals = this._globals.concat(arr);
  return this;
};

/**
 * Check for global variable leaks.
 *
 * @api private
 */

Runner.prototype.checkGlobals = function(test){
  if (this.ignoreLeaks) return;
  var ok = this._globals;

  var globals = this.globalProps();
  var leaks;

  if (test) {
    ok = ok.concat(test._allowedGlobals || []);
  }

  if(this.prevGlobalsLength == globals.length) return;
  this.prevGlobalsLength = globals.length;

  leaks = filterLeaks(ok, globals);
  this._globals = this._globals.concat(leaks);

  if (leaks.length > 1) {
    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));
  } else if (leaks.length) {
    this.fail(test, new Error('global leak detected: ' + leaks[0]));
  }
};

/**
 * Fail the given `test`.
 *
 * @param {Test} test
 * @param {Error} err
 * @api private
 */

Runner.prototype.fail = function(test, err){
  ++this.failures;
  test.state = 'failed';

  if ('string' == typeof err) {
    err = new Error('the string "' + err + '" was thrown, throw an Error :)');
  }

  this.emit('fail', test, err);
};

/**
 * Fail the given `hook` with `err`.
 *
 * Hook failures work in the following pattern:
 * - If bail, then exit
 * - Failed `before` hook skips all tests in a suite and subsuites,
 *   but jumps to corresponding `after` hook
 * - Failed `before each` hook skips remaining tests in a
 *   suite and jumps to corresponding `after each` hook,
 *   which is run only once
 * - Failed `after` hook does not alter
 *   execution order
 * - Failed `after each` hook skips remaining tests in a
 *   suite and subsuites, but executes other `after each`
 *   hooks
 *
 * @param {Hook} hook
 * @param {Error} err
 * @api private
 */

Runner.prototype.failHook = function(hook, err){
  this.fail(hook, err);
  if (this.suite.bail()) {
    this.emit('end');
  }
};

/**
 * Run hook `name` callbacks and then invoke `fn()`.
 *
 * @param {String} name
 * @param {Function} function
 * @api private
 */

Runner.prototype.hook = function(name, fn){
  var suite = this.suite
    , hooks = suite['_' + name]
    , self = this
    , timer;

  function next(i) {
    var hook = hooks[i];
    if (!hook) return fn();
    self.currentRunnable = hook;

    hook.ctx.currentTest = self.test;

    self.emit('hook', hook);

    hook.on('error', function(err){
      self.failHook(hook, err);
    });

    hook.run(function(err){
      hook.removeAllListeners('error');
      var testError = hook.error();
      if (testError) self.fail(self.test, testError);
      if (err) {
        self.failHook(hook, err);

        // stop executing hooks, notify callee of hook err
        return fn(err);
      }
      self.emit('hook end', hook);
      delete hook.ctx.currentTest;
      next(++i);
    });
  }

  Runner.immediately(function(){
    next(0);
  });
};

/**
 * Run hook `name` for the given array of `suites`
 * in order, and callback `fn(err, errSuite)`.
 *
 * @param {String} name
 * @param {Array} suites
 * @param {Function} fn
 * @api private
 */

Runner.prototype.hooks = function(name, suites, fn){
  var self = this
    , orig = this.suite;

  function next(suite) {
    self.suite = suite;

    if (!suite) {
      self.suite = orig;
      return fn();
    }

    self.hook(name, function(err){
      if (err) {
        var errSuite = self.suite;
        self.suite = orig;
        return fn(err, errSuite);
      }

      next(suites.pop());
    });
  }

  next(suites.pop());
};

/**
 * Run hooks from the top level down.
 *
 * @param {String} name
 * @param {Function} fn
 * @api private
 */

Runner.prototype.hookUp = function(name, fn){
  var suites = [this.suite].concat(this.parents()).reverse();
  this.hooks(name, suites, fn);
};

/**
 * Run hooks from the bottom up.
 *
 * @param {String} name
 * @param {Function} fn
 * @api private
 */

Runner.prototype.hookDown = function(name, fn){
  var suites = [this.suite].concat(this.parents());
  this.hooks(name, suites, fn);
};

/**
 * Return an array of parent Suites from
 * closest to furthest.
 *
 * @return {Array}
 * @api private
 */

Runner.prototype.parents = function(){
  var suite = this.suite
    , suites = [];
  while (suite = suite.parent) suites.push(suite);
  return suites;
};

/**
 * Run the current test and callback `fn(err)`.
 *
 * @param {Function} fn
 * @api private
 */

Runner.prototype.runTest = function(fn){
  var test = this.test
    , self = this;

  if (this.asyncOnly) test.asyncOnly = true;

  try {
    test.on('error', function(err){
      self.fail(test, err);
    });
    test.run(fn);
  } catch (err) {
    fn(err);
  }
};

/**
 * Run tests in the given `suite` and invoke
 * the callback `fn()` when complete.
 *
 * @param {Suite} suite
 * @param {Function} fn
 * @api private
 */

Runner.prototype.runTests = function(suite, fn){
  var self = this
    , tests = suite.tests.slice()
    , test;


  function hookErr(err, errSuite, after) {
    // before/after Each hook for errSuite failed:
    var orig = self.suite;

    // for failed 'after each' hook start from errSuite parent,
    // otherwise start from errSuite itself
    self.suite = after ? errSuite.parent : errSuite;

    if (self.suite) {
      // call hookUp afterEach
      self.hookUp('afterEach', function(err2, errSuite2) {
        self.suite = orig;
        // some hooks may fail even now
        if (err2) return hookErr(err2, errSuite2, true);
        // report error suite
        fn(errSuite);
      });
    } else {
      // there is no need calling other 'after each' hooks
      self.suite = orig;
      fn(errSuite);
    }
  }

  function next(err, errSuite) {
    // if we bail after first err
    if (self.failures && suite._bail) return fn();

    if (self._abort) return fn();

    if (err) return hookErr(err, errSuite, true);

    // next test
    test = tests.shift();

    // all done
    if (!test) return fn();

    // grep
    var match = self._grep.test(test.fullTitle());
    if (self._invert) match = !match;
    if (!match) return next();

    // pending
    if (test.pending) {
      self.emit('pending', test);
      self.emit('test end', test);
      return next();
    }

    // execute test and hook(s)
    self.emit('test', self.test = test);
    self.hookDown('beforeEach', function(err, errSuite){

      if (err) return hookErr(err, errSuite, false);

      self.currentRunnable = self.test;
      self.runTest(function(err){
        test = self.test;

        if (err) {
          self.fail(test, err);
          self.emit('test end', test);
          return self.hookUp('afterEach', next);
        }

        test.state = 'passed';
        self.emit('pass', test);
        self.emit('test end', test);
        self.hookUp('afterEach', next);
      });
    });
  }

  this.next = next;
  next();
};

/**
 * Run the given `suite` and invoke the
 * callback `fn()` when complete.
 *
 * @param {Suite} suite
 * @param {Function} fn
 * @api private
 */

Runner.prototype.runSuite = function(suite, fn){
  var total = this.grepTotal(suite)
    , self = this
    , i = 0;

  debug('run suite %s', suite.fullTitle());

  if (!total) return fn();

  this.emit('suite', this.suite = suite);

  function next(errSuite) {
    if (errSuite) {
      // current suite failed on a hook from errSuite
      if (errSuite == suite) {
        // if errSuite is current suite
        // continue to the next sibling suite
        return done();
      } else {
        // errSuite is among the parents of current suite
        // stop execution of errSuite and all sub-suites
        return done(errSuite);
      }
    }

    if (self._abort) return done();

    var curr = suite.suites[i++];
    if (!curr) return done();
    self.runSuite(curr, next);
  }

  function done(errSuite) {
    self.suite = suite;
    self.hook('afterAll', function(){
      self.emit('suite end', suite);
      fn(errSuite);
    });
  }

  this.hook('beforeAll', function(err){
    if (err) return done();
    self.runTests(suite, next);
  });
};

/**
 * Handle uncaught exceptions.
 *
 * @param {Error} err
 * @api private
 */

Runner.prototype.uncaught = function(err){
  if (err) {
    debug('uncaught exception %s', err !== function () {
      return this;
    }.call(err) ? err : ( err.message || err ));
  } else {
    debug('uncaught undefined exception');
    err = utils.undefinedError();
  }
  err.uncaught = true;

  var runnable = this.currentRunnable;
  if (!runnable) return;

  var wasAlreadyDone = runnable.state;
  this.fail(runnable, err);

  runnable.clearTimeout();

  if (wasAlreadyDone) return;

  // recover from test
  if ('test' == runnable.type) {
    this.emit('test end', runnable);
    this.hookUp('afterEach', this.next);
    return;
  }

  // bail on hooks
  this.emit('end');
};

/**
 * Run the root suite and invoke `fn(failures)`
 * on completion.
 *
 * @param {Function} fn
 * @return {Runner} for chaining
 * @api public
 */

Runner.prototype.run = function(fn){
  var self = this
    , fn = fn || function(){};

  function uncaught(err){
    self.uncaught(err);
  }

  debug('start');

  // callback
  this.on('end', function(){
    debug('end');
    process.removeListener('uncaughtException', uncaught);
    fn(self.failures);
  });

  // run suites
  this.emit('start');
  this.runSuite(this.suite, function(){
    debug('finished running');
    self.emit('end');
  });

  // uncaught exception
  process.on('uncaughtException', uncaught);

  return this;
};

/**
 * Cleanly abort execution
 *
 * @return {Runner} for chaining
 * @api public
 */
Runner.prototype.abort = function(){
  debug('aborting');
  this._abort = true;
};

/**
 * Filter leaks with the given globals flagged as `ok`.
 *
 * @param {Array} ok
 * @param {Array} globals
 * @return {Array}
 * @api private
 */

function filterLeaks(ok, globals) {
  return filter(globals, function(key){
    // Firefox and Chrome exposes iframes as index inside the window object
    if (/^d+/.test(key)) return false;

    // in firefox
    // if runner runs in an iframe, this iframe's window.getInterface method not init at first
    // it is assigned in some seconds
    if (global.navigator && /^getInterface/.test(key)) return false;

    // an iframe could be approached by window[iframeIndex]
    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak
    if (global.navigator && /^\d+/.test(key)) return false;

    // Opera and IE expose global variables for HTML element IDs (issue #243)
    if (/^mocha-/.test(key)) return false;

    var matched = filter(ok, function(ok){
      if (~ok.indexOf('*')) return 0 == key.indexOf(ok.split('*')[0]);
      return key == ok;
    });
    return matched.length == 0 && (!global.navigator || 'onerror' !== key);
  });
}

/**
 * Array of globals dependent on the environment.
 *
 * @return {Array}
 * @api private
 */

 function extraGlobals() {
  if (typeof(process) === 'object' &&
      typeof(process.version) === 'string') {

    var nodeVersion = process.version.split('.').reduce(function(a, v) {
      return a << 8 | v;
    });

    // 'errno' was renamed to process._errno in v0.9.11.

    if (nodeVersion < 0x00090B) {
      return ['errno'];
    }
  }

  return [];
 }

}); // module: runner.js

require.register("suite.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var EventEmitter = require('browser/events').EventEmitter
  , debug = require('browser/debug')('mocha:suite')
  , milliseconds = require('./ms')
  , utils = require('./utils')
  , Hook = require('./hook');

/**
 * Expose `Suite`.
 */

exports = module.exports = Suite;

/**
 * Create a new `Suite` with the given `title`
 * and parent `Suite`. When a suite with the
 * same title is already present, that suite
 * is returned to provide nicer reporter
 * and more flexible meta-testing.
 *
 * @param {Suite} parent
 * @param {String} title
 * @return {Suite}
 * @api public
 */

exports.create = function(parent, title){
  var suite = new Suite(title, parent.ctx);
  suite.parent = parent;
  if (parent.pending) suite.pending = true;
  title = suite.fullTitle();
  parent.addSuite(suite);
  return suite;
};

/**
 * Initialize a new `Suite` with the given
 * `title` and `ctx`.
 *
 * @param {String} title
 * @param {Context} ctx
 * @api private
 */

function Suite(title, parentContext) {
  this.title = title;
  var context = function() {};
  context.prototype = parentContext;
  this.ctx = new context();
  this.suites = [];
  this.tests = [];
  this.pending = false;
  this._beforeEach = [];
  this._beforeAll = [];
  this._afterEach = [];
  this._afterAll = [];
  this.root = !title;
  this._timeout = 2000;
  this._enableTimeouts = true;
  this._slow = 75;
  this._bail = false;
}

/**
 * Inherit from `EventEmitter.prototype`.
 */

function F(){};
F.prototype = EventEmitter.prototype;
Suite.prototype = new F;
Suite.prototype.constructor = Suite;


/**
 * Return a clone of this `Suite`.
 *
 * @return {Suite}
 * @api private
 */

Suite.prototype.clone = function(){
  var suite = new Suite(this.title);
  debug('clone');
  suite.ctx = this.ctx;
  suite.timeout(this.timeout());
  suite.enableTimeouts(this.enableTimeouts());
  suite.slow(this.slow());
  suite.bail(this.bail());
  return suite;
};

/**
 * Set timeout `ms` or short-hand such as "2s".
 *
 * @param {Number|String} ms
 * @return {Suite|Number} for chaining
 * @api private
 */

Suite.prototype.timeout = function(ms){
  if (0 == arguments.length) return this._timeout;
  if (ms.toString() === '0') this._enableTimeouts = false;
  if ('string' == typeof ms) ms = milliseconds(ms);
  debug('timeout %d', ms);
  this._timeout = parseInt(ms, 10);
  return this;
};

/**
  * Set timeout `enabled`.
  *
  * @param {Boolean} enabled
  * @return {Suite|Boolean} self or enabled
  * @api private
  */

Suite.prototype.enableTimeouts = function(enabled){
  if (arguments.length === 0) return this._enableTimeouts;
  debug('enableTimeouts %s', enabled);
  this._enableTimeouts = enabled;
  return this;
};

/**
 * Set slow `ms` or short-hand such as "2s".
 *
 * @param {Number|String} ms
 * @return {Suite|Number} for chaining
 * @api private
 */

Suite.prototype.slow = function(ms){
  if (0 === arguments.length) return this._slow;
  if ('string' == typeof ms) ms = milliseconds(ms);
  debug('slow %d', ms);
  this._slow = ms;
  return this;
};

/**
 * Sets whether to bail after first error.
 *
 * @param {Boolean} bail
 * @return {Suite|Number} for chaining
 * @api private
 */

Suite.prototype.bail = function(bail){
  if (0 == arguments.length) return this._bail;
  debug('bail %s', bail);
  this._bail = bail;
  return this;
};

/**
 * Run `fn(test[, done])` before running tests.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.beforeAll = function(title, fn){
  if (this.pending) return this;
  if ('function' === typeof title) {
    fn = title;
    title = fn.name;
  }
  title = '"before all" hook' + (title ? ': ' + title : '');

  var hook = new Hook(title, fn);
  hook.parent = this;
  hook.timeout(this.timeout());
  hook.enableTimeouts(this.enableTimeouts());
  hook.slow(this.slow());
  hook.ctx = this.ctx;
  this._beforeAll.push(hook);
  this.emit('beforeAll', hook);
  return this;
};

/**
 * Run `fn(test[, done])` after running tests.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.afterAll = function(title, fn){
  if (this.pending) return this;
  if ('function' === typeof title) {
    fn = title;
    title = fn.name;
  }
  title = '"after all" hook' + (title ? ': ' + title : '');

  var hook = new Hook(title, fn);
  hook.parent = this;
  hook.timeout(this.timeout());
  hook.enableTimeouts(this.enableTimeouts());
  hook.slow(this.slow());
  hook.ctx = this.ctx;
  this._afterAll.push(hook);
  this.emit('afterAll', hook);
  return this;
};

/**
 * Run `fn(test[, done])` before each test case.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.beforeEach = function(title, fn){
  if (this.pending) return this;
  if ('function' === typeof title) {
    fn = title;
    title = fn.name;
  }
  title = '"before each" hook' + (title ? ': ' + title : '');

  var hook = new Hook(title, fn);
  hook.parent = this;
  hook.timeout(this.timeout());
  hook.enableTimeouts(this.enableTimeouts());
  hook.slow(this.slow());
  hook.ctx = this.ctx;
  this._beforeEach.push(hook);
  this.emit('beforeEach', hook);
  return this;
};

/**
 * Run `fn(test[, done])` after each test case.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.afterEach = function(title, fn){
  if (this.pending) return this;
  if ('function' === typeof title) {
    fn = title;
    title = fn.name;
  }
  title = '"after each" hook' + (title ? ': ' + title : '');

  var hook = new Hook(title, fn);
  hook.parent = this;
  hook.timeout(this.timeout());
  hook.enableTimeouts(this.enableTimeouts());
  hook.slow(this.slow());
  hook.ctx = this.ctx;
  this._afterEach.push(hook);
  this.emit('afterEach', hook);
  return this;
};

/**
 * Add a test `suite`.
 *
 * @param {Suite} suite
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.addSuite = function(suite){
  suite.parent = this;
  suite.timeout(this.timeout());
  suite.enableTimeouts(this.enableTimeouts());
  suite.slow(this.slow());
  suite.bail(this.bail());
  this.suites.push(suite);
  this.emit('suite', suite);
  return this;
};

/**
 * Add a `test` to this suite.
 *
 * @param {Test} test
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.addTest = function(test){
  test.parent = this;
  test.timeout(this.timeout());
  test.enableTimeouts(this.enableTimeouts());
  test.slow(this.slow());
  test.ctx = this.ctx;
  this.tests.push(test);
  this.emit('test', test);
  return this;
};

/**
 * Return the full title generated by recursively
 * concatenating the parent's full title.
 *
 * @return {String}
 * @api public
 */

Suite.prototype.fullTitle = function(){
  if (this.parent) {
    var full = this.parent.fullTitle();
    if (full) return full + ' ' + this.title;
  }
  return this.title;
};

/**
 * Return the total number of tests.
 *
 * @return {Number}
 * @api public
 */

Suite.prototype.total = function(){
  return utils.reduce(this.suites, function(sum, suite){
    return sum + suite.total();
  }, 0) + this.tests.length;
};

/**
 * Iterates through each suite recursively to find
 * all tests. Applies a function in the format
 * `fn(test)`.
 *
 * @param {Function} fn
 * @return {Suite}
 * @api private
 */

Suite.prototype.eachTest = function(fn){
  utils.forEach(this.tests, fn);
  utils.forEach(this.suites, function(suite){
    suite.eachTest(fn);
  });
  return this;
};

}); // module: suite.js

require.register("test.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Runnable = require('./runnable');

/**
 * Expose `Test`.
 */

module.exports = Test;

/**
 * Initialize a new `Test` with the given `title` and callback `fn`.
 *
 * @param {String} title
 * @param {Function} fn
 * @api private
 */

function Test(title, fn) {
  Runnable.call(this, title, fn);
  this.pending = !fn;
  this.type = 'test';
}

/**
 * Inherit from `Runnable.prototype`.
 */

function F(){};
F.prototype = Runnable.prototype;
Test.prototype = new F;
Test.prototype.constructor = Test;


}); // module: test.js

require.register("utils.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var fs = require('browser/fs')
  , path = require('browser/path')
  , basename = path.basename
  , exists = fs.existsSync || path.existsSync
  , glob = require('browser/glob')
  , join = path.join
  , debug = require('browser/debug')('mocha:watch');

/**
 * Ignored directories.
 */

var ignore = ['node_modules', '.git'];

/**
 * Escape special characters in the given string of html.
 *
 * @param  {String} html
 * @return {String}
 * @api private
 */

exports.escape = function(html){
  return String(html)
    .replace(/&/g, '&amp;')
    .replace(/"/g, '&quot;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
};

/**
 * Array#forEach (<=IE8)
 *
 * @param {Array} array
 * @param {Function} fn
 * @param {Object} scope
 * @api private
 */

exports.forEach = function(arr, fn, scope){
  for (var i = 0, l = arr.length; i < l; i++)
    fn.call(scope, arr[i], i);
};

/**
 * Array#map (<=IE8)
 *
 * @param {Array} array
 * @param {Function} fn
 * @param {Object} scope
 * @api private
 */

exports.map = function(arr, fn, scope){
  var result = [];
  for (var i = 0, l = arr.length; i < l; i++)
    result.push(fn.call(scope, arr[i], i));
  return result;
};

/**
 * Array#indexOf (<=IE8)
 *
 * @parma {Array} arr
 * @param {Object} obj to find index of
 * @param {Number} start
 * @api private
 */

exports.indexOf = function(arr, obj, start){
  for (var i = start || 0, l = arr.length; i < l; i++) {
    if (arr[i] === obj)
      return i;
  }
  return -1;
};

/**
 * Array#reduce (<=IE8)
 *
 * @param {Array} array
 * @param {Function} fn
 * @param {Object} initial value
 * @api private
 */

exports.reduce = function(arr, fn, val){
  var rval = val;

  for (var i = 0, l = arr.length; i < l; i++) {
    rval = fn(rval, arr[i], i, arr);
  }

  return rval;
};

/**
 * Array#filter (<=IE8)
 *
 * @param {Array} array
 * @param {Function} fn
 * @api private
 */

exports.filter = function(arr, fn){
  var ret = [];

  for (var i = 0, l = arr.length; i < l; i++) {
    var val = arr[i];
    if (fn(val, i, arr)) ret.push(val);
  }

  return ret;
};

/**
 * Object.keys (<=IE8)
 *
 * @param {Object} obj
 * @return {Array} keys
 * @api private
 */

exports.keys = Object.keys || function(obj) {
  var keys = []
    , has = Object.prototype.hasOwnProperty // for `window` on <=IE8

  for (var key in obj) {
    if (has.call(obj, key)) {
      keys.push(key);
    }
  }

  return keys;
};

/**
 * Watch the given `files` for changes
 * and invoke `fn(file)` on modification.
 *
 * @param {Array} files
 * @param {Function} fn
 * @api private
 */

exports.watch = function(files, fn){
  var options = { interval: 100 };
  files.forEach(function(file){
    debug('file %s', file);
    fs.watchFile(file, options, function(curr, prev){
      if (prev.mtime < curr.mtime) fn(file);
    });
  });
};

/**
 * Ignored files.
 */

function ignored(path){
  return !~ignore.indexOf(path);
}

/**
 * Lookup files in the given `dir`.
 *
 * @return {Array}
 * @api private
 */

exports.files = function(dir, ext, ret){
  ret = ret || [];
  ext = ext || ['js'];

  var re = new RegExp('\\.(' + ext.join('|') + ')$');

  fs.readdirSync(dir)
  .filter(ignored)
  .forEach(function(path){
    path = join(dir, path);
    if (fs.statSync(path).isDirectory()) {
      exports.files(path, ext, ret);
    } else if (path.match(re)) {
      ret.push(path);
    }
  });

  return ret;
};

/**
 * Compute a slug from the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.slug = function(str){
  return str
    .toLowerCase()
    .replace(/ +/g, '-')
    .replace(/[^-\w]/g, '');
};

/**
 * Strip the function definition from `str`,
 * and re-indent for pre whitespace.
 */

exports.clean = function(str) {
  str = str
    .replace(/\r\n?|[\n\u2028\u2029]/g, "\n").replace(/^\uFEFF/, '')
    .replace(/^function *\(.*\) *{|\(.*\) *=> *{?/, '')
    .replace(/\s+\}$/, '');

  var spaces = str.match(/^\n?( *)/)[1].length
    , tabs = str.match(/^\n?(\t*)/)[1].length
    , re = new RegExp('^\n?' + (tabs ? '\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');

  str = str.replace(re, '');

  return exports.trim(str);
};

/**
 * Trim the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.trim = function(str){
  return str.replace(/^\s+|\s+$/g, '');
};

/**
 * Parse the given `qs`.
 *
 * @param {String} qs
 * @return {Object}
 * @api private
 */

exports.parseQuery = function(qs){
  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair){
    var i = pair.indexOf('=')
      , key = pair.slice(0, i)
      , val = pair.slice(++i);

    obj[key] = decodeURIComponent(val);
    return obj;
  }, {});
};

/**
 * Highlight the given string of `js`.
 *
 * @param {String} js
 * @return {String}
 * @api private
 */

function highlight(js) {
  return js
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/\/\/(.*)/gm, '<span class="comment">//$1</span>')
    .replace(/('.*?')/gm, '<span class="string">$1</span>')
    .replace(/(\d+\.\d+)/gm, '<span class="number">$1</span>')
    .replace(/(\d+)/gm, '<span class="number">$1</span>')
    .replace(/\bnew[ \t]+(\w+)/gm, '<span class="keyword">new</span> <span class="init">$1</span>')
    .replace(/\b(function|new|throw|return|var|if|else)\b/gm, '<span class="keyword">$1</span>')
}

/**
 * Highlight the contents of tag `name`.
 *
 * @param {String} name
 * @api private
 */

exports.highlightTags = function(name) {
  var code = document.getElementById('mocha').getElementsByTagName(name);
  for (var i = 0, len = code.length; i < len; ++i) {
    code[i].innerHTML = highlight(code[i].innerHTML);
  }
};

/**
 * If a value could have properties, and has none, this function is called, which returns
 * a string representation of the empty value.
 *
 * Functions w/ no properties return `'[Function]'`
 * Arrays w/ length === 0 return `'[]'`
 * Objects w/ no properties return `'{}'`
 * All else: return result of `value.toString()`
 *
 * @param {*} value Value to inspect
 * @param {string} [type] The type of the value, if known.
 * @returns {string}
 */
var emptyRepresentation = function emptyRepresentation(value, type) {
  type = type || exports.type(value);

  switch(type) {
    case 'function':
      return '[Function]';
    case 'object':
      return '{}';
    case 'array':
      return '[]';
    default:
      return value.toString();
  }
};

/**
 * Takes some variable and asks `{}.toString()` what it thinks it is.
 * @param {*} value Anything
 * @example
 * type({}) // 'object'
 * type([]) // 'array'
 * type(1) // 'number'
 * type(false) // 'boolean'
 * type(Infinity) // 'number'
 * type(null) // 'null'
 * type(new Date()) // 'date'
 * type(/foo/) // 'regexp'
 * type('type') // 'string'
 * type(global) // 'global'
 * @api private
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString
 * @returns {string}
 */
exports.type = function type(value) {
  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {
    return 'buffer';
  }
  return Object.prototype.toString.call(value)
    .replace(/^\[.+\s(.+?)\]$/, '$1')
    .toLowerCase();
};

/**
 * @summary Stringify `value`.
 * @description Different behavior depending on type of value.
 * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.
 * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.
 * - If `value` is an *empty* object, function, or array, return result of function
 *   {@link emptyRepresentation}.
 * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of
 *   JSON.stringify().
 *
 * @see exports.type
 * @param {*} value
 * @return {string}
 * @api private
 */

exports.stringify = function(value) {
  var prop,
    type = exports.type(value);

  if (type === 'null' || type === 'undefined') {
    return '[' + type + ']';
  }

  if (type === 'date') {
    return '[Date: ' + value.toISOString() + ']';
  }

  if (!~exports.indexOf(['object', 'array', 'function'], type)) {
    return value.toString();
  }

  for (prop in value) {
    if (value.hasOwnProperty(prop)) {
      return JSON.stringify(exports.canonicalize(value), null, 2).replace(/,(\n|$)/g, '$1');
    }
  }

  return emptyRepresentation(value, type);
};

/**
 * Return if obj is a Buffer
 * @param {Object} arg
 * @return {Boolean}
 * @api private
 */
exports.isBuffer = function (arg) {
  return typeof Buffer !== 'undefined' && Buffer.isBuffer(arg);
};

/**
 * @summary Return a new Thing that has the keys in sorted order.  Recursive.
 * @description If the Thing...
 * - has already been seen, return string `'[Circular]'`
 * - is `undefined`, return string `'[undefined]'`
 * - is `null`, return value `null`
 * - is some other primitive, return the value
 * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method
 * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.
 * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`
 *
 * @param {*} value Thing to inspect.  May or may not have properties.
 * @param {Array} [stack=[]] Stack of seen values
 * @return {(Object|Array|Function|string|undefined)}
 * @see {@link exports.stringify}
 * @api private
 */

exports.canonicalize = function(value, stack) {
  var canonicalizedObj,
    type = exports.type(value),
    prop,
    withStack = function withStack(value, fn) {
      stack.push(value);
      fn();
      stack.pop();
    };

  stack = stack || [];

  if (exports.indexOf(stack, value) !== -1) {
    return '[Circular]';
  }

  switch(type) {
    case 'undefined':
      canonicalizedObj = '[undefined]';
      break;
    case 'buffer':
    case 'null':
      canonicalizedObj = value;
      break;
    case 'array':
      withStack(value, function () {
        canonicalizedObj = exports.map(value, function (item) {
          return exports.canonicalize(item, stack);
        });
      });
      break;
    case 'date':
      canonicalizedObj = '[Date: ' + value.toISOString() + ']';
      break;
    case 'function':
      for (prop in value) {
        canonicalizedObj = {};
        break;
      }
      if (!canonicalizedObj) {
        canonicalizedObj = emptyRepresentation(value, type);
        break;
      }
    /* falls through */
    case 'object':
      canonicalizedObj = canonicalizedObj || {};
      withStack(value, function () {
        exports.forEach(exports.keys(value).sort(), function (key) {
          canonicalizedObj[key] = exports.canonicalize(value[key], stack);
        });
      });
      break;
    case 'number':
    case 'boolean':
      canonicalizedObj = value;
      break;
    default:
      canonicalizedObj = value.toString();
  }

  return canonicalizedObj;
};

/**
 * Lookup file names at the given `path`.
 */
exports.lookupFiles = function lookupFiles(path, extensions, recursive) {
  var files = [];
  var re = new RegExp('\\.(' + extensions.join('|') + ')$');

  if (!exists(path)) {
    if (exists(path + '.js')) {
      path += '.js';
    } else {
      files = glob.sync(path);
      if (!files.length) throw new Error("cannot resolve path (or pattern) '" + path + "'");
      return files;
    }
  }

  try {
    var stat = fs.statSync(path);
    if (stat.isFile()) return path;
  }
  catch (ignored) {
    return;
  }

  fs.readdirSync(path).forEach(function(file){
    file = join(path, file);
    try {
      var stat = fs.statSync(file);
      if (stat.isDirectory()) {
        if (recursive) {
          files = files.concat(lookupFiles(file, extensions, recursive));
        }
        return;
      }
    }
    catch (ignored) {
      return;
    }
    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') return;
    files.push(file);
  });

  return files;
};

/**
 * Generate an undefined error with a message warning the user.
 *
 * @return {Error}
 */

exports.undefinedError = function(){
  return new Error('Caught undefined error, did you throw without specifying what?');
};

/**
 * Generate an undefined error if `err` is not defined.
 *
 * @param {Error} err
 * @return {Error}
 */

exports.getError = function(err){
  return err || exports.undefinedError();
};


}); // module: utils.js
// The global object is "self" in Web Workers.
var global = (function() { return this; })();

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date;
var setTimeout = global.setTimeout;
var setInterval = global.setInterval;
var clearTimeout = global.clearTimeout;
var clearInterval = global.clearInterval;

/**
 * Node shims.
 *
 * These are meant only to allow
 * mocha.js to run untouched, not
 * to allow running node code in
 * the browser.
 */

var process = {};
process.exit = function(status){};
process.stdout = {};

var uncaughtExceptionHandlers = [];

var originalOnerrorHandler = global.onerror;

/**
 * Remove uncaughtException listener.
 * Revert to original onerror handler if previously defined.
 */

process.removeListener = function(e, fn){
  if ('uncaughtException' == e) {
    if (originalOnerrorHandler) {
      global.onerror = originalOnerrorHandler;
    } else {
      global.onerror = function() {};
    }
    var i = Mocha.utils.indexOf(uncaughtExceptionHandlers, fn);
    if (i != -1) { uncaughtExceptionHandlers.splice(i, 1); }
  }
};

/**
 * Implements uncaughtException listener.
 */

process.on = function(e, fn){
  if ('uncaughtException' == e) {
    global.onerror = function(err, url, line){
      fn(new Error(err + ' (' + url + ':' + line + ')'));
      return true;
    };
    uncaughtExceptionHandlers.push(fn);
  }
};

/**
 * Expose mocha.
 */

var Mocha = global.Mocha = require('mocha'),
    mocha = global.mocha = new Mocha({ reporter: 'html' });

// The BDD UI is registered by default, but no UI will be functional in the
// browser without an explicit call to the overridden `mocha.ui` (see below).
// Ensure that this default UI does not expose its methods to the global scope.
mocha.suite.removeAllListeners('pre-require');

var immediateQueue = []
  , immediateTimeout;

function timeslice() {
  var immediateStart = new Date().getTime();
  while (immediateQueue.length && (new Date().getTime() - immediateStart) < 100) {
    immediateQueue.shift()();
  }
  if (immediateQueue.length) {
    immediateTimeout = setTimeout(timeslice, 0);
  } else {
    immediateTimeout = null;
  }
}

/**
 * High-performance override of Runner.immediately.
 */

Mocha.Runner.immediately = function(callback) {
  immediateQueue.push(callback);
  if (!immediateTimeout) {
    immediateTimeout = setTimeout(timeslice, 0);
  }
};

/**
 * Function to allow assertion libraries to throw errors directly into mocha.
 * This is useful when running tests in a browser because window.onerror will
 * only receive the 'message' attribute of the Error.
 */
mocha.throwError = function(err) {
  Mocha.utils.forEach(uncaughtExceptionHandlers, function (fn) {
    fn(err);
  });
  throw err;
};

/**
 * Override ui to ensure that the ui functions are initialized.
 * Normally this would happen in Mocha.prototype.loadFiles.
 */

mocha.ui = function(ui){
  Mocha.prototype.ui.call(this, ui);
  this.suite.emit('pre-require', global, null, this);
  return this;
};

/**
 * Setup mocha with the given setting options.
 */

mocha.setup = function(opts){
  if ('string' == typeof opts) opts = { ui: opts };
  for (var opt in opts) this[opt](opts[opt]);
  return this;
};

/**
 * Run mocha, returning the Runner.
 */

mocha.run = function(fn){
  var options = mocha.options;
  mocha.globals('location');

  var query = Mocha.utils.parseQuery(global.location.search || '');
  if (query.grep) mocha.grep(query.grep);
  if (query.invert) mocha.invert();

  return Mocha.prototype.run.call(mocha, function(err){
    // The DOM Document is not available in Web Workers.
    var document = global.document;
    if (document && document.getElementById('mocha') && options.noHighlighting !== true) {
      Mocha.utils.highlightTags('code');
    }
    if (fn) fn(err);
  });
};

/**
 * Expose the process shim.
 */

Mocha.process = process;
})();

});

require.register("mochajs~mocha@2.1.0", function (exports, module) {
;(function(){

// CommonJS require()

function require(p){
    var path = require.resolve(p)
      , mod = require.modules[path];
    if (!mod) throw new Error('failed to require "' + p + '"');
    if (!mod.exports) {
      mod.exports = {};
      mod.call(mod.exports, mod, mod.exports, require.relative(path));
    }
    return mod.exports;
  }

require.modules = {};

require.resolve = function (path){
    var orig = path
      , reg = path + '.js'
      , index = path + '/index.js';
    return require.modules[reg] && reg
      || require.modules[index] && index
      || orig;
  };

require.register = function (path, fn){
    require.modules[path] = fn;
  };

require.relative = function (parent) {
    return function(p){
      if ('.' != p.charAt(0)) return require(p);

      var path = parent.split('/')
        , segs = p.split('/');
      path.pop();

      for (var i = 0; i < segs.length; i++) {
        var seg = segs[i];
        if ('..' == seg) path.pop();
        else if ('.' != seg) path.push(seg);
      }

      return require(path.join('/'));
    };
  };


require.register("browser/debug.js", function(module, exports, require){
module.exports = function(type){
  return function(){
  }
};

}); // module: browser/debug.js

require.register("browser/diff.js", function(module, exports, require){
/* See LICENSE file for terms of use */

/*
 * Text diff implementation.
 *
 * This library supports the following APIS:
 * JsDiff.diffChars: Character by character diff
 * JsDiff.diffWords: Word (as defined by \b regex) diff which ignores whitespace
 * JsDiff.diffLines: Line based diff
 *
 * JsDiff.diffCss: Diff targeted at CSS content
 *
 * These methods are based on the implementation proposed in
 * "An O(ND) Difference Algorithm and its Variations" (Myers, 1986).
 * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927
 */
var JsDiff = (function() {
  /*jshint maxparams: 5*/
  function clonePath(path) {
    return { newPos: path.newPos, components: path.components.slice(0) };
  }
  function removeEmpty(array) {
    var ret = [];
    for (var i = 0; i < array.length; i++) {
      if (array[i]) {
        ret.push(array[i]);
      }
    }
    return ret;
  }
  function escapeHTML(s) {
    var n = s;
    n = n.replace(/&/g, '&amp;');
    n = n.replace(/</g, '&lt;');
    n = n.replace(/>/g, '&gt;');
    n = n.replace(/"/g, '&quot;');

    return n;
  }

  var Diff = function(ignoreWhitespace) {
    this.ignoreWhitespace = ignoreWhitespace;
  };
  Diff.prototype = {
      diff: function(oldString, newString) {
        // Handle the identity case (this is due to unrolling editLength == 0
        if (newString === oldString) {
          return [{ value: newString }];
        }
        if (!newString) {
          return [{ value: oldString, removed: true }];
        }
        if (!oldString) {
          return [{ value: newString, added: true }];
        }

        newString = this.tokenize(newString);
        oldString = this.tokenize(oldString);

        var newLen = newString.length, oldLen = oldString.length;
        var maxEditLength = newLen + oldLen;
        var bestPath = [{ newPos: -1, components: [] }];

        // Seed editLength = 0
        var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);
        if (bestPath[0].newPos+1 >= newLen && oldPos+1 >= oldLen) {
          return bestPath[0].components;
        }

        for (var editLength = 1; editLength <= maxEditLength; editLength++) {
          for (var diagonalPath = -1*editLength; diagonalPath <= editLength; diagonalPath+=2) {
            var basePath;
            var addPath = bestPath[diagonalPath-1],
                removePath = bestPath[diagonalPath+1];
            oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;
            if (addPath) {
              // No one else is going to attempt to use this value, clear it
              bestPath[diagonalPath-1] = undefined;
            }

            var canAdd = addPath && addPath.newPos+1 < newLen;
            var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;
            if (!canAdd && !canRemove) {
              bestPath[diagonalPath] = undefined;
              continue;
            }

            // Select the diagonal that we want to branch from. We select the prior
            // path whose position in the new string is the farthest from the origin
            // and does not pass the bounds of the diff graph
            if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {
              basePath = clonePath(removePath);
              this.pushComponent(basePath.components, oldString[oldPos], undefined, true);
            } else {
              basePath = clonePath(addPath);
              basePath.newPos++;
              this.pushComponent(basePath.components, newString[basePath.newPos], true, undefined);
            }

            var oldPos = this.extractCommon(basePath, newString, oldString, diagonalPath);

            if (basePath.newPos+1 >= newLen && oldPos+1 >= oldLen) {
              return basePath.components;
            } else {
              bestPath[diagonalPath] = basePath;
            }
          }
        }
      },

      pushComponent: function(components, value, added, removed) {
        var last = components[components.length-1];
        if (last && last.added === added && last.removed === removed) {
          // We need to clone here as the component clone operation is just
          // as shallow array clone
          components[components.length-1] =
            {value: this.join(last.value, value), added: added, removed: removed };
        } else {
          components.push({value: value, added: added, removed: removed });
        }
      },
      extractCommon: function(basePath, newString, oldString, diagonalPath) {
        var newLen = newString.length,
            oldLen = oldString.length,
            newPos = basePath.newPos,
            oldPos = newPos - diagonalPath;
        while (newPos+1 < newLen && oldPos+1 < oldLen && this.equals(newString[newPos+1], oldString[oldPos+1])) {
          newPos++;
          oldPos++;

          this.pushComponent(basePath.components, newString[newPos], undefined, undefined);
        }
        basePath.newPos = newPos;
        return oldPos;
      },

      equals: function(left, right) {
        var reWhitespace = /\S/;
        if (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right)) {
          return true;
        } else {
          return left === right;
        }
      },
      join: function(left, right) {
        return left + right;
      },
      tokenize: function(value) {
        return value;
      }
  };

  var CharDiff = new Diff();

  var WordDiff = new Diff(true);
  var WordWithSpaceDiff = new Diff();
  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {
    return removeEmpty(value.split(/(\s+|\b)/));
  };

  var CssDiff = new Diff(true);
  CssDiff.tokenize = function(value) {
    return removeEmpty(value.split(/([{}:;,]|\s+)/));
  };

  var LineDiff = new Diff();
  LineDiff.tokenize = function(value) {
    var retLines = [],
        lines = value.split(/^/m);

    for(var i = 0; i < lines.length; i++) {
      var line = lines[i],
          lastLine = lines[i - 1];

      // Merge lines that may contain windows new lines
      if (line == '\n' && lastLine && lastLine[lastLine.length - 1] === '\r') {
        retLines[retLines.length - 1] += '\n';
      } else if (line) {
        retLines.push(line);
      }
    }

    return retLines;
  };

  return {
    Diff: Diff,

    diffChars: function(oldStr, newStr) { return CharDiff.diff(oldStr, newStr); },
    diffWords: function(oldStr, newStr) { return WordDiff.diff(oldStr, newStr); },
    diffWordsWithSpace: function(oldStr, newStr) { return WordWithSpaceDiff.diff(oldStr, newStr); },
    diffLines: function(oldStr, newStr) { return LineDiff.diff(oldStr, newStr); },

    diffCss: function(oldStr, newStr) { return CssDiff.diff(oldStr, newStr); },

    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {
      var ret = [];

      ret.push('Index: ' + fileName);
      ret.push('===================================================================');
      ret.push('--- ' + fileName + (typeof oldHeader === 'undefined' ? '' : '\t' + oldHeader));
      ret.push('+++ ' + fileName + (typeof newHeader === 'undefined' ? '' : '\t' + newHeader));

      var diff = LineDiff.diff(oldStr, newStr);
      if (!diff[diff.length-1].value) {
        diff.pop();   // Remove trailing newline add
      }
      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier

      function contextLines(lines) {
        return lines.map(function(entry) { return ' ' + entry; });
      }
      function eofNL(curRange, i, current) {
        var last = diff[diff.length-2],
            isLast = i === diff.length-2,
            isLastOfType = i === diff.length-3 && (current.added !== last.added || current.removed !== last.removed);

        // Figure out if this is the last line for the given file and missing NL
        if (!/\n$/.test(current.value) && (isLast || isLastOfType)) {
          curRange.push('\\ No newline at end of file');
        }
      }

      var oldRangeStart = 0, newRangeStart = 0, curRange = [],
          oldLine = 1, newLine = 1;
      for (var i = 0; i < diff.length; i++) {
        var current = diff[i],
            lines = current.lines || current.value.replace(/\n$/, '').split('\n');
        current.lines = lines;

        if (current.added || current.removed) {
          if (!oldRangeStart) {
            var prev = diff[i-1];
            oldRangeStart = oldLine;
            newRangeStart = newLine;

            if (prev) {
              curRange = contextLines(prev.lines.slice(-4));
              oldRangeStart -= curRange.length;
              newRangeStart -= curRange.length;
            }
          }
          curRange.push.apply(curRange, lines.map(function(entry) { return (current.added?'+':'-') + entry; }));
          eofNL(curRange, i, current);

          if (current.added) {
            newLine += lines.length;
          } else {
            oldLine += lines.length;
          }
        } else {
          if (oldRangeStart) {
            // Close out any changes that have been output (or join overlapping)
            if (lines.length <= 8 && i < diff.length-2) {
              // Overlapping
              curRange.push.apply(curRange, contextLines(lines));
            } else {
              // end the range and output
              var contextSize = Math.min(lines.length, 4);
              ret.push(
                  '@@ -' + oldRangeStart + ',' + (oldLine-oldRangeStart+contextSize)
                  + ' +' + newRangeStart + ',' + (newLine-newRangeStart+contextSize)
                  + ' @@');
              ret.push.apply(ret, curRange);
              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));
              if (lines.length <= 4) {
                eofNL(ret, i, current);
              }

              oldRangeStart = 0;  newRangeStart = 0; curRange = [];
            }
          }
          oldLine += lines.length;
          newLine += lines.length;
        }
      }

      return ret.join('\n') + '\n';
    },

    applyPatch: function(oldStr, uniDiff) {
      var diffstr = uniDiff.split('\n');
      var diff = [];
      var remEOFNL = false,
          addEOFNL = false;

      for (var i = (diffstr[0][0]==='I'?4:0); i < diffstr.length; i++) {
        if(diffstr[i][0] === '@') {
          var meh = diffstr[i].split(/@@ -(\d+),(\d+) \+(\d+),(\d+) @@/);
          diff.unshift({
            start:meh[3],
            oldlength:meh[2],
            oldlines:[],
            newlength:meh[4],
            newlines:[]
          });
        } else if(diffstr[i][0] === '+') {
          diff[0].newlines.push(diffstr[i].substr(1));
        } else if(diffstr[i][0] === '-') {
          diff[0].oldlines.push(diffstr[i].substr(1));
        } else if(diffstr[i][0] === ' ') {
          diff[0].newlines.push(diffstr[i].substr(1));
          diff[0].oldlines.push(diffstr[i].substr(1));
        } else if(diffstr[i][0] === '\\') {
          if (diffstr[i-1][0] === '+') {
            remEOFNL = true;
          } else if(diffstr[i-1][0] === '-') {
            addEOFNL = true;
          }
        }
      }

      var str = oldStr.split('\n');
      for (var i = diff.length - 1; i >= 0; i--) {
        var d = diff[i];
        for (var j = 0; j < d.oldlength; j++) {
          if(str[d.start-1+j] !== d.oldlines[j]) {
            return false;
          }
        }
        Array.prototype.splice.apply(str,[d.start-1,+d.oldlength].concat(d.newlines));
      }

      if (remEOFNL) {
        while (!str[str.length-1]) {
          str.pop();
        }
      } else if (addEOFNL) {
        str.push('');
      }
      return str.join('\n');
    },

    convertChangesToXML: function(changes){
      var ret = [];
      for ( var i = 0; i < changes.length; i++) {
        var change = changes[i];
        if (change.added) {
          ret.push('<ins>');
        } else if (change.removed) {
          ret.push('<del>');
        }

        ret.push(escapeHTML(change.value));

        if (change.added) {
          ret.push('</ins>');
        } else if (change.removed) {
          ret.push('</del>');
        }
      }
      return ret.join('');
    },

    // See: http://code.google.com/p/google-diff-match-patch/wiki/API
    convertChangesToDMP: function(changes){
      var ret = [], change;
      for ( var i = 0; i < changes.length; i++) {
        change = changes[i];
        ret.push([(change.added ? 1 : change.removed ? -1 : 0), change.value]);
      }
      return ret;
    }
  };
})();

if (typeof module !== 'undefined') {
    module.exports = JsDiff;
}

}); // module: browser/diff.js

require.register("browser/escape-string-regexp.js", function(module, exports, require){
'use strict';

var matchOperatorsRe = /[|\\{}()[\]^$+*?.]/g;

module.exports = function (str) {
  if (typeof str !== 'string') {
    throw new TypeError('Expected a string');
  }

  return str.replace(matchOperatorsRe,  '\\$&');
};

}); // module: browser/escape-string-regexp.js

require.register("browser/events.js", function(module, exports, require){
/**
 * Module exports.
 */

exports.EventEmitter = EventEmitter;

/**
 * Check if `obj` is an array.
 */

function isArray(obj) {
  return '[object Array]' == {}.toString.call(obj);
}

/**
 * Event emitter constructor.
 *
 * @api public
 */

function EventEmitter(){};

/**
 * Adds a listener.
 *
 * @api public
 */

EventEmitter.prototype.on = function (name, fn) {
  if (!this.$events) {
    this.$events = {};
  }

  if (!this.$events[name]) {
    this.$events[name] = fn;
  } else if (isArray(this.$events[name])) {
    this.$events[name].push(fn);
  } else {
    this.$events[name] = [this.$events[name], fn];
  }

  return this;
};

EventEmitter.prototype.addListener = EventEmitter.prototype.on;

/**
 * Adds a volatile listener.
 *
 * @api public
 */

EventEmitter.prototype.once = function (name, fn) {
  var self = this;

  function on () {
    self.removeListener(name, on);
    fn.apply(this, arguments);
  };

  on.listener = fn;
  this.on(name, on);

  return this;
};

/**
 * Removes a listener.
 *
 * @api public
 */

EventEmitter.prototype.removeListener = function (name, fn) {
  if (this.$events && this.$events[name]) {
    var list = this.$events[name];

    if (isArray(list)) {
      var pos = -1;

      for (var i = 0, l = list.length; i < l; i++) {
        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {
          pos = i;
          break;
        }
      }

      if (pos < 0) {
        return this;
      }

      list.splice(pos, 1);

      if (!list.length) {
        delete this.$events[name];
      }
    } else if (list === fn || (list.listener && list.listener === fn)) {
      delete this.$events[name];
    }
  }

  return this;
};

/**
 * Removes all listeners for an event.
 *
 * @api public
 */

EventEmitter.prototype.removeAllListeners = function (name) {
  if (name === undefined) {
    this.$events = {};
    return this;
  }

  if (this.$events && this.$events[name]) {
    this.$events[name] = null;
  }

  return this;
};

/**
 * Gets all listeners for a certain event.
 *
 * @api public
 */

EventEmitter.prototype.listeners = function (name) {
  if (!this.$events) {
    this.$events = {};
  }

  if (!this.$events[name]) {
    this.$events[name] = [];
  }

  if (!isArray(this.$events[name])) {
    this.$events[name] = [this.$events[name]];
  }

  return this.$events[name];
};

/**
 * Emits an event.
 *
 * @api public
 */

EventEmitter.prototype.emit = function (name) {
  if (!this.$events) {
    return false;
  }

  var handler = this.$events[name];

  if (!handler) {
    return false;
  }

  var args = [].slice.call(arguments, 1);

  if ('function' == typeof handler) {
    handler.apply(this, args);
  } else if (isArray(handler)) {
    var listeners = handler.slice();

    for (var i = 0, l = listeners.length; i < l; i++) {
      listeners[i].apply(this, args);
    }
  } else {
    return false;
  }

  return true;
};

}); // module: browser/events.js

require.register("browser/fs.js", function(module, exports, require){

}); // module: browser/fs.js

require.register("browser/glob.js", function(module, exports, require){

}); // module: browser/glob.js

require.register("browser/path.js", function(module, exports, require){

}); // module: browser/path.js

require.register("browser/progress.js", function(module, exports, require){
/**
 * Expose `Progress`.
 */

module.exports = Progress;

/**
 * Initialize a new `Progress` indicator.
 */

function Progress() {
  this.percent = 0;
  this.size(0);
  this.fontSize(11);
  this.font('helvetica, arial, sans-serif');
}

/**
 * Set progress size to `n`.
 *
 * @param {Number} n
 * @return {Progress} for chaining
 * @api public
 */

Progress.prototype.size = function(n){
  this._size = n;
  return this;
};

/**
 * Set text to `str`.
 *
 * @param {String} str
 * @return {Progress} for chaining
 * @api public
 */

Progress.prototype.text = function(str){
  this._text = str;
  return this;
};

/**
 * Set font size to `n`.
 *
 * @param {Number} n
 * @return {Progress} for chaining
 * @api public
 */

Progress.prototype.fontSize = function(n){
  this._fontSize = n;
  return this;
};

/**
 * Set font `family`.
 *
 * @param {String} family
 * @return {Progress} for chaining
 */

Progress.prototype.font = function(family){
  this._font = family;
  return this;
};

/**
 * Update percentage to `n`.
 *
 * @param {Number} n
 * @return {Progress} for chaining
 */

Progress.prototype.update = function(n){
  this.percent = n;
  return this;
};

/**
 * Draw on `ctx`.
 *
 * @param {CanvasRenderingContext2d} ctx
 * @return {Progress} for chaining
 */

Progress.prototype.draw = function(ctx){
  try {
    var percent = Math.min(this.percent, 100)
      , size = this._size
      , half = size / 2
      , x = half
      , y = half
      , rad = half - 1
      , fontSize = this._fontSize;

    ctx.font = fontSize + 'px ' + this._font;

    var angle = Math.PI * 2 * (percent / 100);
    ctx.clearRect(0, 0, size, size);

    // outer circle
    ctx.strokeStyle = '#9f9f9f';
    ctx.beginPath();
    ctx.arc(x, y, rad, 0, angle, false);
    ctx.stroke();

    // inner circle
    ctx.strokeStyle = '#eee';
    ctx.beginPath();
    ctx.arc(x, y, rad - 1, 0, angle, true);
    ctx.stroke();

    // text
    var text = this._text || (percent | 0) + '%'
      , w = ctx.measureText(text).width;

    ctx.fillText(
        text
      , x - w / 2 + 1
      , y + fontSize / 2 - 1);
  } catch (ex) {} //don't fail if we can't render progress
  return this;
};

}); // module: browser/progress.js

require.register("browser/tty.js", function(module, exports, require){
exports.isatty = function(){
  return true;
};

exports.getWindowSize = function(){
  if ('innerHeight' in global) {
    return [global.innerHeight, global.innerWidth];
  } else {
    // In a Web Worker, the DOM Window is not available.
    return [640, 480];
  }
};

}); // module: browser/tty.js

require.register("context.js", function(module, exports, require){
/**
 * Expose `Context`.
 */

module.exports = Context;

/**
 * Initialize a new `Context`.
 *
 * @api private
 */

function Context(){}

/**
 * Set or get the context `Runnable` to `runnable`.
 *
 * @param {Runnable} runnable
 * @return {Context}
 * @api private
 */

Context.prototype.runnable = function(runnable){
  if (0 == arguments.length) return this._runnable;
  this.test = this._runnable = runnable;
  return this;
};

/**
 * Set test timeout `ms`.
 *
 * @param {Number} ms
 * @return {Context} self
 * @api private
 */

Context.prototype.timeout = function(ms){
  if (arguments.length === 0) return this.runnable().timeout();
  this.runnable().timeout(ms);
  return this;
};

/**
 * Set test timeout `enabled`.
 *
 * @param {Boolean} enabled
 * @return {Context} self
 * @api private
 */

Context.prototype.enableTimeouts = function (enabled) {
  this.runnable().enableTimeouts(enabled);
  return this;
};


/**
 * Set test slowness threshold `ms`.
 *
 * @param {Number} ms
 * @return {Context} self
 * @api private
 */

Context.prototype.slow = function(ms){
  this.runnable().slow(ms);
  return this;
};

/**
 * Inspect the context void of `._runnable`.
 *
 * @return {String}
 * @api private
 */

Context.prototype.inspect = function(){
  return JSON.stringify(this, function(key, val){
    if ('_runnable' == key) return;
    if ('test' == key) return;
    return val;
  }, 2);
};

}); // module: context.js

require.register("hook.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Runnable = require('./runnable');

/**
 * Expose `Hook`.
 */

module.exports = Hook;

/**
 * Initialize a new `Hook` with the given `title` and callback `fn`.
 *
 * @param {String} title
 * @param {Function} fn
 * @api private
 */

function Hook(title, fn) {
  Runnable.call(this, title, fn);
  this.type = 'hook';
}

/**
 * Inherit from `Runnable.prototype`.
 */

function F(){};
F.prototype = Runnable.prototype;
Hook.prototype = new F;
Hook.prototype.constructor = Hook;


/**
 * Get or set the test `err`.
 *
 * @param {Error} err
 * @return {Error}
 * @api public
 */

Hook.prototype.error = function(err){
  if (0 == arguments.length) {
    var err = this._error;
    this._error = null;
    return err;
  }

  this._error = err;
};

}); // module: hook.js

require.register("interfaces/bdd.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Suite = require('../suite')
  , Test = require('../test')
  , utils = require('../utils')
  , escapeRe = require('browser/escape-string-regexp');

/**
 * BDD-style interface:
 *
 *      describe('Array', function(){
 *        describe('#indexOf()', function(){
 *          it('should return -1 when not present', function(){
 *
 *          });
 *
 *          it('should return the index when present', function(){
 *
 *          });
 *        });
 *      });
 *
 */

module.exports = function(suite){
  var suites = [suite];

  suite.on('pre-require', function(context, file, mocha){

    /**
     * Execute before running tests.
     */

    context.before = function(name, fn){
      suites[0].beforeAll(name, fn);
    };

    /**
     * Execute after running tests.
     */

    context.after = function(name, fn){
      suites[0].afterAll(name, fn);
    };

    /**
     * Execute before each test case.
     */

    context.beforeEach = function(name, fn){
      suites[0].beforeEach(name, fn);
    };

    /**
     * Execute after each test case.
     */

    context.afterEach = function(name, fn){
      suites[0].afterEach(name, fn);
    };

    /**
     * Describe a "suite" with the given `title`
     * and callback `fn` containing nested suites
     * and/or tests.
     */

    context.describe = context.context = function(title, fn){
      var suite = Suite.create(suites[0], title);
      suite.file = file;
      suites.unshift(suite);
      fn.call(suite);
      suites.shift();
      return suite;
    };

    /**
     * Pending describe.
     */

    context.xdescribe =
    context.xcontext =
    context.describe.skip = function(title, fn){
      var suite = Suite.create(suites[0], title);
      suite.pending = true;
      suites.unshift(suite);
      fn.call(suite);
      suites.shift();
    };

    /**
     * Exclusive suite.
     */

    context.describe.only = function(title, fn){
      var suite = context.describe(title, fn);
      mocha.grep(suite.fullTitle());
      return suite;
    };

    /**
     * Describe a specification or test-case
     * with the given `title` and callback `fn`
     * acting as a thunk.
     */

    context.it = context.specify = function(title, fn){
      var suite = suites[0];
      if (suite.pending) fn = null;
      var test = new Test(title, fn);
      test.file = file;
      suite.addTest(test);
      return test;
    };

    /**
     * Exclusive test-case.
     */

    context.it.only = function(title, fn){
      var test = context.it(title, fn);
      var reString = '^' + escapeRe(test.fullTitle()) + '$';
      mocha.grep(new RegExp(reString));
      return test;
    };

    /**
     * Pending test case.
     */

    context.xit =
    context.xspecify =
    context.it.skip = function(title){
      context.it(title);
    };
  });
};

}); // module: interfaces/bdd.js

require.register("interfaces/exports.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Suite = require('../suite')
  , Test = require('../test');

/**
 * TDD-style interface:
 *
 *     exports.Array = {
 *       '#indexOf()': {
 *         'should return -1 when the value is not present': function(){
 *
 *         },
 *
 *         'should return the correct index when the value is present': function(){
 *
 *         }
 *       }
 *     };
 *
 */

module.exports = function(suite){
  var suites = [suite];

  suite.on('require', visit);

  function visit(obj, file) {
    var suite;
    for (var key in obj) {
      if ('function' == typeof obj[key]) {
        var fn = obj[key];
        switch (key) {
          case 'before':
            suites[0].beforeAll(fn);
            break;
          case 'after':
            suites[0].afterAll(fn);
            break;
          case 'beforeEach':
            suites[0].beforeEach(fn);
            break;
          case 'afterEach':
            suites[0].afterEach(fn);
            break;
          default:
            var test = new Test(key, fn);
            test.file = file;
            suites[0].addTest(test);
        }
      } else {
        suite = Suite.create(suites[0], key);
        suites.unshift(suite);
        visit(obj[key]);
        suites.shift();
      }
    }
  }
};

}); // module: interfaces/exports.js

require.register("interfaces/index.js", function(module, exports, require){
exports.bdd = require('./bdd');
exports.tdd = require('./tdd');
exports.qunit = require('./qunit');
exports.exports = require('./exports');

}); // module: interfaces/index.js

require.register("interfaces/qunit.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Suite = require('../suite')
  , Test = require('../test')
  , escapeRe = require('browser/escape-string-regexp')
  , utils = require('../utils');

/**
 * QUnit-style interface:
 *
 *     suite('Array');
 *
 *     test('#length', function(){
 *       var arr = [1,2,3];
 *       ok(arr.length == 3);
 *     });
 *
 *     test('#indexOf()', function(){
 *       var arr = [1,2,3];
 *       ok(arr.indexOf(1) == 0);
 *       ok(arr.indexOf(2) == 1);
 *       ok(arr.indexOf(3) == 2);
 *     });
 *
 *     suite('String');
 *
 *     test('#length', function(){
 *       ok('foo'.length == 3);
 *     });
 *
 */

module.exports = function(suite){
  var suites = [suite];

  suite.on('pre-require', function(context, file, mocha){

    /**
     * Execute before running tests.
     */

    context.before = function(name, fn){
      suites[0].beforeAll(name, fn);
    };

    /**
     * Execute after running tests.
     */

    context.after = function(name, fn){
      suites[0].afterAll(name, fn);
    };

    /**
     * Execute before each test case.
     */

    context.beforeEach = function(name, fn){
      suites[0].beforeEach(name, fn);
    };

    /**
     * Execute after each test case.
     */

    context.afterEach = function(name, fn){
      suites[0].afterEach(name, fn);
    };

    /**
     * Describe a "suite" with the given `title`.
     */

    context.suite = function(title){
      if (suites.length > 1) suites.shift();
      var suite = Suite.create(suites[0], title);
      suite.file = file;
      suites.unshift(suite);
      return suite;
    };

    /**
     * Exclusive test-case.
     */

    context.suite.only = function(title, fn){
      var suite = context.suite(title, fn);
      mocha.grep(suite.fullTitle());
    };

    /**
     * Describe a specification or test-case
     * with the given `title` and callback `fn`
     * acting as a thunk.
     */

    context.test = function(title, fn){
      var test = new Test(title, fn);
      test.file = file;
      suites[0].addTest(test);
      return test;
    };

    /**
     * Exclusive test-case.
     */

    context.test.only = function(title, fn){
      var test = context.test(title, fn);
      var reString = '^' + escapeRe(test.fullTitle()) + '$';
      mocha.grep(new RegExp(reString));
    };

    /**
     * Pending test case.
     */

    context.test.skip = function(title){
      context.test(title);
    };
  });
};

}); // module: interfaces/qunit.js

require.register("interfaces/tdd.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Suite = require('../suite')
  , Test = require('../test')
  , escapeRe = require('browser/escape-string-regexp')
  , utils = require('../utils');

/**
 * TDD-style interface:
 *
 *      suite('Array', function(){
 *        suite('#indexOf()', function(){
 *          suiteSetup(function(){
 *
 *          });
 *
 *          test('should return -1 when not present', function(){
 *
 *          });
 *
 *          test('should return the index when present', function(){
 *
 *          });
 *
 *          suiteTeardown(function(){
 *
 *          });
 *        });
 *      });
 *
 */

module.exports = function(suite){
  var suites = [suite];

  suite.on('pre-require', function(context, file, mocha){

    /**
     * Execute before each test case.
     */

    context.setup = function(name, fn){
      suites[0].beforeEach(name, fn);
    };

    /**
     * Execute after each test case.
     */

    context.teardown = function(name, fn){
      suites[0].afterEach(name, fn);
    };

    /**
     * Execute before the suite.
     */

    context.suiteSetup = function(name, fn){
      suites[0].beforeAll(name, fn);
    };

    /**
     * Execute after the suite.
     */

    context.suiteTeardown = function(name, fn){
      suites[0].afterAll(name, fn);
    };

    /**
     * Describe a "suite" with the given `title`
     * and callback `fn` containing nested suites
     * and/or tests.
     */

    context.suite = function(title, fn){
      var suite = Suite.create(suites[0], title);
      suite.file = file;
      suites.unshift(suite);
      fn.call(suite);
      suites.shift();
      return suite;
    };

    /**
     * Pending suite.
     */
    context.suite.skip = function(title, fn) {
      var suite = Suite.create(suites[0], title);
      suite.pending = true;
      suites.unshift(suite);
      fn.call(suite);
      suites.shift();
    };

    /**
     * Exclusive test-case.
     */

    context.suite.only = function(title, fn){
      var suite = context.suite(title, fn);
      mocha.grep(suite.fullTitle());
    };

    /**
     * Describe a specification or test-case
     * with the given `title` and callback `fn`
     * acting as a thunk.
     */

    context.test = function(title, fn){
      var suite = suites[0];
      if (suite.pending) fn = null;
      var test = new Test(title, fn);
      test.file = file;
      suite.addTest(test);
      return test;
    };

    /**
     * Exclusive test-case.
     */

    context.test.only = function(title, fn){
      var test = context.test(title, fn);
      var reString = '^' + escapeRe(test.fullTitle()) + '$';
      mocha.grep(new RegExp(reString));
    };

    /**
     * Pending test case.
     */

    context.test.skip = function(title){
      context.test(title);
    };
  });
};

}); // module: interfaces/tdd.js

require.register("mocha.js", function(module, exports, require){
/*!
 * mocha
 * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>
 * MIT Licensed
 */

/**
 * Module dependencies.
 */

var path = require('browser/path')
  , escapeRe = require('browser/escape-string-regexp')
  , utils = require('./utils');

/**
 * Expose `Mocha`.
 */

exports = module.exports = Mocha;

/**
 * To require local UIs and reporters when running in node.
 */

if (typeof process !== 'undefined' && typeof process.cwd === 'function') {
  var join = path.join
    , cwd = process.cwd();
  module.paths.push(cwd, join(cwd, 'node_modules'));
}

/**
 * Expose internals.
 */

exports.utils = utils;
exports.interfaces = require('./interfaces');
exports.reporters = require('./reporters');
exports.Runnable = require('./runnable');
exports.Context = require('./context');
exports.Runner = require('./runner');
exports.Suite = require('./suite');
exports.Hook = require('./hook');
exports.Test = require('./test');

/**
 * Return image `name` path.
 *
 * @param {String} name
 * @return {String}
 * @api private
 */

function image(name) {
  return __dirname + '/../images/' + name + '.png';
}

/**
 * Setup mocha with `options`.
 *
 * Options:
 *
 *   - `ui` name "bdd", "tdd", "exports" etc
 *   - `reporter` reporter instance, defaults to `mocha.reporters.spec`
 *   - `globals` array of accepted globals
 *   - `timeout` timeout in milliseconds
 *   - `bail` bail on the first test failure
 *   - `slow` milliseconds to wait before considering a test slow
 *   - `ignoreLeaks` ignore global leaks
 *   - `grep` string or regexp to filter tests with
 *
 * @param {Object} options
 * @api public
 */

function Mocha(options) {
  options = options || {};
  this.files = [];
  this.options = options;
  this.grep(options.grep);
  this.suite = new exports.Suite('', new exports.Context);
  this.ui(options.ui);
  this.bail(options.bail);
  this.reporter(options.reporter, options.reporterOptions);
  if (null != options.timeout) this.timeout(options.timeout);
  this.useColors(options.useColors)
  if (options.enableTimeouts !== null) this.enableTimeouts(options.enableTimeouts);
  if (options.slow) this.slow(options.slow);

  this.suite.on('pre-require', function (context) {
    exports.afterEach = context.afterEach || context.teardown;
    exports.after = context.after || context.suiteTeardown;
    exports.beforeEach = context.beforeEach || context.setup;
    exports.before = context.before || context.suiteSetup;
    exports.describe = context.describe || context.suite;
    exports.it = context.it || context.test;
    exports.setup = context.setup || context.beforeEach;
    exports.suiteSetup = context.suiteSetup || context.before;
    exports.suiteTeardown = context.suiteTeardown || context.after;
    exports.suite = context.suite || context.describe;
    exports.teardown = context.teardown || context.afterEach;
    exports.test = context.test || context.it;
  });
}

/**
 * Enable or disable bailing on the first failure.
 *
 * @param {Boolean} [bail]
 * @api public
 */

Mocha.prototype.bail = function(bail){
  if (0 == arguments.length) bail = true;
  this.suite.bail(bail);
  return this;
};

/**
 * Add test `file`.
 *
 * @param {String} file
 * @api public
 */

Mocha.prototype.addFile = function(file){
  this.files.push(file);
  return this;
};

/**
 * Set reporter to `reporter`, defaults to "spec".
 *
 * @param {String|Function} reporter name or constructor
 * @param {Object} reporterOptions optional options
 * @api public
 */
Mocha.prototype.reporter = function(reporter, reporterOptions){
  if ('function' == typeof reporter) {
    this._reporter = reporter;
  } else {
    reporter = reporter || 'spec';
    var _reporter;
    try { _reporter = require('./reporters/' + reporter); } catch (err) {};
    if (!_reporter) try { _reporter = require(reporter); } catch (err) {};
    if (!_reporter && reporter === 'teamcity')
      console.warn('The Teamcity reporter was moved to a package named ' +
        'mocha-teamcity-reporter ' +
        '(https://npmjs.org/package/mocha-teamcity-reporter).');
    if (!_reporter) throw new Error('invalid reporter "' + reporter + '"');
    this._reporter = _reporter;
  }
  this.options.reporterOptions = reporterOptions;
  return this;
};

/**
 * Set test UI `name`, defaults to "bdd".
 *
 * @param {String} bdd
 * @api public
 */

Mocha.prototype.ui = function(name){
  name = name || 'bdd';
  this._ui = exports.interfaces[name];
  if (!this._ui) try { this._ui = require(name); } catch (err) {};
  if (!this._ui) throw new Error('invalid interface "' + name + '"');
  this._ui = this._ui(this.suite);
  return this;
};

/**
 * Load registered files.
 *
 * @api private
 */

Mocha.prototype.loadFiles = function(fn){
  var self = this;
  var suite = this.suite;
  var pending = this.files.length;
  this.files.forEach(function(file){
    file = path.resolve(file);
    suite.emit('pre-require', global, file, self);
    suite.emit('require', require(file), file, self);
    suite.emit('post-require', global, file, self);
    --pending || (fn && fn());
  });
};

/**
 * Enable growl support.
 *
 * @api private
 */

Mocha.prototype._growl = function(runner, reporter) {
  var notify = require('growl');

  runner.on('end', function(){
    var stats = reporter.stats;
    if (stats.failures) {
      var msg = stats.failures + ' of ' + runner.total + ' tests failed';
      notify(msg, { name: 'mocha', title: 'Failed', image: image('error') });
    } else {
      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {
          name: 'mocha'
        , title: 'Passed'
        , image: image('ok')
      });
    }
  });
};

/**
 * Add regexp to grep, if `re` is a string it is escaped.
 *
 * @param {RegExp|String} re
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.grep = function(re){
  this.options.grep = 'string' == typeof re
    ? new RegExp(escapeRe(re))
    : re;
  return this;
};

/**
 * Invert `.grep()` matches.
 *
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.invert = function(){
  this.options.invert = true;
  return this;
};

/**
 * Ignore global leaks.
 *
 * @param {Boolean} ignore
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.ignoreLeaks = function(ignore){
  this.options.ignoreLeaks = !!ignore;
  return this;
};

/**
 * Enable global leak checking.
 *
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.checkLeaks = function(){
  this.options.ignoreLeaks = false;
  return this;
};

/**
 * Enable growl support.
 *
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.growl = function(){
  this.options.growl = true;
  return this;
};

/**
 * Ignore `globals` array or string.
 *
 * @param {Array|String} globals
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.globals = function(globals){
  this.options.globals = (this.options.globals || []).concat(globals);
  return this;
};

/**
 * Emit color output.
 *
 * @param {Boolean} colors
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.useColors = function(colors){
  if (colors !== undefined) {
    this.options.useColors = colors;
  }
  return this;
};

/**
 * Use inline diffs rather than +/-.
 *
 * @param {Boolean} inlineDiffs
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.useInlineDiffs = function(inlineDiffs) {
  this.options.useInlineDiffs = arguments.length && inlineDiffs != undefined
  ? inlineDiffs
  : false;
  return this;
};

/**
 * Set the timeout in milliseconds.
 *
 * @param {Number} timeout
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.timeout = function(timeout){
  this.suite.timeout(timeout);
  return this;
};

/**
 * Set slowness threshold in milliseconds.
 *
 * @param {Number} slow
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.slow = function(slow){
  this.suite.slow(slow);
  return this;
};

/**
 * Enable timeouts.
 *
 * @param {Boolean} enabled
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.enableTimeouts = function(enabled) {
  this.suite.enableTimeouts(arguments.length && enabled !== undefined
    ? enabled
    : true);
  return this
};

/**
 * Makes all tests async (accepting a callback)
 *
 * @return {Mocha}
 * @api public
 */

Mocha.prototype.asyncOnly = function(){
  this.options.asyncOnly = true;
  return this;
};

/**
 * Disable syntax highlighting (in browser).
 * @returns {Mocha}
 * @api public
 */
Mocha.prototype.noHighlighting = function() {
  this.options.noHighlighting = true;
  return this;
};

/**
 * Run tests and invoke `fn()` when complete.
 *
 * @param {Function} fn
 * @return {Runner}
 * @api public
 */

Mocha.prototype.run = function(fn){
  if (this.files.length) this.loadFiles();
  var suite = this.suite;
  var options = this.options;
  options.files = this.files;
  var runner = new exports.Runner(suite);
  var reporter = new this._reporter(runner, options);
  runner.ignoreLeaks = false !== options.ignoreLeaks;
  runner.asyncOnly = options.asyncOnly;
  if (options.grep) runner.grep(options.grep, options.invert);
  if (options.globals) runner.globals(options.globals);
  if (options.growl) this._growl(runner, reporter);
  if (options.useColors !== undefined) {
    exports.reporters.Base.useColors = options.useColors;
  }
  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;

  function done(failures) {
      if (reporter.done) {
          reporter.done(failures, fn);
      } else {
          fn(failures);
      }
  }

  return runner.run(done);
};

}); // module: mocha.js

require.register("ms.js", function(module, exports, require){
/**
 * Helpers.
 */

var s = 1000;
var m = s * 60;
var h = m * 60;
var d = h * 24;
var y = d * 365.25;

/**
 * Parse or format the given `val`.
 *
 * Options:
 *
 *  - `long` verbose formatting [false]
 *
 * @param {String|Number} val
 * @param {Object} options
 * @return {String|Number}
 * @api public
 */

module.exports = function(val, options){
  options = options || {};
  if ('string' == typeof val) return parse(val);
  return options['long'] ? longFormat(val) : shortFormat(val);
};

/**
 * Parse the given `str` and return milliseconds.
 *
 * @param {String} str
 * @return {Number}
 * @api private
 */

function parse(str) {
  var match = /^((?:\d+)?\.?\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);
  if (!match) return;
  var n = parseFloat(match[1]);
  var type = (match[2] || 'ms').toLowerCase();
  switch (type) {
    case 'years':
    case 'year':
    case 'y':
      return n * y;
    case 'days':
    case 'day':
    case 'd':
      return n * d;
    case 'hours':
    case 'hour':
    case 'h':
      return n * h;
    case 'minutes':
    case 'minute':
    case 'm':
      return n * m;
    case 'seconds':
    case 'second':
    case 's':
      return n * s;
    case 'ms':
      return n;
  }
}

/**
 * Short format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function shortFormat(ms) {
  if (ms >= d) return Math.round(ms / d) + 'd';
  if (ms >= h) return Math.round(ms / h) + 'h';
  if (ms >= m) return Math.round(ms / m) + 'm';
  if (ms >= s) return Math.round(ms / s) + 's';
  return ms + 'ms';
}

/**
 * Long format for `ms`.
 *
 * @param {Number} ms
 * @return {String}
 * @api private
 */

function longFormat(ms) {
  return plural(ms, d, 'day')
    || plural(ms, h, 'hour')
    || plural(ms, m, 'minute')
    || plural(ms, s, 'second')
    || ms + ' ms';
}

/**
 * Pluralization helper.
 */

function plural(ms, n, name) {
  if (ms < n) return;
  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;
  return Math.ceil(ms / n) + ' ' + name + 's';
}

}); // module: ms.js

require.register("reporters/base.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var tty = require('browser/tty')
  , diff = require('browser/diff')
  , ms = require('../ms')
  , utils = require('../utils');

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date
  , setTimeout = global.setTimeout
  , setInterval = global.setInterval
  , clearTimeout = global.clearTimeout
  , clearInterval = global.clearInterval;

/**
 * Check if both stdio streams are associated with a tty.
 */

var isatty = tty.isatty(1) && tty.isatty(2);

/**
 * Expose `Base`.
 */

exports = module.exports = Base;

/**
 * Enable coloring by default.
 */

exports.useColors = isatty || (process.env.MOCHA_COLORS !== undefined);

/**
 * Inline diffs instead of +/-
 */

exports.inlineDiffs = false;

/**
 * Default color map.
 */

exports.colors = {
    'pass': 90
  , 'fail': 31
  , 'bright pass': 92
  , 'bright fail': 91
  , 'bright yellow': 93
  , 'pending': 36
  , 'suite': 0
  , 'error title': 0
  , 'error message': 31
  , 'error stack': 90
  , 'checkmark': 32
  , 'fast': 90
  , 'medium': 33
  , 'slow': 31
  , 'green': 32
  , 'light': 90
  , 'diff gutter': 90
  , 'diff added': 42
  , 'diff removed': 41
};

/**
 * Default symbol map.
 */

exports.symbols = {
  ok: '✓',
  err: '✖',
  dot: '․'
};

// With node.js on Windows: use symbols available in terminal default fonts
if ('win32' == process.platform) {
  exports.symbols.ok = '\u221A';
  exports.symbols.err = '\u00D7';
  exports.symbols.dot = '.';
}

/**
 * Color `str` with the given `type`,
 * allowing colors to be disabled,
 * as well as user-defined color
 * schemes.
 *
 * @param {String} type
 * @param {String} str
 * @return {String}
 * @api private
 */

var color = exports.color = function(type, str) {
  if (!exports.useColors) return String(str);
  return '\u001b[' + exports.colors[type] + 'm' + str + '\u001b[0m';
};

/**
 * Expose term window size, with some
 * defaults for when stderr is not a tty.
 */

exports.window = {
  width: isatty
    ? process.stdout.getWindowSize
      ? process.stdout.getWindowSize(1)[0]
      : tty.getWindowSize()[1]
    : 75
};

/**
 * Expose some basic cursor interactions
 * that are common among reporters.
 */

exports.cursor = {
  hide: function(){
    isatty && process.stdout.write('\u001b[?25l');
  },

  show: function(){
    isatty && process.stdout.write('\u001b[?25h');
  },

  deleteLine: function(){
    isatty && process.stdout.write('\u001b[2K');
  },

  beginningOfLine: function(){
    isatty && process.stdout.write('\u001b[0G');
  },

  CR: function(){
    if (isatty) {
      exports.cursor.deleteLine();
      exports.cursor.beginningOfLine();
    } else {
      process.stdout.write('\r');
    }
  }
};

/**
 * Outut the given `failures` as a list.
 *
 * @param {Array} failures
 * @api public
 */

exports.list = function(failures){
  console.log();
  failures.forEach(function(test, i){
    // format
    var fmt = color('error title', '  %s) %s:\n')
      + color('error message', '     %s')
      + color('error stack', '\n%s\n');

    // msg
    var err = test.err
      , message = err.message || ''
      , stack = err.stack || message
      , index = stack.indexOf(message) + message.length
      , msg = stack.slice(0, index)
      , actual = err.actual
      , expected = err.expected
      , escape = true;

    // uncaught
    if (err.uncaught) {
      msg = 'Uncaught ' + msg;
    }

    // explicitly show diff
    if (err.showDiff && sameType(actual, expected)) {

      if ('string' !== typeof actual) {
        escape = false;
        err.actual = actual = utils.stringify(actual);
        err.expected = expected = utils.stringify(expected);
      }

      fmt = color('error title', '  %s) %s:\n%s') + color('error stack', '\n%s\n');
      var match = message.match(/^([^:]+): expected/);
      msg = '\n      ' + color('error message', match ? match[1] : msg);

      if (exports.inlineDiffs) {
        msg += inlineDiff(err, escape);
      } else {
        msg += unifiedDiff(err, escape);
      }
    }

    // indent stack trace without msg
    stack = stack.slice(index ? index + 1 : index)
      .replace(/^/gm, '  ');

    console.log(fmt, (i + 1), test.fullTitle(), msg, stack);
  });
};

/**
 * Initialize a new `Base` reporter.
 *
 * All other reporters generally
 * inherit from this reporter, providing
 * stats such as test duration, number
 * of tests passed / failed etc.
 *
 * @param {Runner} runner
 * @api public
 */

function Base(runner) {
  var self = this
    , stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 }
    , failures = this.failures = [];

  if (!runner) return;
  this.runner = runner;

  runner.stats = stats;

  runner.on('start', function(){
    stats.start = new Date;
  });

  runner.on('suite', function(suite){
    stats.suites = stats.suites || 0;
    suite.root || stats.suites++;
  });

  runner.on('test end', function(test){
    stats.tests = stats.tests || 0;
    stats.tests++;
  });

  runner.on('pass', function(test){
    stats.passes = stats.passes || 0;

    var medium = test.slow() / 2;
    test.speed = test.duration > test.slow()
      ? 'slow'
      : test.duration > medium
        ? 'medium'
        : 'fast';

    stats.passes++;
  });

  runner.on('fail', function(test, err){
    stats.failures = stats.failures || 0;
    stats.failures++;
    test.err = err;
    failures.push(test);
  });

  runner.on('end', function(){
    stats.end = new Date;
    stats.duration = new Date - stats.start;
  });

  runner.on('pending', function(){
    stats.pending++;
  });
}

/**
 * Output common epilogue used by many of
 * the bundled reporters.
 *
 * @api public
 */

Base.prototype.epilogue = function(){
  var stats = this.stats;
  var tests;
  var fmt;

  console.log();

  // passes
  fmt = color('bright pass', ' ')
    + color('green', ' %d passing')
    + color('light', ' (%s)');

  console.log(fmt,
    stats.passes || 0,
    ms(stats.duration));

  // pending
  if (stats.pending) {
    fmt = color('pending', ' ')
      + color('pending', ' %d pending');

    console.log(fmt, stats.pending);
  }

  // failures
  if (stats.failures) {
    fmt = color('fail', '  %d failing');

    console.log(fmt, stats.failures);

    Base.list(this.failures);
    console.log();
  }

  console.log();
};

/**
 * Pad the given `str` to `len`.
 *
 * @param {String} str
 * @param {String} len
 * @return {String}
 * @api private
 */

function pad(str, len) {
  str = String(str);
  return Array(len - str.length + 1).join(' ') + str;
}


/**
 * Returns an inline diff between 2 strings with coloured ANSI output
 *
 * @param {Error} Error with actual/expected
 * @return {String} Diff
 * @api private
 */

function inlineDiff(err, escape) {
  var msg = errorDiff(err, 'WordsWithSpace', escape);

  // linenos
  var lines = msg.split('\n');
  if (lines.length > 4) {
    var width = String(lines.length).length;
    msg = lines.map(function(str, i){
      return pad(++i, width) + ' |' + ' ' + str;
    }).join('\n');
  }

  // legend
  msg = '\n'
    + color('diff removed', 'actual')
    + ' '
    + color('diff added', 'expected')
    + '\n\n'
    + msg
    + '\n';

  // indent
  msg = msg.replace(/^/gm, '      ');
  return msg;
}

/**
 * Returns a unified diff between 2 strings
 *
 * @param {Error} Error with actual/expected
 * @return {String} Diff
 * @api private
 */

function unifiedDiff(err, escape) {
  var indent = '      ';
  function cleanUp(line) {
    if (escape) {
      line = escapeInvisibles(line);
    }
    if (line[0] === '+') return indent + colorLines('diff added', line);
    if (line[0] === '-') return indent + colorLines('diff removed', line);
    if (line.match(/\@\@/)) return null;
    if (line.match(/\\ No newline/)) return null;
    else return indent + line;
  }
  function notBlank(line) {
    return line != null;
  }
  msg = diff.createPatch('string', err.actual, err.expected);
  var lines = msg.split('\n').splice(4);
  return '\n      '
         + colorLines('diff added',   '+ expected') + ' '
         + colorLines('diff removed', '- actual')
         + '\n\n'
         + lines.map(cleanUp).filter(notBlank).join('\n');
}

/**
 * Return a character diff for `err`.
 *
 * @param {Error} err
 * @return {String}
 * @api private
 */

function errorDiff(err, type, escape) {
  var actual   = escape ? escapeInvisibles(err.actual)   : err.actual;
  var expected = escape ? escapeInvisibles(err.expected) : err.expected;
  return diff['diff' + type](actual, expected).map(function(str){
    if (str.added) return colorLines('diff added', str.value);
    if (str.removed) return colorLines('diff removed', str.value);
    return str.value;
  }).join('');
}

/**
 * Returns a string with all invisible characters in plain text
 *
 * @param {String} line
 * @return {String}
 * @api private
 */
function escapeInvisibles(line) {
    return line.replace(/\t/g, '<tab>')
               .replace(/\r/g, '<CR>')
               .replace(/\n/g, '<LF>\n');
}

/**
 * Color lines for `str`, using the color `name`.
 *
 * @param {String} name
 * @param {String} str
 * @return {String}
 * @api private
 */

function colorLines(name, str) {
  return str.split('\n').map(function(str){
    return color(name, str);
  }).join('\n');
}

/**
 * Check that a / b have the same type.
 *
 * @param {Object} a
 * @param {Object} b
 * @return {Boolean}
 * @api private
 */

function sameType(a, b) {
  a = Object.prototype.toString.call(a);
  b = Object.prototype.toString.call(b);
  return a == b;
}

}); // module: reporters/base.js

require.register("reporters/doc.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , utils = require('../utils');

/**
 * Expose `Doc`.
 */

exports = module.exports = Doc;

/**
 * Initialize a new `Doc` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function Doc(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , total = runner.total
    , indents = 2;

  function indent() {
    return Array(indents).join('  ');
  }

  runner.on('suite', function(suite){
    if (suite.root) return;
    ++indents;
    console.log('%s<section class="suite">', indent());
    ++indents;
    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));
    console.log('%s<dl>', indent());
  });

  runner.on('suite end', function(suite){
    if (suite.root) return;
    console.log('%s</dl>', indent());
    --indents;
    console.log('%s</section>', indent());
    --indents;
  });

  runner.on('pass', function(test){
    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));
    var code = utils.escape(utils.clean(test.fn.toString()));
    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);
  });

  runner.on('fail', function(test, err){
    console.log('%s  <dt class="error">%s</dt>', indent(), utils.escape(test.title));
    var code = utils.escape(utils.clean(test.fn.toString()));
    console.log('%s  <dd class="error"><pre><code>%s</code></pre></dd>', indent(), code);
    console.log('%s  <dd class="error">%s</dd>', indent(), utils.escape(err));
  });
}

}); // module: reporters/doc.js

require.register("reporters/dot.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , color = Base.color;

/**
 * Expose `Dot`.
 */

exports = module.exports = Dot;

/**
 * Initialize a new `Dot` matrix test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function Dot(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , width = Base.window.width * .75 | 0
    , n = -1;

  runner.on('start', function(){
    process.stdout.write('\n  ');
  });

  runner.on('pending', function(test){
    if (++n % width == 0) process.stdout.write('\n  ');
    process.stdout.write(color('pending', Base.symbols.dot));
  });

  runner.on('pass', function(test){
    if (++n % width == 0) process.stdout.write('\n  ');
    if ('slow' == test.speed) {
      process.stdout.write(color('bright yellow', Base.symbols.dot));
    } else {
      process.stdout.write(color(test.speed, Base.symbols.dot));
    }
  });

  runner.on('fail', function(test, err){
    if (++n % width == 0) process.stdout.write('\n  ');
    process.stdout.write(color('fail', Base.symbols.dot));
  });

  runner.on('end', function(){
    console.log();
    self.epilogue();
  });
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
Dot.prototype = new F;
Dot.prototype.constructor = Dot;


}); // module: reporters/dot.js

require.register("reporters/html-cov.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var JSONCov = require('./json-cov')
  , fs = require('browser/fs');

/**
 * Expose `HTMLCov`.
 */

exports = module.exports = HTMLCov;

/**
 * Initialize a new `JsCoverage` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function HTMLCov(runner) {
  var jade = require('jade')
    , file = __dirname + '/templates/coverage.jade'
    , str = fs.readFileSync(file, 'utf8')
    , fn = jade.compile(str, { filename: file })
    , self = this;

  JSONCov.call(this, runner, false);

  runner.on('end', function(){
    process.stdout.write(fn({
        cov: self.cov
      , coverageClass: coverageClass
    }));
  });
}

/**
 * Return coverage class for `n`.
 *
 * @return {String}
 * @api private
 */

function coverageClass(n) {
  if (n >= 75) return 'high';
  if (n >= 50) return 'medium';
  if (n >= 25) return 'low';
  return 'terrible';
}

}); // module: reporters/html-cov.js

require.register("reporters/html.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , utils = require('../utils')
  , Progress = require('../browser/progress')
  , escape = utils.escape;

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date
  , setTimeout = global.setTimeout
  , setInterval = global.setInterval
  , clearTimeout = global.clearTimeout
  , clearInterval = global.clearInterval;

/**
 * Expose `HTML`.
 */

exports = module.exports = HTML;

/**
 * Stats template.
 */

var statsTemplate = '<ul id="mocha-stats">'
  + '<li class="progress"><canvas width="40" height="40"></canvas></li>'
  + '<li class="passes"><a href="#">passes:</a> <em>0</em></li>'
  + '<li class="failures"><a href="#">failures:</a> <em>0</em></li>'
  + '<li class="duration">duration: <em>0</em>s</li>'
  + '</ul>';

/**
 * Initialize a new `HTML` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function HTML(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , total = runner.total
    , stat = fragment(statsTemplate)
    , items = stat.getElementsByTagName('li')
    , passes = items[1].getElementsByTagName('em')[0]
    , passesLink = items[1].getElementsByTagName('a')[0]
    , failures = items[2].getElementsByTagName('em')[0]
    , failuresLink = items[2].getElementsByTagName('a')[0]
    , duration = items[3].getElementsByTagName('em')[0]
    , canvas = stat.getElementsByTagName('canvas')[0]
    , report = fragment('<ul id="mocha-report"></ul>')
    , stack = [report]
    , progress
    , ctx
    , root = document.getElementById('mocha');

  if (canvas.getContext) {
    var ratio = window.devicePixelRatio || 1;
    canvas.style.width = canvas.width;
    canvas.style.height = canvas.height;
    canvas.width *= ratio;
    canvas.height *= ratio;
    ctx = canvas.getContext('2d');
    ctx.scale(ratio, ratio);
    progress = new Progress;
  }

  if (!root) return error('#mocha div missing, add it to your document');

  // pass toggle
  on(passesLink, 'click', function(){
    unhide();
    var name = /pass/.test(report.className) ? '' : ' pass';
    report.className = report.className.replace(/fail|pass/g, '') + name;
    if (report.className.trim()) hideSuitesWithout('test pass');
  });

  // failure toggle
  on(failuresLink, 'click', function(){
    unhide();
    var name = /fail/.test(report.className) ? '' : ' fail';
    report.className = report.className.replace(/fail|pass/g, '') + name;
    if (report.className.trim()) hideSuitesWithout('test fail');
  });

  root.appendChild(stat);
  root.appendChild(report);

  if (progress) progress.size(40);

  runner.on('suite', function(suite){
    if (suite.root) return;

    // suite
    var url = self.suiteURL(suite);
    var el = fragment('<li class="suite"><h1><a href="%s">%s</a></h1></li>', url, escape(suite.title));

    // container
    stack[0].appendChild(el);
    stack.unshift(document.createElement('ul'));
    el.appendChild(stack[0]);
  });

  runner.on('suite end', function(suite){
    if (suite.root) return;
    stack.shift();
  });

  runner.on('fail', function(test, err){
    if ('hook' == test.type) runner.emit('test end', test);
  });

  runner.on('test end', function(test){
    // TODO: add to stats
    var percent = stats.tests / this.total * 100 | 0;
    if (progress) progress.update(percent).draw(ctx);

    // update stats
    var ms = new Date - stats.start;
    text(passes, stats.passes);
    text(failures, stats.failures);
    text(duration, (ms / 1000).toFixed(2));

    // test
    if ('passed' == test.state) {
      var url = self.testURL(test);
      var el = fragment('<li class="test pass %e"><h2>%e<span class="duration">%ems</span> <a href="%s" class="replay">‣</a></h2></li>', test.speed, test.title, test.duration, url);
    } else if (test.pending) {
      var el = fragment('<li class="test pass pending"><h2>%e</h2></li>', test.title);
    } else {
      var el = fragment('<li class="test fail"><h2>%e <a href="%e" class="replay">‣</a></h2></li>', test.title, self.testURL(test));
      var str = test.err.stack || test.err.toString();

      // FF / Opera do not add the message
      if (!~str.indexOf(test.err.message)) {
        str = test.err.message + '\n' + str;
      }

      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we
      // check for the result of the stringifying.
      if ('[object Error]' == str) str = test.err.message;

      // Safari doesn't give you a stack. Let's at least provide a source line.
      if (!test.err.stack && test.err.sourceURL && test.err.line !== undefined) {
        str += "\n(" + test.err.sourceURL + ":" + test.err.line + ")";
      }

      el.appendChild(fragment('<pre class="error">%e</pre>', str));
    }

    // toggle code
    // TODO: defer
    if (!test.pending) {
      var h2 = el.getElementsByTagName('h2')[0];

      on(h2, 'click', function(){
        pre.style.display = 'none' == pre.style.display
          ? 'block'
          : 'none';
      });

      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.fn.toString()));
      el.appendChild(pre);
      pre.style.display = 'none';
    }

    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.
    if (stack[0]) stack[0].appendChild(el);
  });
}

/**
 * Makes a URL, preserving querystring ("search") parameters.
 * @param {string} s
 * @returns {string} your new URL
 */
var makeUrl = function makeUrl(s) {
  var search = window.location.search;
  return window.location.pathname + (search ? search + '&' : '?' ) + 'grep=' + encodeURIComponent(s);
};

/**
 * Provide suite URL
 *
 * @param {Object} [suite]
 */
HTML.prototype.suiteURL = function(suite){
  return makeUrl(suite.fullTitle());
};

/**
 * Provide test URL
 *
 * @param {Object} [test]
 */

HTML.prototype.testURL = function(test){
  return makeUrl(test.fullTitle());
};

/**
 * Display error `msg`.
 */

function error(msg) {
  document.body.appendChild(fragment('<div id="mocha-error">%s</div>', msg));
}

/**
 * Return a DOM fragment from `html`.
 */

function fragment(html) {
  var args = arguments
    , div = document.createElement('div')
    , i = 1;

  div.innerHTML = html.replace(/%([se])/g, function(_, type){
    switch (type) {
      case 's': return String(args[i++]);
      case 'e': return escape(args[i++]);
    }
  });

  return div.firstChild;
}

/**
 * Check for suites that do not have elements
 * with `classname`, and hide them.
 */

function hideSuitesWithout(classname) {
  var suites = document.getElementsByClassName('suite');
  for (var i = 0; i < suites.length; i++) {
    var els = suites[i].getElementsByClassName(classname);
    if (0 == els.length) suites[i].className += ' hidden';
  }
}

/**
 * Unhide .hidden suites.
 */

function unhide() {
  var els = document.getElementsByClassName('suite hidden');
  for (var i = 0; i < els.length; ++i) {
    els[i].className = els[i].className.replace('suite hidden', 'suite');
  }
}

/**
 * Set `el` text to `str`.
 */

function text(el, str) {
  if (el.textContent) {
    el.textContent = str;
  } else {
    el.innerText = str;
  }
}

/**
 * Listen on `event` with callback `fn`.
 */

function on(el, event, fn) {
  if (el.addEventListener) {
    el.addEventListener(event, fn, false);
  } else {
    el.attachEvent('on' + event, fn);
  }
}

}); // module: reporters/html.js

require.register("reporters/index.js", function(module, exports, require){
exports.Base = require('./base');
exports.Dot = require('./dot');
exports.Doc = require('./doc');
exports.TAP = require('./tap');
exports.JSON = require('./json');
exports.HTML = require('./html');
exports.List = require('./list');
exports.Min = require('./min');
exports.Spec = require('./spec');
exports.Nyan = require('./nyan');
exports.XUnit = require('./xunit');
exports.Markdown = require('./markdown');
exports.Progress = require('./progress');
exports.Landing = require('./landing');
exports.JSONCov = require('./json-cov');
exports.HTMLCov = require('./html-cov');
exports.JSONStream = require('./json-stream');

}); // module: reporters/index.js

require.register("reporters/json-cov.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base');

/**
 * Expose `JSONCov`.
 */

exports = module.exports = JSONCov;

/**
 * Initialize a new `JsCoverage` reporter.
 *
 * @param {Runner} runner
 * @param {Boolean} output
 * @api public
 */

function JSONCov(runner, output) {
  var self = this
    , output = 1 == arguments.length ? true : output;

  Base.call(this, runner);

  var tests = []
    , failures = []
    , passes = [];

  runner.on('test end', function(test){
    tests.push(test);
  });

  runner.on('pass', function(test){
    passes.push(test);
  });

  runner.on('fail', function(test){
    failures.push(test);
  });

  runner.on('end', function(){
    var cov = global._$jscoverage || {};
    var result = self.cov = map(cov);
    result.stats = self.stats;
    result.tests = tests.map(clean);
    result.failures = failures.map(clean);
    result.passes = passes.map(clean);
    if (!output) return;
    process.stdout.write(JSON.stringify(result, null, 2 ));
  });
}

/**
 * Map jscoverage data to a JSON structure
 * suitable for reporting.
 *
 * @param {Object} cov
 * @return {Object}
 * @api private
 */

function map(cov) {
  var ret = {
      instrumentation: 'node-jscoverage'
    , sloc: 0
    , hits: 0
    , misses: 0
    , coverage: 0
    , files: []
  };

  for (var filename in cov) {
    var data = coverage(filename, cov[filename]);
    ret.files.push(data);
    ret.hits += data.hits;
    ret.misses += data.misses;
    ret.sloc += data.sloc;
  }

  ret.files.sort(function(a, b) {
    return a.filename.localeCompare(b.filename);
  });

  if (ret.sloc > 0) {
    ret.coverage = (ret.hits / ret.sloc) * 100;
  }

  return ret;
}

/**
 * Map jscoverage data for a single source file
 * to a JSON structure suitable for reporting.
 *
 * @param {String} filename name of the source file
 * @param {Object} data jscoverage coverage data
 * @return {Object}
 * @api private
 */

function coverage(filename, data) {
  var ret = {
    filename: filename,
    coverage: 0,
    hits: 0,
    misses: 0,
    sloc: 0,
    source: {}
  };

  data.source.forEach(function(line, num){
    num++;

    if (data[num] === 0) {
      ret.misses++;
      ret.sloc++;
    } else if (data[num] !== undefined) {
      ret.hits++;
      ret.sloc++;
    }

    ret.source[num] = {
        source: line
      , coverage: data[num] === undefined
        ? ''
        : data[num]
    };
  });

  ret.coverage = ret.hits / ret.sloc * 100;

  return ret;
}

/**
 * Return a plain-object representation of `test`
 * free of cyclic properties etc.
 *
 * @param {Object} test
 * @return {Object}
 * @api private
 */

function clean(test) {
  return {
      title: test.title
    , fullTitle: test.fullTitle()
    , duration: test.duration
  }
}

}); // module: reporters/json-cov.js

require.register("reporters/json-stream.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , color = Base.color;

/**
 * Expose `List`.
 */

exports = module.exports = List;

/**
 * Initialize a new `List` test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function List(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , total = runner.total;

  runner.on('start', function(){
    console.log(JSON.stringify(['start', { total: total }]));
  });

  runner.on('pass', function(test){
    console.log(JSON.stringify(['pass', clean(test)]));
  });

  runner.on('fail', function(test, err){
    test = clean(test);
    test.err = err.message;
    console.log(JSON.stringify(['fail', test]));
  });

  runner.on('end', function(){
    process.stdout.write(JSON.stringify(['end', self.stats]));
  });
}

/**
 * Return a plain-object representation of `test`
 * free of cyclic properties etc.
 *
 * @param {Object} test
 * @return {Object}
 * @api private
 */

function clean(test) {
  return {
      title: test.title
    , fullTitle: test.fullTitle()
    , duration: test.duration
  }
}

}); // module: reporters/json-stream.js

require.register("reporters/json.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `JSON`.
 */

exports = module.exports = JSONReporter;

/**
 * Initialize a new `JSON` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function JSONReporter(runner) {
  var self = this;
  Base.call(this, runner);

  var tests = []
    , pending = []
    , failures = []
    , passes = [];

  runner.on('test end', function(test){
    tests.push(test);
  });

  runner.on('pass', function(test){
    passes.push(test);
  });

  runner.on('fail', function(test){
    failures.push(test);
  });

  runner.on('pending', function(test){
    pending.push(test);
  });

  runner.on('end', function(){
    var obj = {
      stats: self.stats,
      tests: tests.map(clean),
      pending: pending.map(clean),
      failures: failures.map(clean),
      passes: passes.map(clean)
    };

    runner.testResults = obj;

    process.stdout.write(JSON.stringify(obj, null, 2));
  });
}

/**
 * Return a plain-object representation of `test`
 * free of cyclic properties etc.
 *
 * @param {Object} test
 * @return {Object}
 * @api private
 */

function clean(test) {
  return {
    title: test.title,
    fullTitle: test.fullTitle(),
    duration: test.duration,
    err: errorJSON(test.err || {})
  }
}

/**
 * Transform `error` into a JSON object.
 * @param {Error} err
 * @return {Object}
 */

function errorJSON(err) {
  var res = {};
  Object.getOwnPropertyNames(err).forEach(function(key) {
    res[key] = err[key];
  }, err);
  return res;
}

}); // module: reporters/json.js

require.register("reporters/landing.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `Landing`.
 */

exports = module.exports = Landing;

/**
 * Airplane color.
 */

Base.colors.plane = 0;

/**
 * Airplane crash color.
 */

Base.colors['plane crash'] = 31;

/**
 * Runway color.
 */

Base.colors.runway = 90;

/**
 * Initialize a new `Landing` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function Landing(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , width = Base.window.width * .75 | 0
    , total = runner.total
    , stream = process.stdout
    , plane = color('plane', '✈')
    , crashed = -1
    , n = 0;

  function runway() {
    var buf = Array(width).join('-');
    return '  ' + color('runway', buf);
  }

  runner.on('start', function(){
    stream.write('\n\n\n  ');
    cursor.hide();
  });

  runner.on('test end', function(test){
    // check if the plane crashed
    var col = -1 == crashed
      ? width * ++n / total | 0
      : crashed;

    // show the crash
    if ('failed' == test.state) {
      plane = color('plane crash', '✈');
      crashed = col;
    }

    // render landing strip
    stream.write('\u001b['+(width+1)+'D\u001b[2A');
    stream.write(runway());
    stream.write('\n  ');
    stream.write(color('runway', Array(col).join('⋅')));
    stream.write(plane)
    stream.write(color('runway', Array(width - col).join('⋅') + '\n'));
    stream.write(runway());
    stream.write('\u001b[0m');
  });

  runner.on('end', function(){
    cursor.show();
    console.log();
    self.epilogue();
  });
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
Landing.prototype = new F;
Landing.prototype.constructor = Landing;


}); // module: reporters/landing.js

require.register("reporters/list.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `List`.
 */

exports = module.exports = List;

/**
 * Initialize a new `List` test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function List(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , n = 0;

  runner.on('start', function(){
    console.log();
  });

  runner.on('test', function(test){
    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));
  });

  runner.on('pending', function(test){
    var fmt = color('checkmark', '  -')
      + color('pending', ' %s');
    console.log(fmt, test.fullTitle());
  });

  runner.on('pass', function(test){
    var fmt = color('checkmark', '  '+Base.symbols.dot)
      + color('pass', ' %s: ')
      + color(test.speed, '%dms');
    cursor.CR();
    console.log(fmt, test.fullTitle(), test.duration);
  });

  runner.on('fail', function(test, err){
    cursor.CR();
    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());
  });

  runner.on('end', self.epilogue.bind(self));
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
List.prototype = new F;
List.prototype.constructor = List;


}); // module: reporters/list.js

require.register("reporters/markdown.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , utils = require('../utils');

/**
 * Constants
 */

var SUITE_PREFIX = '$';

/**
 * Expose `Markdown`.
 */

exports = module.exports = Markdown;

/**
 * Initialize a new `Markdown` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function Markdown(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , level = 0
    , buf = '';

  function title(str) {
    return Array(level).join('#') + ' ' + str;
  }

  function indent() {
    return Array(level).join('  ');
  }

  function mapTOC(suite, obj) {
    var ret = obj,
        key = SUITE_PREFIX + suite.title;
    obj = obj[key] = obj[key] || { suite: suite };
    suite.suites.forEach(function(suite){
      mapTOC(suite, obj);
    });
    return ret;
  }

  function stringifyTOC(obj, level) {
    ++level;
    var buf = '';
    var link;
    for (var key in obj) {
      if ('suite' == key) continue;
      if (key !== SUITE_PREFIX) {
        link = ' - [' + key.substring(1) + ']';
        link += '(#' + utils.slug(obj[key].suite.fullTitle()) + ')\n';
        buf += Array(level).join('  ') + link;
      }
      buf += stringifyTOC(obj[key], level);
    }
    return buf;
  }

  function generateTOC(suite) {
    var obj = mapTOC(suite, {});
    return stringifyTOC(obj, 0);
  }

  generateTOC(runner.suite);

  runner.on('suite', function(suite){
    ++level;
    var slug = utils.slug(suite.fullTitle());
    buf += '<a name="' + slug + '"></a>' + '\n';
    buf += title(suite.title) + '\n';
  });

  runner.on('suite end', function(suite){
    --level;
  });

  runner.on('pass', function(test){
    var code = utils.clean(test.fn.toString());
    buf += test.title + '.\n';
    buf += '\n```js\n';
    buf += code + '\n';
    buf += '```\n\n';
  });

  runner.on('end', function(){
    process.stdout.write('# TOC\n');
    process.stdout.write(generateTOC(runner.suite));
    process.stdout.write(buf);
  });
}

}); // module: reporters/markdown.js

require.register("reporters/min.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base');

/**
 * Expose `Min`.
 */

exports = module.exports = Min;

/**
 * Initialize a new `Min` minimal test reporter (best used with --watch).
 *
 * @param {Runner} runner
 * @api public
 */

function Min(runner) {
  Base.call(this, runner);

  runner.on('start', function(){
    // clear screen
    process.stdout.write('\u001b[2J');
    // set cursor position
    process.stdout.write('\u001b[1;3H');
  });

  runner.on('end', this.epilogue.bind(this));
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
Min.prototype = new F;
Min.prototype.constructor = Min;


}); // module: reporters/min.js

require.register("reporters/nyan.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base');

/**
 * Expose `Dot`.
 */

exports = module.exports = NyanCat;

/**
 * Initialize a new `Dot` matrix test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function NyanCat(runner) {
  Base.call(this, runner);
  var self = this
    , stats = this.stats
    , width = Base.window.width * .75 | 0
    , rainbowColors = this.rainbowColors = self.generateColors()
    , colorIndex = this.colorIndex = 0
    , numerOfLines = this.numberOfLines = 4
    , trajectories = this.trajectories = [[], [], [], []]
    , nyanCatWidth = this.nyanCatWidth = 11
    , trajectoryWidthMax = this.trajectoryWidthMax = (width - nyanCatWidth)
    , scoreboardWidth = this.scoreboardWidth = 5
    , tick = this.tick = 0
    , n = 0;

  runner.on('start', function(){
    Base.cursor.hide();
    self.draw();
  });

  runner.on('pending', function(test){
    self.draw();
  });

  runner.on('pass', function(test){
    self.draw();
  });

  runner.on('fail', function(test, err){
    self.draw();
  });

  runner.on('end', function(){
    Base.cursor.show();
    for (var i = 0; i < self.numberOfLines; i++) write('\n');
    self.epilogue();
  });
}

/**
 * Draw the nyan cat
 *
 * @api private
 */

NyanCat.prototype.draw = function(){
  this.appendRainbow();
  this.drawScoreboard();
  this.drawRainbow();
  this.drawNyanCat();
  this.tick = !this.tick;
};

/**
 * Draw the "scoreboard" showing the number
 * of passes, failures and pending tests.
 *
 * @api private
 */

NyanCat.prototype.drawScoreboard = function(){
  var stats = this.stats;

  function draw(type, n) {
    write(' ');
    write(Base.color(type, n));
    write('\n');
  }

  draw('green', stats.passes);
  draw('fail', stats.failures);
  draw('pending', stats.pending);
  write('\n');

  this.cursorUp(this.numberOfLines);
};

/**
 * Append the rainbow.
 *
 * @api private
 */

NyanCat.prototype.appendRainbow = function(){
  var segment = this.tick ? '_' : '-';
  var rainbowified = this.rainbowify(segment);

  for (var index = 0; index < this.numberOfLines; index++) {
    var trajectory = this.trajectories[index];
    if (trajectory.length >= this.trajectoryWidthMax) trajectory.shift();
    trajectory.push(rainbowified);
  }
};

/**
 * Draw the rainbow.
 *
 * @api private
 */

NyanCat.prototype.drawRainbow = function(){
  var self = this;

  this.trajectories.forEach(function(line, index) {
    write('\u001b[' + self.scoreboardWidth + 'C');
    write(line.join(''));
    write('\n');
  });

  this.cursorUp(this.numberOfLines);
};

/**
 * Draw the nyan cat
 *
 * @api private
 */

NyanCat.prototype.drawNyanCat = function() {
  var self = this;
  var startWidth = this.scoreboardWidth + this.trajectories[0].length;
  var dist = '\u001b[' + startWidth + 'C';
  var padding = '';

  write(dist);
  write('_,------,');
  write('\n');

  write(dist);
  padding = self.tick ? '  ' : '   ';
  write('_|' + padding + '/\\_/\\ ');
  write('\n');

  write(dist);
  padding = self.tick ? '_' : '__';
  var tail = self.tick ? '~' : '^';
  var face;
  write(tail + '|' + padding + this.face() + ' ');
  write('\n');

  write(dist);
  padding = self.tick ? ' ' : '  ';
  write(padding + '""  "" ');
  write('\n');

  this.cursorUp(this.numberOfLines);
};

/**
 * Draw nyan cat face.
 *
 * @return {String}
 * @api private
 */

NyanCat.prototype.face = function() {
  var stats = this.stats;
  if (stats.failures) {
    return '( x .x)';
  } else if (stats.pending) {
    return '( o .o)';
  } else if(stats.passes) {
    return '( ^ .^)';
  } else {
    return '( - .-)';
  }
};

/**
 * Move cursor up `n`.
 *
 * @param {Number} n
 * @api private
 */

NyanCat.prototype.cursorUp = function(n) {
  write('\u001b[' + n + 'A');
};

/**
 * Move cursor down `n`.
 *
 * @param {Number} n
 * @api private
 */

NyanCat.prototype.cursorDown = function(n) {
  write('\u001b[' + n + 'B');
};

/**
 * Generate rainbow colors.
 *
 * @return {Array}
 * @api private
 */

NyanCat.prototype.generateColors = function(){
  var colors = [];

  for (var i = 0; i < (6 * 7); i++) {
    var pi3 = Math.floor(Math.PI / 3);
    var n = (i * (1.0 / 6));
    var r = Math.floor(3 * Math.sin(n) + 3);
    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);
    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);
    colors.push(36 * r + 6 * g + b + 16);
  }

  return colors;
};

/**
 * Apply rainbow to the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

NyanCat.prototype.rainbowify = function(str){
  if (!Base.useColors)
    return str;
  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];
  this.colorIndex += 1;
  return '\u001b[38;5;' + color + 'm' + str + '\u001b[0m';
};

/**
 * Stdout helper.
 */

function write(string) {
  process.stdout.write(string);
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
NyanCat.prototype = new F;
NyanCat.prototype.constructor = NyanCat;


}); // module: reporters/nyan.js

require.register("reporters/progress.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `Progress`.
 */

exports = module.exports = Progress;

/**
 * General progress bar color.
 */

Base.colors.progress = 90;

/**
 * Initialize a new `Progress` bar test reporter.
 *
 * @param {Runner} runner
 * @param {Object} options
 * @api public
 */

function Progress(runner, options) {
  Base.call(this, runner);

  var self = this
    , options = options || {}
    , stats = this.stats
    , width = Base.window.width * .50 | 0
    , total = runner.total
    , complete = 0
    , max = Math.max
    , lastN = -1;

  // default chars
  options.open = options.open || '[';
  options.complete = options.complete || '▬';
  options.incomplete = options.incomplete || Base.symbols.dot;
  options.close = options.close || ']';
  options.verbose = false;

  // tests started
  runner.on('start', function(){
    console.log();
    cursor.hide();
  });

  // tests complete
  runner.on('test end', function(){
    complete++;
    var incomplete = total - complete
      , percent = complete / total
      , n = width * percent | 0
      , i = width - n;

    if (lastN === n && !options.verbose) {
      // Don't re-render the line if it hasn't changed
      return;
    }
    lastN = n;

    cursor.CR();
    process.stdout.write('\u001b[J');
    process.stdout.write(color('progress', '  ' + options.open));
    process.stdout.write(Array(n).join(options.complete));
    process.stdout.write(Array(i).join(options.incomplete));
    process.stdout.write(color('progress', options.close));
    if (options.verbose) {
      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));
    }
  });

  // tests are complete, output some stats
  // and the failures if any
  runner.on('end', function(){
    cursor.show();
    console.log();
    self.epilogue();
  });
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
Progress.prototype = new F;
Progress.prototype.constructor = Progress;


}); // module: reporters/progress.js

require.register("reporters/spec.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `Spec`.
 */

exports = module.exports = Spec;

/**
 * Initialize a new `Spec` test reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function Spec(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , indents = 0
    , n = 0;

  function indent() {
    return Array(indents).join('  ')
  }

  runner.on('start', function(){
    console.log();
  });

  runner.on('suite', function(suite){
    ++indents;
    console.log(color('suite', '%s%s'), indent(), suite.title);
  });

  runner.on('suite end', function(suite){
    --indents;
    if (1 == indents) console.log();
  });

  runner.on('pending', function(test){
    var fmt = indent() + color('pending', '  - %s');
    console.log(fmt, test.title);
  });

  runner.on('pass', function(test){
    if ('fast' == test.speed) {
      var fmt = indent()
        + color('checkmark', '  ' + Base.symbols.ok)
        + color('pass', ' %s ');
      cursor.CR();
      console.log(fmt, test.title);
    } else {
      var fmt = indent()
        + color('checkmark', '  ' + Base.symbols.ok)
        + color('pass', ' %s ')
        + color(test.speed, '(%dms)');
      cursor.CR();
      console.log(fmt, test.title, test.duration);
    }
  });

  runner.on('fail', function(test, err){
    cursor.CR();
    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);
  });

  runner.on('end', self.epilogue.bind(self));
}

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
Spec.prototype = new F;
Spec.prototype.constructor = Spec;


}); // module: reporters/spec.js

require.register("reporters/tap.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , cursor = Base.cursor
  , color = Base.color;

/**
 * Expose `TAP`.
 */

exports = module.exports = TAP;

/**
 * Initialize a new `TAP` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function TAP(runner) {
  Base.call(this, runner);

  var self = this
    , stats = this.stats
    , n = 1
    , passes = 0
    , failures = 0;

  runner.on('start', function(){
    var total = runner.grepTotal(runner.suite);
    console.log('%d..%d', 1, total);
  });

  runner.on('test end', function(){
    ++n;
  });

  runner.on('pending', function(test){
    console.log('ok %d %s # SKIP -', n, title(test));
  });

  runner.on('pass', function(test){
    passes++;
    console.log('ok %d %s', n, title(test));
  });

  runner.on('fail', function(test, err){
    failures++;
    console.log('not ok %d %s', n, title(test));
    if (err.stack) console.log(err.stack.replace(/^/gm, '  '));
  });

  runner.on('end', function(){
    console.log('# tests ' + (passes + failures));
    console.log('# pass ' + passes);
    console.log('# fail ' + failures);
  });
}

/**
 * Return a TAP-safe title of `test`
 *
 * @param {Object} test
 * @return {String}
 * @api private
 */

function title(test) {
  return test.fullTitle().replace(/#/g, '');
}

}); // module: reporters/tap.js

require.register("reporters/xunit.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Base = require('./base')
  , utils = require('../utils')
  , fs = require('browser/fs')
  , escape = utils.escape;

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date
  , setTimeout = global.setTimeout
  , setInterval = global.setInterval
  , clearTimeout = global.clearTimeout
  , clearInterval = global.clearInterval;

/**
 * Expose `XUnit`.
 */

exports = module.exports = XUnit;

/**
 * Initialize a new `XUnit` reporter.
 *
 * @param {Runner} runner
 * @api public
 */

function XUnit(runner, options) {
  Base.call(this, runner);
  var stats = this.stats
    , tests = []
    , self = this;

  if (options.reporterOptions && options.reporterOptions.output) {
      if (! fs.createWriteStream) {
          throw new Error('file output not supported in browser');
      }
      self.fileStream = fs.createWriteStream(options.reporterOptions.output);
  }

  runner.on('pending', function(test){
    tests.push(test);
  });

  runner.on('pass', function(test){
    tests.push(test);
  });

  runner.on('fail', function(test){
    tests.push(test);
  });

  runner.on('end', function(){
    self.write(tag('testsuite', {
        name: 'Mocha Tests'
      , tests: stats.tests
      , failures: stats.failures
      , errors: stats.failures
      , skipped: stats.tests - stats.failures - stats.passes
      , timestamp: (new Date).toUTCString()
      , time: (stats.duration / 1000) || 0
    }, false));

    tests.forEach(function(t) { self.test(t); });
    self.write('</testsuite>');
  });
}

/**
 * Override done to close the stream (if it's a file).
 */
XUnit.prototype.done = function(failures, fn) {
    if (this.fileStream) {
        this.fileStream.end(function() {
            fn(failures);
        });
    } else {
        fn(failures);
    }
};

/**
 * Inherit from `Base.prototype`.
 */

function F(){};
F.prototype = Base.prototype;
XUnit.prototype = new F;
XUnit.prototype.constructor = XUnit;


/**
 * Write out the given line
 */
XUnit.prototype.write = function(line) {
    if (this.fileStream) {
        this.fileStream.write(line + '\n');
    } else {
        console.log(line);
    }
};

/**
 * Output tag for the given `test.`
 */

XUnit.prototype.test = function(test, ostream) {
  var attrs = {
      classname: test.parent.fullTitle()
    , name: test.title
    , time: (test.duration / 1000) || 0
  };

  if ('failed' == test.state) {
    var err = test.err;
    this.write(tag('testcase', attrs, false, tag('failure', {}, false, cdata(escape(err.message) + "\n" + err.stack))));
  } else if (test.pending) {
    this.write(tag('testcase', attrs, false, tag('skipped', {}, true)));
  } else {
    this.write(tag('testcase', attrs, true) );
  }
};

/**
 * HTML tag helper.
 */

function tag(name, attrs, close, content) {
  var end = close ? '/>' : '>'
    , pairs = []
    , tag;

  for (var key in attrs) {
    pairs.push(key + '="' + escape(attrs[key]) + '"');
  }

  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;
  if (content) tag += content + '</' + name + end;
  return tag;
}

/**
 * Return cdata escaped CDATA `str`.
 */

function cdata(str) {
  return '<![CDATA[' + escape(str) + ']]>';
}

}); // module: reporters/xunit.js

require.register("runnable.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var EventEmitter = require('browser/events').EventEmitter
  , debug = require('browser/debug')('mocha:runnable')
  , milliseconds = require('./ms')
  , utils = require('./utils');

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date
  , setTimeout = global.setTimeout
  , setInterval = global.setInterval
  , clearTimeout = global.clearTimeout
  , clearInterval = global.clearInterval;

/**
 * Object#toString().
 */

var toString = Object.prototype.toString;

/**
 * Expose `Runnable`.
 */

module.exports = Runnable;

/**
 * Initialize a new `Runnable` with the given `title` and callback `fn`.
 *
 * @param {String} title
 * @param {Function} fn
 * @api private
 */

function Runnable(title, fn) {
  this.title = title;
  this.fn = fn;
  this.async = fn && fn.length;
  this.sync = ! this.async;
  this._timeout = 2000;
  this._slow = 75;
  this._enableTimeouts = true;
  this.timedOut = false;
  this._trace = new Error('done() called multiple times')
}

/**
 * Inherit from `EventEmitter.prototype`.
 */

function F(){};
F.prototype = EventEmitter.prototype;
Runnable.prototype = new F;
Runnable.prototype.constructor = Runnable;


/**
 * Set & get timeout `ms`.
 *
 * @param {Number|String} ms
 * @return {Runnable|Number} ms or self
 * @api private
 */

Runnable.prototype.timeout = function(ms){
  if (0 == arguments.length) return this._timeout;
  if (ms === 0) this._enableTimeouts = false;
  if ('string' == typeof ms) ms = milliseconds(ms);
  debug('timeout %d', ms);
  this._timeout = ms;
  if (this.timer) this.resetTimeout();
  return this;
};

/**
 * Set & get slow `ms`.
 *
 * @param {Number|String} ms
 * @return {Runnable|Number} ms or self
 * @api private
 */

Runnable.prototype.slow = function(ms){
  if (0 === arguments.length) return this._slow;
  if ('string' == typeof ms) ms = milliseconds(ms);
  debug('timeout %d', ms);
  this._slow = ms;
  return this;
};

/**
 * Set and & get timeout `enabled`.
 *
 * @param {Boolean} enabled
 * @return {Runnable|Boolean} enabled or self
 * @api private
 */

Runnable.prototype.enableTimeouts = function(enabled){
  if (arguments.length === 0) return this._enableTimeouts;
  debug('enableTimeouts %s', enabled);
  this._enableTimeouts = enabled;
  return this;
};

/**
 * Return the full title generated by recursively
 * concatenating the parent's full title.
 *
 * @return {String}
 * @api public
 */

Runnable.prototype.fullTitle = function(){
  return this.parent.fullTitle() + ' ' + this.title;
};

/**
 * Clear the timeout.
 *
 * @api private
 */

Runnable.prototype.clearTimeout = function(){
  clearTimeout(this.timer);
};

/**
 * Inspect the runnable void of private properties.
 *
 * @return {String}
 * @api private
 */

Runnable.prototype.inspect = function(){
  return JSON.stringify(this, function(key, val){
    if ('_' == key[0]) return;
    if ('parent' == key) return '#<Suite>';
    if ('ctx' == key) return '#<Context>';
    return val;
  }, 2);
};

/**
 * Reset the timeout.
 *
 * @api private
 */

Runnable.prototype.resetTimeout = function(){
  var self = this;
  var ms = this.timeout() || 1e9;

  if (!this._enableTimeouts) return;
  this.clearTimeout();
  this.timer = setTimeout(function(){
    if (!self._enableTimeouts) return;
    self.callback(new Error('timeout of ' + ms + 'ms exceeded'));
    self.timedOut = true;
  }, ms);
};

/**
 * Whitelist these globals for this test run
 *
 * @api private
 */
Runnable.prototype.globals = function(arr){
  var self = this;
  this._allowedGlobals = arr;
};

/**
 * Run the test and invoke `fn(err)`.
 *
 * @param {Function} fn
 * @api private
 */

Runnable.prototype.run = function(fn){
  var self = this
    , start = new Date
    , ctx = this.ctx
    , finished
    , emitted;

  // Some times the ctx exists but it is not runnable
  if (ctx && ctx.runnable) ctx.runnable(this);

  // called multiple times
  function multiple(err) {
    if (emitted) return;
    emitted = true;
    self.emit('error', err || new Error('done() called multiple times; stacktrace may be inaccurate'));
  }

  // finished
  function done(err) {
    var ms = self.timeout();
    if (self.timedOut) return;
    if (finished) return multiple(err || self._trace);
    self.clearTimeout();
    self.duration = new Date - start;
    finished = true;
    if (!err && self.duration > ms && self._enableTimeouts) err = new Error('timeout of ' + ms + 'ms exceeded');
    fn(err);
  }

  // for .resetTimeout()
  this.callback = done;

  // explicit async with `done` argument
  if (this.async) {
    this.resetTimeout();

    try {
      this.fn.call(ctx, function(err){
        if (err instanceof Error || toString.call(err) === "[object Error]") return done(err);
        if (null != err) {
          if (Object.prototype.toString.call(err) === '[object Object]') {
            return done(new Error('done() invoked with non-Error: ' + JSON.stringify(err)));
          } else {
            return done(new Error('done() invoked with non-Error: ' + err));
          }
        }
        done();
      });
    } catch (err) {
      done(utils.getError(err));
    }
    return;
  }

  if (this.asyncOnly) {
    return done(new Error('--async-only option in use without declaring `done()`'));
  }

  // sync or promise-returning
  try {
    if (this.pending) {
      done();
    } else {
      callFn(this.fn);
    }
  } catch (err) {
    done(utils.getError(err));
  }

  function callFn(fn) {
    var result = fn.call(ctx);
    if (result && typeof result.then === 'function') {
      self.resetTimeout();
      result
        .then(function() {
          done()
        },
        function(reason) {
          done(reason || new Error('Promise rejected with no or falsy reason'))
        });
    } else {
      done();
    }
  }
};

}); // module: runnable.js

require.register("runner.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var EventEmitter = require('browser/events').EventEmitter
  , debug = require('browser/debug')('mocha:runner')
  , Test = require('./test')
  , utils = require('./utils')
  , filter = utils.filter
  , keys = utils.keys;

/**
 * Non-enumerable globals.
 */

var globals = [
  'setTimeout',
  'clearTimeout',
  'setInterval',
  'clearInterval',
  'XMLHttpRequest',
  'Date',
  'setImmediate',
  'clearImmediate'
];

/**
 * Expose `Runner`.
 */

module.exports = Runner;

/**
 * Initialize a `Runner` for the given `suite`.
 *
 * Events:
 *
 *   - `start`  execution started
 *   - `end`  execution complete
 *   - `suite`  (suite) test suite execution started
 *   - `suite end`  (suite) all tests (and sub-suites) have finished
 *   - `test`  (test) test execution started
 *   - `test end`  (test) test completed
 *   - `hook`  (hook) hook execution started
 *   - `hook end`  (hook) hook complete
 *   - `pass`  (test) test passed
 *   - `fail`  (test, err) test failed
 *   - `pending`  (test) test pending
 *
 * @api public
 */

function Runner(suite) {
  var self = this;
  this._globals = [];
  this._abort = false;
  this.suite = suite;
  this.total = suite.total();
  this.failures = 0;
  this.on('test end', function(test){ self.checkGlobals(test); });
  this.on('hook end', function(hook){ self.checkGlobals(hook); });
  this.grep(/.*/);
  this.globals(this.globalProps().concat(extraGlobals()));
}

/**
 * Wrapper for setImmediate, process.nextTick, or browser polyfill.
 *
 * @param {Function} fn
 * @api private
 */

Runner.immediately = global.setImmediate || process.nextTick;

/**
 * Inherit from `EventEmitter.prototype`.
 */

function F(){};
F.prototype = EventEmitter.prototype;
Runner.prototype = new F;
Runner.prototype.constructor = Runner;


/**
 * Run tests with full titles matching `re`. Updates runner.total
 * with number of tests matched.
 *
 * @param {RegExp} re
 * @param {Boolean} invert
 * @return {Runner} for chaining
 * @api public
 */

Runner.prototype.grep = function(re, invert){
  debug('grep %s', re);
  this._grep = re;
  this._invert = invert;
  this.total = this.grepTotal(this.suite);
  return this;
};

/**
 * Returns the number of tests matching the grep search for the
 * given suite.
 *
 * @param {Suite} suite
 * @return {Number}
 * @api public
 */

Runner.prototype.grepTotal = function(suite) {
  var self = this;
  var total = 0;

  suite.eachTest(function(test){
    var match = self._grep.test(test.fullTitle());
    if (self._invert) match = !match;
    if (match) total++;
  });

  return total;
};

/**
 * Return a list of global properties.
 *
 * @return {Array}
 * @api private
 */

Runner.prototype.globalProps = function() {
  var props = utils.keys(global);

  // non-enumerables
  for (var i = 0; i < globals.length; ++i) {
    if (~utils.indexOf(props, globals[i])) continue;
    props.push(globals[i]);
  }

  return props;
};

/**
 * Allow the given `arr` of globals.
 *
 * @param {Array} arr
 * @return {Runner} for chaining
 * @api public
 */

Runner.prototype.globals = function(arr){
  if (0 == arguments.length) return this._globals;
  debug('globals %j', arr);
  this._globals = this._globals.concat(arr);
  return this;
};

/**
 * Check for global variable leaks.
 *
 * @api private
 */

Runner.prototype.checkGlobals = function(test){
  if (this.ignoreLeaks) return;
  var ok = this._globals;

  var globals = this.globalProps();
  var leaks;

  if (test) {
    ok = ok.concat(test._allowedGlobals || []);
  }

  if(this.prevGlobalsLength == globals.length) return;
  this.prevGlobalsLength = globals.length;

  leaks = filterLeaks(ok, globals);
  this._globals = this._globals.concat(leaks);

  if (leaks.length > 1) {
    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));
  } else if (leaks.length) {
    this.fail(test, new Error('global leak detected: ' + leaks[0]));
  }
};

/**
 * Fail the given `test`.
 *
 * @param {Test} test
 * @param {Error} err
 * @api private
 */

Runner.prototype.fail = function(test, err){
  ++this.failures;
  test.state = 'failed';

  if ('string' == typeof err) {
    err = new Error('the string "' + err + '" was thrown, throw an Error :)');
  }

  this.emit('fail', test, err);
};

/**
 * Fail the given `hook` with `err`.
 *
 * Hook failures work in the following pattern:
 * - If bail, then exit
 * - Failed `before` hook skips all tests in a suite and subsuites,
 *   but jumps to corresponding `after` hook
 * - Failed `before each` hook skips remaining tests in a
 *   suite and jumps to corresponding `after each` hook,
 *   which is run only once
 * - Failed `after` hook does not alter
 *   execution order
 * - Failed `after each` hook skips remaining tests in a
 *   suite and subsuites, but executes other `after each`
 *   hooks
 *
 * @param {Hook} hook
 * @param {Error} err
 * @api private
 */

Runner.prototype.failHook = function(hook, err){
  this.fail(hook, err);
  if (this.suite.bail()) {
    this.emit('end');
  }
};

/**
 * Run hook `name` callbacks and then invoke `fn()`.
 *
 * @param {String} name
 * @param {Function} function
 * @api private
 */

Runner.prototype.hook = function(name, fn){
  var suite = this.suite
    , hooks = suite['_' + name]
    , self = this
    , timer;

  function next(i) {
    var hook = hooks[i];
    if (!hook) return fn();
    self.currentRunnable = hook;

    hook.ctx.currentTest = self.test;

    self.emit('hook', hook);

    hook.on('error', function(err){
      self.failHook(hook, err);
    });

    hook.run(function(err){
      hook.removeAllListeners('error');
      var testError = hook.error();
      if (testError) self.fail(self.test, testError);
      if (err) {
        self.failHook(hook, err);

        // stop executing hooks, notify callee of hook err
        return fn(err);
      }
      self.emit('hook end', hook);
      delete hook.ctx.currentTest;
      next(++i);
    });
  }

  Runner.immediately(function(){
    next(0);
  });
};

/**
 * Run hook `name` for the given array of `suites`
 * in order, and callback `fn(err, errSuite)`.
 *
 * @param {String} name
 * @param {Array} suites
 * @param {Function} fn
 * @api private
 */

Runner.prototype.hooks = function(name, suites, fn){
  var self = this
    , orig = this.suite;

  function next(suite) {
    self.suite = suite;

    if (!suite) {
      self.suite = orig;
      return fn();
    }

    self.hook(name, function(err){
      if (err) {
        var errSuite = self.suite;
        self.suite = orig;
        return fn(err, errSuite);
      }

      next(suites.pop());
    });
  }

  next(suites.pop());
};

/**
 * Run hooks from the top level down.
 *
 * @param {String} name
 * @param {Function} fn
 * @api private
 */

Runner.prototype.hookUp = function(name, fn){
  var suites = [this.suite].concat(this.parents()).reverse();
  this.hooks(name, suites, fn);
};

/**
 * Run hooks from the bottom up.
 *
 * @param {String} name
 * @param {Function} fn
 * @api private
 */

Runner.prototype.hookDown = function(name, fn){
  var suites = [this.suite].concat(this.parents());
  this.hooks(name, suites, fn);
};

/**
 * Return an array of parent Suites from
 * closest to furthest.
 *
 * @return {Array}
 * @api private
 */

Runner.prototype.parents = function(){
  var suite = this.suite
    , suites = [];
  while (suite = suite.parent) suites.push(suite);
  return suites;
};

/**
 * Run the current test and callback `fn(err)`.
 *
 * @param {Function} fn
 * @api private
 */

Runner.prototype.runTest = function(fn){
  var test = this.test
    , self = this;

  if (this.asyncOnly) test.asyncOnly = true;

  try {
    test.on('error', function(err){
      self.fail(test, err);
    });
    test.run(fn);
  } catch (err) {
    fn(err);
  }
};

/**
 * Run tests in the given `suite` and invoke
 * the callback `fn()` when complete.
 *
 * @param {Suite} suite
 * @param {Function} fn
 * @api private
 */

Runner.prototype.runTests = function(suite, fn){
  var self = this
    , tests = suite.tests.slice()
    , test;


  function hookErr(err, errSuite, after) {
    // before/after Each hook for errSuite failed:
    var orig = self.suite;

    // for failed 'after each' hook start from errSuite parent,
    // otherwise start from errSuite itself
    self.suite = after ? errSuite.parent : errSuite;

    if (self.suite) {
      // call hookUp afterEach
      self.hookUp('afterEach', function(err2, errSuite2) {
        self.suite = orig;
        // some hooks may fail even now
        if (err2) return hookErr(err2, errSuite2, true);
        // report error suite
        fn(errSuite);
      });
    } else {
      // there is no need calling other 'after each' hooks
      self.suite = orig;
      fn(errSuite);
    }
  }

  function next(err, errSuite) {
    // if we bail after first err
    if (self.failures && suite._bail) return fn();

    if (self._abort) return fn();

    if (err) return hookErr(err, errSuite, true);

    // next test
    test = tests.shift();

    // all done
    if (!test) return fn();

    // grep
    var match = self._grep.test(test.fullTitle());
    if (self._invert) match = !match;
    if (!match) return next();

    // pending
    if (test.pending) {
      self.emit('pending', test);
      self.emit('test end', test);
      return next();
    }

    // execute test and hook(s)
    self.emit('test', self.test = test);
    self.hookDown('beforeEach', function(err, errSuite){

      if (err) return hookErr(err, errSuite, false);

      self.currentRunnable = self.test;
      self.runTest(function(err){
        test = self.test;

        if (err) {
          self.fail(test, err);
          self.emit('test end', test);
          return self.hookUp('afterEach', next);
        }

        test.state = 'passed';
        self.emit('pass', test);
        self.emit('test end', test);
        self.hookUp('afterEach', next);
      });
    });
  }

  this.next = next;
  next();
};

/**
 * Run the given `suite` and invoke the
 * callback `fn()` when complete.
 *
 * @param {Suite} suite
 * @param {Function} fn
 * @api private
 */

Runner.prototype.runSuite = function(suite, fn){
  var total = this.grepTotal(suite)
    , self = this
    , i = 0;

  debug('run suite %s', suite.fullTitle());

  if (!total) return fn();

  this.emit('suite', this.suite = suite);

  function next(errSuite) {
    if (errSuite) {
      // current suite failed on a hook from errSuite
      if (errSuite == suite) {
        // if errSuite is current suite
        // continue to the next sibling suite
        return done();
      } else {
        // errSuite is among the parents of current suite
        // stop execution of errSuite and all sub-suites
        return done(errSuite);
      }
    }

    if (self._abort) return done();

    var curr = suite.suites[i++];
    if (!curr) return done();
    self.runSuite(curr, next);
  }

  function done(errSuite) {
    self.suite = suite;
    self.hook('afterAll', function(){
      self.emit('suite end', suite);
      fn(errSuite);
    });
  }

  this.hook('beforeAll', function(err){
    if (err) return done();
    self.runTests(suite, next);
  });
};

/**
 * Handle uncaught exceptions.
 *
 * @param {Error} err
 * @api private
 */

Runner.prototype.uncaught = function(err){
  if (err) {
    debug('uncaught exception %s', err !== function () {
      return this;
    }.call(err) ? err : ( err.message || err ));
  } else {
    debug('uncaught undefined exception');
    err = utils.undefinedError();
  }
  err.uncaught = true;

  var runnable = this.currentRunnable;
  if (!runnable) return;

  var wasAlreadyDone = runnable.state;
  this.fail(runnable, err);

  runnable.clearTimeout();

  if (wasAlreadyDone) return;

  // recover from test
  if ('test' == runnable.type) {
    this.emit('test end', runnable);
    this.hookUp('afterEach', this.next);
    return;
  }

  // bail on hooks
  this.emit('end');
};

/**
 * Run the root suite and invoke `fn(failures)`
 * on completion.
 *
 * @param {Function} fn
 * @return {Runner} for chaining
 * @api public
 */

Runner.prototype.run = function(fn){
  var self = this
    , fn = fn || function(){};

  function uncaught(err){
    self.uncaught(err);
  }

  debug('start');

  // callback
  this.on('end', function(){
    debug('end');
    process.removeListener('uncaughtException', uncaught);
    fn(self.failures);
  });

  // run suites
  this.emit('start');
  this.runSuite(this.suite, function(){
    debug('finished running');
    self.emit('end');
  });

  // uncaught exception
  process.on('uncaughtException', uncaught);

  return this;
};

/**
 * Cleanly abort execution
 *
 * @return {Runner} for chaining
 * @api public
 */
Runner.prototype.abort = function(){
  debug('aborting');
  this._abort = true;
};

/**
 * Filter leaks with the given globals flagged as `ok`.
 *
 * @param {Array} ok
 * @param {Array} globals
 * @return {Array}
 * @api private
 */

function filterLeaks(ok, globals) {
  return filter(globals, function(key){
    // Firefox and Chrome exposes iframes as index inside the window object
    if (/^d+/.test(key)) return false;

    // in firefox
    // if runner runs in an iframe, this iframe's window.getInterface method not init at first
    // it is assigned in some seconds
    if (global.navigator && /^getInterface/.test(key)) return false;

    // an iframe could be approached by window[iframeIndex]
    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak
    if (global.navigator && /^\d+/.test(key)) return false;

    // Opera and IE expose global variables for HTML element IDs (issue #243)
    if (/^mocha-/.test(key)) return false;

    var matched = filter(ok, function(ok){
      if (~ok.indexOf('*')) return 0 == key.indexOf(ok.split('*')[0]);
      return key == ok;
    });
    return matched.length == 0 && (!global.navigator || 'onerror' !== key);
  });
}

/**
 * Array of globals dependent on the environment.
 *
 * @return {Array}
 * @api private
 */

 function extraGlobals() {
  if (typeof(process) === 'object' &&
      typeof(process.version) === 'string') {

    var nodeVersion = process.version.split('.').reduce(function(a, v) {
      return a << 8 | v;
    });

    // 'errno' was renamed to process._errno in v0.9.11.

    if (nodeVersion < 0x00090B) {
      return ['errno'];
    }
  }

  return [];
 }

}); // module: runner.js

require.register("suite.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var EventEmitter = require('browser/events').EventEmitter
  , debug = require('browser/debug')('mocha:suite')
  , milliseconds = require('./ms')
  , utils = require('./utils')
  , Hook = require('./hook');

/**
 * Expose `Suite`.
 */

exports = module.exports = Suite;

/**
 * Create a new `Suite` with the given `title`
 * and parent `Suite`. When a suite with the
 * same title is already present, that suite
 * is returned to provide nicer reporter
 * and more flexible meta-testing.
 *
 * @param {Suite} parent
 * @param {String} title
 * @return {Suite}
 * @api public
 */

exports.create = function(parent, title){
  var suite = new Suite(title, parent.ctx);
  suite.parent = parent;
  if (parent.pending) suite.pending = true;
  title = suite.fullTitle();
  parent.addSuite(suite);
  return suite;
};

/**
 * Initialize a new `Suite` with the given
 * `title` and `ctx`.
 *
 * @param {String} title
 * @param {Context} ctx
 * @api private
 */

function Suite(title, parentContext) {
  this.title = title;
  var context = function() {};
  context.prototype = parentContext;
  this.ctx = new context();
  this.suites = [];
  this.tests = [];
  this.pending = false;
  this._beforeEach = [];
  this._beforeAll = [];
  this._afterEach = [];
  this._afterAll = [];
  this.root = !title;
  this._timeout = 2000;
  this._enableTimeouts = true;
  this._slow = 75;
  this._bail = false;
}

/**
 * Inherit from `EventEmitter.prototype`.
 */

function F(){};
F.prototype = EventEmitter.prototype;
Suite.prototype = new F;
Suite.prototype.constructor = Suite;


/**
 * Return a clone of this `Suite`.
 *
 * @return {Suite}
 * @api private
 */

Suite.prototype.clone = function(){
  var suite = new Suite(this.title);
  debug('clone');
  suite.ctx = this.ctx;
  suite.timeout(this.timeout());
  suite.enableTimeouts(this.enableTimeouts());
  suite.slow(this.slow());
  suite.bail(this.bail());
  return suite;
};

/**
 * Set timeout `ms` or short-hand such as "2s".
 *
 * @param {Number|String} ms
 * @return {Suite|Number} for chaining
 * @api private
 */

Suite.prototype.timeout = function(ms){
  if (0 == arguments.length) return this._timeout;
  if (ms.toString() === '0') this._enableTimeouts = false;
  if ('string' == typeof ms) ms = milliseconds(ms);
  debug('timeout %d', ms);
  this._timeout = parseInt(ms, 10);
  return this;
};

/**
  * Set timeout `enabled`.
  *
  * @param {Boolean} enabled
  * @return {Suite|Boolean} self or enabled
  * @api private
  */

Suite.prototype.enableTimeouts = function(enabled){
  if (arguments.length === 0) return this._enableTimeouts;
  debug('enableTimeouts %s', enabled);
  this._enableTimeouts = enabled;
  return this;
};

/**
 * Set slow `ms` or short-hand such as "2s".
 *
 * @param {Number|String} ms
 * @return {Suite|Number} for chaining
 * @api private
 */

Suite.prototype.slow = function(ms){
  if (0 === arguments.length) return this._slow;
  if ('string' == typeof ms) ms = milliseconds(ms);
  debug('slow %d', ms);
  this._slow = ms;
  return this;
};

/**
 * Sets whether to bail after first error.
 *
 * @param {Boolean} bail
 * @return {Suite|Number} for chaining
 * @api private
 */

Suite.prototype.bail = function(bail){
  if (0 == arguments.length) return this._bail;
  debug('bail %s', bail);
  this._bail = bail;
  return this;
};

/**
 * Run `fn(test[, done])` before running tests.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.beforeAll = function(title, fn){
  if (this.pending) return this;
  if ('function' === typeof title) {
    fn = title;
    title = fn.name;
  }
  title = '"before all" hook' + (title ? ': ' + title : '');

  var hook = new Hook(title, fn);
  hook.parent = this;
  hook.timeout(this.timeout());
  hook.enableTimeouts(this.enableTimeouts());
  hook.slow(this.slow());
  hook.ctx = this.ctx;
  this._beforeAll.push(hook);
  this.emit('beforeAll', hook);
  return this;
};

/**
 * Run `fn(test[, done])` after running tests.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.afterAll = function(title, fn){
  if (this.pending) return this;
  if ('function' === typeof title) {
    fn = title;
    title = fn.name;
  }
  title = '"after all" hook' + (title ? ': ' + title : '');

  var hook = new Hook(title, fn);
  hook.parent = this;
  hook.timeout(this.timeout());
  hook.enableTimeouts(this.enableTimeouts());
  hook.slow(this.slow());
  hook.ctx = this.ctx;
  this._afterAll.push(hook);
  this.emit('afterAll', hook);
  return this;
};

/**
 * Run `fn(test[, done])` before each test case.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.beforeEach = function(title, fn){
  if (this.pending) return this;
  if ('function' === typeof title) {
    fn = title;
    title = fn.name;
  }
  title = '"before each" hook' + (title ? ': ' + title : '');

  var hook = new Hook(title, fn);
  hook.parent = this;
  hook.timeout(this.timeout());
  hook.enableTimeouts(this.enableTimeouts());
  hook.slow(this.slow());
  hook.ctx = this.ctx;
  this._beforeEach.push(hook);
  this.emit('beforeEach', hook);
  return this;
};

/**
 * Run `fn(test[, done])` after each test case.
 *
 * @param {Function} fn
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.afterEach = function(title, fn){
  if (this.pending) return this;
  if ('function' === typeof title) {
    fn = title;
    title = fn.name;
  }
  title = '"after each" hook' + (title ? ': ' + title : '');

  var hook = new Hook(title, fn);
  hook.parent = this;
  hook.timeout(this.timeout());
  hook.enableTimeouts(this.enableTimeouts());
  hook.slow(this.slow());
  hook.ctx = this.ctx;
  this._afterEach.push(hook);
  this.emit('afterEach', hook);
  return this;
};

/**
 * Add a test `suite`.
 *
 * @param {Suite} suite
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.addSuite = function(suite){
  suite.parent = this;
  suite.timeout(this.timeout());
  suite.enableTimeouts(this.enableTimeouts());
  suite.slow(this.slow());
  suite.bail(this.bail());
  this.suites.push(suite);
  this.emit('suite', suite);
  return this;
};

/**
 * Add a `test` to this suite.
 *
 * @param {Test} test
 * @return {Suite} for chaining
 * @api private
 */

Suite.prototype.addTest = function(test){
  test.parent = this;
  test.timeout(this.timeout());
  test.enableTimeouts(this.enableTimeouts());
  test.slow(this.slow());
  test.ctx = this.ctx;
  this.tests.push(test);
  this.emit('test', test);
  return this;
};

/**
 * Return the full title generated by recursively
 * concatenating the parent's full title.
 *
 * @return {String}
 * @api public
 */

Suite.prototype.fullTitle = function(){
  if (this.parent) {
    var full = this.parent.fullTitle();
    if (full) return full + ' ' + this.title;
  }
  return this.title;
};

/**
 * Return the total number of tests.
 *
 * @return {Number}
 * @api public
 */

Suite.prototype.total = function(){
  return utils.reduce(this.suites, function(sum, suite){
    return sum + suite.total();
  }, 0) + this.tests.length;
};

/**
 * Iterates through each suite recursively to find
 * all tests. Applies a function in the format
 * `fn(test)`.
 *
 * @param {Function} fn
 * @return {Suite}
 * @api private
 */

Suite.prototype.eachTest = function(fn){
  utils.forEach(this.tests, fn);
  utils.forEach(this.suites, function(suite){
    suite.eachTest(fn);
  });
  return this;
};

}); // module: suite.js

require.register("test.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var Runnable = require('./runnable');

/**
 * Expose `Test`.
 */

module.exports = Test;

/**
 * Initialize a new `Test` with the given `title` and callback `fn`.
 *
 * @param {String} title
 * @param {Function} fn
 * @api private
 */

function Test(title, fn) {
  Runnable.call(this, title, fn);
  this.pending = !fn;
  this.type = 'test';
}

/**
 * Inherit from `Runnable.prototype`.
 */

function F(){};
F.prototype = Runnable.prototype;
Test.prototype = new F;
Test.prototype.constructor = Test;


}); // module: test.js

require.register("utils.js", function(module, exports, require){
/**
 * Module dependencies.
 */

var fs = require('browser/fs')
  , path = require('browser/path')
  , basename = path.basename
  , exists = fs.existsSync || path.existsSync
  , glob = require('browser/glob')
  , join = path.join
  , debug = require('browser/debug')('mocha:watch');

/**
 * Ignored directories.
 */

var ignore = ['node_modules', '.git'];

/**
 * Escape special characters in the given string of html.
 *
 * @param  {String} html
 * @return {String}
 * @api private
 */

exports.escape = function(html){
  return String(html)
    .replace(/&/g, '&amp;')
    .replace(/"/g, '&quot;')
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;');
};

/**
 * Array#forEach (<=IE8)
 *
 * @param {Array} array
 * @param {Function} fn
 * @param {Object} scope
 * @api private
 */

exports.forEach = function(arr, fn, scope){
  for (var i = 0, l = arr.length; i < l; i++)
    fn.call(scope, arr[i], i);
};

/**
 * Array#map (<=IE8)
 *
 * @param {Array} array
 * @param {Function} fn
 * @param {Object} scope
 * @api private
 */

exports.map = function(arr, fn, scope){
  var result = [];
  for (var i = 0, l = arr.length; i < l; i++)
    result.push(fn.call(scope, arr[i], i));
  return result;
};

/**
 * Array#indexOf (<=IE8)
 *
 * @parma {Array} arr
 * @param {Object} obj to find index of
 * @param {Number} start
 * @api private
 */

exports.indexOf = function(arr, obj, start){
  for (var i = start || 0, l = arr.length; i < l; i++) {
    if (arr[i] === obj)
      return i;
  }
  return -1;
};

/**
 * Array#reduce (<=IE8)
 *
 * @param {Array} array
 * @param {Function} fn
 * @param {Object} initial value
 * @api private
 */

exports.reduce = function(arr, fn, val){
  var rval = val;

  for (var i = 0, l = arr.length; i < l; i++) {
    rval = fn(rval, arr[i], i, arr);
  }

  return rval;
};

/**
 * Array#filter (<=IE8)
 *
 * @param {Array} array
 * @param {Function} fn
 * @api private
 */

exports.filter = function(arr, fn){
  var ret = [];

  for (var i = 0, l = arr.length; i < l; i++) {
    var val = arr[i];
    if (fn(val, i, arr)) ret.push(val);
  }

  return ret;
};

/**
 * Object.keys (<=IE8)
 *
 * @param {Object} obj
 * @return {Array} keys
 * @api private
 */

exports.keys = Object.keys || function(obj) {
  var keys = []
    , has = Object.prototype.hasOwnProperty // for `window` on <=IE8

  for (var key in obj) {
    if (has.call(obj, key)) {
      keys.push(key);
    }
  }

  return keys;
};

/**
 * Watch the given `files` for changes
 * and invoke `fn(file)` on modification.
 *
 * @param {Array} files
 * @param {Function} fn
 * @api private
 */

exports.watch = function(files, fn){
  var options = { interval: 100 };
  files.forEach(function(file){
    debug('file %s', file);
    fs.watchFile(file, options, function(curr, prev){
      if (prev.mtime < curr.mtime) fn(file);
    });
  });
};

/**
 * Ignored files.
 */

function ignored(path){
  return !~ignore.indexOf(path);
}

/**
 * Lookup files in the given `dir`.
 *
 * @return {Array}
 * @api private
 */

exports.files = function(dir, ext, ret){
  ret = ret || [];
  ext = ext || ['js'];

  var re = new RegExp('\\.(' + ext.join('|') + ')$');

  fs.readdirSync(dir)
  .filter(ignored)
  .forEach(function(path){
    path = join(dir, path);
    if (fs.statSync(path).isDirectory()) {
      exports.files(path, ext, ret);
    } else if (path.match(re)) {
      ret.push(path);
    }
  });

  return ret;
};

/**
 * Compute a slug from the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.slug = function(str){
  return str
    .toLowerCase()
    .replace(/ +/g, '-')
    .replace(/[^-\w]/g, '');
};

/**
 * Strip the function definition from `str`,
 * and re-indent for pre whitespace.
 */

exports.clean = function(str) {
  str = str
    .replace(/\r\n?|[\n\u2028\u2029]/g, "\n").replace(/^\uFEFF/, '')
    .replace(/^function *\(.*\) *{|\(.*\) *=> *{?/, '')
    .replace(/\s+\}$/, '');

  var spaces = str.match(/^\n?( *)/)[1].length
    , tabs = str.match(/^\n?(\t*)/)[1].length
    , re = new RegExp('^\n?' + (tabs ? '\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');

  str = str.replace(re, '');

  return exports.trim(str);
};

/**
 * Trim the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

exports.trim = function(str){
  return str.replace(/^\s+|\s+$/g, '');
};

/**
 * Parse the given `qs`.
 *
 * @param {String} qs
 * @return {Object}
 * @api private
 */

exports.parseQuery = function(qs){
  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair){
    var i = pair.indexOf('=')
      , key = pair.slice(0, i)
      , val = pair.slice(++i);

    obj[key] = decodeURIComponent(val);
    return obj;
  }, {});
};

/**
 * Highlight the given string of `js`.
 *
 * @param {String} js
 * @return {String}
 * @api private
 */

function highlight(js) {
  return js
    .replace(/</g, '&lt;')
    .replace(/>/g, '&gt;')
    .replace(/\/\/(.*)/gm, '<span class="comment">//$1</span>')
    .replace(/('.*?')/gm, '<span class="string">$1</span>')
    .replace(/(\d+\.\d+)/gm, '<span class="number">$1</span>')
    .replace(/(\d+)/gm, '<span class="number">$1</span>')
    .replace(/\bnew[ \t]+(\w+)/gm, '<span class="keyword">new</span> <span class="init">$1</span>')
    .replace(/\b(function|new|throw|return|var|if|else)\b/gm, '<span class="keyword">$1</span>')
}

/**
 * Highlight the contents of tag `name`.
 *
 * @param {String} name
 * @api private
 */

exports.highlightTags = function(name) {
  var code = document.getElementById('mocha').getElementsByTagName(name);
  for (var i = 0, len = code.length; i < len; ++i) {
    code[i].innerHTML = highlight(code[i].innerHTML);
  }
};

/**
 * If a value could have properties, and has none, this function is called, which returns
 * a string representation of the empty value.
 *
 * Functions w/ no properties return `'[Function]'`
 * Arrays w/ length === 0 return `'[]'`
 * Objects w/ no properties return `'{}'`
 * All else: return result of `value.toString()`
 *
 * @param {*} value Value to inspect
 * @param {string} [type] The type of the value, if known.
 * @returns {string}
 */
var emptyRepresentation = function emptyRepresentation(value, type) {
  type = type || exports.type(value);

  switch(type) {
    case 'function':
      return '[Function]';
    case 'object':
      return '{}';
    case 'array':
      return '[]';
    default:
      return value.toString();
  }
};

/**
 * Takes some variable and asks `{}.toString()` what it thinks it is.
 * @param {*} value Anything
 * @example
 * type({}) // 'object'
 * type([]) // 'array'
 * type(1) // 'number'
 * type(false) // 'boolean'
 * type(Infinity) // 'number'
 * type(null) // 'null'
 * type(new Date()) // 'date'
 * type(/foo/) // 'regexp'
 * type('type') // 'string'
 * type(global) // 'global'
 * @api private
 * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/toString
 * @returns {string}
 */
exports.type = function type(value) {
  if (typeof Buffer !== 'undefined' && Buffer.isBuffer(value)) {
    return 'buffer';
  }
  return Object.prototype.toString.call(value)
    .replace(/^\[.+\s(.+?)\]$/, '$1')
    .toLowerCase();
};

/**
 * @summary Stringify `value`.
 * @description Different behavior depending on type of value.
 * - If `value` is undefined or null, return `'[undefined]'` or `'[null]'`, respectively.
 * - If `value` is not an object, function or array, return result of `value.toString()` wrapped in double-quotes.
 * - If `value` is an *empty* object, function, or array, return result of function
 *   {@link emptyRepresentation}.
 * - If `value` has properties, call {@link exports.canonicalize} on it, then return result of
 *   JSON.stringify().
 *
 * @see exports.type
 * @param {*} value
 * @return {string}
 * @api private
 */

exports.stringify = function(value) {
  var prop,
    type = exports.type(value);

  if (type === 'null' || type === 'undefined') {
    return '[' + type + ']';
  }

  if (type === 'date') {
    return '[Date: ' + value.toISOString() + ']';
  }

  if (!~exports.indexOf(['object', 'array', 'function'], type)) {
    return value.toString();
  }

  for (prop in value) {
    if (value.hasOwnProperty(prop)) {
      return JSON.stringify(exports.canonicalize(value), null, 2).replace(/,(\n|$)/g, '$1');
    }
  }

  return emptyRepresentation(value, type);
};

/**
 * Return if obj is a Buffer
 * @param {Object} arg
 * @return {Boolean}
 * @api private
 */
exports.isBuffer = function (arg) {
  return typeof Buffer !== 'undefined' && Buffer.isBuffer(arg);
};

/**
 * @summary Return a new Thing that has the keys in sorted order.  Recursive.
 * @description If the Thing...
 * - has already been seen, return string `'[Circular]'`
 * - is `undefined`, return string `'[undefined]'`
 * - is `null`, return value `null`
 * - is some other primitive, return the value
 * - is not a primitive or an `Array`, `Object`, or `Function`, return the value of the Thing's `toString()` method
 * - is a non-empty `Array`, `Object`, or `Function`, return the result of calling this function again.
 * - is an empty `Array`, `Object`, or `Function`, return the result of calling `emptyRepresentation()`
 *
 * @param {*} value Thing to inspect.  May or may not have properties.
 * @param {Array} [stack=[]] Stack of seen values
 * @return {(Object|Array|Function|string|undefined)}
 * @see {@link exports.stringify}
 * @api private
 */

exports.canonicalize = function(value, stack) {
  var canonicalizedObj,
    type = exports.type(value),
    prop,
    withStack = function withStack(value, fn) {
      stack.push(value);
      fn();
      stack.pop();
    };

  stack = stack || [];

  if (exports.indexOf(stack, value) !== -1) {
    return '[Circular]';
  }

  switch(type) {
    case 'undefined':
      canonicalizedObj = '[undefined]';
      break;
    case 'buffer':
    case 'null':
      canonicalizedObj = value;
      break;
    case 'array':
      withStack(value, function () {
        canonicalizedObj = exports.map(value, function (item) {
          return exports.canonicalize(item, stack);
        });
      });
      break;
    case 'date':
      canonicalizedObj = '[Date: ' + value.toISOString() + ']';
      break;
    case 'function':
      for (prop in value) {
        canonicalizedObj = {};
        break;
      }
      if (!canonicalizedObj) {
        canonicalizedObj = emptyRepresentation(value, type);
        break;
      }
    /* falls through */
    case 'object':
      canonicalizedObj = canonicalizedObj || {};
      withStack(value, function () {
        exports.forEach(exports.keys(value).sort(), function (key) {
          canonicalizedObj[key] = exports.canonicalize(value[key], stack);
        });
      });
      break;
    case 'number':
    case 'boolean':
      canonicalizedObj = value;
      break;
    default:
      canonicalizedObj = value.toString();
  }

  return canonicalizedObj;
};

/**
 * Lookup file names at the given `path`.
 */
exports.lookupFiles = function lookupFiles(path, extensions, recursive) {
  var files = [];
  var re = new RegExp('\\.(' + extensions.join('|') + ')$');

  if (!exists(path)) {
    if (exists(path + '.js')) {
      path += '.js';
    } else {
      files = glob.sync(path);
      if (!files.length) throw new Error("cannot resolve path (or pattern) '" + path + "'");
      return files;
    }
  }

  try {
    var stat = fs.statSync(path);
    if (stat.isFile()) return path;
  }
  catch (ignored) {
    return;
  }

  fs.readdirSync(path).forEach(function(file){
    file = join(path, file);
    try {
      var stat = fs.statSync(file);
      if (stat.isDirectory()) {
        if (recursive) {
          files = files.concat(lookupFiles(file, extensions, recursive));
        }
        return;
      }
    }
    catch (ignored) {
      return;
    }
    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') return;
    files.push(file);
  });

  return files;
};

/**
 * Generate an undefined error with a message warning the user.
 *
 * @return {Error}
 */

exports.undefinedError = function(){
  return new Error('Caught undefined error, did you throw without specifying what?');
};

/**
 * Generate an undefined error if `err` is not defined.
 *
 * @param {Error} err
 * @return {Error}
 */

exports.getError = function(err){
  return err || exports.undefinedError();
};


}); // module: utils.js
// The global object is "self" in Web Workers.
var global = (function() { return this; })();

/**
 * Save timer references to avoid Sinon interfering (see GH-237).
 */

var Date = global.Date;
var setTimeout = global.setTimeout;
var setInterval = global.setInterval;
var clearTimeout = global.clearTimeout;
var clearInterval = global.clearInterval;

/**
 * Node shims.
 *
 * These are meant only to allow
 * mocha.js to run untouched, not
 * to allow running node code in
 * the browser.
 */

var process = {};
process.exit = function(status){};
process.stdout = {};

var uncaughtExceptionHandlers = [];

var originalOnerrorHandler = global.onerror;

/**
 * Remove uncaughtException listener.
 * Revert to original onerror handler if previously defined.
 */

process.removeListener = function(e, fn){
  if ('uncaughtException' == e) {
    if (originalOnerrorHandler) {
      global.onerror = originalOnerrorHandler;
    } else {
      global.onerror = function() {};
    }
    var i = Mocha.utils.indexOf(uncaughtExceptionHandlers, fn);
    if (i != -1) { uncaughtExceptionHandlers.splice(i, 1); }
  }
};

/**
 * Implements uncaughtException listener.
 */

process.on = function(e, fn){
  if ('uncaughtException' == e) {
    global.onerror = function(err, url, line){
      fn(new Error(err + ' (' + url + ':' + line + ')'));
      return true;
    };
    uncaughtExceptionHandlers.push(fn);
  }
};

/**
 * Expose mocha.
 */

var Mocha = global.Mocha = require('mocha'),
    mocha = global.mocha = new Mocha({ reporter: 'html' });

// The BDD UI is registered by default, but no UI will be functional in the
// browser without an explicit call to the overridden `mocha.ui` (see below).
// Ensure that this default UI does not expose its methods to the global scope.
mocha.suite.removeAllListeners('pre-require');

var immediateQueue = []
  , immediateTimeout;

function timeslice() {
  var immediateStart = new Date().getTime();
  while (immediateQueue.length && (new Date().getTime() - immediateStart) < 100) {
    immediateQueue.shift()();
  }
  if (immediateQueue.length) {
    immediateTimeout = setTimeout(timeslice, 0);
  } else {
    immediateTimeout = null;
  }
}

/**
 * High-performance override of Runner.immediately.
 */

Mocha.Runner.immediately = function(callback) {
  immediateQueue.push(callback);
  if (!immediateTimeout) {
    immediateTimeout = setTimeout(timeslice, 0);
  }
};

/**
 * Function to allow assertion libraries to throw errors directly into mocha.
 * This is useful when running tests in a browser because window.onerror will
 * only receive the 'message' attribute of the Error.
 */
mocha.throwError = function(err) {
  Mocha.utils.forEach(uncaughtExceptionHandlers, function (fn) {
    fn(err);
  });
  throw err;
};

/**
 * Override ui to ensure that the ui functions are initialized.
 * Normally this would happen in Mocha.prototype.loadFiles.
 */

mocha.ui = function(ui){
  Mocha.prototype.ui.call(this, ui);
  this.suite.emit('pre-require', global, null, this);
  return this;
};

/**
 * Setup mocha with the given setting options.
 */

mocha.setup = function(opts){
  if ('string' == typeof opts) opts = { ui: opts };
  for (var opt in opts) this[opt](opts[opt]);
  return this;
};

/**
 * Run mocha, returning the Runner.
 */

mocha.run = function(fn){
  var options = mocha.options;
  mocha.globals('location');

  var query = Mocha.utils.parseQuery(global.location.search || '');
  if (query.grep) mocha.grep(query.grep);
  if (query.invert) mocha.invert();

  return Mocha.prototype.run.call(mocha, function(err){
    // The DOM Document is not available in Web Workers.
    var document = global.document;
    if (document && document.getElementById('mocha') && options.noHighlighting !== true) {
      Mocha.utils.highlightTags('code');
    }
    if (fn) fn(err);
  });
};

/**
 * Expose the process shim.
 */

Mocha.process = process;
})();

});

require.register("johntron~asap@master", function (exports, module) {
"use strict";

// Use the fastest possible means to execute a task in a future turn
// of the event loop.

// linked list of tasks (single, with head node)
var head = {task: void 0, next: null};
var tail = head;
var flushing = false;
var requestFlush = void 0;
var hasSetImmediate = typeof setImmediate === "function";
var domain;

if (typeof global != 'undefined') {
	// Avoid shims from browserify.
	// The existence of `global` in browsers is guaranteed by browserify.
	var process = global.process;
}

// Note that some fake-Node environments,
// like the Mocha test runner, introduce a `process` global.
var isNodeJS = !!process && ({}).toString.call(process) === "[object process]";

function flush() {
    /* jshint loopfunc: true */

    while (head.next) {
        head = head.next;
        var task = head.task;
        head.task = void 0;

        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them to interrupt flushing!

                // Ensure continuation if an uncaught exception is suppressed
                // listening process.on("uncaughtException") or domain("error").
                requestFlush();

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function () {
                    throw e;
                }, 0);
            }
        }
    }

    flushing = false;
}

if (isNodeJS) {
    // Node.js
    requestFlush = function () {
        // Ensure flushing is not bound to any domain.
        var currentDomain = process.domain;
        if (currentDomain) {
            domain = domain || (1,require)("domain");
            domain.active = process.domain = null;
        }

        // Avoid tick recursion - use setImmediate if it exists.
        if (flushing && hasSetImmediate) {
            setImmediate(flush);
        } else {
            process.nextTick(flush);
        }

        if (currentDomain) {
            domain.active = process.domain = currentDomain;
        }
    };

} else if (hasSetImmediate) {
    // In IE10, or https://github.com/NobleJS/setImmediate
    requestFlush = function () {
        setImmediate(flush);
    };

} else if (typeof MessageChannel !== "undefined") {
    // modern browsers
    // http://www.nonblocking.io/2011/06/windownexttick.html
    var channel = new MessageChannel();
    // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
    // working message ports the first time a page loads.
    channel.port1.onmessage = function () {
        requestFlush = requestPortFlush;
        channel.port1.onmessage = flush;
        flush();
    };
    var requestPortFlush = function () {
        // Opera requires us to provide a message payload, regardless of
        // whether we use it.
        channel.port2.postMessage(0);
    };
    requestFlush = function () {
        setTimeout(flush, 0);
        requestPortFlush();
    };

} else {
    // old browsers
    requestFlush = function () {
        setTimeout(flush, 0);
    };
}

function asap(task) {
    if (isNodeJS && process.domain) {
        task = process.domain.bind(task);
    }

    tail = tail.next = {task: task, next: null};

    if (!flushing) {
        requestFlush();
        flushing = true;
    }
};

module.exports = asap;

});

require.register("then~promise@d0bab8d4e8a704bb71d83d48eabebacc360651c7", function (exports, module) {
'use strict'

//This file contains then/promise specific extensions to the core promise API

var Promise = require('then~promise@d0bab8d4e8a704bb71d83d48eabebacc360651c7/core.js')
var asap = require('johntron~asap@master')

module.exports = Promise

/* Static Functions */

function ValuePromise(value) {
  this.then = function (onFulfilled) {
    if (typeof onFulfilled !== 'function') return this
    return new Promise(function (resolve, reject) {
      asap(function () {
        try {
          resolve(onFulfilled(value))
        } catch (ex) {
          reject(ex);
        }
      })
    })
  }
}
ValuePromise.prototype = Object.create(Promise.prototype)

var TRUE = new ValuePromise(true)
var FALSE = new ValuePromise(false)
var NULL = new ValuePromise(null)
var UNDEFINED = new ValuePromise(undefined)
var ZERO = new ValuePromise(0)
var EMPTYSTRING = new ValuePromise('')

Promise.from = function (value) {
  if (value instanceof Promise) return value

  if (value === null) return NULL
  if (value === undefined) return UNDEFINED
  if (value === true) return TRUE
  if (value === false) return FALSE
  if (value === 0) return ZERO
  if (value === '') return EMPTYSTRING

  if (typeof value === 'object' || typeof value === 'function') {
    try {
      var then = value.then
      if (typeof then === 'function') {
        return new Promise(then.bind(value))
      }
    } catch (ex) {
      return new Promise(function (resolve, reject) {
        reject(ex)
      })
    }
  }

  return new ValuePromise(value)
}
Promise.denodeify = function (fn) {
  return function () {
    var self = this
    var args = Array.prototype.slice.call(arguments)
    return new Promise(function (resolve, reject) {
      args.push(function (err, res) {
        if (err) reject(err)
        else resolve(res)
      })
      fn.apply(self, args)
    })
  }
}
Promise.nodeify = function (fn) {
  return function () {
    var args = Array.prototype.slice.call(arguments)
    var callback = typeof args[args.length - 1] === 'function' ? args.pop() : null
    try {
      return fn.apply(this, arguments).nodeify(callback)
    } catch (ex) {
      if (callback == null) {
        return new Promise(function (resolve, reject) { reject(ex) })
      } else {
        asap(function () {
          callback(ex)
        })
      }
    }
  }
}

Promise.all = function () {
  var args = Array.prototype.slice.call(arguments.length === 1 && Array.isArray(arguments[0]) ? arguments[0] : arguments)

  return new Promise(function (resolve, reject) {
    if (args.length === 0) return resolve([])
    var remaining = args.length
    function res(i, val) {
      try {
        if (val && (typeof val === 'object' || typeof val === 'function')) {
          var then = val.then
          if (typeof then === 'function') {
            then.call(val, function (val) { res(i, val) }, reject)
            return
          }
        }
        args[i] = val
        if (--remaining === 0) {
          resolve(args);
        }
      } catch (ex) {
        reject(ex)
      }
    }
    for (var i = 0; i < args.length; i++) {
      res(i, args[i])
    }
  })
}

/* Prototype Methods */

Promise.prototype.done = function (onFulfilled, onRejected) {
  var self = arguments.length ? this.then.apply(this, arguments) : this
  self.then(null, function (err) {
    asap(function () {
      throw err
    })
  })
}
Promise.prototype.nodeify = function (callback) {
  if (callback == null) return this

  this.then(function (value) {
    asap(function () {
      callback(null, value)
    })
  }, function (err) {
    asap(function () {
      callback(err)
    })
  })
}
});

require.register("then~promise@d0bab8d4e8a704bb71d83d48eabebacc360651c7/core.js", function (exports, module) {
'use strict'

var asap = require('johntron~asap@master')

module.exports = Promise
function Promise(fn) {
  if (!(this instanceof Promise)) return new Promise(fn)
  if (typeof fn !== 'function') throw new TypeError('not a function')
  var state = null
  var value = null
  var deferreds = []
  var self = this

  this.then = function(onFulfilled, onRejected) {
    return new Promise(function(resolve, reject) {
      handle(new Handler(onFulfilled, onRejected, resolve, reject))
    })
  }

  function handle(deferred) {
    if (state === null) {
      deferreds.push(deferred)
      return
    }
    asap(function() {
      var cb = state ? deferred.onFulfilled : deferred.onRejected
      if (cb === null) {
        (state ? deferred.resolve : deferred.reject)(value)
        return
      }
      var ret
      try {
        ret = cb(value)
      }
      catch (e) {
        deferred.reject(e)
        return
      }
      deferred.resolve(ret)
    })
  }

  function resolve(newValue) {
    try { //Promise Resolution Procedure: https://github.com/promises-aplus/promises-spec#the-promise-resolution-procedure
      if (newValue === self) throw new TypeError('A promise cannot be resolved with itself.')
      if (newValue && (typeof newValue === 'object' || typeof newValue === 'function')) {
        var then = newValue.then
        if (typeof then === 'function') {
          doResolve(then.bind(newValue), resolve, reject)
          return
        }
      }
      state = true
      value = newValue
      finale()
    } catch (e) { reject(e) }
  }

  function reject(newValue) {
    state = false
    value = newValue
    finale()
  }

  function finale() {
    for (var i = 0, len = deferreds.length; i < len; i++)
      handle(deferreds[i])
    deferreds = null
  }

  doResolve(fn, resolve, reject)
}


function Handler(onFulfilled, onRejected, resolve, reject){
  this.onFulfilled = typeof onFulfilled === 'function' ? onFulfilled : null
  this.onRejected = typeof onRejected === 'function' ? onRejected : null
  this.resolve = resolve
  this.reject = reject
}

/**
 * Take a potentially misbehaving resolver function and make sure
 * onFulfilled and onRejected are only called once.
 *
 * Makes no guarantees about asynchrony.
 */
function doResolve(fn, onFulfilled, onRejected) {
  var done = false;
  try {
    fn(function (value) {
      if (done) return
      done = true
      onFulfilled(value)
    }, function (reason) {
      if (done) return
      done = true
      onRejected(reason)
    })
  } catch (ex) {
    if (done) return
    done = true
    onRejected(ex)
  }
}

});

require.register("pillarjs~path-to-regexp@v1.0.1", function (exports, module) {
/**
 * Expose `pathtoRegexp`.
 */
module.exports = pathtoRegexp;

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match already escaped characters that would otherwise incorrectly appear
  // in future matches. This allows the user to escape special characters that
  // shouldn't be transformed.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?"]
  // "/route(\\d+)" => [undefined, undefined, undefined, "\d+", undefined]
  '([\\/.])?(?:\\:(\\w+)(?:\\(((?:\\\\.|[^)])*)\\))?|\\(((?:\\\\.|[^)])*)\\))([+*?])?',
  // Match regexp special characters that should always be escaped.
  '([.+*?=^!:${}()[\\]|\\/])'
].join('|'), 'g');

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {String} group
 * @return {String}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1');
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {RegExp} re
 * @param  {Array}  keys
 * @return {RegExp}
 */
var attachKeys = function (re, keys) {
  re.keys = keys;

  return re;
};

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array should be passed in, which will contain the placeholder key
 * names. For example `/user/:id` will then contain `["id"]`.
 *
 * @param  {(String|RegExp|Array)} path
 * @param  {Array}                 keys
 * @param  {Object}                options
 * @return {RegExp}
 */
function pathtoRegexp (path, keys, options) {
  if (keys && !Array.isArray(keys)) {
    options = keys;
    keys = null;
  }

  keys = keys || [];
  options = options || {};

  var strict = options.strict;
  var end = options.end !== false;
  var flags = options.sensitive ? '' : 'i';
  var index = 0;

  if (path instanceof RegExp) {
    // Match all capturing groups of a regexp.
    var groups = path.source.match(/\((?!\?)/g) || [];

    // Map all the matches to their numeric keys and push into the keys.
    keys.push.apply(keys, groups.map(function (match, index) {
      return {
        name:      index,
        delimiter: null,
        optional:  false,
        repeat:    false
      };
    }));

    // Return the source back to the user.
    return attachKeys(path, keys);
  }

  if (Array.isArray(path)) {
    // Map array parts into regexps and return their source. We also pass
    // the same keys and options instance into every generation to get
    // consistent matching groups before we join the sources together.
    path = path.map(function (value) {
      return pathtoRegexp(value, keys, options).source;
    });

    // Generate a new regexp instance by joining all the parts together.
    return attachKeys(new RegExp('(?:' + path.join('|') + ')', flags), keys);
  }

  // Alter the path string into a usable regexp.
  path = path.replace(PATH_REGEXP, function (match, escaped, prefix, key, capture, group, suffix, escape) {
    // Avoiding re-escaping escaped characters.
    if (escaped) {
      return escaped;
    }

    // Escape regexp special characters.
    if (escape) {
      return '\\' + escape;
    }

    var repeat   = suffix === '+' || suffix === '*';
    var optional = suffix === '?' || suffix === '*';

    keys.push({
      name:      key || index++,
      delimiter: prefix || '/',
      optional:  optional,
      repeat:    repeat
    });

    // Escape the prefix character.
    prefix = prefix ? '\\' + prefix : '';

    // Match using the custom capturing group, or fallback to capturing
    // everything up to the next slash (or next period if the param was
    // prefixed with a period).
    capture = escapeGroup(capture || group || '[^' + (prefix || '\\/') + ']+?');

    // Allow parameters to be repeated more than once.
    if (repeat) {
      capture = capture + '(?:' + prefix + capture + ')*';
    }

    // Allow a parameter to be optional.
    if (optional) {
      return '(?:' + prefix + '(' + capture + '))?';
    }

    // Basic parameter support.
    return prefix + '(' + capture + ')';
  });

  // Check whether the path ends in a slash as it alters some match behaviour.
  var endsWithSlash = path[path.length - 1] === '/';

  // In non-strict mode we allow an optional trailing slash in the match. If
  // the path to match already ended with a slash, we need to remove it for
  // consistency. The slash is only valid at the very end of a path match, not
  // anywhere in the middle. This is important for non-ending mode, otherwise
  // "/test/" will match "/test//route".
  if (!strict) {
    path = (endsWithSlash ? path.slice(0, -2) : path) + '(?:\\/(?=$))?';
  }

  // In non-ending mode, we need prompt the capturing groups to match as much
  // as possible by using a positive lookahead for the end or next path segment.
  if (!end) {
    path += strict && endsWithSlash ? '' : '(?=\\/|$)';
  }

  return attachKeys(new RegExp('^' + path + (end ? '$' : ''), flags), keys);
};

});

require.register("visionmedia~page.js@1.6.1", function (exports, module) {
  /* globals require, module */

  'use strict';

  /**
   * Module dependencies.
   */

  var pathtoRegexp = require('pillarjs~path-to-regexp@v1.0.1');

  /**
   * Module exports.
   */

  module.exports = page;

  /**
   * To work properly with the URL
   * history.location generated polyfill in https://github.com/devote/HTML5-History-API
   */

  var location = ('undefined' !== typeof window) && (window.history.location || window.location);

  /**
   * Perform initial dispatch.
   */

  var dispatch = true;

  /**
   * Decode URL components (query string, pathname, hash).
   * Accommodates both regular percent encoding and x-www-form-urlencoded format.
   */
  var decodeURLComponents = true;

  /**
   * Base path.
   */

  var base = '';

  /**
   * Running flag.
   */

  var running;

  /**
   * HashBang option
   */

  var hashbang = false;

  /**
   * Previous context, for capturing
   * page exit events.
   */

  var prevContext;

  /**
   * Register `path` with callback `fn()`,
   * or route `path`, or redirection,
   * or `page.start()`.
   *
   *   page(fn);
   *   page('*', fn);
   *   page('/user/:id', load, user);
   *   page('/user/' + user.id, { some: 'thing' });
   *   page('/user/' + user.id);
   *   page('/from', '/to')
   *   page();
   *
   * @param {String|Function} path
   * @param {Function} fn...
   * @api public
   */

  function page(path, fn) {
    // <callback>
    if ('function' === typeof path) {
      return page('*', path);
    }

    // route <path> to <callback ...>
    if ('function' === typeof fn) {
      var route = new Route(path);
      for (var i = 1; i < arguments.length; ++i) {
        page.callbacks.push(route.middleware(arguments[i]));
      }
      // show <path> with [state]
    } else if ('string' === typeof path) {
      page['string' === typeof fn ? 'redirect' : 'show'](path, fn);
      // start [options]
    } else {
      page.start(path);
    }
  }

  /**
   * Callback functions.
   */

  page.callbacks = [];
  page.exits = [];

  /**
   * Current path being processed
   * @type {String}
   */
  page.current = '';

  /**
   * Number of pages navigated to.
   * @type {number}
   *
   *     page.len == 0;
   *     page('/login');
   *     page.len == 1;
   */

  page.len = 0;

  /**
   * Get or set basepath to `path`.
   *
   * @param {String} path
   * @api public
   */

  page.base = function(path) {
    if (0 === arguments.length) return base;
    base = path;
  };

  /**
   * Bind with the given `options`.
   *
   * Options:
   *
   *    - `click` bind to click events [true]
   *    - `popstate` bind to popstate [true]
   *    - `dispatch` perform initial dispatch [true]
   *
   * @param {Object} options
   * @api public
   */

  page.start = function(options) {
    options = options || {};
    if (running) return;
    running = true;
    if (false === options.dispatch) dispatch = false;
    if (false === options.decodeURLComponents) decodeURLComponents = false;
    if (false !== options.popstate) window.addEventListener('popstate', onpopstate, false);
    if (false !== options.click) window.addEventListener('click', onclick, false);
    if (true === options.hashbang) hashbang = true;
    if (!dispatch) return;
    var url = (hashbang && ~location.hash.indexOf('#!')) ? location.hash.substr(2) + location.search : location.pathname + location.search + location.hash;
    page.replace(url, null, true, dispatch);
  };

  /**
   * Unbind click and popstate event handlers.
   *
   * @api public
   */

  page.stop = function() {
    if (!running) return;
    page.current = '';
    page.len = 0;
    running = false;
    window.removeEventListener('click', onclick, false);
    window.removeEventListener('popstate', onpopstate, false);
  };

  /**
   * Show `path` with optional `state` object.
   *
   * @param {String} path
   * @param {Object} state
   * @param {Boolean} dispatch
   * @return {Context}
   * @api public
   */

  page.show = function(path, state, dispatch, push) {
    var ctx = new Context(path, state);
    page.current = ctx.path;
    if (false !== dispatch) page.dispatch(ctx);
    if (false !== ctx.handled && false !== push) ctx.pushState();
    return ctx;
  };

  /**
   * Goes back in the history
   * Back should always let the current route push state and then go back.
   *
   * @param {String} path - fallback path to go back if no more history exists, if undefined defaults to page.base
   * @param {Object} [state]
   * @api public
   */

  page.back = function(path, state) {
    if (page.len > 0) {
      // this may need more testing to see if all browsers
      // wait for the next tick to go back in history
      history.back();
      page.len--;
    } else if (path) {
      setTimeout(function() {
        page.show(path, state);
      });
    }else{
      setTimeout(function() {
        page.show(base, state);
      });
    }
  };


  /**
   * Register route to redirect from one path to other
   * or just redirect to another route
   *
   * @param {String} from - if param 'to' is undefined redirects to 'from'
   * @param {String} [to]
   * @api public
   */
  page.redirect = function(from, to) {
    // Define route from a path to another
    if ('string' === typeof from && 'string' === typeof to) {
      page(from, function(e) {
        setTimeout(function() {
          page.replace(to);
        }, 0);
      });
    }

    // Wait for the push state and replace it with another
    if ('string' === typeof from && 'undefined' === typeof to) {
      setTimeout(function() {
        page.replace(from);
      }, 0);
    }
  };

  /**
   * Replace `path` with optional `state` object.
   *
   * @param {String} path
   * @param {Object} state
   * @return {Context}
   * @api public
   */


  page.replace = function(path, state, init, dispatch) {
    var ctx = new Context(path, state);
    page.current = ctx.path;
    ctx.init = init;
    ctx.save(); // save before dispatching, which may redirect
    if (false !== dispatch) page.dispatch(ctx);
    return ctx;
  };

  /**
   * Dispatch the given `ctx`.
   *
   * @param {Object} ctx
   * @api private
   */

  page.dispatch = function(ctx) {
    var prev = prevContext,
      i = 0,
      j = 0;

    prevContext = ctx;

    function nextExit() {
      var fn = page.exits[j++];
      if (!fn) return nextEnter();
      fn(prev, nextExit);
    }

    function nextEnter() {
      var fn = page.callbacks[i++];

      if (ctx.path !== page.current) {
        ctx.handled = false;
        return;
      }
      if (!fn) return unhandled(ctx);
      fn(ctx, nextEnter);
    }

    if (prev) {
      nextExit();
    } else {
      nextEnter();
    }
  };

  /**
   * Unhandled `ctx`. When it's not the initial
   * popstate then redirect. If you wish to handle
   * 404s on your own use `page('*', callback)`.
   *
   * @param {Context} ctx
   * @api private
   */

  function unhandled(ctx) {
    if (ctx.handled) return;
    var current;

    if (hashbang) {
      current = base + location.hash.replace('#!', '');
    } else {
      current = location.pathname + location.search;
    }

    if (current === ctx.canonicalPath) return;
    page.stop();
    ctx.handled = false;
    location.href = ctx.canonicalPath;
  }

  /**
   * Register an exit route on `path` with
   * callback `fn()`, which will be called
   * on the previous context when a new
   * page is visited.
   */
  page.exit = function(path, fn) {
    if (typeof path === 'function') {
      return page.exit('*', path);
    }

    var route = new Route(path);
    for (var i = 1; i < arguments.length; ++i) {
      page.exits.push(route.middleware(arguments[i]));
    }
  };

  /**
   * Remove URL encoding from the given `str`.
   * Accommodates whitespace in both x-www-form-urlencoded
   * and regular percent-encoded form.
   *
   * @param {str} URL component to decode
   */
  function decodeURLEncodedURIComponent(val) {
    if (typeof val !== 'string') { return val; }
    return decodeURLComponents ? decodeURIComponent(val.replace(/\+/g, ' ')) : val;
  }

  /**
   * Initialize a new "request" `Context`
   * with the given `path` and optional initial `state`.
   *
   * @param {String} path
   * @param {Object} state
   * @api public
   */

  function Context(path, state) {
    if ('/' === path[0] && 0 !== path.indexOf(base)) path = base + (hashbang ? '#!' : '') + path;
    var i = path.indexOf('?');

    this.canonicalPath = path;
    this.path = path.replace(base, '') || '/';
    if (hashbang) this.path = this.path.replace('#!', '') || '/';

    this.title = document.title;
    this.state = state || {};
    this.state.path = path;
    this.querystring = ~i ? decodeURLEncodedURIComponent(path.slice(i + 1)) : '';
    this.pathname = decodeURLEncodedURIComponent(~i ? path.slice(0, i) : path);
    this.params = {};

    // fragment
    this.hash = '';
    if (!hashbang) {
      if (!~this.path.indexOf('#')) return;
      var parts = this.path.split('#');
      this.path = parts[0];
      this.hash = decodeURLEncodedURIComponent(parts[1]) || '';
      this.querystring = this.querystring.split('#')[0];
    }
  }

  /**
   * Expose `Context`.
   */

  page.Context = Context;

  /**
   * Push state.
   *
   * @api private
   */

  Context.prototype.pushState = function() {
    page.len++;
    history.pushState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
  };

  /**
   * Save the context state.
   *
   * @api public
   */

  Context.prototype.save = function() {
    history.replaceState(this.state, this.title, hashbang && this.path !== '/' ? '#!' + this.path : this.canonicalPath);
  };

  /**
   * Initialize `Route` with the given HTTP `path`,
   * and an array of `callbacks` and `options`.
   *
   * Options:
   *
   *   - `sensitive`    enable case-sensitive routes
   *   - `strict`       enable strict matching for trailing slashes
   *
   * @param {String} path
   * @param {Object} options.
   * @api private
   */

  function Route(path, options) {
    options = options || {};
    this.path = (path === '*') ? '(.*)' : path;
    this.method = 'GET';
    this.regexp = pathtoRegexp(this.path,
      this.keys = [],
      options.sensitive,
      options.strict);
  }

  /**
   * Expose `Route`.
   */

  page.Route = Route;

  /**
   * Return route middleware with
   * the given callback `fn()`.
   *
   * @param {Function} fn
   * @return {Function}
   * @api public
   */

  Route.prototype.middleware = function(fn) {
    var self = this;
    return function(ctx, next) {
      if (self.match(ctx.path, ctx.params)) return fn(ctx, next);
      next();
    };
  };

  /**
   * Check if this route matches `path`, if so
   * populate `params`.
   *
   * @param {String} path
   * @param {Object} params
   * @return {Boolean}
   * @api private
   */

  Route.prototype.match = function(path, params) {
    var keys = this.keys,
      qsIndex = path.indexOf('?'),
      pathname = ~qsIndex ? path.slice(0, qsIndex) : path,
      m = this.regexp.exec(decodeURIComponent(pathname));

    if (!m) return false;

    for (var i = 1, len = m.length; i < len; ++i) {
      var key = keys[i - 1];
      var val = decodeURLEncodedURIComponent(m[i]);
      if (val !== undefined || !(hasOwnProperty.call(params, key.name))) {
        params[key.name] = val;
      }
    }

    return true;
  };

  /**
   * Handle "populate" events.
   */

  function onpopstate(e) {
    if (e.state) {
      var path = e.state.path;
      page.replace(path, e.state);
    } else {
      page.show(location.pathname + location.hash, undefined, undefined, false);
    }
  }

  /**
   * Handle "click" events.
   */

  function onclick(e) {

    if (1 !== which(e)) return;

    if (e.metaKey || e.ctrlKey || e.shiftKey) return;
    if (e.defaultPrevented) return;



    // ensure link
    var el = e.target;
    while (el && 'A' !== el.nodeName) el = el.parentNode;
    if (!el || 'A' !== el.nodeName) return;



    // Ignore if tag has
    // 1. "download" attribute
    // 2. rel="external" attribute
    if (el.getAttribute('download') || el.getAttribute('rel') === 'external') return;

    // ensure non-hash for the same path
    var link = el.getAttribute('href');
    if (!hashbang && el.pathname === location.pathname && (el.hash || '#' === link)) return;



    // Check for mailto: in the href
    if (link && link.indexOf('mailto:') > -1) return;

    // check target
    if (el.target) return;

    // x-origin
    if (!sameOrigin(el.href)) return;



    // rebuild path
    var path = el.pathname + el.search + (el.hash || '');

    // same page
    var orig = path;

    path = path.replace(base, '');
    if (hashbang) path = path.replace('#!', '');



    if (base && orig === path) return;

    e.preventDefault();
    page.show(orig);
  }

  /**
   * Event button.
   */

  function which(e) {
    e = e || window.event;
    return null === e.which ? e.button : e.which;
  }

  /**
   * Check if `href` is the same origin.
   */

  function sameOrigin(href) {
    var origin = location.protocol + '//' + location.hostname;
    if (location.port) origin += ':' + location.port;
    return (href && (0 === href.indexOf(origin)));
  }

  page.sameOrigin = sameOrigin;

});

require.register("component~event@0.1.2", function (exports, module) {
var bind = window.addEventListener ? 'addEventListener' : 'attachEvent',
    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',
    prefix = bind !== 'addEventListener' ? 'on' : '';

/**
 * Bind `el` event `type` to `fn`.
 *
 * @param {Element} el
 * @param {String} type
 * @param {Function} fn
 * @param {Boolean} capture
 * @return {Function}
 * @api public
 */

exports.bind = function(el, type, fn, capture){
  el[bind](prefix + type, fn, capture || false);

  return fn;
};

/**
 * Unbind `el` event `type`'s callback `fn`.
 *
 * @param {Element} el
 * @param {String} type
 * @param {Function} fn
 * @param {Boolean} capture
 * @return {Function}
 * @api public
 */

exports.unbind = function(el, type, fn, capture){
  el[unbind](prefix + type, fn, capture || false);

  return fn;
};
});

require.register("component~event@0.1.4", function (exports, module) {
var bind = window.addEventListener ? 'addEventListener' : 'attachEvent',
    unbind = window.removeEventListener ? 'removeEventListener' : 'detachEvent',
    prefix = bind !== 'addEventListener' ? 'on' : '';

/**
 * Bind `el` event `type` to `fn`.
 *
 * @param {Element} el
 * @param {String} type
 * @param {Function} fn
 * @param {Boolean} capture
 * @return {Function}
 * @api public
 */

exports.bind = function(el, type, fn, capture){
  el[bind](prefix + type, fn, capture || false);
  return fn;
};

/**
 * Unbind `el` event `type`'s callback `fn`.
 *
 * @param {Element} el
 * @param {String} type
 * @param {Function} fn
 * @param {Boolean} capture
 * @return {Function}
 * @api public
 */

exports.unbind = function(el, type, fn, capture){
  el[unbind](prefix + type, fn, capture || false);
  return fn;
};
});

require.register("component~indexof@0.0.3", function (exports, module) {
module.exports = function(arr, obj){
  if (arr.indexOf) return arr.indexOf(obj);
  for (var i = 0; i < arr.length; ++i) {
    if (arr[i] === obj) return i;
  }
  return -1;
};
});

require.register("component~classes@1.1.4", function (exports, module) {
/**
 * Module dependencies.
 */

var index = require('component~indexof@0.0.3');

/**
 * Whitespace regexp.
 */

var re = /\s+/;

/**
 * toString reference.
 */

var toString = Object.prototype.toString;

/**
 * Wrap `el` in a `ClassList`.
 *
 * @param {Element} el
 * @return {ClassList}
 * @api public
 */

module.exports = function(el){
  return new ClassList(el);
};

/**
 * Initialize a new ClassList for `el`.
 *
 * @param {Element} el
 * @api private
 */

function ClassList(el) {
  if (!el) throw new Error('A DOM element reference is required');
  this.el = el;
  this.list = el.classList;
}

/**
 * Add class `name` if not already present.
 *
 * @param {String} name
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.add = function(name){
  // classList
  if (this.list) {
    this.list.add(name);
    return this;
  }

  // fallback
  var arr = this.array();
  var i = index(arr, name);
  if (!~i) arr.push(name);
  this.el.className = arr.join(' ');
  return this;
};

/**
 * Remove class `name` when present, or
 * pass a regular expression to remove
 * any which match.
 *
 * @param {String|RegExp} name
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.remove = function(name){
  if ('[object RegExp]' == toString.call(name)) {
    return this.removeMatching(name);
  }

  // classList
  if (this.list) {
    this.list.remove(name);
    return this;
  }

  // fallback
  var arr = this.array();
  var i = index(arr, name);
  if (~i) arr.splice(i, 1);
  this.el.className = arr.join(' ');
  return this;
};

/**
 * Remove all classes matching `re`.
 *
 * @param {RegExp} re
 * @return {ClassList}
 * @api private
 */

ClassList.prototype.removeMatching = function(re){
  var arr = this.array();
  for (var i = 0; i < arr.length; i++) {
    if (re.test(arr[i])) {
      this.remove(arr[i]);
    }
  }
  return this;
};

/**
 * Toggle class `name`.
 *
 * @param {String} name
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.toggle = function(name){
  // classList
  if (this.list) {
    this.list.toggle(name);
    return this;
  }

  // fallback
  if (this.has(name)) {
    this.remove(name);
  } else {
    this.add(name);
  }
  return this;
};

/**
 * Return an array of classes.
 *
 * @return {Array}
 * @api public
 */

ClassList.prototype.array = function(){
  var str = this.el.className.replace(/^\s+|\s+$/g, '');
  var arr = str.split(re);
  if ('' === arr[0]) arr.shift();
  return arr;
};

/**
 * Check if class `name` is present.
 *
 * @param {String} name
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.has =
ClassList.prototype.contains = function(name){
  return this.list
    ? this.list.contains(name)
    : !! ~index(this.array(), name);
};

});

require.register("component~classes@1.2.3", function (exports, module) {
/**
 * Module dependencies.
 */

var index = require('component~indexof@0.0.3');

/**
 * Whitespace regexp.
 */

var re = /\s+/;

/**
 * toString reference.
 */

var toString = Object.prototype.toString;

/**
 * Wrap `el` in a `ClassList`.
 *
 * @param {Element} el
 * @return {ClassList}
 * @api public
 */

module.exports = function(el){
  return new ClassList(el);
};

/**
 * Initialize a new ClassList for `el`.
 *
 * @param {Element} el
 * @api private
 */

function ClassList(el) {
  if (!el || !el.nodeType) {
    throw new Error('A DOM element reference is required');
  }
  this.el = el;
  this.list = el.classList;
}

/**
 * Add class `name` if not already present.
 *
 * @param {String} name
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.add = function(name){
  // classList
  if (this.list) {
    this.list.add(name);
    return this;
  }

  // fallback
  var arr = this.array();
  var i = index(arr, name);
  if (!~i) arr.push(name);
  this.el.className = arr.join(' ');
  return this;
};

/**
 * Remove class `name` when present, or
 * pass a regular expression to remove
 * any which match.
 *
 * @param {String|RegExp} name
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.remove = function(name){
  if ('[object RegExp]' == toString.call(name)) {
    return this.removeMatching(name);
  }

  // classList
  if (this.list) {
    this.list.remove(name);
    return this;
  }

  // fallback
  var arr = this.array();
  var i = index(arr, name);
  if (~i) arr.splice(i, 1);
  this.el.className = arr.join(' ');
  return this;
};

/**
 * Remove all classes matching `re`.
 *
 * @param {RegExp} re
 * @return {ClassList}
 * @api private
 */

ClassList.prototype.removeMatching = function(re){
  var arr = this.array();
  for (var i = 0; i < arr.length; i++) {
    if (re.test(arr[i])) {
      this.remove(arr[i]);
    }
  }
  return this;
};

/**
 * Toggle class `name`, can force state via `force`.
 *
 * For browsers that support classList, but do not support `force` yet,
 * the mistake will be detected and corrected.
 *
 * @param {String} name
 * @param {Boolean} force
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.toggle = function(name, force){
  // classList
  if (this.list) {
    if ("undefined" !== typeof force) {
      if (force !== this.list.toggle(name, force)) {
        this.list.toggle(name); // toggle again to correct
      }
    } else {
      this.list.toggle(name);
    }
    return this;
  }

  // fallback
  if ("undefined" !== typeof force) {
    if (!force) {
      this.remove(name);
    } else {
      this.add(name);
    }
  } else {
    if (this.has(name)) {
      this.remove(name);
    } else {
      this.add(name);
    }
  }

  return this;
};

/**
 * Return an array of classes.
 *
 * @return {Array}
 * @api public
 */

ClassList.prototype.array = function(){
  var str = this.el.className.replace(/^\s+|\s+$/g, '');
  var arr = str.split(re);
  if ('' === arr[0]) arr.shift();
  return arr;
};

/**
 * Check if class `name` is present.
 *
 * @param {String} name
 * @return {ClassList}
 * @api public
 */

ClassList.prototype.has =
ClassList.prototype.contains = function(name){
  return this.list
    ? this.list.contains(name)
    : !! ~index(this.array(), name);
};

});

require.register("component~emitter@1.0.1", function (exports, module) {

/**
 * Module dependencies.
 */

var index = require('component~indexof@0.0.3');

/**
 * Expose `Emitter`.
 */

module.exports = Emitter;

/**
 * Initialize a new `Emitter`.
 *
 * @api public
 */

function Emitter(obj) {
  if (obj) return mixin(obj);
};

/**
 * Mixin the emitter properties.
 *
 * @param {Object} obj
 * @return {Object}
 * @api private
 */

function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}

/**
 * Listen on the given `event` with `fn`.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.on = function(event, fn){
  this._callbacks = this._callbacks || {};
  (this._callbacks[event] = this._callbacks[event] || [])
    .push(fn);
  return this;
};

/**
 * Adds an `event` listener that will be invoked a single
 * time then automatically removed.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.once = function(event, fn){
  var self = this;
  this._callbacks = this._callbacks || {};

  function on() {
    self.off(event, on);
    fn.apply(this, arguments);
  }

  fn._off = on;
  this.on(event, on);
  return this;
};

/**
 * Remove the given callback for `event` or all
 * registered callbacks.
 *
 * @param {String} event
 * @param {Function} fn
 * @return {Emitter}
 * @api public
 */

Emitter.prototype.off =
Emitter.prototype.removeListener =
Emitter.prototype.removeAllListeners = function(event, fn){
  this._callbacks = this._callbacks || {};

  // all
  if (0 == arguments.length) {
    this._callbacks = {};
    return this;
  }

  // specific event
  var callbacks = this._callbacks[event];
  if (!callbacks) return this;

  // remove all handlers
  if (1 == arguments.length) {
    delete this._callbacks[event];
    return this;
  }

  // remove specific handler
  var i = index(callbacks, fn._off || fn);
  if (~i) callbacks.splice(i, 1);
  return this;
};

/**
 * Emit `event` with the given args.
 *
 * @param {String} event
 * @param {Mixed} ...
 * @return {Emitter}
 */

Emitter.prototype.emit = function(event){
  this._callbacks = this._callbacks || {};
  var args = [].slice.call(arguments, 1)
    , callbacks = this._callbacks[event];

  if (callbacks) {
    callbacks = callbacks.slice(0);
    for (var i = 0, len = callbacks.length; i < len; ++i) {
      callbacks[i].apply(this, args);
    }
  }

  return this;
};

/**
 * Return array of callbacks for `event`.
 *
 * @param {String} event
 * @return {Array}
 * @api public
 */

Emitter.prototype.listeners = function(event){
  this._callbacks = this._callbacks || {};
  return this._callbacks[event] || [];
};

/**
 * Check if this emitter has `event` handlers.
 *
 * @param {String} event
 * @return {Boolean}
 * @api public
 */

Emitter.prototype.hasListeners = function(event){
  return !! this.listeners(event).length;
};

});

require.register("component~reduce@1.0.1", function (exports, module) {

/**
 * Reduce `arr` with `fn`.
 *
 * @param {Array} arr
 * @param {Function} fn
 * @param {Mixed} initial
 *
 * TODO: combatible error handling?
 */

module.exports = function(arr, fn, initial){  
  var idx = 0;
  var len = arr.length;
  var curr = arguments.length == 3
    ? initial
    : arr[idx++];

  while (idx < len) {
    curr = fn.call(null, curr, arr[idx], ++idx, arr);
  }
  
  return curr;
};
});

require.register("johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026", function (exports, module) {
/**
 * Module dependencies.
 */

var Emitter = require('component~emitter@1.0.1');
var reduce = require('component~reduce@1.0.1');

/**
 * Root reference for iframes.
 */

var root = 'undefined' == typeof window
  ? this
  : window;

/**
 * Noop.
 */

function noop(){};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * TODO: future proof, move to compoent land
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isHost(obj) {
  var str = {}.toString.call(obj);

  switch (str) {
    case '[object File]':
    case '[object Blob]':
    case '[object FormData]':
      return true;
    default:
      return false;
  }
}

/**
 * Determine XHR.
 */

function getXHR() {
  if (root.XMLHttpRequest
    && ('file:' != root.location.protocol || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  return false;
}

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return obj === Object(obj);
}

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    if (null != obj[key]) {
      pairs.push(encodeURIComponent(key)
        + '=' + encodeURIComponent(obj[key]));
    }
  }
  return pairs.join('&');
}

/**
 * Expose serialization method.
 */

 request.serializeObject = serialize;

 /**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var parts;
  var pair;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    parts = pair.split('=');
    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  xml: 'application/xml',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

 request.serialize = {
   'application/x-www-form-urlencoded': serialize,
   'application/json': JSON.stringify
 };

 /**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  lines.pop(); // trailing CRLF

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function type(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function params(str){
  return reduce(str.split(/ *; */), function(obj, str){
    var parts = str.split(/ *= */)
      , key = parts.shift()
      , val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req, options) {
  options = options || {};
  this.req = req;
  this.xhr = this.req.xhr;
  this.text = this.xhr.responseText;
  this.setStatusProperties(this.xhr.status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this.setHeaderProperties(this.header);
  this.body = this.req.method != 'HEAD'
    ? this.parseBody(this.text)
    : null;
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

Response.prototype.get = function(field){
  return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

Response.prototype.setHeaderProperties = function(header){
  // content-type
  var ct = this.header['content-type'] || '';
  this.type = type(ct);

  // params
  var obj = params(ct);
  for (var key in obj) this[key] = obj[key];
};

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype.parseBody = function(str){
  var parse = request.parse[this.type];
  return parse
    ? parse(str)
    : null;
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

Response.prototype.setStatusProperties = function(status){
  var type = status / 100 | 0;

  // status / class
  this.status = status;
  this.statusType = type;

  // basics
  this.info = 1 == type;
  this.ok = 2 == type;
  this.clientError = 4 == type;
  this.serverError = 5 == type;
  this.error = (4 == type || 5 == type)
    ? this.toError()
    : false;

  // sugar
  this.accepted = 202 == status;
  this.noContent = 204 == status || 1223 == status;
  this.badRequest = 400 == status;
  this.unauthorized = 401 == status;
  this.notAcceptable = 406 == status;
  this.notFound = 404 == status;
  this.forbidden = 403 == status;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var path = req.path;

  var msg = 'cannot ' + method + ' ' + path + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.path = path;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  Emitter.call(this);
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {};
  this._header = {};
  this.on('end', function(){
    var res = new Response(self);
    if ('HEAD' == method) res.text = null;
    self.callback(null, res);
  });
}

/**
 * Mixin `Emitter`.
 */

Emitter(Request.prototype);

/**
 * Allow for extension
 */

Request.prototype.use = function(fn) {
  fn(this);
  return this;
}

/**
 * Set timeout to `ms`.
 *
 * @param {Number} ms
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.timeout = function(ms){
  this._timeout = ms;
  return this;
};

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.clearTimeout = function(){
  this._timeout = 0;
  clearTimeout(this._timer);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */

Request.prototype.abort = function(){
  if (this.aborted) return;
  this.aborted = true;
  this.xhr.abort();
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Set header `field` to `val`, or multiple fields with one object.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Get case-insensitive header `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api private
 */

Request.prototype.getHeader = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Accept to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.json = 'application/json';
 *
 *      request.get('/agent')
 *        .accept('json')
 *        .end(callback);
 *
 *      request.get('/agent')
 *        .accept('application/json')
 *        .end(callback);
 *
 * @param {String} accept
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.accept = function(type){
  this.set('Accept', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} pass
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass){
  var str = btoa(user + ':' + pass);
  this.set('Authorization', 'Basic ' + str);
  return this;
};

/**
* Add query-string `val`.
*
* Examples:
*
*   request.get('/shoes')
*     .query('size=10')
*     .query({ color: 'blue' })
*
* @param {Object|String} val
* @return {Request} for chaining
* @api public
*/

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  if (val) this._query.push(val);
  return this;
};

/**
 * Send `data`, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // querystring
 *       request.get('/search')
 *         .end(callback)
 *
 *       // multiple data "writes"
 *       request.get('/search')
 *         .send({ search: 'query' })
 *         .send({ range: '1..5' })
 *         .send({ order: 'desc' })
 *         .end(callback)
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"})
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
  *      request.post('/user')
  *        .send('name=tobi')
  *        .send('species=ferret')
  *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.send = function(data){
  var obj = isObject(data);
  var type = this.getHeader('Content-Type');

  // merge
  if (obj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    if (!type) this.type('form');
    type = this.getHeader('Content-Type');
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!obj) return this;
  if (!type) this.type('json');
  return this;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  var fn = this._callback;
  if (2 == fn.length) return fn(err, res);
  if (err) return this.emit('error', err);
  fn(res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');
  err.crossDomain = true;
  this.callback(err);
};

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

Request.prototype.timeoutError = function(){
  var timeout = this._timeout;
  var err = new Error('timeout of ' + timeout + 'ms exceeded');
  err.timeout = timeout;
  this.callback(err);
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

Request.prototype.withCredentials = function(){
  this._withCredentials = true;
  return this;
};

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  var self = this;
  var xhr = this.xhr = getXHR();
  var query = this._query.join('&');
  var timeout = this._timeout;
  var data = this._data;

  // store callback
  this._callback = fn || noop;

  // state change
  xhr.onreadystatechange = function(){
    if (4 != xhr.readyState) return;
    if (0 == xhr.status) {
      if (self.aborted) return self.timeoutError();
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  if (xhr.upload) {
    xhr.upload.onprogress = function(e){
      e.percent = e.loaded / e.total * 100;
      self.emit('progress', e);
    };
  }

  // timeout
  if (timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self.abort();
    }, timeout);
  }

  // querystring
  if (query) {
    query = request.serializeObject(query);
    this.url += ~this.url.indexOf('?')
      ? '&' + query
      : '?' + query;
  }

  // initiate request
  xhr.open(this.method, this.url, true);

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // body
  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
    // serialize stuff
    var serialize = request.serialize[this.getHeader('Content-Type')];
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;
    xhr.setRequestHeader(field, this.header[field]);
  }

  // send stuff
  xhr.send(data);
  return this;
};

/**
 * Expose `Request`.
 */

request.Request = Request;

/**
 * Issue a request:
 *
 * Examples:
 *
 *    request('GET', '/users').end(callback)
 *    request('/users').end(callback)
 *    request('/users', callback)
 *
 * @param {String} method
 * @param {String|Function} url or callback
 * @return {Request}
 * @api public
 */

function request(method, url) {
  // callback
  if ('function' == typeof url) {
    return new Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new Request('GET', method);
  }

  return new Request(method, url);
}

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn){
  var req = request('GET', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * HEAD `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn){
  var req = request('HEAD', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.del = function(url, fn){
  var req = request('DELETE', url);
  if (fn) req.end(fn);
  return req;
};

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} data
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn){
  var req = request('PATCH', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} data
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn){
  var req = request('POST', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn){
  var req = request('PUT', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * Expose `request`.
 */

module.exports = request;

});

require.register("component~ie@0.0.1", function (exports, module) {
/**
 * Export `ie`.
 */

module.exports = ie();

/**
 * Initialize `ie`
 *
 * @return {Number|undefined}
 * @api public
 */

function ie() {
  for( var v = 3,
           el = document.createElement('b'),
           // empty array as loop breaker (and exception-avoider) for non-IE and IE10+
           all = el.all || [];
       // i tag not well-formed since we know that IE5-IE9 won't mind
       el.innerHTML = '<!--[if gt IE ' + (++v) + ']><i><![endif]-->',
       all[0];
     );
  // return the documentMode for IE10+ compatibility
  // non-IE will get undefined
  return v > 4 ? v : document.documentMode;
}

});

require.register("johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a", function (exports, module) {
var ie = require('component~ie@0.0.1');

function with_query_strings(request) {
    request._query = [Date.now().toString()]
    return request;
}

module.exports = function (request) {
	request.set('X-Requested-With', 'XMLHttpRequest');
	request.set('Cache-Control', 'no-cache,no-store,must-revalidate,max-age=-1');

    if (ie) {
        with_query_strings(request);
    }

	return request;
};
});

require.register("component~query@0.0.3", function (exports, module) {
function one(selector, el) {
  return el.querySelector(selector);
}

exports = module.exports = function(selector, el){
  el = el || document;
  return one(selector, el);
};

exports.all = function(selector, el){
  el = el || document;
  return el.querySelectorAll(selector);
};

exports.engine = function(obj){
  if (!obj.one) throw new Error('.one callback required');
  if (!obj.all) throw new Error('.all callback required');
  one = obj.one;
  exports.all = obj.all;
  return exports;
};

});

require.register("component~matches-selector@0.1.5", function (exports, module) {
/**
 * Module dependencies.
 */

var query = require('component~query@0.0.3');

/**
 * Element prototype.
 */

var proto = Element.prototype;

/**
 * Vendor function.
 */

var vendor = proto.matches
  || proto.webkitMatchesSelector
  || proto.mozMatchesSelector
  || proto.msMatchesSelector
  || proto.oMatchesSelector;

/**
 * Expose `match()`.
 */

module.exports = match;

/**
 * Match `el` to `selector`.
 *
 * @param {Element} el
 * @param {String} selector
 * @return {Boolean}
 * @api public
 */

function match(el, selector) {
  if (!el || el.nodeType !== 1) return false;
  if (vendor) return vendor.call(el, selector);
  var nodes = query.all(selector, el.parentNode);
  for (var i = 0; i < nodes.length; ++i) {
    if (nodes[i] == el) return true;
  }
  return false;
}

});

require.register("yields~traverse@0.1.1", function (exports, module) {

/**
 * dependencies
 */

var matches = require('component~matches-selector@0.1.5');

/**
 * Traverse with the given `el`, `selector` and `len`.
 *
 * @param {String} type
 * @param {Element} el
 * @param {String} selector
 * @param {Number} len
 * @return {Array}
 * @api public
 */

module.exports = function(type, el, selector, len){
  var el = el[type]
    , n = len || 1
    , ret = [];

  if (!el) return ret;

  do {
    if (n == ret.length) break;
    if (1 != el.nodeType) continue;
    if (matches(el, selector)) ret.push(el);
    if (!selector) ret.push(el);
  } while (el = el[type]);

  return ret;
}

});

require.register("ianstormtaylor~next-sibling@0.0.1", function (exports, module) {

var traverse = require('yields~traverse@0.1.1');


/**
 * Expose `nextSibling`.
 */

module.exports = nextSibling;


/**
 * Get the next sibling for an `el`.
 *
 * @param {Element} el
 * @param {String} selector (optional)
 */

function nextSibling (el, selector) {
  el = traverse('nextSibling', el, selector)[0];
  return el || null;
}
});

require.register("component~props@1.1.2", function (exports, module) {
/**
 * Global Names
 */

var globals = /\b(this|Array|Date|Object|Math|JSON)\b/g;

/**
 * Return immediate identifiers parsed from `str`.
 *
 * @param {String} str
 * @param {String|Function} map function or prefix
 * @return {Array}
 * @api public
 */

module.exports = function(str, fn){
  var p = unique(props(str));
  if (fn && 'string' == typeof fn) fn = prefixed(fn);
  if (fn) return map(str, p, fn);
  return p;
};

/**
 * Return immediate identifiers in `str`.
 *
 * @param {String} str
 * @return {Array}
 * @api private
 */

function props(str) {
  return str
    .replace(/\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\//g, '')
    .replace(globals, '')
    .match(/[$a-zA-Z_]\w*/g)
    || [];
}

/**
 * Return `str` with `props` mapped with `fn`.
 *
 * @param {String} str
 * @param {Array} props
 * @param {Function} fn
 * @return {String}
 * @api private
 */

function map(str, props, fn) {
  var re = /\.\w+|\w+ *\(|"[^"]*"|'[^']*'|\/([^/]+)\/|[a-zA-Z_]\w*/g;
  return str.replace(re, function(_){
    if ('(' == _[_.length - 1]) return fn(_);
    if (!~props.indexOf(_)) return _;
    return fn(_);
  });
}

/**
 * Return unique array.
 *
 * @param {Array} arr
 * @return {Array}
 * @api private
 */

function unique(arr) {
  var ret = [];

  for (var i = 0; i < arr.length; i++) {
    if (~ret.indexOf(arr[i])) continue;
    ret.push(arr[i]);
  }

  return ret;
}

/**
 * Map with prefix `str`.
 */

function prefixed(str) {
  return function(_){
    return str + _;
  };
}

});

require.register("component~to-function@2.0.3", function (exports, module) {
/**
 * Module Dependencies
 */
try {
  var expr = require('component~props@1.1.2');
} catch(e) {
  var expr = require('component~props@1.1.2');
}

/**
 * Expose `toFunction()`.
 */

module.exports = toFunction;

/**
 * Convert `obj` to a `Function`.
 *
 * @param {Mixed} obj
 * @return {Function}
 * @api private
 */

function toFunction(obj) {
  switch ({}.toString.call(obj)) {
    case '[object Object]':
      return objectToFunction(obj);
    case '[object Function]':
      return obj;
    case '[object String]':
      return stringToFunction(obj);
    case '[object RegExp]':
      return regexpToFunction(obj);
    default:
      return defaultToFunction(obj);
  }
}

/**
 * Default to strict equality.
 *
 * @param {Mixed} val
 * @return {Function}
 * @api private
 */

function defaultToFunction(val) {
  return function(obj){
    return val === obj;
  }
}

/**
 * Convert `re` to a function.
 *
 * @param {RegExp} re
 * @return {Function}
 * @api private
 */

function regexpToFunction(re) {
  return function(obj){
    return re.test(obj);
  }
}

/**
 * Convert property `str` to a function.
 *
 * @param {String} str
 * @return {Function}
 * @api private
 */

function stringToFunction(str) {
  // immediate such as "> 20"
  if (/^ *\W+/.test(str)) return new Function('_', 'return _ ' + str);

  // properties such as "name.first" or "age > 18" or "age > 18 && age < 36"
  return new Function('_', 'return ' + get(str));
}

/**
 * Convert `object` to a function.
 *
 * @param {Object} object
 * @return {Function}
 * @api private
 */

function objectToFunction(obj) {
  var match = {}
  for (var key in obj) {
    match[key] = typeof obj[key] === 'string'
      ? defaultToFunction(obj[key])
      : toFunction(obj[key])
  }
  return function(val){
    if (typeof val !== 'object') return false;
    for (var key in match) {
      if (!(key in val)) return false;
      if (!match[key](val[key])) return false;
    }
    return true;
  }
}

/**
 * Built the getter function. Supports getter style functions
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function get(str) {
  var props = expr(str);
  if (!props.length) return '_.' + str;

  var val;
  for(var i = 0, prop; prop = props[i]; i++) {
    val = '_.' + prop;
    val = "('function' == typeof " + val + " ? " + val + "() : " + val + ")";
    str = str.replace(new RegExp(prop, 'g'), val);
  }

  return str;
}

});

require.register("juliangruber~isarray@0.0.1", function (exports, module) {
module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};

});

require.register("component~enumerable@0.3.2", function (exports, module) {

/**
 * Module dependencies.
 */

var toFunction = require('component~to-function@2.0.3')
  , isArray = require("juliangruber~isarray@0.0.1")
  , proto = {};

/**
 * Expose `Enumerable`.
 */

module.exports = Enumerable;

/**
 * Mixin to `obj`.
 *
 *    var Enumerable = require('enumerable');
 *    Enumerable(Something.prototype);
 *
 * @param {Object} obj
 * @return {Object} obj
 */

function mixin(obj){
  for (var key in proto) obj[key] = proto[key];
  obj.__iterate__ = obj.__iterate__ || defaultIterator;
  return obj;
}

/**
 * Initialize a new `Enumerable` with the given `obj`.
 *
 * @param {Object} obj
 * @api private
 */

function Enumerable(obj) {
  if (!(this instanceof Enumerable)) {
    if (isArray(obj)) return new Enumerable(obj);
    return mixin(obj);
  }
  this.obj = obj;
}

/*!
 * Default iterator utilizing `.length` and subscripts.
 */

function defaultIterator() {
  var self = this;
  return {
    length: function(){ return self.length },
    get: function(i){ return self[i] }
  }
}

/**
 * Return a string representation of this enumerable.
 *
 *    [Enumerable [1,2,3]]
 *
 * @return {String}
 * @api public
 */

Enumerable.prototype.inspect =
Enumerable.prototype.toString = function(){
  return '[Enumerable ' + JSON.stringify(this.obj) + ']';
};

/**
 * Iterate enumerable.
 *
 * @return {Object}
 * @api private
 */

Enumerable.prototype.__iterate__ = function(){
  var obj = this.obj;
  obj.__iterate__ = obj.__iterate__ || defaultIterator;
  return obj.__iterate__();
};

/**
 * Iterate each value and invoke `fn(val, i)`.
 *
 *    users.each(function(val, i){
 *
 *    })
 *
 * @param {Function} fn
 * @return {Object} self
 * @api public
 */

proto.forEach =
proto.each = function(fn){
  var vals = this.__iterate__();
  var len = vals.length();
  for (var i = 0; i < len; ++i) {
    fn(vals.get(i), i);
  }
  return this;
};

/**
 * Map each return value from `fn(val, i)`.
 *
 * Passing a callback function:
 *
 *    users.map(function(user){
 *      return user.name.first
 *    })
 *
 * Passing a property string:
 *
 *    users.map('name.first')
 *
 * @param {Function} fn
 * @return {Enumerable}
 * @api public
 */

proto.map = function(fn){
  fn = toFunction(fn);
  var vals = this.__iterate__();
  var len = vals.length();
  var arr = [];
  for (var i = 0; i < len; ++i) {
    arr.push(fn(vals.get(i), i));
  }
  return new Enumerable(arr);
};

/**
 * Select all values that return a truthy value of `fn(val, i)`.
 *
 *    users.select(function(user){
 *      return user.age > 20
 *    })
 *
 *  With a property:
 *
 *    items.select('complete')
 *
 * @param {Function|String} fn
 * @return {Enumerable}
 * @api public
 */

proto.filter =
proto.select = function(fn){
  fn = toFunction(fn);
  var val;
  var arr = [];
  var vals = this.__iterate__();
  var len = vals.length();
  for (var i = 0; i < len; ++i) {
    val = vals.get(i);
    if (fn(val, i)) arr.push(val);
  }
  return new Enumerable(arr);
};

/**
 * Select all unique values.
 *
 *    nums.unique()
 *
 * @return {Enumerable}
 * @api public
 */

proto.unique = function(){
  var val;
  var arr = [];
  var vals = this.__iterate__();
  var len = vals.length();
  for (var i = 0; i < len; ++i) {
    val = vals.get(i);
    if (~arr.indexOf(val)) continue;
    arr.push(val);
  }
  return new Enumerable(arr);
};

/**
 * Reject all values that return a truthy value of `fn(val, i)`.
 *
 * Rejecting using a callback:
 *
 *    users.reject(function(user){
 *      return user.age < 20
 *    })
 *
 * Rejecting with a property:
 *
 *    items.reject('complete')
 *
 * Rejecting values via `==`:
 *
 *    data.reject(null)
 *    users.reject(tobi)
 *
 * @param {Function|String|Mixed} fn
 * @return {Enumerable}
 * @api public
 */

proto.reject = function(fn){
  var val;
  var arr = [];
  var vals = this.__iterate__();
  var len = vals.length();

  if ('string' == typeof fn) fn = toFunction(fn);

  if (fn) {
    for (var i = 0; i < len; ++i) {
      val = vals.get(i);
      if (!fn(val, i)) arr.push(val);
    }
  } else {
    for (var i = 0; i < len; ++i) {
      val = vals.get(i);
      if (val != fn) arr.push(val);
    }
  }

  return new Enumerable(arr);
};

/**
 * Reject `null` and `undefined`.
 *
 *    [1, null, 5, undefined].compact()
 *    // => [1,5]
 *
 * @return {Enumerable}
 * @api public
 */


proto.compact = function(){
  return this.reject(null);
};

/**
 * Return the first value when `fn(val, i)` is truthy,
 * otherwise return `undefined`.
 *
 *    users.find(function(user){
 *      return user.role == 'admin'
 *    })
 *
 * With a property string:
 *
 *    users.find('age > 20')
 *
 * @param {Function|String} fn
 * @return {Mixed}
 * @api public
 */

proto.find = function(fn){
  fn = toFunction(fn);
  var val;
  var vals = this.__iterate__();
  var len = vals.length();
  for (var i = 0; i < len; ++i) {
    val = vals.get(i);
    if (fn(val, i)) return val;
  }
};

/**
 * Return the last value when `fn(val, i)` is truthy,
 * otherwise return `undefined`.
 *
 *    users.findLast(function(user){
 *      return user.role == 'admin'
 *    })
 *
 * @param {Function} fn
 * @return {Mixed}
 * @api public
 */

proto.findLast = function(fn){
  fn = toFunction(fn);
  var val;
  var vals = this.__iterate__();
  var len = vals.length();
  for (var i = len - 1; i > -1; --i) {
    val = vals.get(i);
    if (fn(val, i)) return val;
  }
};

/**
 * Assert that all invocations of `fn(val, i)` are truthy.
 *
 * For example ensuring that all pets are ferrets:
 *
 *    pets.all(function(pet){
 *      return pet.species == 'ferret'
 *    })
 *
 *    users.all('admin')
 *
 * @param {Function|String} fn
 * @return {Boolean}
 * @api public
 */

proto.all =
proto.every = function(fn){
  fn = toFunction(fn);
  var val;
  var vals = this.__iterate__();
  var len = vals.length();
  for (var i = 0; i < len; ++i) {
    val = vals.get(i);
    if (!fn(val, i)) return false;
  }
  return true;
};

/**
 * Assert that none of the invocations of `fn(val, i)` are truthy.
 *
 * For example ensuring that no pets are admins:
 *
 *    pets.none(function(p){ return p.admin })
 *    pets.none('admin')
 *
 * @param {Function|String} fn
 * @return {Boolean}
 * @api public
 */

proto.none = function(fn){
  fn = toFunction(fn);
  var val;
  var vals = this.__iterate__();
  var len = vals.length();
  for (var i = 0; i < len; ++i) {
    val = vals.get(i);
    if (fn(val, i)) return false;
  }
  return true;
};

/**
 * Assert that at least one invocation of `fn(val, i)` is truthy.
 *
 * For example checking to see if any pets are ferrets:
 *
 *    pets.any(function(pet){
 *      return pet.species == 'ferret'
 *    })
 *
 * @param {Function} fn
 * @return {Boolean}
 * @api public
 */

proto.any = function(fn){
  fn = toFunction(fn);
  var val;
  var vals = this.__iterate__();
  var len = vals.length();
  for (var i = 0; i < len; ++i) {
    val = vals.get(i);
    if (fn(val, i)) return true;
  }
  return false;
};

/**
 * Count the number of times `fn(val, i)` returns true.
 *
 *    var n = pets.count(function(pet){
 *      return pet.species == 'ferret'
 *    })
 *
 * @param {Function} fn
 * @return {Number}
 * @api public
 */

proto.count = function(fn){
  var val;
  var vals = this.__iterate__();
  var len = vals.length();
  var n = 0;
  for (var i = 0; i < len; ++i) {
    val = vals.get(i);
    if (fn(val, i)) ++n;
  }
  return n;
};

/**
 * Determine the indexof `obj` or return `-1`.
 *
 * @param {Mixed} obj
 * @return {Number}
 * @api public
 */

proto.indexOf = function(obj){
  var val;
  var vals = this.__iterate__();
  var len = vals.length();
  for (var i = 0; i < len; ++i) {
    val = vals.get(i);
    if (val === obj) return i;
  }
  return -1;
};

/**
 * Check if `obj` is present in this enumerable.
 *
 * @param {Mixed} obj
 * @return {Boolean}
 * @api public
 */

proto.has = function(obj){
  return !! ~this.indexOf(obj);
};

/**
 * Reduce with `fn(accumulator, val, i)` using
 * optional `init` value defaulting to the first
 * enumerable value.
 *
 * @param {Function} fn
 * @param {Mixed} [val]
 * @return {Mixed}
 * @api public
 */

proto.reduce = function(fn, init){
  var val;
  var i = 0;
  var vals = this.__iterate__();
  var len = vals.length();

  val = null == init
    ? vals.get(i++)
    : init;

  for (; i < len; ++i) {
    val = fn(val, vals.get(i), i);
  }

  return val;
};

/**
 * Determine the max value.
 *
 * With a callback function:
 *
 *    pets.max(function(pet){
 *      return pet.age
 *    })
 *
 * With property strings:
 *
 *    pets.max('age')
 *
 * With immediate values:
 *
 *    nums.max()
 *
 * @param {Function|String} fn
 * @return {Number}
 * @api public
 */

proto.max = function(fn){
  var val;
  var n = 0;
  var max = -Infinity;
  var vals = this.__iterate__();
  var len = vals.length();

  if (fn) {
    fn = toFunction(fn);
    for (var i = 0; i < len; ++i) {
      n = fn(vals.get(i), i);
      max = n > max ? n : max;
    }
  } else {
    for (var i = 0; i < len; ++i) {
      n = vals.get(i);
      max = n > max ? n : max;
    }
  }

  return max;
};

/**
 * Determine the min value.
 *
 * With a callback function:
 *
 *    pets.min(function(pet){
 *      return pet.age
 *    })
 *
 * With property strings:
 *
 *    pets.min('age')
 *
 * With immediate values:
 *
 *    nums.min()
 *
 * @param {Function|String} fn
 * @return {Number}
 * @api public
 */

proto.min = function(fn){
  var val;
  var n = 0;
  var min = Infinity;
  var vals = this.__iterate__();
  var len = vals.length();

  if (fn) {
    fn = toFunction(fn);
    for (var i = 0; i < len; ++i) {
      n = fn(vals.get(i), i);
      min = n < min ? n : min;
    }
  } else {
    for (var i = 0; i < len; ++i) {
      n = vals.get(i);
      min = n < min ? n : min;
    }
  }

  return min;
};

/**
 * Determine the sum.
 *
 * With a callback function:
 *
 *    pets.sum(function(pet){
 *      return pet.age
 *    })
 *
 * With property strings:
 *
 *    pets.sum('age')
 *
 * With immediate values:
 *
 *    nums.sum()
 *
 * @param {Function|String} fn
 * @return {Number}
 * @api public
 */

proto.sum = function(fn){
  var ret;
  var n = 0;
  var vals = this.__iterate__();
  var len = vals.length();

  if (fn) {
    fn = toFunction(fn);
    for (var i = 0; i < len; ++i) {
      n += fn(vals.get(i), i);
    }
  } else {
    for (var i = 0; i < len; ++i) {
      n += vals.get(i);
    }
  }

  return n;
};

/**
 * Determine the average value.
 *
 * With a callback function:
 *
 *    pets.avg(function(pet){
 *      return pet.age
 *    })
 *
 * With property strings:
 *
 *    pets.avg('age')
 *
 * With immediate values:
 *
 *    nums.avg()
 *
 * @param {Function|String} fn
 * @return {Number}
 * @api public
 */

proto.avg =
proto.mean = function(fn){
  var ret;
  var n = 0;
  var vals = this.__iterate__();
  var len = vals.length();

  if (fn) {
    fn = toFunction(fn);
    for (var i = 0; i < len; ++i) {
      n += fn(vals.get(i), i);
    }
  } else {
    for (var i = 0; i < len; ++i) {
      n += vals.get(i);
    }
  }

  return n / len;
};

/**
 * Return the first value, or first `n` values.
 *
 * @param {Number|Function} [n]
 * @return {Array|Mixed}
 * @api public
 */

proto.first = function(n){
  if ('function' == typeof n) return this.find(n);
  var vals = this.__iterate__();

  if (n) {
    var len = Math.min(n, vals.length());
    var arr = new Array(len);
    for (var i = 0; i < len; ++i) {
      arr[i] = vals.get(i);
    }
    return arr;
  }

  return vals.get(0);
};

/**
 * Return the last value, or last `n` values.
 *
 * @param {Number|Function} [n]
 * @return {Array|Mixed}
 * @api public
 */

proto.last = function(n){
  if ('function' == typeof n) return this.findLast(n);
  var vals = this.__iterate__();
  var len = vals.length();

  if (n) {
    var i = Math.max(0, len - n);
    var arr = [];
    for (; i < len; ++i) {
      arr.push(vals.get(i));
    }
    return arr;
  }

  return vals.get(len - 1);
};

/**
 * Return values in groups of `n`.
 *
 * @param {Number} n
 * @return {Enumerable}
 * @api public
 */

proto.inGroupsOf = function(n){
  var arr = [];
  var group = [];
  var vals = this.__iterate__();
  var len = vals.length();

  for (var i = 0; i < len; ++i) {
    group.push(vals.get(i));
    if ((i + 1) % n == 0) {
      arr.push(group);
      group = [];
    }
  }

  if (group.length) arr.push(group);

  return new Enumerable(arr);
};

/**
 * Return the value at the given index.
 *
 * @param {Number} i
 * @return {Mixed}
 * @api public
 */

proto.at = function(i){
  return this.__iterate__().get(i);
};

/**
 * Return a regular `Array`.
 *
 * @return {Array}
 * @api public
 */

proto.toJSON =
proto.array = function(){
  var arr = [];
  var vals = this.__iterate__();
  var len = vals.length();
  for (var i = 0; i < len; ++i) {
    arr.push(vals.get(i));
  }
  return arr;
};

/**
 * Return the enumerable value.
 *
 * @return {Mixed}
 * @api public
 */

proto.value = function(){
  return this.obj;
};

/**
 * Mixin enumerable.
 */

mixin(Enumerable.prototype);

});

require.register("component~collection@0.0.2", function (exports, module) {

try {
  var Enumerable = require('component~enumerable@0.3.2');
} catch (e) {
  var Enumerable = require('enumerable-component');
}

/**
 * Expose `Collection`.
 */

module.exports = Collection;

/**
 * Initialize a new collection with the given `models`.
 *
 * @param {Array} models
 * @api public
 */

function Collection(models) {
  this.models = models || [];
}

/**
 * Mixin enumerable.
 */

Enumerable(Collection.prototype);

/**
 * Iterator implementation.
 */

Collection.prototype.__iterate__ = function(){
  var self = this;
  return {
    length: function(){ return self.length() },
    get: function(i){ return self.models[i] }
  }
};

/**
 * Return the collection length.
 *
 * @return {Number}
 * @api public
 */

Collection.prototype.length = function(){
  return this.models.length;
};

/**
 * Add `model` to the collection and return the index.
 *
 * @param {Object} model
 * @return {Number}
 * @api public
 */

Collection.prototype.push = function(model){
  return this.models.push(model);
};

});

require.register("component~type@1.0.0", function (exports, module) {

/**
 * toString ref.
 */

var toString = Object.prototype.toString;

/**
 * Return the type of `val`.
 *
 * @param {Mixed} val
 * @return {String}
 * @api public
 */

module.exports = function(val){
  switch (toString.call(val)) {
    case '[object Function]': return 'function';
    case '[object Date]': return 'date';
    case '[object RegExp]': return 'regexp';
    case '[object Arguments]': return 'arguments';
    case '[object Array]': return 'array';
    case '[object String]': return 'string';
  }

  if (val === null) return 'null';
  if (val === undefined) return 'undefined';
  if (val && val.nodeType === 1) return 'element';
  if (val === Object(val)) return 'object';

  return typeof val;
};

});

require.register("component~each@0.0.1", function (exports, module) {

/**
 * Module dependencies.
 */

var type = require('component~type@1.0.0');

/**
 * HOP reference.
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Iterate the given `obj` and invoke `fn(val, i)`.
 *
 * @param {String|Array|Object} obj
 * @param {Function} fn
 * @api public
 */

module.exports = function(obj, fn){
  switch (type(obj)) {
    case 'array':
      return array(obj, fn);
    case 'object':
      if ('number' == typeof obj.length) return array(obj, fn);
      return object(obj, fn);
    case 'string':
      return string(obj, fn);
  }
};

/**
 * Iterate string chars.
 *
 * @param {String} obj
 * @param {Function} fn
 * @api private
 */

function string(obj, fn) {
  for (var i = 0; i < obj.length; ++i) {
    fn(obj.charAt(i), i);
  }
}

/**
 * Iterate object keys.
 *
 * @param {Object} obj
 * @param {Function} fn
 * @api private
 */

function object(obj, fn) {
  for (var key in obj) {
    if (has.call(obj, key)) {
      fn(key, obj[key]);
    }
  }
}

/**
 * Iterate array-ish.
 *
 * @param {Array|Object} obj
 * @param {Function} fn
 * @api private
 */

function array(obj, fn) {
  for (var i = 0; i < obj.length; ++i) {
    fn(obj[i], i);
  }
}
});

require.register("component~each@0.1.0", function (exports, module) {

/**
 * Module dependencies.
 */

var toFunction = require('component~to-function@2.0.3');
var type;

try {
  type = require('type-component');
} catch (e) {
  type = require('component~type@1.0.0');
}

/**
 * HOP reference.
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Iterate the given `obj` and invoke `fn(val, i)`.
 *
 * @param {String|Array|Object} obj
 * @param {Function} fn
 * @api public
 */

module.exports = function(obj, fn){
  fn = toFunction(fn);
  switch (type(obj)) {
    case 'array':
      return array(obj, fn);
    case 'object':
      if ('number' == typeof obj.length) return array(obj, fn);
      return object(obj, fn);
    case 'string':
      return string(obj, fn);
  }
};

/**
 * Iterate string chars.
 *
 * @param {String} obj
 * @param {Function} fn
 * @api private
 */

function string(obj, fn) {
  for (var i = 0; i < obj.length; ++i) {
    fn(obj.charAt(i), i);
  }
}

/**
 * Iterate object keys.
 *
 * @param {Object} obj
 * @param {Function} fn
 * @api private
 */

function object(obj, fn) {
  for (var key in obj) {
    if (has.call(obj, key)) {
      fn(key, obj[key]);
    }
  }
}

/**
 * Iterate array-ish.
 *
 * @param {Array|Object} obj
 * @param {Function} fn
 * @api private
 */

function array(obj, fn) {
  for (var i = 0; i < obj.length; ++i) {
    fn(obj[i], i);
  }
}

});

require.register("redventures~reduce@1.0.1", function (exports, module) {

/**
 * Reduce `arr` with `fn`.
 *
 * @param {Array} arr
 * @param {Function} fn
 * @param {Mixed} initial
 *
 * TODO: combatible error handling?
 */

module.exports = function(arr, fn, initial){  
  var idx = 0;
  var len = arr.length;
  var curr = arguments.length == 3
    ? initial
    : arr[idx++];

  while (idx < len) {
    curr = fn.call(null, curr, arr[idx], ++idx, arr);
  }
  
  return curr;
};
});

require.register("visionmedia~superagent@0.15.1", function (exports, module) {

/**
 * Module dependencies.
 */

var Emitter = require('component~emitter@1.0.1');
var reduce = require('redventures~reduce@1.0.1');

/**
 * Root reference for iframes.
 */

var root = 'undefined' == typeof window
  ? this
  : window;

/**
 * Noop.
 */

function noop(){};

/**
 * Check if `obj` is a host object,
 * we don't want to serialize these :)
 *
 * TODO: future proof, move to compoent land
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isHost(obj) {
  var str = {}.toString.call(obj);

  switch (str) {
    case '[object File]':
    case '[object Blob]':
    case '[object FormData]':
      return true;
    default:
      return false;
  }
}

/**
 * Determine XHR.
 */

function getXHR() {
  if (root.XMLHttpRequest
    && ('file:' != root.location.protocol || !root.ActiveXObject)) {
    return new XMLHttpRequest;
  } else {
    try { return new ActiveXObject('Microsoft.XMLHTTP'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.6.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP.3.0'); } catch(e) {}
    try { return new ActiveXObject('Msxml2.XMLHTTP'); } catch(e) {}
  }
  return false;
}

/**
 * Removes leading and trailing whitespace, added to support IE.
 *
 * @param {String} s
 * @return {String}
 * @api private
 */

var trim = ''.trim
  ? function(s) { return s.trim(); }
  : function(s) { return s.replace(/(^\s*|\s*$)/g, ''); };

/**
 * Check if `obj` is an object.
 *
 * @param {Object} obj
 * @return {Boolean}
 * @api private
 */

function isObject(obj) {
  return obj === Object(obj);
}

/**
 * Serialize the given `obj`.
 *
 * @param {Object} obj
 * @return {String}
 * @api private
 */

function serialize(obj) {
  if (!isObject(obj)) return obj;
  var pairs = [];
  for (var key in obj) {
    pairs.push(encodeURIComponent(key)
      + '=' + encodeURIComponent(obj[key]));
  }
  return pairs.join('&');
}

/**
 * Expose serialization method.
 */

 request.serializeObject = serialize;

 /**
  * Parse the given x-www-form-urlencoded `str`.
  *
  * @param {String} str
  * @return {Object}
  * @api private
  */

function parseString(str) {
  var obj = {};
  var pairs = str.split('&');
  var parts;
  var pair;

  for (var i = 0, len = pairs.length; i < len; ++i) {
    pair = pairs[i];
    parts = pair.split('=');
    obj[decodeURIComponent(parts[0])] = decodeURIComponent(parts[1]);
  }

  return obj;
}

/**
 * Expose parser.
 */

request.parseString = parseString;

/**
 * Default MIME type map.
 *
 *     superagent.types.xml = 'application/xml';
 *
 */

request.types = {
  html: 'text/html',
  json: 'application/json',
  urlencoded: 'application/x-www-form-urlencoded',
  'form': 'application/x-www-form-urlencoded',
  'form-data': 'application/x-www-form-urlencoded'
};

/**
 * Default serialization map.
 *
 *     superagent.serialize['application/xml'] = function(obj){
 *       return 'generated xml here';
 *     };
 *
 */

 request.serialize = {
   'application/x-www-form-urlencoded': serialize,
   'application/json': JSON.stringify
 };

 /**
  * Default parsers.
  *
  *     superagent.parse['application/xml'] = function(str){
  *       return { object parsed from str };
  *     };
  *
  */

request.parse = {
  'application/x-www-form-urlencoded': parseString,
  'application/json': JSON.parse
};

/**
 * Parse the given header `str` into
 * an object containing the mapped fields.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function parseHeader(str) {
  var lines = str.split(/\r?\n/);
  var fields = {};
  var index;
  var line;
  var field;
  var val;

  lines.pop(); // trailing CRLF

  for (var i = 0, len = lines.length; i < len; ++i) {
    line = lines[i];
    index = line.indexOf(':');
    field = line.slice(0, index).toLowerCase();
    val = trim(line.slice(index + 1));
    fields[field] = val;
  }

  return fields;
}

/**
 * Return the mime type for the given `str`.
 *
 * @param {String} str
 * @return {String}
 * @api private
 */

function type(str){
  return str.split(/ *; */).shift();
};

/**
 * Return header field parameters.
 *
 * @param {String} str
 * @return {Object}
 * @api private
 */

function params(str){
  return reduce(str.split(/ *; */), function(obj, str){
    var parts = str.split(/ *= */)
      , key = parts.shift()
      , val = parts.shift();

    if (key && val) obj[key] = val;
    return obj;
  }, {});
};

/**
 * Initialize a new `Response` with the given `xhr`.
 *
 *  - set flags (.ok, .error, etc)
 *  - parse header
 *
 * Examples:
 *
 *  Aliasing `superagent` as `request` is nice:
 *
 *      request = superagent;
 *
 *  We can use the promise-like API, or pass callbacks:
 *
 *      request.get('/').end(function(res){});
 *      request.get('/', function(res){});
 *
 *  Sending data can be chained:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' })
 *        .end(function(res){});
 *
 *  Or passed to `.send()`:
 *
 *      request
 *        .post('/user')
 *        .send({ name: 'tj' }, function(res){});
 *
 *  Or passed to `.post()`:
 *
 *      request
 *        .post('/user', { name: 'tj' })
 *        .end(function(res){});
 *
 * Or further reduced to a single call for simple cases:
 *
 *      request
 *        .post('/user', { name: 'tj' }, function(res){});
 *
 * @param {XMLHTTPRequest} xhr
 * @param {Object} options
 * @api private
 */

function Response(req, options) {
  options = options || {};
  this.req = req;
  this.xhr = this.req.xhr;
  this.text = this.xhr.responseText;
  this.setStatusProperties(this.xhr.status);
  this.header = this.headers = parseHeader(this.xhr.getAllResponseHeaders());
  // getAllResponseHeaders sometimes falsely returns "" for CORS requests, but
  // getResponseHeader still works. so we get content-type even if getting
  // other headers fails.
  this.header['content-type'] = this.xhr.getResponseHeader('content-type');
  this.setHeaderProperties(this.header);
  this.body = this.parseBody(this.text);
}

/**
 * Get case-insensitive `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api public
 */

Response.prototype.get = function(field){
  return this.header[field.toLowerCase()];
};

/**
 * Set header related properties:
 *
 *   - `.type` the content type without params
 *
 * A response of "Content-Type: text/plain; charset=utf-8"
 * will provide you with a `.type` of "text/plain".
 *
 * @param {Object} header
 * @api private
 */

Response.prototype.setHeaderProperties = function(header){
  // content-type
  var ct = this.header['content-type'] || '';
  this.type = type(ct);

  // params
  var obj = params(ct);
  for (var key in obj) this[key] = obj[key];
};

/**
 * Parse the given body `str`.
 *
 * Used for auto-parsing of bodies. Parsers
 * are defined on the `superagent.parse` object.
 *
 * @param {String} str
 * @return {Mixed}
 * @api private
 */

Response.prototype.parseBody = function(str){
  var parse = request.parse[this.type];
  return parse
    ? parse(str)
    : null;
};

/**
 * Set flags such as `.ok` based on `status`.
 *
 * For example a 2xx response will give you a `.ok` of __true__
 * whereas 5xx will be __false__ and `.error` will be __true__. The
 * `.clientError` and `.serverError` are also available to be more
 * specific, and `.statusType` is the class of error ranging from 1..5
 * sometimes useful for mapping respond colors etc.
 *
 * "sugar" properties are also defined for common cases. Currently providing:
 *
 *   - .noContent
 *   - .badRequest
 *   - .unauthorized
 *   - .notAcceptable
 *   - .notFound
 *
 * @param {Number} status
 * @api private
 */

Response.prototype.setStatusProperties = function(status){
  var type = status / 100 | 0;

  // status / class
  this.status = status;
  this.statusType = type;

  // basics
  this.info = 1 == type;
  this.ok = 2 == type;
  this.clientError = 4 == type;
  this.serverError = 5 == type;
  this.error = (4 == type || 5 == type)
    ? this.toError()
    : false;

  // sugar
  this.accepted = 202 == status;
  this.noContent = 204 == status || 1223 == status;
  this.badRequest = 400 == status;
  this.unauthorized = 401 == status;
  this.notAcceptable = 406 == status;
  this.notFound = 404 == status;
  this.forbidden = 403 == status;
};

/**
 * Return an `Error` representative of this response.
 *
 * @return {Error}
 * @api public
 */

Response.prototype.toError = function(){
  var req = this.req;
  var method = req.method;
  var path = req.path;

  var msg = 'cannot ' + method + ' ' + path + ' (' + this.status + ')';
  var err = new Error(msg);
  err.status = this.status;
  err.method = method;
  err.path = path;

  return err;
};

/**
 * Expose `Response`.
 */

request.Response = Response;

/**
 * Initialize a new `Request` with the given `method` and `url`.
 *
 * @param {String} method
 * @param {String} url
 * @api public
 */

function Request(method, url) {
  var self = this;
  Emitter.call(this);
  this._query = this._query || [];
  this.method = method;
  this.url = url;
  this.header = {};
  this._header = {};
  this.on('end', function(){
    var res = new Response(self);
    if ('HEAD' == method) res.text = null;
    self.callback(null, res);
  });
}

/**
 * Inherit from `Emitter.prototype`.
 */

Request.prototype = new Emitter;
Request.prototype.constructor = Request;

/**
 * Set timeout to `ms`.
 *
 * @param {Number} ms
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.timeout = function(ms){
  this._timeout = ms;
  return this;
};

/**
 * Clear previous timeout.
 *
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.clearTimeout = function(){
  this._timeout = 0;
  clearTimeout(this._timer);
  return this;
};

/**
 * Abort the request, and clear potential timeout.
 *
 * @return {Request}
 * @api public
 */

Request.prototype.abort = function(){
  if (this.aborted) return;
  this.aborted = true;
  this.xhr.abort();
  this.clearTimeout();
  this.emit('abort');
  return this;
};

/**
 * Set header `field` to `val`, or multiple fields with one object.
 *
 * Examples:
 *
 *      req.get('/')
 *        .set('Accept', 'application/json')
 *        .set('X-API-Key', 'foobar')
 *        .end(callback);
 *
 *      req.get('/')
 *        .set({ Accept: 'application/json', 'X-API-Key': 'foobar' })
 *        .end(callback);
 *
 * @param {String|Object} field
 * @param {String} val
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.set = function(field, val){
  if (isObject(field)) {
    for (var key in field) {
      this.set(key, field[key]);
    }
    return this;
  }
  this._header[field.toLowerCase()] = val;
  this.header[field] = val;
  return this;
};

/**
 * Get case-insensitive header `field` value.
 *
 * @param {String} field
 * @return {String}
 * @api private
 */

Request.prototype.getHeader = function(field){
  return this._header[field.toLowerCase()];
};

/**
 * Set Content-Type to `type`, mapping values from `request.types`.
 *
 * Examples:
 *
 *      superagent.types.xml = 'application/xml';
 *
 *      request.post('/')
 *        .type('xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 *      request.post('/')
 *        .type('application/xml')
 *        .send(xmlstring)
 *        .end(callback);
 *
 * @param {String} type
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.type = function(type){
  this.set('Content-Type', request.types[type] || type);
  return this;
};

/**
 * Set Authorization field value with `user` and `pass`.
 *
 * @param {String} user
 * @param {String} pass
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.auth = function(user, pass){
  var str = btoa(user + ':' + pass);
  this.set('Authorization', 'Basic ' + str);
  return this;
};

/**
* Add query-string `val`.
*
* Examples:
*
*   request.get('/shoes')
*     .query('size=10')
*     .query({ color: 'blue' })
*
* @param {Object|String} val
* @return {Request} for chaining
* @api public
*/

Request.prototype.query = function(val){
  if ('string' != typeof val) val = serialize(val);
  this._query.push(val);
  return this;
};

/**
 * Send `data`, defaulting the `.type()` to "json" when
 * an object is given.
 *
 * Examples:
 *
 *       // querystring
 *       request.get('/search')
 *         .end(callback)
 *
 *       // multiple data "writes"
 *       request.get('/search')
 *         .send({ search: 'query' })
 *         .send({ range: '1..5' })
 *         .send({ order: 'desc' })
 *         .end(callback)
 *
 *       // manual json
 *       request.post('/user')
 *         .type('json')
 *         .send('{"name":"tj"})
 *         .end(callback)
 *
 *       // auto json
 *       request.post('/user')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // manual x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send('name=tj')
 *         .end(callback)
 *
 *       // auto x-www-form-urlencoded
 *       request.post('/user')
 *         .type('form')
 *         .send({ name: 'tj' })
 *         .end(callback)
 *
 *       // defaults to x-www-form-urlencoded
  *      request.post('/user')
  *        .send('name=tobi')
  *        .send('species=ferret')
  *        .end(callback)
 *
 * @param {String|Object} data
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.send = function(data){
  var obj = isObject(data);
  var type = this.getHeader('Content-Type');

  // merge
  if (obj && isObject(this._data)) {
    for (var key in data) {
      this._data[key] = data[key];
    }
  } else if ('string' == typeof data) {
    if (!type) this.type('form');
    type = this.getHeader('Content-Type');
    if ('application/x-www-form-urlencoded' == type) {
      this._data = this._data
        ? this._data + '&' + data
        : data;
    } else {
      this._data = (this._data || '') + data;
    }
  } else {
    this._data = data;
  }

  if (!obj) return this;
  if (!type) this.type('json');
  return this;
};

/**
 * Invoke the callback with `err` and `res`
 * and handle arity check.
 *
 * @param {Error} err
 * @param {Response} res
 * @api private
 */

Request.prototype.callback = function(err, res){
  var fn = this._callback;
  if (2 == fn.length) return fn(err, res);
  if (err) return this.emit('error', err);
  fn(res);
};

/**
 * Invoke callback with x-domain error.
 *
 * @api private
 */

Request.prototype.crossDomainError = function(){
  var err = new Error('Origin is not allowed by Access-Control-Allow-Origin');
  err.crossDomain = true;
  this.callback(err);
};

/**
 * Invoke callback with timeout error.
 *
 * @api private
 */

Request.prototype.timeoutError = function(){
  var timeout = this._timeout;
  var err = new Error('timeout of ' + timeout + 'ms exceeded');
  err.timeout = timeout;
  this.callback(err);
};

/**
 * Enable transmission of cookies with x-domain requests.
 *
 * Note that for this to work the origin must not be
 * using "Access-Control-Allow-Origin" with a wildcard,
 * and also must set "Access-Control-Allow-Credentials"
 * to "true".
 *
 * @api public
 */

Request.prototype.withCredentials = function(){
  this._withCredentials = true;
  return this;
};

/**
 * Initiate request, invoking callback `fn(res)`
 * with an instanceof `Response`.
 *
 * @param {Function} fn
 * @return {Request} for chaining
 * @api public
 */

Request.prototype.end = function(fn){
  var self = this;
  var xhr = this.xhr = getXHR();
  var query = this._query.join('&');
  var timeout = this._timeout;
  var data = this._data;

  // store callback
  this._callback = fn || noop;

  // CORS
  if (this._withCredentials) xhr.withCredentials = true;

  // state change
  xhr.onreadystatechange = function(){
    if (4 != xhr.readyState) return;
    if (0 == xhr.status) {
      if (self.aborted) return self.timeoutError();
      return self.crossDomainError();
    }
    self.emit('end');
  };

  // progress
  if (xhr.upload) {
    xhr.upload.onprogress = function(e){
      e.percent = e.loaded / e.total * 100;
      self.emit('progress', e);
    };
  }

  // timeout
  if (timeout && !this._timer) {
    this._timer = setTimeout(function(){
      self.abort();
    }, timeout);
  }

  // querystring
  if (query) {
    query = request.serializeObject(query);
    this.url += ~this.url.indexOf('?')
      ? '&' + query
      : '?' + query;
  }

  // initiate request
  xhr.open(this.method, this.url, true);

  // body
  if ('GET' != this.method && 'HEAD' != this.method && 'string' != typeof data && !isHost(data)) {
    // serialize stuff
    var serialize = request.serialize[this.getHeader('Content-Type')];
    if (serialize) data = serialize(data);
  }

  // set header fields
  for (var field in this.header) {
    if (null == this.header[field]) continue;
    xhr.setRequestHeader(field, this.header[field]);
  }

  // send stuff
  xhr.send(data);
  return this;
};

/**
 * Expose `Request`.
 */

request.Request = Request;

/**
 * Issue a request:
 *
 * Examples:
 *
 *    request('GET', '/users').end(callback)
 *    request('/users').end(callback)
 *    request('/users', callback)
 *
 * @param {String} method
 * @param {String|Function} url or callback
 * @return {Request}
 * @api public
 */

function request(method, url) {
  // callback
  if ('function' == typeof url) {
    return new Request('GET', method).end(url);
  }

  // url first
  if (1 == arguments.length) {
    return new Request('GET', method);
  }

  return new Request(method, url);
}

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.get = function(url, data, fn){
  var req = request('GET', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.query(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * GET `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.head = function(url, data, fn){
  var req = request('HEAD', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * DELETE `url` with optional callback `fn(res)`.
 *
 * @param {String} url
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.del = function(url, fn){
  var req = request('DELETE', url);
  if (fn) req.end(fn);
  return req;
};

/**
 * PATCH `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} data
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.patch = function(url, data, fn){
  var req = request('PATCH', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * POST `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed} data
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.post = function(url, data, fn){
  var req = request('POST', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * PUT `url` with optional `data` and callback `fn(res)`.
 *
 * @param {String} url
 * @param {Mixed|Function} data or fn
 * @param {Function} fn
 * @return {Request}
 * @api public
 */

request.put = function(url, data, fn){
  var req = request('PUT', url);
  if ('function' == typeof data) fn = data, data = null;
  if (data) req.send(data);
  if (fn) req.end(fn);
  return req;
};

/**
 * Expose `request`.
 */

module.exports = request;

});

require.register("johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12", function (exports, module) {

/**
 * Module dependencies.
 */

var proto = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12/lib/proto.js');
var statics = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12/lib/static.js');
var Emitter = require('component~emitter@1.0.1');

/**
 * Expose `createModel`.
 */

module.exports = createModel;

/**
 * Create a new model constructor with the given `name`.
 *
 * @param {String} name
 * @return {Function}
 * @api public
 */

function createModel(name) {
  if ('string' != typeof name) throw new TypeError('model name required');

  /**
   * Initialize a new model with the given `attrs`.
   *
   * @param {Object} attrs
   * @api public
   */

  function model(attrs) {
    if (!(this instanceof model)) return new model(attrs);
    attrs = attrs || {};
    this._callbacks = {};
    this.attrs = attrs;
    this.dirty = attrs;
    this.model.emit('construct', this, attrs);
  }

  // mixin emitter

  Emitter(model);

  // statics

  model.modelName = name;
  model._base = '/' + name.toLowerCase() + 's';
  model.attrs = {};
  model.validators = [];
  model._headers = {};
  for (var key in statics) model[key] = statics[key];

  // prototype

  model.prototype = {};
  model.prototype.model = model;
  for (var key in proto) model.prototype[key] = proto[key];

  return model;
}


});

require.register("johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12/lib/static.js", function (exports, module) {
/**
 * Module dependencies.
 */

var Collection = require('component~collection@0.0.2');
var request = require('visionmedia~superagent@0.15.1');
var noop = function(){};

/**
 * Expose request for configuration
 */

exports.request = request;

/**
 * Construct a url to the given `path`.
 *
 * Example:
 *
 *    User.url('add')
 *    // => "/users/add"
 *
 * @param {String} path
 * @return {String}
 * @api public
 */

exports.url = function(path){
  var url = this._base;
  if (undefined === path) return url;
  return url + '/' + path;
};

/**
 * Set base path for urls.
 * Note this is defaulted to '/' + modelName.toLowerCase() + 's'
 *
 * Example:
 *
 *   User.route('/api/u')
 *
 * @param {String} path 
 * @return {Function} self
 * @api public
 */

exports.route = function(path){
  this._base = path;
  return this;
}

/**
 * Add custom http headers to all requests.
 *
 * Example:
 *
 *   User.headers({
 *    'X-CSRF-Token': 'some token',
 *    'X-API-Token': 'api token 
 *   });
 *
 * @param {String|Object} header(s)
 * @param {String} value
 * @return {Function} self
 * @api public
 */

exports.headers = function(headers){
  for(var i in headers){
    this._headers[i] = headers[i];
  }
  return this;
};

/**
 * Add validation `fn()`.
 *
 * @param {Function} fn
 * @return {Function} self
 * @api public
 */

exports.validate = function(fn){
  this.validators.push(fn);
  return this;
};

/**
 * Use the given plugin `fn()`.
 *
 * @param {Function} fn
 * @return {Function} self
 * @api public
 */

exports.use = function(fn){
  fn(this);
  return this;
};

/**
 * Define attr with the given `name` and `options`.
 *
 * @param {String} name
 * @param {Object} options
 * @return {Function} self
 * @api public
 */

exports.attr = function(name, options){
  this.attrs[name] = options || {};

  // implied pk
  if ('_id' == name || 'id' == name) {
    this.attrs[name].primaryKey = true;
    this.primaryKey = name;
  }

  // getter / setter method
  this.prototype[name] = function(val){
    if (0 == arguments.length) return this.attrs[name];
    var prev = this.attrs[name];
    this.dirty[name] = val;
    this.attrs[name] = val;
    this.model.emit('change', this, name, val, prev);
    this.model.emit('change ' + name, this, val, prev);
    this.emit('change', name, val, prev);
    this.emit('change ' + name, val, prev);
    return this;
  };

  return this;
};

/**
 * Remove all and invoke `fn(err)`.
 *
 * @param {Function} [fn]
 * @api public
 */

exports.destroyAll = function(fn){
  fn = fn || noop;
  var self = this;
  var url = this.url('');
  this.request
    .del(url)
    .set(this._headers)
    .end(function(res){
      if (res.error) return fn(error(res), null, res);
      fn(null, [], res);
    });
};

/**
 * Get all and invoke `fn(err, array)`.
 *
 * @param {Function} fn
 * @api public
 */

exports.all = function(fn){
  var self = this;
  var url = this.url('');
  this.request
    .get(url)
    .set(this._headers)
    .end(function(res){
      if (res.error) return fn(error(res), null, res);
      var col = new Collection;
      for (var i = 0, len = res.body.length; i < len; ++i) {
        col.push(new self(res.body[i]));
      }
      fn(null, col, res);
    });
};

/**
 * Get `id` and invoke `fn(err, model)`.
 *
 * @param {Mixed} id
 * @param {Function} fn
 * @api public
 */

exports.get = function(id, fn){
  var self = this;
  var url = this.url(id);
  this.request
    .get(url)
    .set(this._headers)
    .end(function(res){
      if (res.error) return fn(error(res), null, res);
      var model = new self(res.body);
      fn(null, model, res);
    });
};

/**
 * Response error helper.
 *
 * @param {Response} er
 * @return {Error}
 * @api private
 */

function error(res) {
  return new Error('got ' + res.status + ' response');
}

});

require.register("johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12/lib/proto.js", function (exports, module) {

/**
 * Module dependencies.
 */

var Emitter = require('component~emitter@1.0.1');
var request = require('visionmedia~superagent@0.15.1');
var each = require('component~each@0.0.1');
var noop = function(){};

/**
 * Mixin emitter.
 */

Emitter(exports);

/**
 * Expose request for configuration
 */
exports.request = request;

/**
 * Register an error `msg` on `attr`.
 *
 * @param {String} attr
 * @param {String} msg
 * @return {Object} self
 * @api public
 */

exports.error = function(attr, msg){
  this.errors.push({
    attr: attr,
    message: msg
  });
  return this;
};

/**
 * Check if this model is new.
 *
 * @return {Boolean}
 * @api public
 */

exports.isNew = function(){
  var key = this.model.primaryKey;
  return ! this.has(key);
};

/**
 * Get / set the primary key.
 *
 * @param {Mixed} val
 * @return {Mixed}
 * @api public
 */

exports.primary = function(val){
  var key = this.model.primaryKey;
  if (0 == arguments.length) return this[key]();
  return this[key](val);
};

/**
 * Validate the model and return a boolean.
 *
 * Example:
 *
 *    user.isValid()
 *    // => false
 *
 *    user.errors
 *    // => [{ attr: ..., message: ... }]
 *
 * @return {Boolean}
 * @api public
 */

exports.isValid = function(){
  this.validate();
  return 0 == this.errors.length;
};

/**
 * Return `false` or an object
 * containing the "dirty" attributes.
 *
 * Optionally check for a specific `attr`.
 *
 * @param {String} [attr]
 * @return {Object|Boolean}
 * @api public
 */

exports.changed = function(attr){
  var dirty = this.dirty;
  if (Object.keys(dirty).length) {
    if (attr) return !! dirty[attr];
    return dirty;
  }
  return false;
};

/**
 * Perform validations.
 *
 * @api private
 */

exports.validate = function(){
  var self = this;
  var fns = this.model.validators;
  this.errors = [];
  each(fns, function(fn){ fn(self) });
};

/**
 * Destroy the model and mark it as `.destroyed`
 * and invoke `fn(err)`.
 *
 * Events:
 *
 *  - `destroying` before deletion
 *  - `destroy` on deletion
 *
 * @param {Function} [fn]
 * @api public
 */

exports.destroy = function(fn){
  fn = fn || noop;
  if (this.isNew()) return fn(new Error('not saved'));
  var self = this;
  var url = this.url();
  this.model.emit('destroying', this);
  this.emit('destroying');
  this.request
    .del(url)
    .set(this.model._headers)
    .end(function(res){
      if (res.error) return fn(error(res), res);
      self.destroyed = true;
      self.model.emit('destroy', self, res);
      self.emit('destroy');
      fn(null, res);
    });
};

/**
 * Save and invoke `fn(err)`.
 *
 * Events:
 *
 *  - `saving` pre-update or save, after validation
 *  - `save` on updates and saves
 *
 * @param {Function} [fn]
 * @api public
 */

exports.save = function(fn){
  if (!this.isNew()) return this.update(fn);
  var self = this;
  var url = this.model.url();
  var key = this.model.primaryKey;
  fn = fn || noop;
  if (!this.isValid()) return fn(new Error('validation failed'));
  this.model.emit('saving', this);
  this.emit('saving');
  this.request
    .post(url)
    .set(this.model._headers)
    .send(self)
    .end(function(res){
      if (res.error) return fn(error(res), res);
      if (res.body && key) self.primary(res.body[key]);
      self.dirty = {};
      self.model.emit('save', self, res);
      self.emit('save');
      fn(null, res);
    });
};

/**
 * Update and invoke `fn(err)`.
 *
 * @param {Function} [fn]
 * @api private
 */

exports.update = function(fn){
  var self = this;
  var url = this.url();
  fn = fn || noop;
  if (!this.isValid()) return fn(new Error('validation failed'));
  this.model.emit('saving', this);
  this.emit('saving');
  this.request
    .put(url)
    .set(this.model._headers)
    .send(self)
    .end(function(res){
      if (res.error) return fn(error(res), res);
      self.dirty = {};
      self.model.emit('save', self, res);
      self.emit('save');
      fn(null, res);
    });
};

/**
 * Return a url for `path` relative to this model.
 *
 * Example:
 *
 *    var user = new User({ id: 5 });
 *    user.url('edit');
 *    // => "/users/5/edit"
 *
 * @param {String} path
 * @return {String}
 * @api public
 */

exports.url = function(path){
  var model = this.model;
  var url = model._base;
  var id = this.primary();
  if (0 == arguments.length) return url + '/' + id;
  return url + '/' + id + '/' + path;
};

/**
 * Set multiple `attrs`.
 *
 * @param {Object} attrs
 * @return {Object} self
 * @api public
 */

exports.set = function(attrs){
  for (var key in attrs) {
    this[key](attrs[key]);
  }
  return this;
};

/**
 * Get `attr` value.
 *
 * @param {String} attr
 * @return {Mixed}
 * @api public
 */

exports.get = function(attr){
  return this.attrs[attr];
};

/**
 * Check if `attr` is present (not `null` or `undefined`).
 *
 * @param {String} attr
 * @return {Boolean}
 * @api public
 */

exports.has = function(attr){
  return null != this.attrs[attr];
};

/**
 * Return the JSON representation of the model.
 *
 * @return {Object}
 * @api public
 */

exports.toJSON = function(){
  return this.attrs;
};

/**
 * Response error helper.
 *
 * @param {Response} er
 * @return {Error}
 * @api private
 */

function error(res) {
  return new Error('got ' + res.status + ' response');
}

});

require.register("component~clone@0.2.2", function (exports, module) {
/**
 * Module dependencies.
 */

var type;
try {
  type = require('component~type@1.0.0');
} catch (_) {
  type = require('component~type@1.0.0');
}

/**
 * Module exports.
 */

module.exports = clone;

/**
 * Clones objects.
 *
 * @param {Mixed} any object
 * @api public
 */

function clone(obj){
  switch (type(obj)) {
    case 'object':
      var copy = {};
      for (var key in obj) {
        if (obj.hasOwnProperty(key)) {
          copy[key] = clone(obj[key]);
        }
      }
      return copy;

    case 'array':
      var copy = new Array(obj.length);
      for (var i = 0, l = obj.length; i < l; i++) {
        copy[i] = clone(obj[i]);
      }
      return copy;

    case 'regexp':
      // from millermedeiros/amd-utils - MIT
      var flags = '';
      flags += obj.multiline ? 'm' : '';
      flags += obj.global ? 'g' : '';
      flags += obj.ignoreCase ? 'i' : '';
      return new RegExp(obj.source, flags);

    case 'date':
      return new Date(obj.getTime());

    default: // string, number, boolean, …
      return obj;
  }
}

});

require.register("manuelstofer~each@master", function (exports, module) {
"use strict";

var nativeForEach = [].forEach;

// Underscore's each function
module.exports = function (obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
        obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
        for (var i = 0, l = obj.length; i < l; i++) {
            if (iterator.call(context, obj[i], i, obj) === {}) return;
        }
    } else {
        for (var key in obj) {
            if (Object.prototype.hasOwnProperty.call(obj, key)) {
                if (iterator.call(context, obj[key], key, obj) === {}) return;
            }
        }
    }
};

});

require.register("manuelstofer~is@master", function (exports, module) {
"use strict";
var each = require('manuelstofer~each@master'),
    toString = Object.prototype.toString,
    types = ['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Array'];

each(types, function (type) {
    module.exports[type.toLowerCase()] = function (obj) {
        return toString.call(obj) === '[object ' + type + ']';
    };
});

if (Array.isArray) {
    module.exports.array = Array.isArray;
}

module.exports.object = function (obj) {
    return obj === Object(obj);
};


});

require.register("segmentio~model-defaults@1.0.6", function (exports, module) {

try {
  var clone = require('component~clone@0.2.2');
  var each = require('component~each@0.1.0');
  var type = require('component~type@1.0.0');
} catch (e) {
  var clone = require('clone-component');
  var each = require('each-component');
  var type = require('component~type@1.0.0');
}

var is = require('manuelstofer~is@master');

/**
 * Plugin.
 *
 * @param {Function|Object} values  The default values dictionary or the Model.
 */

module.exports = function (values) {
  if ('object' === type(values)) {
    return function (Model) {
      bind(Model, values);
    };
  } else {
    return bind(values);
  }
};


/**
 * Bind to the model's construct event.
 *
 * @param {Function} Model  The model constructor.
 */

function bind (Model, defaults) {
  defaults || (defaults = {});
  Model.on('construct', function (model, attrs) {
    each(Model.attrs, function (key, options) {
      var value = undefined != options.default
        ? options.default
        : defaults[key];

      if (value !== undefined) apply(model, key, value);
    });
  });
}


/**
 * Default a `model` with a `value` for a `key` if it doesn't exist. Use a clone
 * of the value if it is not passed from a function, so that it's
 * easy to declare objects and arrays without worrying about copying by reference.
 *
 * @param {Model}          model  The model.
 * @param {String}         key    The key to back by a default.
 * @param {Mixed|Function} value  The default value to use.
 */

function apply (model, key, value) {
  if(model[key]() !== undefined) return;
  value = is.function(value) ? value.call(model) : clone(value);
  model.attrs[key] = value;
}

});

require.register("component~domify@1.1.1", function (exports, module) {

/**
 * Expose `parse`.
 */

module.exports = parse;

/**
 * Wrap map from jquery.
 */

var map = {
  option: [1, '<select multiple="multiple">', '</select>'],
  optgroup: [1, '<select multiple="multiple">', '</select>'],
  legend: [1, '<fieldset>', '</fieldset>'],
  thead: [1, '<table>', '</table>'],
  tbody: [1, '<table>', '</table>'],
  tfoot: [1, '<table>', '</table>'],
  colgroup: [1, '<table>', '</table>'],
  caption: [1, '<table>', '</table>'],
  tr: [2, '<table><tbody>', '</tbody></table>'],
  td: [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  th: [3, '<table><tbody><tr>', '</tr></tbody></table>'],
  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  _default: [0, '', '']
};

/**
 * Parse `html` and return the children.
 *
 * @param {String} html
 * @return {Array}
 * @api private
 */

function parse(html) {
  if ('string' != typeof html) throw new TypeError('String expected');

  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

  // tag name
  var m = /<([\w:]+)/.exec(html);
  if (!m) return document.createTextNode(html);
  var tag = m[1];

  // body support
  if (tag == 'body') {
    var el = document.createElement('html');
    el.innerHTML = html;
    return el.removeChild(el.lastChild);
  }

  // wrap map
  var wrap = map[tag] || map._default;
  var depth = wrap[0];
  var prefix = wrap[1];
  var suffix = wrap[2];
  var el = document.createElement('div');
  el.innerHTML = prefix + html + suffix;
  while (depth--) el = el.lastChild;

  // Note: when moving children, don't rely on el.children
  // being 'live' to support Polymer's broken behaviour.
  // See: https://github.com/component/domify/pull/23
  if (1 == el.children.length) {
    return el.removeChild(el.children[0]);
  }

  var fragment = document.createDocumentFragment();
  while (el.children.length) {
    fragment.appendChild(el.removeChild(el.children[0]));
  }

  return fragment;
}

});

require.register("component~domify@1.3.1", function (exports, module) {

/**
 * Expose `parse`.
 */

module.exports = parse;

/**
 * Tests for browser support.
 */

var div = document.createElement('div');
// Setup
div.innerHTML = '  <link/><table></table><a href="/a">a</a><input type="checkbox"/>';
// Make sure that link elements get serialized correctly by innerHTML
// This requires a wrapper element in IE
var innerHTMLBug = !div.getElementsByTagName('link').length;
div = undefined;

/**
 * Wrap map from jquery.
 */

var map = {
  legend: [1, '<fieldset>', '</fieldset>'],
  tr: [2, '<table><tbody>', '</tbody></table>'],
  col: [2, '<table><tbody></tbody><colgroup>', '</colgroup></table>'],
  // for script/link/style tags to work in IE6-8, you have to wrap
  // in a div with a non-whitespace character in front, ha!
  _default: innerHTMLBug ? [1, 'X<div>', '</div>'] : [0, '', '']
};

map.td =
map.th = [3, '<table><tbody><tr>', '</tr></tbody></table>'];

map.option =
map.optgroup = [1, '<select multiple="multiple">', '</select>'];

map.thead =
map.tbody =
map.colgroup =
map.caption =
map.tfoot = [1, '<table>', '</table>'];

map.text =
map.circle =
map.ellipse =
map.line =
map.path =
map.polygon =
map.polyline =
map.rect = [1, '<svg xmlns="http://www.w3.org/2000/svg" version="1.1">','</svg>'];

/**
 * Parse `html` and return a DOM Node instance, which could be a TextNode,
 * HTML DOM Node of some kind (<div> for example), or a DocumentFragment
 * instance, depending on the contents of the `html` string.
 *
 * @param {String} html - HTML string to "domify"
 * @param {Document} doc - The `document` instance to create the Node for
 * @return {DOMNode} the TextNode, DOM Node, or DocumentFragment instance
 * @api private
 */

function parse(html, doc) {
  if ('string' != typeof html) throw new TypeError('String expected');

  // default to the global `document` object
  if (!doc) doc = document;

  // tag name
  var m = /<([\w:]+)/.exec(html);
  if (!m) return doc.createTextNode(html);

  html = html.replace(/^\s+|\s+$/g, ''); // Remove leading/trailing whitespace

  var tag = m[1];

  // body support
  if (tag == 'body') {
    var el = doc.createElement('html');
    el.innerHTML = html;
    return el.removeChild(el.lastChild);
  }

  // wrap map
  var wrap = map[tag] || map._default;
  var depth = wrap[0];
  var prefix = wrap[1];
  var suffix = wrap[2];
  var el = doc.createElement('div');
  el.innerHTML = prefix + html + suffix;
  while (depth--) el = el.lastChild;

  // one element
  if (el.firstChild == el.lastChild) {
    return el.removeChild(el.firstChild);
  }

  // several elements
  var fragment = doc.createDocumentFragment();
  while (el.firstChild) {
    fragment.appendChild(el.removeChild(el.firstChild));
  }

  return fragment;
}

});

require.register("samsonjs~strftime@v0.8.3", function (exports, module) {
//
// strftime
// github.com/samsonjs/strftime
// @_sjs
//
// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>
//
// MIT License
// http://sjs.mit-license.org
//

;(function() {

  //// Where to export the API
  var namespace;

  // CommonJS / Node module
  if (typeof module !== 'undefined') {
    namespace = module.exports = strftime;
  }

  // Browsers and other environments
  else {
    // Get the global object. Works in ES3, ES5, and ES5 strict mode.
    namespace = (function(){ return this || (1,eval)('this') }());
  }

  function words(s) { return (s || '').split(' '); }

  var DefaultLocale =
  { days: words('Sunday Monday Tuesday Wednesday Thursday Friday Saturday')
  , shortDays: words('Sun Mon Tue Wed Thu Fri Sat')
  , months: words('January February March April May June July August September October November December')
  , shortMonths: words('Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec')
  , AM: 'AM'
  , PM: 'PM'
  , am: 'am'
  , pm: 'pm'
  };

  namespace.strftime = strftime;
  function strftime(fmt, d, locale) {
    return _strftime(fmt, d, locale);
  }

  // locale is optional
  namespace.strftimeTZ = strftime.strftimeTZ = strftimeTZ;
  function strftimeTZ(fmt, d, locale, timezone) {
    if ((typeof locale == 'number' || typeof locale == 'string') && timezone == null) {
      timezone = locale;
      locale = undefined;
    }
    return _strftime(fmt, d, locale, { timezone: timezone });
  }

  namespace.strftimeUTC = strftime.strftimeUTC = strftimeUTC;
  function strftimeUTC(fmt, d, locale) {
    return _strftime(fmt, d, locale, { utc: true });
  }

  namespace.localizedStrftime = strftime.localizedStrftime = localizedStrftime;
  function localizedStrftime(locale) {
    return function(fmt, d, options) {
      return strftime(fmt, d, locale, options);
    };
  }

  // d, locale, and options are optional, but you can't leave
  // holes in the argument list. If you pass options you have to pass
  // in all the preceding args as well.
  //
  // options:
  //   - locale   [object] an object with the same structure as DefaultLocale
  //   - timezone [number] timezone offset in minutes from GMT
  function _strftime(fmt, d, locale, options) {
    options = options || {};

    // d and locale are optional so check if d is really the locale
    if (d && !quacksLikeDate(d)) {
      locale = d;
      d = undefined;
    }
    d = d || new Date();

    locale = locale || DefaultLocale;
    locale.formats = locale.formats || {};

    // Hang on to this Unix timestamp because we might mess with it directly below.
    var timestamp = d.getTime();

    var tz = options.timezone;
    var tzType = typeof tz;

    if (options.utc || tzType == 'number' || tzType == 'string') {
      d = dateToUTC(d);
    }

    if (tz) {
      // ISO 8601 format timezone string, [-+]HHMM
      //
      // Convert to the number of minutes and it'll be applied to the date below.
      if (tzType == 'string') {
        var sign = tz[0] == '-' ? -1 : 1;
        var hours = parseInt(tz.slice(1, 3), 10);
        var mins = parseInt(tz.slice(3, 5), 10);
        tz = sign * ((60 * hours) + mins);
      }

      if (tzType) {
        d = new Date(d.getTime() + (tz * 60000));
      }
    }

    // Most of the specifiers supported by C's strftime, and some from Ruby.
    // Some other syntax extensions from Ruby are supported: %-, %_, and %0
    // to pad with nothing, space, or zero (respectively).
    return fmt.replace(/%([-_0]?.)/g, function(_, c) {
      var mod, padding;

      if (c.length == 2) {
        mod = c[0];
        // omit padding
        if (mod == '-') {
          padding = '';
        }
        // pad with space
        else if (mod == '_') {
          padding = ' ';
        }
        // pad with zero
        else if (mod == '0') {
          padding = '0';
        }
        else {
          // unrecognized, return the format
          return _;
        }
        c = c[1];
      }

      switch (c) {

        // Examples for new Date(0) in GMT

        // 'Thursday'
        case 'A': return locale.days[d.getDay()];

        // 'Thu'
        case 'a': return locale.shortDays[d.getDay()];

        // 'January'
        case 'B': return locale.months[d.getMonth()];

        // 'Jan'
        case 'b': return locale.shortMonths[d.getMonth()];

        // '19'
        case 'C': return pad(Math.floor(d.getFullYear() / 100), padding);

        // '01/01/70'
        case 'D': return _strftime(locale.formats.D || '%m/%d/%y', d, locale);

        // '01'
        case 'd': return pad(d.getDate(), padding);

        // '01'
        case 'e': return pad(d.getDate(), padding == null ? ' ' : padding);

        // '1970-01-01'
        case 'F': return _strftime(locale.formats.F || '%Y-%m-%d', d, locale);

        // '00'
        case 'H': return pad(d.getHours(), padding);

        // 'Jan'
        case 'h': return locale.shortMonths[d.getMonth()];

        // '12'
        case 'I': return pad(hours12(d), padding);

        // '000'
        case 'j':
          var y = new Date(d.getFullYear(), 0, 1);
          var day = Math.ceil((d.getTime() - y.getTime()) / (1000 * 60 * 60 * 24));
          return pad(day, 3);

        // ' 0'
        case 'k': return pad(d.getHours(), padding == null ? ' ' : padding);

        // '000'
        case 'L': return pad(Math.floor(timestamp % 1000), 3);

        // '12'
        case 'l': return pad(hours12(d), padding == null ? ' ' : padding);

        // '00'
        case 'M': return pad(d.getMinutes(), padding);

        // '01'
        case 'm': return pad(d.getMonth() + 1, padding);

        // '\n'
        case 'n': return '\n';

        // '1st'
        case 'o': return String(d.getDate()) + ordinal(d.getDate());

        // 'am'
        case 'P': return d.getHours() < 12 ? locale.am : locale.pm;

        // 'AM'
        case 'p': return d.getHours() < 12 ? locale.AM : locale.PM;

        // '00:00'
        case 'R': return _strftime(locale.formats.R || '%H:%M', d, locale);

        // '12:00:00 AM'
        case 'r': return _strftime(locale.formats.r || '%I:%M:%S %p', d, locale);

        // '00'
        case 'S': return pad(d.getSeconds(), padding);

        // '0'
        case 's': return Math.floor(timestamp / 1000);

        // '00:00:00'
        case 'T': return _strftime(locale.formats.T || '%H:%M:%S', d, locale);

        // '\t'
        case 't': return '\t';

        // '00'
        case 'U': return pad(weekNumber(d, 'sunday'), padding);

        // '4'
        case 'u':
          var day = d.getDay();
          return day == 0 ? 7 : day; // 1 - 7, Monday is first day of the week

        // ' 1-Jan-1970'
        case 'v': return _strftime(locale.formats.v || '%e-%b-%Y', d, locale);

        // '00'
        case 'W': return pad(weekNumber(d, 'monday'), padding);

        // '4'
        case 'w': return d.getDay(); // 0 - 6, Sunday is first day of the week

        // '1970'
        case 'Y': return d.getFullYear();

        // '70'
        case 'y':
          var y = String(d.getFullYear());
          return y.slice(y.length - 2);

        // 'GMT'
        case 'Z':
          if (options.utc) {
            return "GMT";
          }
          else {
            var tzString = d.toString().match(/\(([\w\s]+)\)/);
            return tzString && tzString[1] || '';
          }

        // '+0000'
        case 'z':
          if (options.utc) {
            return "+0000";
          }
          else {
            var off = typeof tz == 'number' ? tz : -d.getTimezoneOffset();
            return (off < 0 ? '-' : '+') + pad(Math.floor(Math.abs(off) / 60)) + pad(Math.abs(off) % 60);
          }

        default: return c;
      }
    });
  }

  function dateToUTC(d) {
    var msDelta = (d.getTimezoneOffset() || 0) * 60000;
    return new Date(d.getTime() + msDelta);
  }

  var RequiredDateMethods = ['getTime', 'getTimezoneOffset', 'getDay', 'getDate', 'getMonth', 'getFullYear', 'getYear', 'getHours', 'getMinutes', 'getSeconds'];
  function quacksLikeDate(x) {
    var i = 0
      , n = RequiredDateMethods.length
      ;
    for (i = 0; i < n; ++i) {
      if (typeof x[RequiredDateMethods[i]] != 'function') {
        return false;
      }
    }
    return true;
  }

  // Default padding is '0' and default length is 2, both are optional.
  function pad(n, padding, length) {
    // pad(n, <length>)
    if (typeof padding === 'number') {
      length = padding;
      padding = '0';
    }

    // Defaults handle pad(n) and pad(n, <padding>)
    if (padding == null) {
      padding = '0';
    }
    length = length || 2;

    var s = String(n);
    // padding may be an empty string, don't loop forever if it is
    if (padding) {
      while (s.length < length) s = padding + s;
    }
    return s;
  }

  function hours12(d) {
    var hour = d.getHours();
    if (hour == 0) hour = 12;
    else if (hour > 12) hour -= 12;
    return hour;
  }

  // Get the ordinal suffix for a number: st, nd, rd, or th
  function ordinal(n) {
    var i = n % 10
      , ii = n % 100
      ;
    if ((ii >= 11 && ii <= 13) || i === 0 || i >= 4) {
      return 'th';
    }
    switch (i) {
      case 1: return 'st';
      case 2: return 'nd';
      case 3: return 'rd';
    }
  }

  // firstWeekday: 'sunday' or 'monday', default is 'sunday'
  //
  // Pilfered & ported from Ruby's strftime implementation.
  function weekNumber(d, firstWeekday) {
    firstWeekday = firstWeekday || 'sunday';

    // This works by shifting the weekday back by one day if we
    // are treating Monday as the first day of the week.
    var wday = d.getDay();
    if (firstWeekday == 'monday') {
      if (wday == 0) // Sunday
        wday = 6;
      else
        wday--;
    }
    var firstDayOfYear = new Date(d.getFullYear(), 0, 1)
      , yday = (d - firstDayOfYear) / 86400000
      , weekNum = (yday + 7 - wday) / 7
      ;
    return Math.floor(weekNum);
  }

}());

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68", function (exports, module) {
//! moment.js
//! version : 2.8.1
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {
    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = '2.8.1',
        // the global-scope this is NOT the global object in Node.js
        globalScope = typeof global !== 'undefined' ? global : this,
        oldGlobalMoment,
        round = Math.round,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for locale config files
        locales = {},

        // extra moment internal properties (plugins register props here)
        momentProperties = [],

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        parseTokenOrdinal = /\d{1,2}/,

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker "+10:00" > ["10", "00"] or "-1530" > ["-15", "30"]
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            Q : 'quarter',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // default relative time thresholds
        relativeTimeThresholds = {
            s: 45,  // seconds to minute
            m: 45,  // minutes to hour
            h: 22,  // hours to day
            d: 26,  // days to month
            M: 11   // months to year
        },

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.localeData().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.localeData().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.localeData().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.localeData().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.localeData().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY : function () {
                var y = this.year(), sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.localeData().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = -this.zone(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ':' + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = -this.zone(),
                    b = '+';
                if (a < 0) {
                    a = -a;
                    b = '-';
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            X    : function () {
                return this.unix();
            },
            Q : function () {
                return this.quarter();
            }
        },

        deprecations = {},

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];

    // Pick the first defined of two or three arguments. dfl comes from
    // default.
    function dfl(a, b, c) {
        switch (arguments.length) {
            case 2: return a != null ? a : b;
            case 3: return a != null ? a : b != null ? b : c;
            default: throw new Error('Implement me');
        }
    }

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function printMsg(msg) {
        if (moment.suppressDeprecationWarnings === false &&
                typeof console !== 'undefined' && console.warn) {
            console.warn("Deprecation warning: " + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function () {
            if (firstTime) {
                printMsg(msg);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    function deprecateSimple(name, msg) {
        if (!deprecations[name]) {
            printMsg(msg);
            deprecations[name] = true;
        }
    }

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.localeData().ordinal(func.call(this, a), period);
        };
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    /************************************
        Constructors
    ************************************/

    function Locale() {
    }

    // Moment prototype object
    function Moment(config, skipOverflow) {
        if (skipOverflow !== false) {
            checkOverflow(config);
        }
        copyConfig(this, config);
        this._d = new Date(+config._d);
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = moment.localeData();

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (b.hasOwnProperty(i)) {
                a[i] = b[i];
            }
        }

        if (b.hasOwnProperty('toString')) {
            a.toString = b.toString;
        }

        if (b.hasOwnProperty('valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function copyConfig(to, from) {
        var i, prop, val;

        if (typeof from._isAMomentObject !== 'undefined') {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (typeof from._i !== 'undefined') {
            to._i = from._i;
        }
        if (typeof from._f !== 'undefined') {
            to._f = from._f;
        }
        if (typeof from._l !== 'undefined') {
            to._l = from._l;
        }
        if (typeof from._strict !== 'undefined') {
            to._strict = from._strict;
        }
        if (typeof from._tzm !== 'undefined') {
            to._tzm = from._tzm;
        }
        if (typeof from._isUTC !== 'undefined') {
            to._isUTC = from._isUTC;
        }
        if (typeof from._offset !== 'undefined') {
            to._offset = from._offset;
        }
        if (typeof from._pf !== 'undefined') {
            to._pf = from._pf;
        }
        if (typeof from._locale !== 'undefined') {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i in momentProperties) {
                prop = momentProperties[i];
                val = from[prop];
                if (typeof val !== 'undefined') {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        other = makeAs(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, "moment()." + name  + "(period, number) is deprecated. Please use moment()." + name + "(number, period).");
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = moment.duration(val, period);
            addOrSubtractDurationFromMoment(this, dur, direction);
            return this;
        };
    }

    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
        }
        if (months) {
            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            moment.updateOffset(mom, days || months);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return Object.prototype.toString.call(input) === '[object Date]' ||
            input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (inputObject.hasOwnProperty(prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment._locale[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment._locale, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0;
            }
        }
        return m._isValid;
    }

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return null;
    }

    function loadLocale(name) {
        var oldLocale = null;
        if (!locales[name] && hasModule) {
            try {
                oldLocale = moment.locale();
                require('./locale/' + name);
                // because defineLocale currently also sets the global locale, we want to undo that for lazy loaded locales
                moment.locale(oldLocale);
            } catch (e) { }
        }
        return locales[name];
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function makeAs(input, model) {
        return model._isUTC ? moment(input).zone(model._offset || 0) :
            moment(input).local();
    }

    /************************************
        Locale
    ************************************/


    extend(Locale.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        },

        _months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                if (!this._monthsParse[i]) {
                    mom = moment.utc([2000, i]);
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LT : 'h:mm A',
            L : 'MM/DD/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY LT',
            LLLL : 'dddd, MMMM D, YYYY LT'
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },

        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom) : output;
        },

        _relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },

        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },

        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace('%d', number);
        },
        _ordinal : '%d',

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '';
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'Q':
            return parseTokenOneDigit;
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
            return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
            if (strict) {
                return parseTokenOneDigit;
            }
            /* falls through */
        case 'SS':
            if (strict) {
                return parseTokenTwoDigits;
            }
            /* falls through */
        case 'SSS':
            if (strict) {
                return parseTokenThreeDigits;
            }
            /* falls through */
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return config._locale._meridiemParse;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        case 'Do':
            return parseTokenOrdinal;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), 'i'));
            return a;
        }
    }

    function timezoneMinutesFromString(string) {
        string = string || '';
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? -minutes : minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // QUARTER
        case 'Q':
            if (input != null) {
                datePartArray[MONTH] = (toInt(input) - 1) * 3;
            }
            break;
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = config._locale.monthsParse(input);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        case 'Do' :
            if (input != null) {
                datePartArray[DATE] = toInt(parseInt(input, 10));
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = moment.parseTwoDigitYear(input);
            break;
        case 'YYYY' :
        case 'YYYYY' :
        case 'YYYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._isPm = config._locale.isPM(input);
            break;
        // 24 HOUR
        case 'H' : // fall through to hh
        case 'HH' : // fall through to hh
        case 'h' : // fall through to hh
        case 'hh' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = timezoneMinutesFromString(input);
            break;
        // WEEKDAY - human
        case 'dd':
        case 'ddd':
        case 'dddd':
            a = config._locale.weekdaysParse(input);
            // if we didn't get a weekday name, mark the date as invalid
            if (a != null) {
                config._w = config._w || {};
                config._w['d'] = a;
            } else {
                config._pf.invalidWeekday = input;
            }
            break;
        // WEEK, WEEK DAY - numeric
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gggg':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = toInt(input);
            }
            break;
        case 'gg':
        case 'GG':
            config._w = config._w || {};
            config._w[token] = moment.parseTwoDigitYear(input);
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
            week = dfl(w.W, 1);
            weekday = dfl(w.E, 1);
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
            week = dfl(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
        // Apply timezone offset from input. The actual zone can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
        }
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {
        if (config._f === moment.ISO_8601) {
            parseISO(config);
            return;
        }

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // handle am pm
        if (config._isPm && config._a[HOUR] < 12) {
            config._a[HOUR] += 12;
        }
        // if is 12 am, change hours to 0
        if (config._isPm === false && config._a[HOUR] === 12) {
            config._a[HOUR] = 0;
        }

        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function parseISO(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be "T" or undefined
                    config._f = isoDates[i][0] + (match[6] || ' ');
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += 'Z';
            }
            makeDateFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function makeDateFromString(config) {
        parseISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            moment.createFromInputFallback(config);
        }
    }

    function makeDateFromInput(config) {
        var input = config._i, matched;
        if (input === undefined) {
            config._d = new Date();
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if ((matched = aspNetJsonRegex.exec(input)) !== null) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = input.slice(0);
            dateFromConfig(config);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            moment.createFromInputFallback(config);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, locale) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = locale.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(posNegDuration, withoutSuffix, locale) {
        var duration = moment.duration(posNegDuration).abs(),
            seconds = round(duration.as('s')),
            minutes = round(duration.as('m')),
            hours = round(duration.as('h')),
            days = round(duration.as('d')),
            months = round(duration.as('M')),
            years = round(duration.as('y')),

            args = seconds < relativeTimeThresholds.s && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < relativeTimeThresholds.m && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < relativeTimeThresholds.h && ['hh', hours] ||
                days === 1 && ['d'] ||
                days < relativeTimeThresholds.d && ['dd', days] ||
                months === 1 && ['M'] ||
                months < relativeTimeThresholds.M && ['MM', months] ||
                years === 1 && ['y'] || ['yy', years];

        args[2] = withoutSuffix;
        args[3] = +posNegDuration > 0;
        args[4] = locale;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add(daysToDayOfWeek, 'd');
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || moment.localeData(config._l);

        if (input === null || (format === undefined && input === '')) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (moment.isMoment(input)) {
            return new Moment(input, true);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        return new Moment(config);
    }

    moment = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === "boolean") {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = locale;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    moment.suppressDeprecationWarnings = false;

    moment.createFromInputFallback = deprecate(
        'moment construction falls back to js Date. This is ' +
        'discouraged and will be removed in upcoming major ' +
        'release. Please refer to ' +
        'https://github.com/moment/moment/issues/1407 for more info.',
        function (config) {
            config._d = new Date(config._i);
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return moment();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    moment.min = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    };

    moment.max = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    };

    // creating with utc
    moment.utc = function (input, format, locale, strict) {
        var c;

        if (typeof(locale) === "boolean") {
            strict = locale;
            locale = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso,
            diffRes;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        } else if (typeof duration === 'object' &&
                ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(moment(duration.from), moment(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && input.hasOwnProperty('_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // constant that refers to the ISO standard
    moment.ISO_8601 = function () {};

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    moment.momentProperties = momentProperties;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function allows you to set a threshold for relative time strings
    moment.relativeTimeThreshold = function (threshold, limit) {
        if (relativeTimeThresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return relativeTimeThresholds[threshold];
        }
        relativeTimeThresholds[threshold] = limit;
        return true;
    };

    moment.lang = deprecate(
        "moment.lang is deprecated. Use moment.locale instead.",
        function (key, value) {
            return moment.locale(key, value);
        }
    );

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    moment.locale = function (key, values) {
        var data;
        if (key) {
            if (typeof(values) !== "undefined") {
                data = moment.defineLocale(key, values);
            }
            else {
                data = moment.localeData(key);
            }

            if (data) {
                moment.duration._locale = moment._locale = data;
            }
        }

        return moment._locale._abbr;
    };

    moment.defineLocale = function (name, values) {
        if (values !== null) {
            values.abbr = name;
            if (!locales[name]) {
                locales[name] = new Locale();
            }
            locales[name].set(values);

            // backwards compat for now: also set the locale
            moment.locale(name);

            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    };

    moment.langData = deprecate(
        "moment.langData is deprecated. Use moment.localeData instead.",
        function (key) {
            return moment.localeData(key);
        }
    );

    // returns locale data
    moment.localeData = function (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return moment._locale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment ||
            (obj != null &&  obj.hasOwnProperty('_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function () {
        return moment.apply(null, arguments).parseZone();
    };

    moment.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d + ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().locale('en').format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {
            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function (keepLocalTime) {
            return this.zone(0, keepLocalTime);
        },

        local : function (keepLocalTime) {
            if (this._isUTC) {
                this.zone(0, keepLocalTime);
                this._isUTC = false;

                if (keepLocalTime) {
                    this.add(this._d.getTimezoneOffset(), 'm');
                }
            }
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.localeData().postformat(output);
        },

        add : createAdder(1, 'add'),

        subtract : createAdder(-1, 'subtract'),

        diff : function (input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (this.zone() - that.zone()) * 6e4,
                diff, output;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month') {
                // average number of days in the months in the given dates
                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2
                // difference in months
                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());
                // adjust by taking difference in days, average number of days
                // and dst in the given months.
                output += ((this - moment(this).startOf('month')) -
                        (that - moment(that).startOf('month'))) / diff;
                // same as above but with zones, to negate all dst
                output -= ((this.zone() - moment(this).startOf('month').zone()) -
                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;
                if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = (this - that);
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function (time) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're zone'd or not.
            var now = time || moment(),
                sod = makeAs(now, this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.localeData().calendar(format, this));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.zone() < this.clone().month(0).zone() ||
                this.zone() < this.clone().month(5).zone());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.localeData());
                return this.add(input - day, 'd');
            } else {
                return day;
            }
        },

        month : makeAccessor('Month', true),

        startOf : function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            // quarters are also special
            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
        },

        isAfter: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) > +moment(input).startOf(units);
        },

        isBefore: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) < +moment(input).startOf(units);
        },

        isSame: function (input, units) {
            units = units || 'ms';
            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
        },

        min: deprecate(
                 'moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548',
                 function (other) {
                     other = moment.apply(null, arguments);
                     return other < this ? this : other;
                 }
         ),

        max: deprecate(
                'moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548',
                function (other) {
                    other = moment.apply(null, arguments);
                    return other > this ? this : other;
                }
        ),

        // keepLocalTime = true means only change the timezone, without
        // affecting the local hour. So 5:31:26 +0300 --[zone(2, true)]-->
        // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist int zone
        // +0200, so we adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        zone : function (input, keepLocalTime) {
            var offset = this._offset || 0,
                localAdjust;
            if (input != null) {
                if (typeof input === 'string') {
                    input = timezoneMinutesFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                if (!this._isUTC && keepLocalTime) {
                    localAdjust = this._d.getTimezoneOffset();
                }
                this._offset = input;
                this._isUTC = true;
                if (localAdjust != null) {
                    this.subtract(localAdjust, 'm');
                }
                if (offset !== input) {
                    if (!keepLocalTime || this._changeInProgress) {
                        addOrSubtractDurationFromMoment(this,
                                moment.duration(offset - input, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        moment.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
            } else {
                return this._isUTC ? offset : this._d.getTimezoneOffset();
            }
            return this;
        },

        zoneAbbr : function () {
            return this._isUTC ? 'UTC' : '';
        },

        zoneName : function () {
            return this._isUTC ? 'Coordinated Universal Time' : '';
        },

        parseZone : function () {
            if (this._tzm) {
                this.zone(this._tzm);
            } else if (typeof this._i === 'string') {
                this.zone(this._i);
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).zone();
            }

            return (this.zone() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
        },

        quarter : function (input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add((input - year), 'y');
        },

        week : function (input) {
            var week = this.localeData().week(this);
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add((input - week) * 7, 'd');
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
            return input == null ? weekday : this.add(input - weekday, 'd');
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        isoWeeksInYear : function () {
            return weeksInYear(this.year(), 1, 4);
        },

        weeksInYear : function () {
            var weekInfo = this.localeData()._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                this[units](value);
            }
            return this;
        },

        // If passed a locale key, it will set the locale for this
        // instance.  Otherwise, it will return the locale configuration
        // variables for this instance.
        locale : function (key) {
            if (key === undefined) {
                return this._locale._abbr;
            } else {
                this._locale = moment.localeData(key);
                return this;
            }
        },

        lang : deprecate(
            "moment().lang() is deprecated. Use moment().localeData() instead.",
            function (key) {
                if (key === undefined) {
                    return this.localeData();
                } else {
                    this._locale = moment.localeData(key);
                    return this;
                }
            }
        ),

        localeData : function () {
            return this._locale;
        }
    });

    function rawMonthSetter(mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.localeData().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(),
                daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function rawGetter(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function rawSetter(mom, unit, value) {
        if (unit === 'Month') {
            return rawMonthSetter(mom, value);
        } else {
            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    function makeAccessor(unit, keepTime) {
        return function (value) {
            if (value != null) {
                rawSetter(this, unit, value);
                moment.updateOffset(this, keepTime);
                return this;
            } else {
                return rawGetter(this, unit);
            }
        };
    }

    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
    // moment.fn.month is defined separately
    moment.fn.date = makeAccessor('Date', true);
    moment.fn.dates = deprecate('dates accessor is deprecated. Use date instead.', makeAccessor('Date', true));
    moment.fn.year = makeAccessor('FullYear', true);
    moment.fn.years = deprecate('years accessor is deprecated. Use year instead.', makeAccessor('FullYear', true));

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;
    moment.fn.quarters = moment.fn.quarter;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    /************************************
        Duration Prototype
    ************************************/


    function daysToYears (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        return days * 400 / 146097;
    }

    function yearsToDays (years) {
        // years * 365 + absRound(years / 4) -
        //     absRound(years / 100) + absRound(years / 400);
        return years * 146097 / 400;
    }

    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years = 0;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);

            // Accurately convert days to years, assume start from year 0.
            years = absRound(daysToYears(days));
            days -= absRound(yearsToDays(years));

            // 30 days to a month
            // TODO (iskren): Use anchor date (like 1st Jan) to compute this.
            months += absRound(days / 30);
            days %= 30;

            // 12 months -> 1 year
            years += absRound(months / 12);
            months %= 12;

            data.days = days;
            data.months = months;
            data.years = years;
        },

        abs : function () {
            this._milliseconds = Math.abs(this._milliseconds);
            this._days = Math.abs(this._days);
            this._months = Math.abs(this._months);

            this._data.milliseconds = Math.abs(this._data.milliseconds);
            this._data.seconds = Math.abs(this._data.seconds);
            this._data.minutes = Math.abs(this._data.minutes);
            this._data.hours = Math.abs(this._data.hours);
            this._data.months = Math.abs(this._data.months);
            this._data.years = Math.abs(this._data.years);

            return this;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var output = relativeTime(this, !withSuffix, this.localeData());

            if (withSuffix) {
                output = this.localeData().pastFuture(+this, output);
            }

            return this.localeData().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            var days, months;
            units = normalizeUnits(units);

            days = this._days + this._milliseconds / 864e5;
            if (units === 'month' || units === 'year') {
                months = this._months + daysToYears(days) * 12;
                return units === 'month' ? months : months / 12;
            } else {
                days += yearsToDays(this._months / 12);
                switch (units) {
                    case 'week': return days / 7;
                    case 'day': return days;
                    case 'hour': return days * 24;
                    case 'minute': return days * 24 * 60;
                    case 'second': return days * 24 * 60 * 60;
                    case 'millisecond': return days * 24 * 60 * 60 * 1000;
                    default: throw new Error('Unknown unit ' + units);
                }
            }
        },

        lang : moment.fn.lang,
        locale : moment.fn.locale,

        toIsoString : deprecate(
            "toIsoString() is deprecated. Please use toISOString() instead " +
            "(notice the capitals)",
            function () {
                return this.toISOString();
            }
        ),

        toISOString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        },

        localeData : function () {
            return this._locale;
        }
    });

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    for (i in unitMillisecondFactors) {
        if (unitMillisecondFactors.hasOwnProperty(i)) {
            makeDurationGetter(i.toLowerCase());
        }
    }

    moment.duration.fn.asMilliseconds = function () {
        return this.as('ms');
    };
    moment.duration.fn.asSeconds = function () {
        return this.as('s');
    };
    moment.duration.fn.asMinutes = function () {
        return this.as('m');
    };
    moment.duration.fn.asHours = function () {
        return this.as('h');
    };
    moment.duration.fn.asDays = function () {
        return this.as('d');
    };
    moment.duration.fn.asWeeks = function () {
        return this.as('weeks');
    };
    moment.duration.fn.asMonths = function () {
        return this.as('M');
    };
    moment.duration.fn.asYears = function () {
        return this.as('y');
    };

    /************************************
        Default Locale
    ************************************/


    // Set default locale, other locale will inherit from English.
    moment.locale('en', {
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    /* EMBED_LOCALES */

    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(shouldDeprecate) {
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        oldGlobalMoment = globalScope.moment;
        if (shouldDeprecate) {
            globalScope.moment = deprecate(
                    'Accessing Moment through the global scope is ' +
                    'deprecated, and will be removed in an upcoming ' +
                    'release.',
                    moment);
        } else {
            globalScope.moment = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
    } else if (typeof define === 'function' && define.amd) {
        define('moment', function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal === true) {
                // release the global variable
                globalScope.moment = oldGlobalMoment;
            }

            return moment;
        });
        makeGlobal(true);
    } else {
        makeGlobal();
    }
}).call(this);

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/af.js", function (exports, module) {
// moment.js locale configuration
// locale : afrikaans (af)
// author : Werner Mollentze : https://github.com/wernerm

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('af', {
        months : "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),
        weekdays : "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),
        weekdaysShort : "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),
        weekdaysMin : "So_Ma_Di_Wo_Do_Vr_Sa".split("_"),
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Vandag om] LT',
            nextDay : '[Môre om] LT',
            nextWeek : 'dddd [om] LT',
            lastDay : '[Gister om] LT',
            lastWeek : '[Laas] dddd [om] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "oor %s",
            past : "%s gelede",
            s : "'n paar sekondes",
            m : "'n minuut",
            mm : "%d minute",
            h : "'n uur",
            hh : "%d ure",
            d : "'n dag",
            dd : "%d dae",
            M : "'n maand",
            MM : "%d maande",
            y : "'n jaar",
            yy : "%d jaar"
        },
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week : {
            dow : 1, // Maandag is die eerste dag van die week.
            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ar-ma.js", function (exports, module) {
// moment.js locale configuration
// locale : Moroccan Arabic (ar-ma)
// author : ElFadili Yassine : https://github.com/ElFadiliY
// author : Abdel Said : https://github.com/abdelsaid

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('ar-ma', {
        months : "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        monthsShort : "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
        weekdays : "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort : "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "في %s",
            past : "منذ %s",
            s : "ثوان",
            m : "دقيقة",
            mm : "%d دقائق",
            h : "ساعة",
            hh : "%d ساعات",
            d : "يوم",
            dd : "%d أيام",
            M : "شهر",
            MM : "%d أشهر",
            y : "سنة",
            yy : "%d سنوات"
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ar-sa.js", function (exports, module) {
// moment.js locale configuration
// locale : Arabic Saudi Arabia (ar-sa)
// author : Suhail Alkowaileet : https://github.com/xsoh

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };

    return moment.defineLocale('ar-sa', {
        months : "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        monthsShort : "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
        weekdays : "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort : "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "ص";
            } else {
                return "م";
            }
        },
        calendar : {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "في %s",
            past : "منذ %s",
            s : "ثوان",
            m : "دقيقة",
            mm : "%d دقائق",
            h : "ساعة",
            hh : "%d ساعات",
            d : "يوم",
            dd : "%d أيام",
            M : "شهر",
            MM : "%d أشهر",
            y : "سنة",
            yy : "%d سنوات"
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ar.js", function (exports, module) {
// moment.js locale configuration
// locale : Arabic (ar)
// author : Abdel Said : https://github.com/abdelsaid
// changes in months, weekdays : Ahmed Elkhatib

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };

    return moment.defineLocale('ar', {
        months : "يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),
        monthsShort : "يناير/ كانون الثاني_فبراير/ شباط_مارس/ آذار_أبريل/ نيسان_مايو/ أيار_يونيو/ حزيران_يوليو/ تموز_أغسطس/ آب_سبتمبر/ أيلول_أكتوبر/ تشرين الأول_نوفمبر/ تشرين الثاني_ديسمبر/ كانون الأول".split("_"),
        weekdays : "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
        weekdaysShort : "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
        weekdaysMin : "ح_ن_ث_ر_خ_ج_س".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "ص";
            } else {
                return "م";
            }
        },
        calendar : {
            sameDay: "[اليوم على الساعة] LT",
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "في %s",
            past : "منذ %s",
            s : "ثوان",
            m : "دقيقة",
            mm : "%d دقائق",
            h : "ساعة",
            hh : "%d ساعات",
            d : "يوم",
            dd : "%d أيام",
            M : "شهر",
            MM : "%d أشهر",
            y : "سنة",
            yy : "%d سنوات"
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/az.js", function (exports, module) {
// moment.js locale configuration
// locale : azerbaijani (az)
// author : topchiyev : https://github.com/topchiyev

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var suffixes = {
        1: "-inci",
        5: "-inci",
        8: "-inci",
        70: "-inci",
        80: "-inci",

        2: "-nci",
        7: "-nci",
        20: "-nci",
        50: "-nci",

        3: "-üncü",
        4: "-üncü",
        100: "-üncü",

        6: "-ncı",

        9: "-uncu",
        10: "-uncu",
        30: "-uncu",

        60: "-ıncı",
        90: "-ıncı"
    };
    return moment.defineLocale('az', {
        months : "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),
        monthsShort : "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),
        weekdays : "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),
        weekdaysShort : "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),
        weekdaysMin : "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[sabah saat] LT',
            nextWeek : '[gələn həftə] dddd [saat] LT',
            lastDay : '[dünən] LT',
            lastWeek : '[keçən həftə] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s sonra",
            past : "%s əvvəl",
            s : "birneçə saniyyə",
            m : "bir dəqiqə",
            mm : "%d dəqiqə",
            h : "bir saat",
            hh : "%d saat",
            d : "bir gün",
            dd : "%d gün",
            M : "bir ay",
            MM : "%d ay",
            y : "bir il",
            yy : "%d il"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "gecə";
            } else if (hour < 12) {
                return "səhər";
            } else if (hour < 17) {
                return "gündüz";
            } else {
                return "axşam";
            }
        },
        ordinal : function (number) {
            if (number === 0) {  // special case for zero
                return number + "-ıncı";
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;

            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/be.js", function (exports, module) {
// moment.js locale configuration
// locale : belarusian (be)
// author : Dmitry Demidov : https://github.com/demidov91
// author: Praleska: http://praleska.pro/
// Author : Menelion Elensúle : https://github.com/Oire

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            'dd': 'дзень_дні_дзён',
            'MM': 'месяц_месяцы_месяцаў',
            'yy': 'год_гады_гадоў'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_'),
            'accusative': 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_')
        },

        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
            'accusative': 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_')
        },

        nounCase = (/\[ ?[Вв] ?(?:мінулую|наступную)? ?\] ?dddd/).test(format) ?
            'accusative' :
            'nominative';

        return weekdays[nounCase][m.day()];
    }

    return moment.defineLocale('be', {
        months : monthsCaseReplace,
        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "нд_пн_ат_ср_чц_пт_сб".split("_"),
        weekdaysMin : "нд_пн_ат_ср_чц_пт_сб".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY г.",
            LLL : "D MMMM YYYY г., LT",
            LLLL : "dddd, D MMMM YYYY г., LT"
        },
        calendar : {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return '[У мінулую] dddd [ў] LT';
                case 1:
                case 2:
                case 4:
                    return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "праз %s",
            past : "%s таму",
            s : "некалькі секунд",
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : relativeTimeWithPlural,
            hh : relativeTimeWithPlural,
            d : "дзень",
            dd : relativeTimeWithPlural,
            M : "месяц",
            MM : relativeTimeWithPlural,
            y : "год",
            yy : relativeTimeWithPlural
        },


        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "ночы";
            } else if (hour < 12) {
                return "раніцы";
            } else if (hour < 17) {
                return "дня";
            } else {
                return "вечара";
            }
        },

        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
            case 'D':
                return number + '-га';
            default:
                return number;
            }
        },

        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/bg.js", function (exports, module) {
// moment.js locale configuration
// locale : bulgarian (bg)
// author : Krasen Borisov : https://github.com/kraz

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('bg', {
        months : "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),
        monthsShort : "янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),
        weekdays : "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),
        weekdaysShort : "нед_пон_вто_сря_чет_пет_съб".split("_"),
        weekdaysMin : "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "D.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Днес в] LT',
            nextDay : '[Утре в] LT',
            nextWeek : 'dddd [в] LT',
            lastDay : '[Вчера в] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[В изминалата] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[В изминалия] dddd [в] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "след %s",
            past : "преди %s",
            s : "няколко секунди",
            m : "минута",
            mm : "%d минути",
            h : "час",
            hh : "%d часа",
            d : "ден",
            dd : "%d дни",
            M : "месец",
            MM : "%d месеца",
            y : "година",
            yy : "%d години"
        },
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/bn.js", function (exports, module) {
// moment.js locale configuration
// locale : Bengali (bn)
// author : Kaushik Gandhi : https://github.com/kaushikgandhi

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var symbolMap = {
        '1': '১',
        '2': '২',
        '3': '৩',
        '4': '৪',
        '5': '৫',
        '6': '৬',
        '7': '৭',
        '8': '৮',
        '9': '৯',
        '0': '০'
    },
    numberMap = {
        '১': '1',
        '২': '2',
        '৩': '3',
        '৪': '4',
        '৫': '5',
        '৬': '6',
        '৭': '7',
        '৮': '8',
        '৯': '9',
        '০': '0'
    };

    return moment.defineLocale('bn', {
        months : 'জানুয়ারী_ফেবুয়ারী_মার্চ_এপ্রিল_মে_জুন_জুলাই_অগাস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split("_"),
        monthsShort : 'জানু_ফেব_মার্চ_এপর_মে_জুন_জুল_অগ_সেপ্ট_অক্টো_নভ_ডিসেম্'.split("_"),
        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পত্তিবার_শুক্রুবার_শনিবার'.split("_"),
        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পত্তি_শুক্রু_শনি'.split("_"),
        weekdaysMin : 'রব_সম_মঙ্গ_বু_ব্রিহ_শু_শনি'.split("_"),
        longDateFormat : {
            LT : "A h:mm সময়",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[আজ] LT',
            nextDay : '[আগামীকাল] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[গতকাল] LT',
            lastWeek : '[গত] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s পরে",
            past : "%s আগে",
            s : "কএক সেকেন্ড",
            m : "এক মিনিট",
            mm : "%d মিনিট",
            h : "এক ঘন্টা",
            hh : "%d ঘন্টা",
            d : "এক দিন",
            dd : "%d দিন",
            M : "এক মাস",
            MM : "%d মাস",
            y : "এক বছর",
            yy : "%d বছর"
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        //Bengali is a vast language its spoken
        //in different forms in various parts of the world.
        //I have just generalized with most common one used
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "রাত";
            } else if (hour < 10) {
                return "শকাল";
            } else if (hour < 17) {
                return "দুপুর";
            } else if (hour < 20) {
                return "বিকেল";
            } else {
                return "রাত";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/bo.js", function (exports, module) {
// moment.js locale configuration
// locale : tibetan (bo)
// author : Thupten N. Chakrishar : https://github.com/vajradog

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var symbolMap = {
        '1': '༡',
        '2': '༢',
        '3': '༣',
        '4': '༤',
        '5': '༥',
        '6': '༦',
        '7': '༧',
        '8': '༨',
        '9': '༩',
        '0': '༠'
    },
    numberMap = {
        '༡': '1',
        '༢': '2',
        '༣': '3',
        '༤': '4',
        '༥': '5',
        '༦': '6',
        '༧': '7',
        '༨': '8',
        '༩': '9',
        '༠': '0'
    };

    return moment.defineLocale('bo', {
        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split("_"),
        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split("_"),
        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split("_"),
        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split("_"),
        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split("_"),
        longDateFormat : {
            LT : "A h:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[དི་རིང] LT',
            nextDay : '[སང་ཉིན] LT',
            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay : '[ཁ་སང] LT',
            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s ལ་",
            past : "%s སྔན་ལ",
            s : "ལམ་སང",
            m : "སྐར་མ་གཅིག",
            mm : "%d སྐར་མ",
            h : "ཆུ་ཚོད་གཅིག",
            hh : "%d ཆུ་ཚོད",
            d : "ཉིན་གཅིག",
            dd : "%d ཉིན་",
            M : "ཟླ་བ་གཅིག",
            MM : "%d ཟླ་བ",
            y : "ལོ་གཅིག",
            yy : "%d ལོ"
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "མཚན་མོ";
            } else if (hour < 10) {
                return "ཞོགས་ཀས";
            } else if (hour < 17) {
                return "ཉིན་གུང";
            } else if (hour < 20) {
                return "དགོང་དག";
            } else {
                return "མཚན་མོ";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/br.js", function (exports, module) {
// moment.js locale configuration
// locale : breton (br)
// author : Jean-Baptiste Le Duigou : https://github.com/jbleduigou

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': "munutenn",
            'MM': "miz",
            'dd': "devezh"
        };
        return number + ' ' + mutation(format[key], number);
    }

    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
        case 1:
        case 3:
        case 4:
        case 5:
        case 9:
            return number + ' bloaz';
        default:
            return number + ' vloaz';
        }
    }

    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }

    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }

    function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    return moment.defineLocale('br', {
        months : "Genver_C'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
        monthsShort : "Gen_C'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
        weekdays : "Sul_Lun_Meurzh_Merc'her_Yaou_Gwener_Sadorn".split("_"),
        weekdaysShort : "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
        weekdaysMin : "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
        longDateFormat : {
            LT : "h[e]mm A",
            L : "DD/MM/YYYY",
            LL : "D [a viz] MMMM YYYY",
            LLL : "D [a viz] MMMM YYYY LT",
            LLLL : "dddd, D [a viz] MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Hiziv da] LT',
            nextDay : '[Warc\'hoazh da] LT',
            nextWeek : 'dddd [da] LT',
            lastDay : '[Dec\'h da] LT',
            lastWeek : 'dddd [paset da] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "a-benn %s",
            past : "%s 'zo",
            s : "un nebeud segondennoù",
            m : "ur vunutenn",
            mm : relativeTimeWithMutation,
            h : "un eur",
            hh : "%d eur",
            d : "un devezh",
            dd : relativeTimeWithMutation,
            M : "ur miz",
            MM : relativeTimeWithMutation,
            y : "ur bloaz",
            yy : specialMutationForYears
        },
        ordinal : function (number) {
            var output = (number === 1) ? 'añ' : 'vet';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/bs.js", function (exports, module) {
// moment.js locale configuration
// locale : bosnian (bs)
// author : Nedim Cholich : https://github.com/frontyard
// based on (hr) translation by Bojan Marković

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
        }
    }

    return moment.defineLocale('bs', {
        months : "januar_februar_mart_april_maj_juni_juli_avgust_septembar_oktobar_novembar_decembar".split("_"),
        monthsShort : "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
        weekdays : "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort : "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin : "ne_po_ut_sr_če_pe_su".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',

            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "za %s",
            past   : "prije %s",
            s      : "par sekundi",
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : "dan",
            dd     : translate,
            M      : "mjesec",
            MM     : translate,
            y      : "godinu",
            yy     : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ca.js", function (exports, module) {
// moment.js locale configuration
// locale : catalan (ca)
// author : Juan G. Hurtado : https://github.com/juanghurtado

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('ca', {
        months : "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
        monthsShort : "gen._febr._mar._abr._mai._jun._jul._ag._set._oct._nov._des.".split("_"),
        weekdays : "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
        weekdaysShort : "dg._dl._dt._dc._dj._dv._ds.".split("_"),
        weekdaysMin : "Dg_Dl_Dt_Dc_Dj_Dv_Ds".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay : function () {
                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextDay : function () {
                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastDay : function () {
                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "en %s",
            past : "fa %s",
            s : "uns segons",
            m : "un minut",
            mm : "%d minuts",
            h : "una hora",
            hh : "%d hores",
            d : "un dia",
            dd : "%d dies",
            M : "un mes",
            MM : "%d mesos",
            y : "un any",
            yy : "%d anys"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/cs.js", function (exports, module) {
// moment.js locale configuration
// locale : czech (cs)
// author : petrbela : https://github.com/petrbela

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var months = "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),
        monthsShort = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_");

    function plural(n) {
        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minuty' : 'minut');
            } else {
                return result + 'minutami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodin');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'den' : 'dnem';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dny' : 'dní');
            } else {
                return result + 'dny';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'měsíce' : 'měsíců');
            } else {
                return result + 'měsíci';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'let');
            } else {
                return result + 'lety';
            }
            break;
        }
    }

    return moment.defineLocale('cs', {
        months : months,
        monthsShort : monthsShort,
        monthsParse : (function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(months, monthsShort)),
        weekdays : "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),
        weekdaysShort : "ne_po_út_st_čt_pá_so".split("_"),
        weekdaysMin : "ne_po_út_st_čt_pá_so".split("_"),
        longDateFormat : {
            LT: "H.mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[dnes v] LT",
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v neděli v] LT';
                case 1:
                case 2:
                    return '[v] dddd [v] LT';
                case 3:
                    return '[ve středu v] LT';
                case 4:
                    return '[ve čtvrtek v] LT';
                case 5:
                    return '[v pátek v] LT';
                case 6:
                    return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[minulou neděli v] LT';
                case 1:
                case 2:
                    return '[minulé] dddd [v] LT';
                case 3:
                    return '[minulou středu v] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [v] LT';
                case 6:
                    return '[minulou sobotu v] LT';
                }
            },
            sameElse: "L"
        },
        relativeTime : {
            future : "za %s",
            past : "před %s",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/cv.js", function (exports, module) {
// moment.js locale configuration
// locale : chuvash (cv)
// author : Anatoly Mironov : https://github.com/mirontoli

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('cv', {
        months : "кăрлач_нарăс_пуш_ака_май_çĕртме_утă_çурла_авăн_юпа_чӳк_раштав".split("_"),
        monthsShort : "кăр_нар_пуш_ака_май_çĕр_утă_çур_ав_юпа_чӳк_раш".split("_"),
        weekdays : "вырсарникун_тунтикун_ытларикун_юнкун_кĕçнерникун_эрнекун_шăматкун".split("_"),
        weekdaysShort : "выр_тун_ытл_юн_кĕç_эрн_шăм".split("_"),
        weekdaysMin : "вр_тн_ыт_юн_кç_эр_шм".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD-MM-YYYY",
            LL : "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ]",
            LLL : "YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT",
            LLLL : "dddd, YYYY [çулхи] MMMM [уйăхĕн] D[-мĕшĕ], LT"
        },
        calendar : {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ĕнер] LT [сехетре]',
            nextWeek: '[Çитес] dddd LT [сехетре]',
            lastWeek: '[Иртнĕ] dddd LT [сехетре]',
            sameElse: 'L'
        },
        relativeTime : {
            future : function (output) {
                var affix = /сехет$/i.exec(output) ? "рен" : /çул$/i.exec(output) ? "тан" : "ран";
                return output + affix;
            },
            past : "%s каялла",
            s : "пĕр-ик çеккунт",
            m : "пĕр минут",
            mm : "%d минут",
            h : "пĕр сехет",
            hh : "%d сехет",
            d : "пĕр кун",
            dd : "%d кун",
            M : "пĕр уйăх",
            MM : "%d уйăх",
            y : "пĕр çул",
            yy : "%d çул"
        },
        ordinal : '%d-мĕш',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/cy.js", function (exports, module) {
// moment.js locale configuration
// locale : Welsh (cy)
// author : Robert Allen

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale("cy", {
        months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
        monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
        weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
        weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
        weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
        // time formats are the same as en-gb
        longDateFormat: {
            LT: "HH:mm",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY LT",
            LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: "mewn %s",
            past: "%s yn ôl",
            s: "ychydig eiliadau",
            m: "munud",
            mm: "%d munud",
            h: "awr",
            hh: "%d awr",
            d: "diwrnod",
            dd: "%d diwrnod",
            M: "mis",
            MM: "%d mis",
            y: "blwyddyn",
            yy: "%d flynedd"
        },
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
                ];

            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }

            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/da.js", function (exports, module) {
// moment.js locale configuration
// locale : danish (da)
// author : Ulrik Nielsen : https://github.com/mrbase

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('da', {
        months : "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays : "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort : "søn_man_tir_ons_tor_fre_lør".split("_"),
        weekdaysMin : "sø_ma_ti_on_to_fr_lø".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd [d.] D. MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[I dag kl.] LT',
            nextDay : '[I morgen kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[I går kl.] LT',
            lastWeek : '[sidste] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "%s siden",
            s : "få sekunder",
            m : "et minut",
            mm : "%d minutter",
            h : "en time",
            hh : "%d timer",
            d : "en dag",
            dd : "%d dage",
            M : "en måned",
            MM : "%d måneder",
            y : "et år",
            yy : "%d år"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/de-at.js", function (exports, module) {
// moment.js locale configuration
// locale : austrian german (de-at)
// author : lluchs : https://github.com/lluchs
// author: Menelion Elensúle: https://github.com/Oire
// author : Martin Groller : https://github.com/MadMG

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    return moment.defineLocale('de-at', {
        months : "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort : "Jän._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays : "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort : "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin : "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        longDateFormat : {
            LT: "HH:mm [Uhr]",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Heute um] LT",
            sameElse: "L",
            nextDay: '[Morgen um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gestern um] LT',
            lastWeek: '[letzten] dddd [um] LT'
        },
        relativeTime : {
            future : "in %s",
            past : "vor %s",
            s : "ein paar Sekunden",
            m : processRelativeTime,
            mm : "%d Minuten",
            h : processRelativeTime,
            hh : "%d Stunden",
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/de.js", function (exports, module) {
// moment.js locale configuration
// locale : german (de)
// author : lluchs : https://github.com/lluchs
// author: Menelion Elensúle: https://github.com/Oire

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    return moment.defineLocale('de', {
        months : "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort : "Jan._Febr._Mrz._Apr._Mai_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays : "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
        weekdaysShort : "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
        weekdaysMin : "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
        longDateFormat : {
            LT: "HH:mm [Uhr]",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Heute um] LT",
            sameElse: "L",
            nextDay: '[Morgen um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gestern um] LT',
            lastWeek: '[letzten] dddd [um] LT'
        },
        relativeTime : {
            future : "in %s",
            past : "vor %s",
            s : "ein paar Sekunden",
            m : processRelativeTime,
            mm : "%d Minuten",
            h : processRelativeTime,
            hh : "%d Stunden",
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/el.js", function (exports, module) {
// moment.js locale configuration
// locale : modern greek (el)
// author : Aggelos Karalias : https://github.com/mehiel

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('el', {
        monthsNominativeEl : "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),
        monthsGenitiveEl : "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),
        months : function (momentToFormat, format) {
            if (/D/.test(format.substring(0, format.indexOf("MMMM")))) { // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort : "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),
        weekdays : "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),
        weekdaysShort : "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
        weekdaysMin : "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        longDateFormat : {
            LT : "h:mm A",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendarEl : {
            sameDay : '[Σήμερα {}] LT',
            nextDay : '[Αύριο {}] LT',
            nextWeek : 'dddd [{}] LT',
            lastDay : '[Χθες {}] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();

            if (typeof output === 'function') {
                output = output.apply(mom);
            }

            return output.replace("{}", (hours % 12 === 1 ? "στη" : "στις"));
        },
        relativeTime : {
            future : "σε %s",
            past : "%s πριν",
            s : "δευτερόλεπτα",
            m : "ένα λεπτό",
            mm : "%d λεπτά",
            h : "μία ώρα",
            hh : "%d ώρες",
            d : "μία μέρα",
            dd : "%d μέρες",
            M : "ένας μήνας",
            MM : "%d μήνες",
            y : "ένας χρόνος",
            yy : "%d χρόνια"
        },
        ordinal : function (number) {
            return number + 'η';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/en-au.js", function (exports, module) {
// moment.js locale configuration
// locale : australian english (en-au)

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('en-au', {
        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat : {
            LT : "h:mm A",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/en-ca.js", function (exports, module) {
// moment.js locale configuration
// locale : canadian english (en-ca)
// author : Jonathan Abourbih : https://github.com/jonbca

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('en-ca', {
        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat : {
            LT : "h:mm A",
            L : "YYYY-MM-DD",
            LL : "D MMMM, YYYY",
            LLL : "D MMMM, YYYY LT",
            LLLL : "dddd, D MMMM, YYYY LT"
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/en-gb.js", function (exports, module) {
// moment.js locale configuration
// locale : great britain english (en-gb)
// author : Chris Gedrim : https://github.com/chrisgedrim

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('en-gb', {
        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/eo.js", function (exports, module) {
// moment.js locale configuration
// locale : esperanto (eo)
// author : Colin Dean : https://github.com/colindean
// komento: Mi estas malcerta se mi korekte traktis akuzativojn en tiu traduko.
//          Se ne, bonvolu korekti kaj avizi min por ke mi povas lerni!

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('eo', {
        months : "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),
        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec".split("_"),
        weekdays : "Dimanĉo_Lundo_Mardo_Merkredo_Ĵaŭdo_Vendredo_Sabato".split("_"),
        weekdaysShort : "Dim_Lun_Mard_Merk_Ĵaŭ_Ven_Sab".split("_"),
        weekdaysMin : "Di_Lu_Ma_Me_Ĵa_Ve_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "D[-an de] MMMM, YYYY",
            LLL : "D[-an de] MMMM, YYYY LT",
            LLLL : "dddd, [la] D[-an de] MMMM, YYYY LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar : {
            sameDay : '[Hodiaŭ je] LT',
            nextDay : '[Morgaŭ je] LT',
            nextWeek : 'dddd [je] LT',
            lastDay : '[Hieraŭ je] LT',
            lastWeek : '[pasinta] dddd [je] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "je %s",
            past : "antaŭ %s",
            s : "sekundoj",
            m : "minuto",
            mm : "%d minutoj",
            h : "horo",
            hh : "%d horoj",
            d : "tago",//ne 'diurno', ĉar estas uzita por proksimumo
            dd : "%d tagoj",
            M : "monato",
            MM : "%d monatoj",
            y : "jaro",
            yy : "%d jaroj"
        },
        ordinal : "%da",
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/es.js", function (exports, module) {
// moment.js locale configuration
// locale : spanish (es)
// author : Julio Napurí : https://github.com/julionc

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var monthsShortDot = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
        monthsShort = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_");

    return moment.defineLocale('es', {
        months : "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
        monthsShort : function (m, format) {
            if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        weekdays : "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
        weekdaysShort : "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
        weekdaysMin : "Do_Lu_Ma_Mi_Ju_Vi_Sá".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D [de] MMMM [del] YYYY",
            LLL : "D [de] MMMM [del] YYYY LT",
            LLLL : "dddd, D [de] MMMM [del] YYYY LT"
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "en %s",
            past : "hace %s",
            s : "unos segundos",
            m : "un minuto",
            mm : "%d minutos",
            h : "una hora",
            hh : "%d horas",
            d : "un día",
            dd : "%d días",
            M : "un mes",
            MM : "%d meses",
            y : "un año",
            yy : "%d años"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/et.js", function (exports, module) {
// moment.js locale configuration
// locale : estonian (et)
// author : Henry Kehlmann : https://github.com/madhenry
// improvements : Illimar Tambek : https://github.com/ragulka

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            'm' : ['ühe minuti', 'üks minut'],
            'mm': [number + ' minuti', number + ' minutit'],
            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
            'hh': [number + ' tunni', number + ' tundi'],
            'd' : ['ühe päeva', 'üks päev'],
            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
            'MM': [number + ' kuu', number + ' kuud'],
            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
            'yy': [number + ' aasta', number + ' aastat']
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    return moment.defineLocale('et', {
        months        : "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
        monthsShort   : "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
        weekdays      : "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),
        weekdaysShort : "P_E_T_K_N_R_L".split("_"),
        weekdaysMin   : "P_E_T_K_N_R_L".split("_"),
        longDateFormat : {
            LT   : "H:mm",
            L    : "DD.MM.YYYY",
            LL   : "D. MMMM YYYY",
            LLL  : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[Täna,] LT',
            nextDay  : '[Homme,] LT',
            nextWeek : '[Järgmine] dddd LT',
            lastDay  : '[Eile,] LT',
            lastWeek : '[Eelmine] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s pärast",
            past   : "%s tagasi",
            s      : processRelativeTime,
            m      : processRelativeTime,
            mm     : processRelativeTime,
            h      : processRelativeTime,
            hh     : processRelativeTime,
            d      : processRelativeTime,
            dd     : '%d päeva',
            M      : processRelativeTime,
            MM     : processRelativeTime,
            y      : processRelativeTime,
            yy     : processRelativeTime
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/eu.js", function (exports, module) {
// moment.js locale configuration
// locale : euskara (eu)
// author : Eneko Illarramendi : https://github.com/eillarra

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('eu', {
        months : "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
        monthsShort : "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
        weekdays : "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
        weekdaysShort : "ig._al._ar._az._og._ol._lr.".split("_"),
        weekdaysMin : "ig_al_ar_az_og_ol_lr".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "YYYY[ko] MMMM[ren] D[a]",
            LLL : "YYYY[ko] MMMM[ren] D[a] LT",
            LLLL : "dddd, YYYY[ko] MMMM[ren] D[a] LT",
            l : "YYYY-M-D",
            ll : "YYYY[ko] MMM D[a]",
            lll : "YYYY[ko] MMM D[a] LT",
            llll : "ddd, YYYY[ko] MMM D[a] LT"
        },
        calendar : {
            sameDay : '[gaur] LT[etan]',
            nextDay : '[bihar] LT[etan]',
            nextWeek : 'dddd LT[etan]',
            lastDay : '[atzo] LT[etan]',
            lastWeek : '[aurreko] dddd LT[etan]',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s barru",
            past : "duela %s",
            s : "segundo batzuk",
            m : "minutu bat",
            mm : "%d minutu",
            h : "ordu bat",
            hh : "%d ordu",
            d : "egun bat",
            dd : "%d egun",
            M : "hilabete bat",
            MM : "%d hilabete",
            y : "urte bat",
            yy : "%d urte"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/fa.js", function (exports, module) {
// moment.js locale configuration
// locale : Persian
// author : Ebrahim Byagowi : https://github.com/ebraminio

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var symbolMap = {
        '1': '۱',
        '2': '۲',
        '3': '۳',
        '4': '۴',
        '5': '۵',
        '6': '۶',
        '7': '۷',
        '8': '۸',
        '9': '۹',
        '0': '۰'
    }, numberMap = {
        '۱': '1',
        '۲': '2',
        '۳': '3',
        '۴': '4',
        '۵': '5',
        '۶': '6',
        '۷': '7',
        '۸': '8',
        '۹': '9',
        '۰': '0'
    };

    return moment.defineLocale('fa', {
        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY LT',
            LLLL : 'dddd, D MMMM YYYY LT'
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "قبل از ظهر";
            } else {
                return "بعد از ظهر";
            }
        },
        calendar : {
            sameDay : '[امروز ساعت] LT',
            nextDay : '[فردا ساعت] LT',
            nextWeek : 'dddd [ساعت] LT',
            lastDay : '[دیروز ساعت] LT',
            lastWeek : 'dddd [پیش] [ساعت] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'در %s',
            past : '%s پیش',
            s : 'چندین ثانیه',
            m : 'یک دقیقه',
            mm : '%d دقیقه',
            h : 'یک ساعت',
            hh : '%d ساعت',
            d : 'یک روز',
            dd : '%d روز',
            M : 'یک ماه',
            MM : '%d ماه',
            y : 'یک سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        ordinal : '%dم',
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12 // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/fi.js", function (exports, module) {
// moment.js locale configuration
// locale : finnish (fi)
// author : Tarmo Aidantausta : https://github.com/bleadof

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
        numbersFuture = [
            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
            numbersPast[7], numbersPast[8], numbersPast[9]
        ];

    function translate(number, withoutSuffix, key, isFuture) {
        var result = "";
        switch (key) {
        case 's':
            return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
        case 'm':
            return isFuture ? 'minuutin' : 'minuutti';
        case 'mm':
            result = isFuture ? 'minuutin' : 'minuuttia';
            break;
        case 'h':
            return isFuture ? 'tunnin' : 'tunti';
        case 'hh':
            result = isFuture ? 'tunnin' : 'tuntia';
            break;
        case 'd':
            return isFuture ? 'päivän' : 'päivä';
        case 'dd':
            result = isFuture ? 'päivän' : 'päivää';
            break;
        case 'M':
            return isFuture ? 'kuukauden' : 'kuukausi';
        case 'MM':
            result = isFuture ? 'kuukauden' : 'kuukautta';
            break;
        case 'y':
            return isFuture ? 'vuoden' : 'vuosi';
        case 'yy':
            result = isFuture ? 'vuoden' : 'vuotta';
            break;
        }
        result = verbalNumber(number, isFuture) + " " + result;
        return result;
    }

    function verbalNumber(number, isFuture) {
        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
    }

    return moment.defineLocale('fi', {
        months : "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
        monthsShort : "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),
        weekdays : "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
        weekdaysShort : "su_ma_ti_ke_to_pe_la".split("_"),
        weekdaysMin : "su_ma_ti_ke_to_pe_la".split("_"),
        longDateFormat : {
            LT : "HH.mm",
            L : "DD.MM.YYYY",
            LL : "Do MMMM[ta] YYYY",
            LLL : "Do MMMM[ta] YYYY, [klo] LT",
            LLLL : "dddd, Do MMMM[ta] YYYY, [klo] LT",
            l : "D.M.YYYY",
            ll : "Do MMM YYYY",
            lll : "Do MMM YYYY, [klo] LT",
            llll : "ddd, Do MMM YYYY, [klo] LT"
        },
        calendar : {
            sameDay : '[tänään] [klo] LT',
            nextDay : '[huomenna] [klo] LT',
            nextWeek : 'dddd [klo] LT',
            lastDay : '[eilen] [klo] LT',
            lastWeek : '[viime] dddd[na] [klo] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s päästä",
            past : "%s sitten",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : "%d.",
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/fo.js", function (exports, module) {
// moment.js locale configuration
// locale : faroese (fo)
// author : Ragnar Johannesen : https://github.com/ragnar123

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('fo', {
        months : "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort : "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays : "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),
        weekdaysShort : "sun_mán_týs_mik_hós_frí_ley".split("_"),
        weekdaysMin : "su_má_tý_mi_hó_fr_le".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D. MMMM, YYYY LT"
        },
        calendar : {
            sameDay : '[Í dag kl.] LT',
            nextDay : '[Í morgin kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[Í gjár kl.] LT',
            lastWeek : '[síðstu] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "um %s",
            past : "%s síðani",
            s : "fá sekund",
            m : "ein minutt",
            mm : "%d minuttir",
            h : "ein tími",
            hh : "%d tímar",
            d : "ein dagur",
            dd : "%d dagar",
            M : "ein mánaði",
            MM : "%d mánaðir",
            y : "eitt ár",
            yy : "%d ár"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/fr-ca.js", function (exports, module) {
// moment.js locale configuration
// locale : canadian french (fr-ca)
// author : Jonathan Abourbih : https://github.com/jonbca

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('fr-ca', {
        months : "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort : "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        weekdays : "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort : "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin : "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Aujourd'hui à] LT",
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "dans %s",
            past : "il y a %s",
            s : "quelques secondes",
            m : "une minute",
            mm : "%d minutes",
            h : "une heure",
            hh : "%d heures",
            d : "un jour",
            dd : "%d jours",
            M : "un mois",
            MM : "%d mois",
            y : "un an",
            yy : "%d ans"
        },
        ordinal : function (number) {
            return number + (number === 1 ? 'er' : '');
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/fr.js", function (exports, module) {
// moment.js locale configuration
// locale : french (fr)
// author : John Fischer : https://github.com/jfroffice

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('fr', {
        months : "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
        monthsShort : "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
        weekdays : "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
        weekdaysShort : "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
        weekdaysMin : "Di_Lu_Ma_Me_Je_Ve_Sa".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[Aujourd'hui à] LT",
            nextDay: '[Demain à] LT',
            nextWeek: 'dddd [à] LT',
            lastDay: '[Hier à] LT',
            lastWeek: 'dddd [dernier à] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "dans %s",
            past : "il y a %s",
            s : "quelques secondes",
            m : "une minute",
            mm : "%d minutes",
            h : "une heure",
            hh : "%d heures",
            d : "un jour",
            dd : "%d jours",
            M : "un mois",
            MM : "%d mois",
            y : "un an",
            yy : "%d ans"
        },
        ordinal : function (number) {
            return number + (number === 1 ? 'er' : '');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/gl.js", function (exports, module) {
// moment.js locale configuration
// locale : galician (gl)
// author : Juan G. Hurtado : https://github.com/juanghurtado

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('gl', {
        months : "Xaneiro_Febreiro_Marzo_Abril_Maio_Xuño_Xullo_Agosto_Setembro_Outubro_Novembro_Decembro".split("_"),
        monthsShort : "Xan._Feb._Mar._Abr._Mai._Xuñ._Xul._Ago._Set._Out._Nov._Dec.".split("_"),
        weekdays : "Domingo_Luns_Martes_Mércores_Xoves_Venres_Sábado".split("_"),
        weekdaysShort : "Dom._Lun._Mar._Mér._Xov._Ven._Sáb.".split("_"),
        weekdaysMin : "Do_Lu_Ma_Mé_Xo_Ve_Sá".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay : function () {
                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextDay : function () {
                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            lastDay : function () {
                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
            },
            lastWeek : function () {
                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : function (str) {
                if (str === "uns segundos") {
                    return "nuns segundos";
                }
                return "en " + str;
            },
            past : "hai %s",
            s : "uns segundos",
            m : "un minuto",
            mm : "%d minutos",
            h : "unha hora",
            hh : "%d horas",
            d : "un día",
            dd : "%d días",
            M : "un mes",
            MM : "%d meses",
            y : "un ano",
            yy : "%d anos"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/he.js", function (exports, module) {
// moment.js locale configuration
// locale : Hebrew (he)
// author : Tomer Cohen : https://github.com/tomer
// author : Moshe Simantov : https://github.com/DevelopmentIL
// author : Tal Ater : https://github.com/TalAter

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('he', {
        months : "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),
        monthsShort : "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),
        weekdays : "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
        weekdaysShort : "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
        weekdaysMin : "א_ב_ג_ד_ה_ו_ש".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D [ב]MMMM YYYY",
            LLL : "D [ב]MMMM YYYY LT",
            LLLL : "dddd, D [ב]MMMM YYYY LT",
            l : "D/M/YYYY",
            ll : "D MMM YYYY",
            lll : "D MMM YYYY LT",
            llll : "ddd, D MMM YYYY LT"
        },
        calendar : {
            sameDay : '[היום ב־]LT',
            nextDay : '[מחר ב־]LT',
            nextWeek : 'dddd [בשעה] LT',
            lastDay : '[אתמול ב־]LT',
            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "בעוד %s",
            past : "לפני %s",
            s : "מספר שניות",
            m : "דקה",
            mm : "%d דקות",
            h : "שעה",
            hh : function (number) {
                if (number === 2) {
                    return "שעתיים";
                }
                return number + " שעות";
            },
            d : "יום",
            dd : function (number) {
                if (number === 2) {
                    return "יומיים";
                }
                return number + " ימים";
            },
            M : "חודש",
            MM : function (number) {
                if (number === 2) {
                    return "חודשיים";
                }
                return number + " חודשים";
            },
            y : "שנה",
            yy : function (number) {
                if (number === 2) {
                    return "שנתיים";
                }
                return number + " שנים";
            }
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/hi.js", function (exports, module) {
// moment.js locale configuration
// locale : hindi (hi)
// author : Mayank Singhal : https://github.com/mayanksinghal

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    return moment.defineLocale('hi', {
        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split("_"),
        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split("_"),
        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split("_"),
        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split("_"),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split("_"),
        longDateFormat : {
            LT : "A h:mm बजे",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[कल] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[कल] LT',
            lastWeek : '[पिछले] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s में",
            past : "%s पहले",
            s : "कुछ ही क्षण",
            m : "एक मिनट",
            mm : "%d मिनट",
            h : "एक घंटा",
            hh : "%d घंटे",
            d : "एक दिन",
            dd : "%d दिन",
            M : "एक महीने",
            MM : "%d महीने",
            y : "एक वर्ष",
            yy : "%d वर्ष"
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "रात";
            } else if (hour < 10) {
                return "सुबह";
            } else if (hour < 17) {
                return "दोपहर";
            } else if (hour < 20) {
                return "शाम";
            } else {
                return "रात";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/hr.js", function (exports, module) {
// moment.js locale configuration
// locale : hrvatski (hr)
// author : Bojan Marković : https://github.com/bmarkovic

// based on (sl) translation by Robert Sedovšek

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'jedna minuta' : 'jedne minute';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minuta';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'jedan sat' : 'jednog sata';
        case 'hh':
            if (number === 1) {
                result += 'sat';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'sata';
            } else {
                result += 'sati';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dana';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mjesec';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'mjeseca';
            } else {
                result += 'mjeseci';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'godina';
            } else if (number === 2 || number === 3 || number === 4) {
                result += 'godine';
            } else {
                result += 'godina';
            }
            return result;
        }
    }

    return moment.defineLocale('hr', {
        months : "sječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_"),
        monthsShort : "sje._vel._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
        weekdays : "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
        weekdaysShort : "ned._pon._uto._sri._čet._pet._sub.".split("_"),
        weekdaysMin : "ne_po_ut_sr_če_pe_su".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',

            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedjelju] [u] LT';
                case 3:
                    return '[u] [srijedu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                    return '[prošlu] dddd [u] LT';
                case 6:
                    return '[prošle] [subote] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "za %s",
            past   : "prije %s",
            s      : "par sekundi",
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : "dan",
            dd     : translate,
            M      : "mjesec",
            MM     : translate,
            y      : "godinu",
            yy     : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/hu.js", function (exports, module) {
// moment.js locale configuration
// locale : hungarian (hu)
// author : Adam Brunner : https://github.com/adambrunner

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');

    function translate(number, withoutSuffix, key, isFuture) {
        var num = number,
            suffix;

        switch (key) {
        case 's':
            return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
        case 'm':
            return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'mm':
            return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
        case 'h':
            return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'hh':
            return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
        case 'd':
            return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'dd':
            return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
        case 'M':
            return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'MM':
            return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
        case 'y':
            return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
        case 'yy':
            return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }

        return '';
    }

    function week(isFuture) {
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }

    return moment.defineLocale('hu', {
        months : "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),
        monthsShort : "jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec".split("_"),
        weekdays : "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),
        weekdaysShort : "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
        weekdaysMin : "v_h_k_sze_cs_p_szo".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "YYYY.MM.DD.",
            LL : "YYYY. MMMM D.",
            LLL : "YYYY. MMMM D., LT",
            LLLL : "YYYY. MMMM D., dddd LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar : {
            sameDay : '[ma] LT[-kor]',
            nextDay : '[holnap] LT[-kor]',
            nextWeek : function () {
                return week.call(this, true);
            },
            lastDay : '[tegnap] LT[-kor]',
            lastWeek : function () {
                return week.call(this, false);
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s múlva",
            past : "%s",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/hy-am.js", function (exports, module) {
// moment.js locale configuration
// locale : Armenian (hy-am)
// author : Armendarabyan : https://github.com/armendarabyan

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_'),
            'accusative': 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_')
        },

        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function monthsShortCaseReplace(m, format) {
        var monthsShort = 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_');

        return monthsShort[m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_');

        return weekdays[m.day()];
    }

    return moment.defineLocale('hy-am', {
        months : monthsCaseReplace,
        monthsShort : monthsShortCaseReplace,
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
        weekdaysMin : "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY թ.",
            LLL : "D MMMM YYYY թ., LT",
            LLLL : "dddd, D MMMM YYYY թ., LT"
        },
        calendar : {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "%s հետո",
            past : "%s առաջ",
            s : "մի քանի վայրկյան",
            m : "րոպե",
            mm : "%d րոպե",
            h : "ժամ",
            hh : "%d ժամ",
            d : "օր",
            dd : "%d օր",
            M : "ամիս",
            MM : "%d ամիս",
            y : "տարի",
            yy : "%d տարի"
        },

        meridiem : function (hour) {
            if (hour < 4) {
                return "գիշերվա";
            } else if (hour < 12) {
                return "առավոտվա";
            } else if (hour < 17) {
                return "ցերեկվա";
            } else {
                return "երեկոյան";
            }
        },

        ordinal: function (number, period) {
            switch (period) {
            case 'DDD':
            case 'w':
            case 'W':
            case 'DDDo':
                if (number === 1) {
                    return number + '-ին';
                }
                return number + '-րդ';
            default:
                return number;
            }
        },

        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/id.js", function (exports, module) {
// moment.js locale configuration
// locale : Bahasa Indonesia (id)
// author : Mohammad Satrio Utomo : https://github.com/tyok
// reference: http://id.wikisource.org/wiki/Pedoman_Umum_Ejaan_Bahasa_Indonesia_yang_Disempurnakan

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('id', {
        months : "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nov_Des".split("_"),
        weekdays : "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
        weekdaysShort : "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
        weekdaysMin : "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat : {
            LT : "HH.mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY [pukul] LT",
            LLLL : "dddd, D MMMM YYYY [pukul] LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Besok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kemarin pukul] LT',
            lastWeek : 'dddd [lalu pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "dalam %s",
            past : "%s yang lalu",
            s : "beberapa detik",
            m : "semenit",
            mm : "%d menit",
            h : "sejam",
            hh : "%d jam",
            d : "sehari",
            dd : "%d hari",
            M : "sebulan",
            MM : "%d bulan",
            y : "setahun",
            yy : "%d tahun"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/is.js", function (exports, module) {
// moment.js locale configuration
// locale : icelandic (is)
// author : Hinrik Örn Sigurðsson : https://github.com/hinrik

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        switch (key) {
        case 's':
            return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
        case 'm':
            return withoutSuffix ? 'mínúta' : 'mínútu';
        case 'mm':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
            } else if (withoutSuffix) {
                return result + 'mínúta';
            }
            return result + 'mínútu';
        case 'hh':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
            }
            return result + 'klukkustund';
        case 'd':
            if (withoutSuffix) {
                return 'dagur';
            }
            return isFuture ? 'dag' : 'degi';
        case 'dd':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'dagar';
                }
                return result + (isFuture ? 'daga' : 'dögum');
            } else if (withoutSuffix) {
                return result + 'dagur';
            }
            return result + (isFuture ? 'dag' : 'degi');
        case 'M':
            if (withoutSuffix) {
                return 'mánuður';
            }
            return isFuture ? 'mánuð' : 'mánuði';
        case 'MM':
            if (plural(number)) {
                if (withoutSuffix) {
                    return result + 'mánuðir';
                }
                return result + (isFuture ? 'mánuði' : 'mánuðum');
            } else if (withoutSuffix) {
                return result + 'mánuður';
            }
            return result + (isFuture ? 'mánuð' : 'mánuði');
        case 'y':
            return withoutSuffix || isFuture ? 'ár' : 'ári';
        case 'yy':
            if (plural(number)) {
                return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
            }
            return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    return moment.defineLocale('is', {
        months : "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),
        monthsShort : "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),
        weekdays : "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),
        weekdaysShort : "sun_mán_þri_mið_fim_fös_lau".split("_"),
        weekdaysMin : "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD/MM/YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY [kl.] LT",
            LLLL : "dddd, D. MMMM YYYY [kl.] LT"
        },
        calendar : {
            sameDay : '[í dag kl.] LT',
            nextDay : '[á morgun kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[í gær kl.] LT',
            lastWeek : '[síðasta] dddd [kl.] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "eftir %s",
            past : "fyrir %s síðan",
            s : translate,
            m : translate,
            mm : translate,
            h : "klukkustund",
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/it.js", function (exports, module) {
// moment.js locale configuration
// locale : italian (it)
// author : Lorenzo : https://github.com/aliem
// author: Mattia Larentis: https://github.com/nostalgiaz

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('it', {
        months : "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
        monthsShort : "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
        weekdays : "Domenica_Lunedì_Martedì_Mercoledì_Giovedì_Venerdì_Sabato".split("_"),
        weekdaysShort : "Dom_Lun_Mar_Mer_Gio_Ven_Sab".split("_"),
        weekdaysMin : "D_L_Ma_Me_G_V_S".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: '[lo scorso] dddd [alle] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : function (s) {
                return ((/^[0-9].+$/).test(s) ? "tra" : "in") + " " + s;
            },
            past : "%s fa",
            s : "alcuni secondi",
            m : "un minuto",
            mm : "%d minuti",
            h : "un'ora",
            hh : "%d ore",
            d : "un giorno",
            dd : "%d giorni",
            M : "un mese",
            MM : "%d mesi",
            y : "un anno",
            yy : "%d anni"
        },
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ja.js", function (exports, module) {
// moment.js locale configuration
// locale : japanese (ja)
// author : LI Long : https://github.com/baryon

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('ja', {
        months : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays : "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),
        weekdaysShort : "日_月_火_水_木_金_土".split("_"),
        weekdaysMin : "日_月_火_水_木_金_土".split("_"),
        longDateFormat : {
            LT : "Ah時m分",
            L : "YYYY/MM/DD",
            LL : "YYYY年M月D日",
            LLL : "YYYY年M月D日LT",
            LLLL : "YYYY年M月D日LT dddd"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "午前";
            } else {
                return "午後";
            }
        },
        calendar : {
            sameDay : '[今日] LT',
            nextDay : '[明日] LT',
            nextWeek : '[来週]dddd LT',
            lastDay : '[昨日] LT',
            lastWeek : '[前週]dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s後",
            past : "%s前",
            s : "数秒",
            m : "1分",
            mm : "%d分",
            h : "1時間",
            hh : "%d時間",
            d : "1日",
            dd : "%d日",
            M : "1ヶ月",
            MM : "%dヶ月",
            y : "1年",
            yy : "%d年"
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ka.js", function (exports, module) {
// moment.js locale configuration
// locale : Georgian (ka)
// author : Irakli Janiashvili : https://github.com/irakli-janiashvili

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            'accusative': 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },

        nounCase = (/D[oD] *MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            'accusative': 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_')
        },

        nounCase = (/(წინა|შემდეგ)/).test(format) ?
            'accusative' :
            'nominative';

        return weekdays[nounCase][m.day()];
    }

    return moment.defineLocale('ka', {
        months : monthsCaseReplace,
        monthsShort : "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
        weekdaysMin : "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
        longDateFormat : {
            LT : "h:mm A",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[დღეს] LT[-ზე]',
            nextDay : '[ხვალ] LT[-ზე]',
            lastDay : '[გუშინ] LT[-ზე]',
            nextWeek : '[შემდეგ] dddd LT[-ზე]',
            lastWeek : '[წინა] dddd LT-ზე',
            sameElse : 'L'
        },
        relativeTime : {
            future : function (s) {
                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                    s.replace(/ი$/, "ში") :
                    s + "ში";
            },
            past : function (s) {
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                    return s.replace(/(ი|ე)$/, "ის წინ");
                }
                if ((/წელი/).test(s)) {
                    return s.replace(/წელი$/, "წლის წინ");
                }
            },
            s : "რამდენიმე წამი",
            m : "წუთი",
            mm : "%d წუთი",
            h : "საათი",
            hh : "%d საათი",
            d : "დღე",
            dd : "%d დღე",
            M : "თვე",
            MM : "%d თვე",
            y : "წელი",
            yy : "%d წელი"
        },
        ordinal : function (number) {
            if (number === 0) {
                return number;
            }

            if (number === 1) {
                return number + "-ლი";
            }

            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
                return "მე-" + number;
            }

            return number + "-ე";
        },
        week : {
            dow : 1,
            doy : 7
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/km.js", function (exports, module) {
// moment.js locale configuration
// locale : khmer (km)
// author : Kruy Vanna : https://github.com/kruyvanna

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('km', {
        months: "មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        monthsShort: "មករា_កុម្ភៈ_មិនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
        weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysShort: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        weekdaysMin: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY LT",
            LLLL: "dddd, D MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[ថ្ងៃនៈ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: "%sទៀត",
            past: "%sមុន",
            s: "ប៉ុន្មានវិនាទី",
            m: "មួយនាទី",
            mm: "%d នាទី",
            h: "មួយម៉ោង",
            hh: "%d ម៉ោង",
            d: "មួយថ្ងៃ",
            dd: "%d ថ្ងៃ",
            M: "មួយខែ",
            MM: "%d ខែ",
            y: "មួយឆ្នាំ",
            yy: "%d ឆ្នាំ"
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ko.js", function (exports, module) {
// moment.js locale configuration
// locale : korean (ko)
//
// authors
//
// - Kyungwook, Park : https://github.com/kyungw00k
// - Jeeeyul Lee <jeeeyul@gmail.com>
(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('ko', {
        months : "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        monthsShort : "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
        weekdays : "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),
        weekdaysShort : "일_월_화_수_목_금_토".split("_"),
        weekdaysMin : "일_월_화_수_목_금_토".split("_"),
        longDateFormat : {
            LT : "A h시 mm분",
            L : "YYYY.MM.DD",
            LL : "YYYY년 MMMM D일",
            LLL : "YYYY년 MMMM D일 LT",
            LLLL : "YYYY년 MMMM D일 dddd LT"
        },
        meridiem : function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        },
        calendar : {
            sameDay : '오늘 LT',
            nextDay : '내일 LT',
            nextWeek : 'dddd LT',
            lastDay : '어제 LT',
            lastWeek : '지난주 dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s 후",
            past : "%s 전",
            s : "몇초",
            ss : "%d초",
            m : "일분",
            mm : "%d분",
            h : "한시간",
            hh : "%d시간",
            d : "하루",
            dd : "%d일",
            M : "한달",
            MM : "%d달",
            y : "일년",
            yy : "%d년"
        },
        ordinal : '%d일',
        meridiemParse : /(오전|오후)/,
        isPM : function (token) {
            return token === "오후";
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/lb.js", function (exports, module) {
// moment.js locale configuration
// locale : Luxembourgish (lb)
// author : mweimerskirch : https://github.com/mweimerskirch, David Raison : https://github.com/kwisatz

// Note: Luxembourgish has a very particular phonological rule ("Eifeler Regel") that causes the
// deletion of the final "n" in certain contexts. That's what the "eifelerRegelAppliesToWeekday"
// and "eifelerRegelAppliesToNumber" methods are meant for

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eng Minutt', 'enger Minutt'],
            'h': ['eng Stonn', 'enger Stonn'],
            'd': ['een Dag', 'engem Dag'],
            'M': ['ee Mount', 'engem Mount'],
            'y': ['ee Joer', 'engem Joer']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return "a " + string;
        }
        return "an " + string;
    }

    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return "viru " + string;
        }
        return "virun " + string;
    }

    /**
     * Returns true if the word before the given number loses the "-n" ending.
     * e.g. "an 10 Deeg" but "a 5 Deeg"
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10, firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    return moment.defineLocale('lb', {
        months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
        monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
        weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
        weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
        weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
        longDateFormat: {
            LT: "H:mm [Auer]",
            L: "DD.MM.YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY LT",
            LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
            sameDay: "[Haut um] LT",
            sameElse: "L",
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for "Dënschdeg" (Tuesday) and "Donneschdeg" (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            }
        },
        relativeTime : {
            future : processFutureTime,
            past : processPastTime,
            s : "e puer Sekonnen",
            m : processRelativeTime,
            mm : "%d Minutten",
            h : processRelativeTime,
            hh : "%d Stonnen",
            d : processRelativeTime,
            dd : "%d Deeg",
            M : processRelativeTime,
            MM : "%d Méint",
            y : processRelativeTime,
            yy : "%d Joer"
        },
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/lt.js", function (exports, module) {
// moment.js locale configuration
// locale : Lithuanian (lt)
// author : Mindaugas Mozūras : https://github.com/mmozuras

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var units = {
        "m" : "minutė_minutės_minutę",
        "mm": "minutės_minučių_minutes",
        "h" : "valanda_valandos_valandą",
        "hh": "valandos_valandų_valandas",
        "d" : "diena_dienos_dieną",
        "dd": "dienos_dienų_dienas",
        "M" : "mėnuo_mėnesio_mėnesį",
        "MM": "mėnesiai_mėnesių_mėnesius",
        "y" : "metai_metų_metus",
        "yy": "metai_metų_metus"
    },
    weekDays = "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_");

    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return "kelios sekundės";
        } else {
            return isFuture ? "kelių sekundžių" : "kelias sekundes";
        }
    }

    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
    }

    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }

    function forms(key) {
        return units[key].split("_");
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }

    function relativeWeekDay(moment, format) {
        var nominative = format.indexOf('dddd HH:mm') === -1,
            weekDay = weekDays[moment.day()];

        return nominative ? weekDay : weekDay.substring(0, weekDay.length - 2) + "į";
    }

    return moment.defineLocale("lt", {
        months : "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),
        monthsShort : "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
        weekdays : relativeWeekDay,
        weekdaysShort : "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
        weekdaysMin : "S_P_A_T_K_Pn_Š".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "YYYY [m.] MMMM D [d.]",
            LLL : "YYYY [m.] MMMM D [d.], LT [val.]",
            LLLL : "YYYY [m.] MMMM D [d.], dddd, LT [val.]",
            l : "YYYY-MM-DD",
            ll : "YYYY [m.] MMMM D [d.]",
            lll : "YYYY [m.] MMMM D [d.], LT [val.]",
            llll : "YYYY [m.] MMMM D [d.], ddd, LT [val.]"
        },
        calendar : {
            sameDay : "[Šiandien] LT",
            nextDay : "[Rytoj] LT",
            nextWeek : "dddd LT",
            lastDay : "[Vakar] LT",
            lastWeek : "[Praėjusį] dddd LT",
            sameElse : "L"
        },
        relativeTime : {
            future : "po %s",
            past : "prieš %s",
            s : translateSeconds,
            m : translateSingular,
            mm : translate,
            h : translateSingular,
            hh : translate,
            d : translateSingular,
            dd : translate,
            M : translateSingular,
            MM : translate,
            y : translateSingular,
            yy : translate
        },
        ordinal : function (number) {
            return number + '-oji';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/lv.js", function (exports, module) {
// moment.js locale configuration
// locale : latvian (lv)
// author : Kristaps Karlsons : https://github.com/skakri

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var units = {
        'mm': 'minūti_minūtes_minūte_minūtes',
        'hh': 'stundu_stundas_stunda_stundas',
        'dd': 'dienu_dienas_diena_dienas',
        'MM': 'mēnesi_mēnešus_mēnesis_mēneši',
        'yy': 'gadu_gadus_gads_gadi'
    };

    function format(word, number, withoutSuffix) {
        var forms = word.split('_');
        if (withoutSuffix) {
            return number % 10 === 1 && number !== 11 ? forms[2] : forms[3];
        } else {
            return number % 10 === 1 && number !== 11 ? forms[0] : forms[1];
        }
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }

    return moment.defineLocale('lv', {
        months : "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
        monthsShort : "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),
        weekdays : "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),
        weekdaysShort : "Sv_P_O_T_C_Pk_S".split("_"),
        weekdaysMin : "Sv_P_O_T_C_Pk_S".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "YYYY. [gada] D. MMMM",
            LLL : "YYYY. [gada] D. MMMM, LT",
            LLLL : "YYYY. [gada] D. MMMM, dddd, LT"
        },
        calendar : {
            sameDay : '[Šodien pulksten] LT',
            nextDay : '[Rīt pulksten] LT',
            nextWeek : 'dddd [pulksten] LT',
            lastDay : '[Vakar pulksten] LT',
            lastWeek : '[Pagājušā] dddd [pulksten] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s vēlāk",
            past : "%s agrāk",
            s : "dažas sekundes",
            m : "minūti",
            mm : relativeTimeWithPlural,
            h : "stundu",
            hh : relativeTimeWithPlural,
            d : "dienu",
            dd : relativeTimeWithPlural,
            M : "mēnesi",
            MM : relativeTimeWithPlural,
            y : "gadu",
            yy : relativeTimeWithPlural
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/mk.js", function (exports, module) {
// moment.js locale configuration
// locale : macedonian (mk)
// author : Borislav Mickov : https://github.com/B0k0

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('mk', {
        months : "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),
        monthsShort : "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),
        weekdays : "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),
        weekdaysShort : "нед_пон_вто_сре_чет_пет_саб".split("_"),
        weekdaysMin : "нe_пo_вт_ср_че_пе_сa".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "D.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Денес во] LT',
            nextDay : '[Утре во] LT',
            nextWeek : 'dddd [во] LT',
            lastDay : '[Вчера во] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[Во изминатата] dddd [во] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[Во изминатиот] dddd [во] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "после %s",
            past : "пред %s",
            s : "неколку секунди",
            m : "минута",
            mm : "%d минути",
            h : "час",
            hh : "%d часа",
            d : "ден",
            dd : "%d дена",
            M : "месец",
            MM : "%d месеци",
            y : "година",
            yy : "%d години"
        },
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ml.js", function (exports, module) {
// moment.js locale configuration
// locale : malayalam (ml)
// author : Floyd Pink : https://github.com/floydpink

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('ml', {
        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split("_"),
        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split("_"),
        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split("_"),
        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split("_"),
        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split("_"),
        longDateFormat : {
            LT : "A h:mm -നു",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[ഇന്ന്] LT',
            nextDay : '[നാളെ] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[ഇന്നലെ] LT',
            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s കഴിഞ്ഞ്",
            past : "%s മുൻപ്",
            s : "അൽപ നിമിഷങ്ങൾ",
            m : "ഒരു മിനിറ്റ്",
            mm : "%d മിനിറ്റ്",
            h : "ഒരു മണിക്കൂർ",
            hh : "%d മണിക്കൂർ",
            d : "ഒരു ദിവസം",
            dd : "%d ദിവസം",
            M : "ഒരു മാസം",
            MM : "%d മാസം",
            y : "ഒരു വർഷം",
            yy : "%d വർഷം"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "രാത്രി";
            } else if (hour < 12) {
                return "രാവിലെ";
            } else if (hour < 17) {
                return "ഉച്ച കഴിഞ്ഞ്";
            } else if (hour < 20) {
                return "വൈകുന്നേരം";
            } else {
                return "രാത്രി";
            }
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/mr.js", function (exports, module) {
// moment.js locale configuration
// locale : Marathi (mr)
// author : Harshad Kale : https://github.com/kalehv

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    return moment.defineLocale('mr', {
        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split("_"),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split("_"),
        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split("_"),
        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split("_"),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split("_"),
        longDateFormat : {
            LT : "A h:mm वाजता",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[उद्या] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s नंतर",
            past : "%s पूर्वी",
            s : "सेकंद",
            m: "एक मिनिट",
            mm: "%d मिनिटे",
            h : "एक तास",
            hh : "%d तास",
            d : "एक दिवस",
            dd : "%d दिवस",
            M : "एक महिना",
            MM : "%d महिने",
            y : "एक वर्ष",
            yy : "%d वर्षे"
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem: function (hour, minute, isLower)
        {
            if (hour < 4) {
                return "रात्री";
            } else if (hour < 10) {
                return "सकाळी";
            } else if (hour < 17) {
                return "दुपारी";
            } else if (hour < 20) {
                return "सायंकाळी";
            } else {
                return "रात्री";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ms-my.js", function (exports, module) {
// moment.js locale configuration
// locale : Bahasa Malaysia (ms-MY)
// author : Weldan Jamili : https://github.com/weldan

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('ms-my', {
        months : "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
        monthsShort : "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
        weekdays : "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
        weekdaysShort : "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
        weekdaysMin : "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
        longDateFormat : {
            LT : "HH.mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY [pukul] LT",
            LLLL : "dddd, D MMMM YYYY [pukul] LT"
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "dalam %s",
            past : "%s yang lepas",
            s : "beberapa saat",
            m : "seminit",
            mm : "%d minit",
            h : "sejam",
            hh : "%d jam",
            d : "sehari",
            dd : "%d hari",
            M : "sebulan",
            MM : "%d bulan",
            y : "setahun",
            yy : "%d tahun"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/my.js", function (exports, module) {
// moment.js locale configuration
// locale : Burmese (my)
// author : Squar team, mysquar.com

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var symbolMap = {
        '1': '၁',
        '2': '၂',
        '3': '၃',
        '4': '၄',
        '5': '၅',
        '6': '၆',
        '7': '၇',
        '8': '၈',
        '9': '၉',
        '0': '၀'
    }, numberMap = {
        '၁': '1',
        '၂': '2',
        '၃': '3',
        '၄': '4',
        '၅': '5',
        '၆': '6',
        '၇': '7',
        '၈': '8',
        '၉': '9',
        '၀': '0'
    };
    return moment.defineLocale('my', {
        months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),
        monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),
        weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),
        weekdaysShort: "နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
        weekdaysMin: "နွေ_လာ_င်္ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
        longDateFormat: {
            LT: "HH:mm",
            L: "DD/MM/YYYY",
            LL: "D MMMM YYYY",
            LLL: "D MMMM YYYY LT",
            LLLL: "dddd D MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L'
        },
        relativeTime: {
            future: "လာမည့် %s မှာ",
            past: "လွန်ခဲ့သော %s က",
            s: "စက္ကန်.အနည်းငယ်",
            m: "တစ်မိနစ်",
            mm: "%d မိနစ်",
            h: "တစ်နာရီ",
            hh: "%d နာရီ",
            d: "တစ်ရက်",
            dd: "%d ရက်",
            M: "တစ်လ",
            MM: "%d လ",
            y: "တစ်နှစ်",
            yy: "%d နှစ်"
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/nb.js", function (exports, module) {
// moment.js locale configuration
// locale : norwegian bokmål (nb)
// authors : Espen Hovlandsdal : https://github.com/rexxars
//           Sigurd Gartmann : https://github.com/sigurdga

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('nb', {
        months : "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort : "jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
        weekdays : "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
        weekdaysShort : "sø._ma._ti._on._to._fr._lø.".split("_"),
        weekdaysMin : "sø_ma_ti_on_to_fr_lø".split("_"),
        longDateFormat : {
            LT : "H.mm",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY [kl.] LT",
            LLLL : "dddd D. MMMM YYYY [kl.] LT"
        },
        calendar : {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "for %s siden",
            s : "noen sekunder",
            m : "ett minutt",
            mm : "%d minutter",
            h : "en time",
            hh : "%d timer",
            d : "en dag",
            dd : "%d dager",
            M : "en måned",
            MM : "%d måneder",
            y : "ett år",
            yy : "%d år"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ne.js", function (exports, module) {
// moment.js locale configuration
// locale : nepali/nepalese
// author : suvash : https://github.com/suvash

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    return moment.defineLocale('ne', {
        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split("_"),
        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split("_"),
        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split("_"),
        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split("_"),
        weekdaysMin : 'आइ._सो._मङ्_बु._बि._शु._श.'.split("_"),
        longDateFormat : {
            LT : "Aको h:mm बजे",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 3) {
                return "राती";
            } else if (hour < 10) {
                return "बिहान";
            } else if (hour < 15) {
                return "दिउँसो";
            } else if (hour < 18) {
                return "बेलुका";
            } else if (hour < 20) {
                return "साँझ";
            } else {
                return "राती";
            }
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[भोली] LT',
            nextWeek : '[आउँदो] dddd[,] LT',
            lastDay : '[हिजो] LT',
            lastWeek : '[गएको] dddd[,] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%sमा",
            past : "%s अगाडी",
            s : "केही समय",
            m : "एक मिनेट",
            mm : "%d मिनेट",
            h : "एक घण्टा",
            hh : "%d घण्टा",
            d : "एक दिन",
            dd : "%d दिन",
            M : "एक महिना",
            MM : "%d महिना",
            y : "एक बर्ष",
            yy : "%d बर्ष"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/nl.js", function (exports, module) {
// moment.js locale configuration
// locale : dutch (nl)
// author : Joris Röling : https://github.com/jjupiter

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var monthsShortWithDots = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
        monthsShortWithoutDots = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_");

    return moment.defineLocale('nl', {
        months : "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
        monthsShort : function (m, format) {
            if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        weekdays : "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
        weekdaysShort : "zo._ma._di._wo._do._vr._za.".split("_"),
        weekdaysMin : "Zo_Ma_Di_Wo_Do_Vr_Za".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD-MM-YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "over %s",
            past : "%s geleden",
            s : "een paar seconden",
            m : "één minuut",
            mm : "%d minuten",
            h : "één uur",
            hh : "%d uur",
            d : "één dag",
            dd : "%d dagen",
            M : "één maand",
            MM : "%d maanden",
            y : "één jaar",
            yy : "%d jaar"
        },
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/nn.js", function (exports, module) {
// moment.js locale configuration
// locale : norwegian nynorsk (nn)
// author : https://github.com/mechuwind

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('nn', {
        months : "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
        monthsShort : "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
        weekdays : "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
        weekdaysShort : "sun_mån_tys_ons_tor_fre_lau".split("_"),
        weekdaysMin : "su_må_ty_on_to_fr_lø".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "for %s sidan",
            s : "nokre sekund",
            m : "eit minutt",
            mm : "%d minutt",
            h : "ein time",
            hh : "%d timar",
            d : "ein dag",
            dd : "%d dagar",
            M : "ein månad",
            MM : "%d månader",
            y : "eit år",
            yy : "%d år"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/pl.js", function (exports, module) {
// moment.js locale configuration
// locale : polish (pl)
// author : Rafal Hirsz : https://github.com/evoL

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var monthsNominative = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),
        monthsSubjective = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_");

    function plural(n) {
        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
    }

    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'minuta' : 'minutę';
        case 'mm':
            return result + (plural(number) ? 'minuty' : 'minut');
        case 'h':
            return withoutSuffix  ? 'godzina'  : 'godzinę';
        case 'hh':
            return result + (plural(number) ? 'godziny' : 'godzin');
        case 'MM':
            return result + (plural(number) ? 'miesiące' : 'miesięcy');
        case 'yy':
            return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    return moment.defineLocale('pl', {
        months : function (momentToFormat, format) {
            if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort : "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),
        weekdays : "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),
        weekdaysShort : "nie_pon_wt_śr_czw_pt_sb".split("_"),
        weekdaysMin : "N_Pn_Wt_Śr_Cz_Pt_So".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: '[W] dddd [o] LT',
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[W zeszłą niedzielę o] LT';
                case 3:
                    return '[W zeszłą środę o] LT';
                case 6:
                    return '[W zeszłą sobotę o] LT';
                default:
                    return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "za %s",
            past : "%s temu",
            s : "kilka sekund",
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : "1 dzień",
            dd : '%d dni',
            M : "miesiąc",
            MM : translate,
            y : "rok",
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/pt-br.js", function (exports, module) {
// moment.js locale configuration
// locale : brazilian portuguese (pt-br)
// author : Caio Ribeiro Pereira : https://github.com/caio-ribeiro-pereira

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('pt-br', {
        months : "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
        monthsShort : "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
        weekdays : "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),
        weekdaysShort : "dom_seg_ter_qua_qui_sex_sáb".split("_"),
        weekdaysMin : "dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D [de] MMMM [de] YYYY",
            LLL : "D [de] MMMM [de] YYYY [às] LT",
            LLLL : "dddd, D [de] MMMM [de] YYYY [às] LT"
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "em %s",
            past : "%s atrás",
            s : "segundos",
            m : "um minuto",
            mm : "%d minutos",
            h : "uma hora",
            hh : "%d horas",
            d : "um dia",
            dd : "%d dias",
            M : "um mês",
            MM : "%d meses",
            y : "um ano",
            yy : "%d anos"
        },
        ordinal : '%dº'
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/pt.js", function (exports, module) {
// moment.js locale configuration
// locale : portuguese (pt)
// author : Jefferson : https://github.com/jalex79

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('pt', {
        months : "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
        monthsShort : "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
        weekdays : "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),
        weekdaysShort : "dom_seg_ter_qua_qui_sex_sáb".split("_"),
        weekdaysMin : "dom_2ª_3ª_4ª_5ª_6ª_sáb".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D [de] MMMM [de] YYYY",
            LLL : "D [de] MMMM [de] YYYY LT",
            LLLL : "dddd, D [de] MMMM [de] YYYY LT"
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "em %s",
            past : "há %s",
            s : "segundos",
            m : "um minuto",
            mm : "%d minutos",
            h : "uma hora",
            hh : "%d horas",
            d : "um dia",
            dd : "%d dias",
            M : "um mês",
            MM : "%d meses",
            y : "um ano",
            yy : "%d anos"
        },
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ro.js", function (exports, module) {
// moment.js locale configuration
// locale : romanian (ro)
// author : Vlad Gurdiga : https://github.com/gurdiga
// author : Valentin Agachi : https://github.com/avaly

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                'mm': 'minute',
                'hh': 'ore',
                'dd': 'zile',
                'MM': 'luni',
                'yy': 'ani'
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }

        return number + separator + format[key];
    }

    return moment.defineLocale('ro', {
        months : "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
        monthsShort : "ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
        weekdays : "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),
        weekdaysShort : "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
        weekdaysMin : "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY H:mm",
            LLLL : "dddd, D MMMM YYYY H:mm"
        },
        calendar : {
            sameDay: "[azi la] LT",
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "peste %s",
            past : "%s în urmă",
            s : "câteva secunde",
            m : "un minut",
            mm : relativeTimeWithPlural,
            h : "o oră",
            hh : relativeTimeWithPlural,
            d : "o zi",
            dd : relativeTimeWithPlural,
            M : "o lună",
            MM : relativeTimeWithPlural,
            y : "un an",
            yy : relativeTimeWithPlural
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ru.js", function (exports, module) {
// moment.js locale configuration
// locale : russian (ru)
// author : Viktorminator : https://github.com/Viktorminator
// Author : Menelion Elensúle : https://github.com/Oire

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
            'accusative': 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_')
        },

        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function monthsShortCaseReplace(m, format) {
        var monthsShort = {
            'nominative': 'янв_фев_мар_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
            'accusative': 'янв_фев_мар_апр_мая_июня_июля_авг_сен_окт_ноя_дек'.split('_')
        },

        nounCase = (/D[oD]?(\[[^\[\]]*\]|\s+)+MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return monthsShort[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            'accusative': 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_')
        },

        nounCase = (/\[ ?[Вв] ?(?:прошлую|следующую)? ?\] ?dddd/).test(format) ?
            'accusative' :
            'nominative';

        return weekdays[nounCase][m.day()];
    }

    return moment.defineLocale('ru', {
        months : monthsCaseReplace,
        monthsShort : monthsShortCaseReplace,
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "вс_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin : "вс_пн_вт_ср_чт_пт_сб".split("_"),
        monthsParse : [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[й|я]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i],
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY г.",
            LLL : "D MMMM YYYY г., LT",
            LLLL : "dddd, D MMMM YYYY г., LT"
        },
        calendar : {
            sameDay: '[Сегодня в] LT',
            nextDay: '[Завтра в] LT',
            lastDay: '[Вчера в] LT',
            nextWeek: function () {
                return this.day() === 2 ? '[Во] dddd [в] LT' : '[В] dddd [в] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[В прошлое] dddd [в] LT';
                case 1:
                case 2:
                case 4:
                    return '[В прошлый] dddd [в] LT';
                case 3:
                case 5:
                case 6:
                    return '[В прошлую] dddd [в] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "через %s",
            past : "%s назад",
            s : "несколько секунд",
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : "час",
            hh : relativeTimeWithPlural,
            d : "день",
            dd : relativeTimeWithPlural,
            M : "месяц",
            MM : relativeTimeWithPlural,
            y : "год",
            yy : relativeTimeWithPlural
        },

        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM : function (input) {
            return /^(дня|вечера)$/.test(input);
        },

        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "ночи";
            } else if (hour < 12) {
                return "утра";
            } else if (hour < 17) {
                return "дня";
            } else {
                return "вечера";
            }
        },

        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
                return number + '-й';
            case 'D':
                return number + '-го';
            case 'w':
            case 'W':
                return number + '-я';
            default:
                return number;
            }
        },

        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/sk.js", function (exports, module) {
// moment.js locale configuration
// locale : slovak (sk)
// author : Martin Minka : https://github.com/k2s
// based on work of petrbela : https://github.com/petrbela

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var months = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),
        monthsShort = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");

    function plural(n) {
        return (n > 1) && (n < 5);
    }

    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + " ";
        switch (key) {
        case 's':  // a few seconds / in a few seconds / a few seconds ago
            return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
        case 'm':  // a minute / in a minute / a minute ago
            return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
        case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'minúty' : 'minút');
            } else {
                return result + 'minútami';
            }
            break;
        case 'h':  // an hour / in an hour / an hour ago
            return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
        case 'hh': // 9 hours / in 9 hours / 9 hours ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'hodiny' : 'hodín');
            } else {
                return result + 'hodinami';
            }
            break;
        case 'd':  // a day / in a day / a day ago
            return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
        case 'dd': // 9 days / in 9 days / 9 days ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'dni' : 'dní');
            } else {
                return result + 'dňami';
            }
            break;
        case 'M':  // a month / in a month / a month ago
            return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
        case 'MM': // 9 months / in 9 months / 9 months ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'mesiace' : 'mesiacov');
            } else {
                return result + 'mesiacmi';
            }
            break;
        case 'y':  // a year / in a year / a year ago
            return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
        case 'yy': // 9 years / in 9 years / 9 years ago
            if (withoutSuffix || isFuture) {
                return result + (plural(number) ? 'roky' : 'rokov');
            } else {
                return result + 'rokmi';
            }
            break;
        }
    }

    return moment.defineLocale('sk', {
        months : months,
        monthsShort : monthsShort,
        monthsParse : (function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(months, monthsShort)),
        weekdays : "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),
        weekdaysShort : "ne_po_ut_st_št_pi_so".split("_"),
        weekdaysMin : "ne_po_ut_st_št_pi_so".split("_"),
        longDateFormat : {
            LT: "H:mm",
            L : "DD.MM.YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd D. MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[dnes o] LT",
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[v nedeľu o] LT';
                case 1:
                case 2:
                    return '[v] dddd [o] LT';
                case 3:
                    return '[v stredu o] LT';
                case 4:
                    return '[vo štvrtok o] LT';
                case 5:
                    return '[v piatok o] LT';
                case 6:
                    return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[minulú nedeľu o] LT';
                case 1:
                case 2:
                    return '[minulý] dddd [o] LT';
                case 3:
                    return '[minulú stredu o] LT';
                case 4:
                case 5:
                    return '[minulý] dddd [o] LT';
                case 6:
                    return '[minulú sobotu o] LT';
                }
            },
            sameElse: "L"
        },
        relativeTime : {
            future : "za %s",
            past : "pred %s",
            s : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/sl.js", function (exports, module) {
// moment.js locale configuration
// locale : slovenian (sl)
// author : Robert Sedovšek : https://github.com/sedovsek

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function translate(number, withoutSuffix, key) {
        var result = number + " ";
        switch (key) {
        case 'm':
            return withoutSuffix ? 'ena minuta' : 'eno minuto';
        case 'mm':
            if (number === 1) {
                result += 'minuta';
            } else if (number === 2) {
                result += 'minuti';
            } else if (number === 3 || number === 4) {
                result += 'minute';
            } else {
                result += 'minut';
            }
            return result;
        case 'h':
            return withoutSuffix ? 'ena ura' : 'eno uro';
        case 'hh':
            if (number === 1) {
                result += 'ura';
            } else if (number === 2) {
                result += 'uri';
            } else if (number === 3 || number === 4) {
                result += 'ure';
            } else {
                result += 'ur';
            }
            return result;
        case 'dd':
            if (number === 1) {
                result += 'dan';
            } else {
                result += 'dni';
            }
            return result;
        case 'MM':
            if (number === 1) {
                result += 'mesec';
            } else if (number === 2) {
                result += 'meseca';
            } else if (number === 3 || number === 4) {
                result += 'mesece';
            } else {
                result += 'mesecev';
            }
            return result;
        case 'yy':
            if (number === 1) {
                result += 'leto';
            } else if (number === 2) {
                result += 'leti';
            } else if (number === 3 || number === 4) {
                result += 'leta';
            } else {
                result += 'let';
            }
            return result;
        }
    }

    return moment.defineLocale('sl', {
        months : "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
        monthsShort : "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
        weekdays : "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),
        weekdaysShort : "ned._pon._tor._sre._čet._pet._sob.".split("_"),
        weekdaysMin : "ne_po_to_sr_če_pe_so".split("_"),
        longDateFormat : {
            LT : "H:mm",
            L : "DD. MM. YYYY",
            LL : "D. MMMM YYYY",
            LLL : "D. MMMM YYYY LT",
            LLLL : "dddd, D. MMMM YYYY LT"
        },
        calendar : {
            sameDay  : '[danes ob] LT',
            nextDay  : '[jutri ob] LT',

            nextWeek : function () {
                switch (this.day()) {
                case 0:
                    return '[v] [nedeljo] [ob] LT';
                case 3:
                    return '[v] [sredo] [ob] LT';
                case 6:
                    return '[v] [soboto] [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[v] dddd [ob] LT';
                }
            },
            lastDay  : '[včeraj ob] LT',
            lastWeek : function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 6:
                    return '[prejšnja] dddd [ob] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "čez %s",
            past   : "%s nazaj",
            s      : "nekaj sekund",
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : "en dan",
            dd     : translate,
            M      : "en mesec",
            MM     : translate,
            y      : "eno leto",
            yy     : translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/sq.js", function (exports, module) {
// moment.js locale configuration
// locale : Albanian (sq)
// author : Flakërim Ismani : https://github.com/flakerimi
// author: Menelion Elensúle: https://github.com/Oire (tests)
// author : Oerd Cukalla : https://github.com/oerd (fixes)

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('sq', {
        months : "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),
        monthsShort : "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),
        weekdays : "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),
        weekdaysShort : "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
        weekdaysMin : "D_H_Ma_Më_E_P_Sh".split("_"),
        meridiem : function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[Sot në] LT',
            nextDay : '[Nesër në] LT',
            nextWeek : 'dddd [në] LT',
            lastDay : '[Dje në] LT',
            lastWeek : 'dddd [e kaluar në] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "në %s",
            past : "%s më parë",
            s : "disa sekonda",
            m : "një minutë",
            mm : "%d minuta",
            h : "një orë",
            hh : "%d orë",
            d : "një ditë",
            dd : "%d ditë",
            M : "një muaj",
            MM : "%d muaj",
            y : "një vit",
            yy : "%d vite"
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/sr-cyrl.js", function (exports, module) {
// moment.js locale configuration
// locale : Serbian-cyrillic (sr-cyrl)
// author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var translator = {
        words: { //Different grammatical cases
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    return moment.defineLocale('sr-cyrl', {
        months: ['јануар', 'фебруар', 'март', 'април', 'мај', 'јун', 'јул', 'август', 'септембар', 'октобар', 'новембар', 'децембар'],
        monthsShort: ['јан.', 'феб.', 'мар.', 'апр.', 'мај', 'јун', 'јул', 'авг.', 'сеп.', 'окт.', 'нов.', 'дец.'],
        weekdays: ['недеља', 'понедељак', 'уторак', 'среда', 'четвртак', 'петак', 'субота'],
        weekdaysShort: ['нед.', 'пон.', 'уто.', 'сре.', 'чет.', 'пет.', 'суб.'],
        weekdaysMin: ['не', 'по', 'ут', 'ср', 'че', 'пе', 'су'],
        longDateFormat: {
            LT: "H:mm",
            L: "DD. MM. YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY LT",
            LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',

            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[у] [недељу] [у] LT';
                case 3:
                    return '[у] [среду] [у] LT';
                case 6:
                    return '[у] [суботу] [у] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[у] dddd [у] LT';
                }
            },
            lastDay  : '[јуче у] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "за %s",
            past   : "пре %s",
            s      : "неколико секунди",
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : "дан",
            dd     : translator.translate,
            M      : "месец",
            MM     : translator.translate,
            y      : "годину",
            yy     : translator.translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/sr.js", function (exports, module) {
// moment.js locale configuration
// locale : Serbian-latin (sr)
// author : Milan Janačković<milanjanackovic@gmail.com> : https://github.com/milan-j

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var translator = {
        words: { //Different grammatical cases
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    return moment.defineLocale('sr', {
        months: ['januar', 'februar', 'mart', 'april', 'maj', 'jun', 'jul', 'avgust', 'septembar', 'oktobar', 'novembar', 'decembar'],
        monthsShort: ['jan.', 'feb.', 'mar.', 'apr.', 'maj', 'jun', 'jul', 'avg.', 'sep.', 'okt.', 'nov.', 'dec.'],
        weekdays: ['nedelja', 'ponedeljak', 'utorak', 'sreda', 'četvrtak', 'petak', 'subota'],
        weekdaysShort: ['ned.', 'pon.', 'uto.', 'sre.', 'čet.', 'pet.', 'sub.'],
        weekdaysMin: ['ne', 'po', 'ut', 'sr', 'če', 'pe', 'su'],
        longDateFormat: {
            LT: "H:mm",
            L: "DD. MM. YYYY",
            LL: "D. MMMM YYYY",
            LLL: "D. MMMM YYYY LT",
            LLLL: "dddd, D. MMMM YYYY LT"
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                case 0:
                    return '[u] [nedelju] [u] LT';
                case 3:
                    return '[u] [sredu] [u] LT';
                case 6:
                    return '[u] [subotu] [u] LT';
                case 1:
                case 2:
                case 4:
                case 5:
                    return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[juče u] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : "za %s",
            past   : "pre %s",
            s      : "nekoliko sekundi",
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : "dan",
            dd     : translator.translate,
            M      : "mesec",
            MM     : translator.translate,
            y      : "godinu",
            yy     : translator.translate
        },
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/sv.js", function (exports, module) {
// moment.js locale configuration
// locale : swedish (sv)
// author : Jens Alm : https://github.com/ulmus

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('sv', {
        months : "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
        monthsShort : "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
        weekdays : "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),
        weekdaysShort : "sön_mån_tis_ons_tor_fre_lör".split("_"),
        weekdaysMin : "sö_må_ti_on_to_fr_lö".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "YYYY-MM-DD",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: 'dddd LT',
            lastWeek: '[Förra] dddd[en] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "om %s",
            past : "för %s sedan",
            s : "några sekunder",
            m : "en minut",
            mm : "%d minuter",
            h : "en timme",
            hh : "%d timmar",
            d : "en dag",
            dd : "%d dagar",
            M : "en månad",
            MM : "%d månader",
            y : "ett år",
            yy : "%d år"
        },
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'e' :
                (b === 1) ? 'a' :
                (b === 2) ? 'a' :
                (b === 3) ? 'e' : 'e';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/ta.js", function (exports, module) {
// moment.js locale configuration
// locale : tamil (ta)
// author : Arjunkumar Krishnamoorthy : https://github.com/tk120404

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    /*var symbolMap = {
            '1': '௧',
            '2': '௨',
            '3': '௩',
            '4': '௪',
            '5': '௫',
            '6': '௬',
            '7': '௭',
            '8': '௮',
            '9': '௯',
            '0': '௦'
        },
        numberMap = {
            '௧': '1',
            '௨': '2',
            '௩': '3',
            '௪': '4',
            '௫': '5',
            '௬': '6',
            '௭': '7',
            '௮': '8',
            '௯': '9',
            '௦': '0'
        }; */

    return moment.defineLocale('ta', {
        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split("_"),
        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split("_"),
        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split("_"),
        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split("_"),
        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY, LT",
            LLLL : "dddd, D MMMM YYYY, LT"
        },
        calendar : {
            sameDay : '[இன்று] LT',
            nextDay : '[நாளை] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[நேற்று] LT',
            lastWeek : '[கடந்த வாரம்] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s இல்",
            past : "%s முன்",
            s : "ஒரு சில விநாடிகள்",
            m : "ஒரு நிமிடம்",
            mm : "%d நிமிடங்கள்",
            h : "ஒரு மணி நேரம்",
            hh : "%d மணி நேரம்",
            d : "ஒரு நாள்",
            dd : "%d நாட்கள்",
            M : "ஒரு மாதம்",
            MM : "%d மாதங்கள்",
            y : "ஒரு வருடம்",
            yy : "%d ஆண்டுகள்"
        },
/*        preparse: function (string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },*/
        ordinal : function (number) {
            return number + 'வது';
        },


        // refer http://ta.wikipedia.org/s/1er1

        meridiem : function (hour, minute, isLower) {
            if (hour >= 6 && hour <= 10) {
                return " காலை";
            } else if (hour >= 10 && hour <= 14) {
                return " நண்பகல்";
            } else if (hour >= 14 && hour <= 18) {
                return " எற்பாடு";
            } else if (hour >= 18 && hour <= 20) {
                return " மாலை";
            } else if (hour >= 20 && hour <= 24) {
                return " இரவு";
            } else if (hour >= 0 && hour <= 6) {
                return " வைகறை";
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/th.js", function (exports, module) {
// moment.js locale configuration
// locale : thai (th)
// author : Kridsada Thanabulpong : https://github.com/sirn

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('th', {
        months : "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),
        monthsShort : "มกรา_กุมภา_มีนา_เมษา_พฤษภา_มิถุนา_กรกฎา_สิงหา_กันยา_ตุลา_พฤศจิกา_ธันวา".split("_"),
        weekdays : "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),
        weekdaysShort : "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"), // yes, three characters difference
        weekdaysMin : "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
        longDateFormat : {
            LT : "H นาฬิกา m นาที",
            L : "YYYY/MM/DD",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY เวลา LT",
            LLLL : "วันddddที่ D MMMM YYYY เวลา LT"
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return "ก่อนเที่ยง";
            } else {
                return "หลังเที่ยง";
            }
        },
        calendar : {
            sameDay : '[วันนี้ เวลา] LT',
            nextDay : '[พรุ่งนี้ เวลา] LT',
            nextWeek : 'dddd[หน้า เวลา] LT',
            lastDay : '[เมื่อวานนี้ เวลา] LT',
            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "อีก %s",
            past : "%sที่แล้ว",
            s : "ไม่กี่วินาที",
            m : "1 นาที",
            mm : "%d นาที",
            h : "1 ชั่วโมง",
            hh : "%d ชั่วโมง",
            d : "1 วัน",
            dd : "%d วัน",
            M : "1 เดือน",
            MM : "%d เดือน",
            y : "1 ปี",
            yy : "%d ปี"
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/tl-ph.js", function (exports, module) {
// moment.js locale configuration
// locale : Tagalog/Filipino (tl-ph)
// author : Dan Hagman

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('tl-ph', {
        months : "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
        monthsShort : "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
        weekdays : "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
        weekdaysShort : "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
        weekdaysMin : "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "MM/D/YYYY",
            LL : "MMMM D, YYYY",
            LLL : "MMMM D, YYYY LT",
            LLLL : "dddd, MMMM DD, YYYY LT"
        },
        calendar : {
            sameDay: "[Ngayon sa] LT",
            nextDay: '[Bukas sa] LT',
            nextWeek: 'dddd [sa] LT',
            lastDay: '[Kahapon sa] LT',
            lastWeek: 'dddd [huling linggo] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "sa loob ng %s",
            past : "%s ang nakalipas",
            s : "ilang segundo",
            m : "isang minuto",
            mm : "%d minuto",
            h : "isang oras",
            hh : "%d oras",
            d : "isang araw",
            dd : "%d araw",
            M : "isang buwan",
            MM : "%d buwan",
            y : "isang taon",
            yy : "%d taon"
        },
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/tr.js", function (exports, module) {
// moment.js locale configuration
// locale : turkish (tr)
// authors : Erhan Gundogan : https://github.com/erhangundogan,
//           Burak Yiğit Kaya: https://github.com/BYK

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    var suffixes = {
        1: "'inci",
        5: "'inci",
        8: "'inci",
        70: "'inci",
        80: "'inci",

        2: "'nci",
        7: "'nci",
        20: "'nci",
        50: "'nci",

        3: "'üncü",
        4: "'üncü",
        100: "'üncü",

        6: "'ncı",

        9: "'uncu",
        10: "'uncu",
        30: "'uncu",

        60: "'ıncı",
        90: "'ıncı"
    };

    return moment.defineLocale('tr', {
        months : "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),
        monthsShort : "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),
        weekdays : "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),
        weekdaysShort : "Paz_Pts_Sal_Çar_Per_Cum_Cts".split("_"),
        weekdaysMin : "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd, D MMMM YYYY LT"
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[yarın saat] LT',
            nextWeek : '[haftaya] dddd [saat] LT',
            lastDay : '[dün] LT',
            lastWeek : '[geçen hafta] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "%s sonra",
            past : "%s önce",
            s : "birkaç saniye",
            m : "bir dakika",
            mm : "%d dakika",
            h : "bir saat",
            hh : "%d saat",
            d : "bir gün",
            dd : "%d gün",
            M : "bir ay",
            MM : "%d ay",
            y : "bir yıl",
            yy : "%d yıl"
        },
        ordinal : function (number) {
            if (number === 0) {  // special case for zero
                return number + "'ıncı";
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;

            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/tzm-latn.js", function (exports, module) {
// moment.js locale configuration
// locale : Morocco Central Atlas Tamaziɣt in Latin (tzm-latn)
// author : Abdel Said : https://github.com/abdelsaid

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('tzm-latn', {
        months : "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        monthsShort : "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
        weekdays : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysShort : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        weekdaysMin : "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[asdkh g] LT",
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "dadkh s yan %s",
            past : "yan %s",
            s : "imik",
            m : "minuḍ",
            mm : "%d minuḍ",
            h : "saɛa",
            hh : "%d tassaɛin",
            d : "ass",
            dd : "%d ossan",
            M : "ayowr",
            MM : "%d iyyirn",
            y : "asgas",
            yy : "%d isgasn"
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/tzm.js", function (exports, module) {
// moment.js locale configuration
// locale : Morocco Central Atlas Tamaziɣt (tzm)
// author : Abdel Said : https://github.com/abdelsaid

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('tzm', {
        months : "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        monthsShort : "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
        weekdays : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysShort : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        weekdaysMin : "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "dddd D MMMM YYYY LT"
        },
        calendar : {
            sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
            past : "ⵢⴰⵏ %s",
            s : "ⵉⵎⵉⴽ",
            m : "ⵎⵉⵏⵓⴺ",
            mm : "%d ⵎⵉⵏⵓⴺ",
            h : "ⵙⴰⵄⴰ",
            hh : "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
            d : "ⴰⵙⵙ",
            dd : "%d oⵙⵙⴰⵏ",
            M : "ⴰⵢoⵓⵔ",
            MM : "%d ⵉⵢⵢⵉⵔⵏ",
            y : "ⴰⵙⴳⴰⵙ",
            yy : "%d ⵉⵙⴳⴰⵙⵏ"
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/uk.js", function (exports, module) {
// moment.js locale configuration
// locale : ukrainian (uk)
// author : zemlanin : https://github.com/zemlanin
// Author : Menelion Elensúle : https://github.com/Oire

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }

    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'mm': 'хвилина_хвилини_хвилин',
            'hh': 'година_години_годин',
            'dd': 'день_дні_днів',
            'MM': 'місяць_місяці_місяців',
            'yy': 'рік_роки_років'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    function monthsCaseReplace(m, format) {
        var months = {
            'nominative': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_'),
            'accusative': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_')
        },

        nounCase = (/D[oD]? *MMMM?/).test(format) ?
            'accusative' :
            'nominative';

        return months[nounCase][m.month()];
    }

    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
        },

        nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
            'accusative' :
            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
                'genitive' :
                'nominative');

        return weekdays[nounCase][m.day()];
    }

    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    return moment.defineLocale('uk', {
        months : monthsCaseReplace,
        monthsShort : "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : "нд_пн_вт_ср_чт_пт_сб".split("_"),
        weekdaysMin : "нд_пн_вт_ср_чт_пт_сб".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD.MM.YYYY",
            LL : "D MMMM YYYY р.",
            LLL : "D MMMM YYYY р., LT",
            LLLL : "dddd, D MMMM YYYY р., LT"
        },
        calendar : {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                case 0:
                case 3:
                case 5:
                case 6:
                    return processHoursFunction('[Минулої] dddd [').call(this);
                case 1:
                case 2:
                case 4:
                    return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : "за %s",
            past : "%s тому",
            s : "декілька секунд",
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : "годину",
            hh : relativeTimeWithPlural,
            d : "день",
            dd : relativeTimeWithPlural,
            M : "місяць",
            MM : relativeTimeWithPlural,
            y : "рік",
            yy : relativeTimeWithPlural
        },

        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason

        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return "ночі";
            } else if (hour < 12) {
                return "ранку";
            } else if (hour < 17) {
                return "дня";
            } else {
                return "вечора";
            }
        },

        ordinal: function (number, period) {
            switch (period) {
            case 'M':
            case 'd':
            case 'DDD':
            case 'w':
            case 'W':
                return number + '-й';
            case 'D':
                return number + '-го';
            default:
                return number;
            }
        },

        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/uz.js", function (exports, module) {
// moment.js locale configuration
// locale : uzbek
// author : Sardor Muminov : https://github.com/muminoff

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('uz', {
        months : "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
        monthsShort : "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
        weekdays : "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),
        weekdaysShort : "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
        weekdaysMin : "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM YYYY",
            LLL : "D MMMM YYYY LT",
            LLLL : "D MMMM YYYY, dddd LT"
        },
        calendar : {
            sameDay : '[Бугун соат] LT [да]',
            nextDay : '[Эртага] LT [да]',
            nextWeek : 'dddd [куни соат] LT [да]',
            lastDay : '[Кеча соат] LT [да]',
            lastWeek : '[Утган] dddd [куни соат] LT [да]',
            sameElse : 'L'
        },
        relativeTime : {
            future : "Якин %s ичида",
            past : "Бир неча %s олдин",
            s : "фурсат",
            m : "бир дакика",
            mm : "%d дакика",
            h : "бир соат",
            hh : "%d соат",
            d : "бир кун",
            dd : "%d кун",
            M : "бир ой",
            MM : "%d ой",
            y : "бир йил",
            yy : "%d йил"
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/vi.js", function (exports, module) {
// moment.js locale configuration
// locale : vietnamese (vi)
// author : Bang Nguyen : https://github.com/bangnk

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('vi', {
        months : "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
        monthsShort : "Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12".split("_"),
        weekdays : "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
        weekdaysShort : "CN_T2_T3_T4_T5_T6_T7".split("_"),
        weekdaysMin : "CN_T2_T3_T4_T5_T6_T7".split("_"),
        longDateFormat : {
            LT : "HH:mm",
            L : "DD/MM/YYYY",
            LL : "D MMMM [năm] YYYY",
            LLL : "D MMMM [năm] YYYY LT",
            LLLL : "dddd, D MMMM [năm] YYYY LT",
            l : "DD/M/YYYY",
            ll : "D MMM YYYY",
            lll : "D MMM YYYY LT",
            llll : "ddd, D MMM YYYY LT"
        },
        calendar : {
            sameDay: "[Hôm nay lúc] LT",
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : "%s tới",
            past : "%s trước",
            s : "vài giây",
            m : "một phút",
            mm : "%d phút",
            h : "một giờ",
            hh : "%d giờ",
            d : "một ngày",
            dd : "%d ngày",
            M : "một tháng",
            MM : "%d tháng",
            y : "một năm",
            yy : "%d năm"
        },
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/zh-cn.js", function (exports, module) {
// moment.js locale configuration
// locale : chinese
// author : suupic : https://github.com/suupic
// author : Zeno Zeng : https://github.com/zenozeng

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('zh-cn', {
        months : "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays : "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort : "周日_周一_周二_周三_周四_周五_周六".split("_"),
        weekdaysMin : "日_一_二_三_四_五_六".split("_"),
        longDateFormat : {
            LT : "Ah点mm",
            L : "YYYY-MM-DD",
            LL : "YYYY年MMMD日",
            LLL : "YYYY年MMMD日LT",
            LLLL : "YYYY年MMMD日ddddLT",
            l : "YYYY-MM-DD",
            ll : "YYYY年MMMD日",
            lll : "YYYY年MMMD日LT",
            llll : "YYYY年MMMD日ddddLT"
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return "凌晨";
            } else if (hm < 900) {
                return "早上";
            } else if (hm < 1130) {
                return "上午";
            } else if (hm < 1230) {
                return "中午";
            } else if (hm < 1800) {
                return "下午";
            } else {
                return "晚上";
            }
        },
        calendar : {
            sameDay : function () {
                return this.minutes() === 0 ? "[今天]Ah[点整]" : "[今天]LT";
            },
            nextDay : function () {
                return this.minutes() === 0 ? "[明天]Ah[点整]" : "[明天]LT";
            },
            lastDay : function () {
                return this.minutes() === 0 ? "[昨天]Ah[点整]" : "[昨天]LT";
            },
            nextWeek : function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() - startOfWeek.unix() >= 7 * 24 * 3600 ? '[下]' : '[本]';
                return this.minutes() === 0 ? prefix + "dddAh点整" : prefix + "dddAh点mm";
            },
            lastWeek : function () {
                var startOfWeek, prefix;
                startOfWeek = moment().startOf('week');
                prefix = this.unix() < startOfWeek.unix()  ? '[上]' : '[本]';
                return this.minutes() === 0 ? prefix + "dddAh点整" : prefix + "dddAh点mm";
            },
            sameElse : 'LL'
        },
        ordinal : function (number, period) {
            switch (period) {
            case "d":
            case "D":
            case "DDD":
                return number + "日";
            case "M":
                return number + "月";
            case "w":
            case "W":
                return number + "周";
            default:
                return number;
            }
        },
        relativeTime : {
            future : "%s内",
            past : "%s前",
            s : "几秒",
            m : "1分钟",
            mm : "%d分钟",
            h : "1小时",
            hh : "%d小时",
            d : "1天",
            dd : "%d天",
            M : "1个月",
            MM : "%d个月",
            y : "1年",
            yy : "%d年"
        },
        week : {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });
}));

});

require.register("johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68/locale/zh-tw.js", function (exports, module) {
// moment.js locale configuration
// locale : traditional chinese (zh-tw)
// author : Ben : https://github.com/ben-lin

(function (factory) {
    if (typeof define === 'function' && define.amd) {
        define(['moment'], factory); // AMD
    } else if (typeof exports === 'object') {
        module.exports = factory(require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68')); // Node
    } else {
        factory(window.moment); // Browser global
    }
}(function (moment) {
    return moment.defineLocale('zh-tw', {
        months : "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
        monthsShort : "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
        weekdays : "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
        weekdaysShort : "週日_週一_週二_週三_週四_週五_週六".split("_"),
        weekdaysMin : "日_一_二_三_四_五_六".split("_"),
        longDateFormat : {
            LT : "Ah點mm",
            L : "YYYY年MMMD日",
            LL : "YYYY年MMMD日",
            LLL : "YYYY年MMMD日LT",
            LLLL : "YYYY年MMMD日ddddLT",
            l : "YYYY年MMMD日",
            ll : "YYYY年MMMD日",
            lll : "YYYY年MMMD日LT",
            llll : "YYYY年MMMD日ddddLT"
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 900) {
                return "早上";
            } else if (hm < 1130) {
                return "上午";
            } else if (hm < 1230) {
                return "中午";
            } else if (hm < 1800) {
                return "下午";
            } else {
                return "晚上";
            }
        },
        calendar : {
            sameDay : '[今天]LT',
            nextDay : '[明天]LT',
            nextWeek : '[下]ddddLT',
            lastDay : '[昨天]LT',
            lastWeek : '[上]ddddLT',
            sameElse : 'L'
        },
        ordinal : function (number, period) {
            switch (period) {
            case "d" :
            case "D" :
            case "DDD" :
                return number + "日";
            case "M" :
                return number + "月";
            case "w" :
            case "W" :
                return number + "週";
            default :
                return number;
            }
        },
        relativeTime : {
            future : "%s內",
            past : "%s前",
            s : "幾秒",
            m : "一分鐘",
            mm : "%d分鐘",
            h : "一小時",
            hh : "%d小時",
            d : "一天",
            dd : "%d天",
            M : "一個月",
            MM : "%d個月",
            y : "一年",
            yy : "%d年"
        }
    });
}));

});

require.register("moment~moment@2.7.0", function (exports, module) {
//! moment.js
//! version : 2.7.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com

(function (undefined) {

    /************************************
        Constants
    ************************************/

    var moment,
        VERSION = "2.7.0",
        // the global-scope this is NOT the global object in Node.js
        globalScope = typeof global !== 'undefined' ? global : this,
        oldGlobalMoment,
        round = Math.round,
        i,

        YEAR = 0,
        MONTH = 1,
        DATE = 2,
        HOUR = 3,
        MINUTE = 4,
        SECOND = 5,
        MILLISECOND = 6,

        // internal storage for language config files
        languages = {},

        // moment internal properties
        momentProperties = {
            _isAMomentObject: null,
            _i : null,
            _f : null,
            _l : null,
            _strict : null,
            _tzm : null,
            _isUTC : null,
            _offset : null,  // optional. Combine with _isUTC
            _pf : null,
            _lang : null  // optional
        },

        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,
        aspNetTimeSpanJsonRegex = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/,

        // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
        // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
        isoDurationRegex = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g,
        localFormattingTokens = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenOneToFourDigits = /\d{1,4}/, // 0 - 9999
        parseTokenOneToSixDigits = /[+\-]?\d{1,6}/, // -999,999 - 999,999
        parseTokenDigits = /\d+/, // nonzero number of digits
        parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, // any word (or two) characters or numbers including two/three word month in arabic.
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/gi, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO separator)
        parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, // 123456789 123456789.123
        parseTokenOrdinal = /\d{1,2}/,

        //strict parsing regexes
        parseTokenOneDigit = /\d/, // 0 - 9
        parseTokenTwoDigits = /\d\d/, // 00 - 99
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenSixDigits = /[+-]?\d{6}/, // -999,999 - 999,999
        parseTokenSignedNumber = /[+-]?\d+/, // -inf - inf

        // iso 8601 regex
        // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
        isoRegex = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,

        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        isoDates = [
            ['YYYYYY-MM-DD', /[+-]\d{6}-\d{2}-\d{2}/],
            ['YYYY-MM-DD', /\d{4}-\d{2}-\d{2}/],
            ['GGGG-[W]WW-E', /\d{4}-W\d{2}-\d/],
            ['GGGG-[W]WW', /\d{4}-W\d{2}/],
            ['YYYY-DDD', /\d{4}-\d{3}/]
        ],

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.SSSS', /(T| )\d\d:\d\d:\d\d\.\d+/],
            ['HH:mm:ss', /(T| )\d\d:\d\d:\d\d/],
            ['HH:mm', /(T| )\d\d:\d\d/],
            ['HH', /(T| )\d\d/]
        ],

        // timezone chunker "+10:00" > ["10", "00"] or "-1530" > ["-15", "30"]
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        },

        unitAliases = {
            ms : 'millisecond',
            s : 'second',
            m : 'minute',
            h : 'hour',
            d : 'day',
            D : 'date',
            w : 'week',
            W : 'isoWeek',
            M : 'month',
            Q : 'quarter',
            y : 'year',
            DDD : 'dayOfYear',
            e : 'weekday',
            E : 'isoWeekday',
            gg: 'weekYear',
            GG: 'isoWeekYear'
        },

        camelFunctions = {
            dayofyear : 'dayOfYear',
            isoweekday : 'isoWeekday',
            isoweek : 'isoWeek',
            weekyear : 'weekYear',
            isoweekyear : 'isoWeekYear'
        },

        // format function strings
        formatFunctions = {},

        // default relative time thresholds
        relativeTimeThresholds = {
          s: 45,   //seconds to minutes
          m: 45,   //minutes to hours
          h: 22,   //hours to days
          dd: 25,  //days to month (month == 1)
          dm: 45,  //days to months (months > 1)
          dy: 345  //days to year
        },

        // tokens to ordinalize and pad
        ordinalizeTokens = 'DDD w W M D d'.split(' '),
        paddedTokens = 'M D H h m s w W'.split(' '),

        formatTokenFunctions = {
            M    : function () {
                return this.month() + 1;
            },
            MMM  : function (format) {
                return this.lang().monthsShort(this, format);
            },
            MMMM : function (format) {
                return this.lang().months(this, format);
            },
            D    : function () {
                return this.date();
            },
            DDD  : function () {
                return this.dayOfYear();
            },
            d    : function () {
                return this.day();
            },
            dd   : function (format) {
                return this.lang().weekdaysMin(this, format);
            },
            ddd  : function (format) {
                return this.lang().weekdaysShort(this, format);
            },
            dddd : function (format) {
                return this.lang().weekdays(this, format);
            },
            w    : function () {
                return this.week();
            },
            W    : function () {
                return this.isoWeek();
            },
            YY   : function () {
                return leftZeroFill(this.year() % 100, 2);
            },
            YYYY : function () {
                return leftZeroFill(this.year(), 4);
            },
            YYYYY : function () {
                return leftZeroFill(this.year(), 5);
            },
            YYYYYY : function () {
                var y = this.year(), sign = y >= 0 ? '+' : '-';
                return sign + leftZeroFill(Math.abs(y), 6);
            },
            gg   : function () {
                return leftZeroFill(this.weekYear() % 100, 2);
            },
            gggg : function () {
                return leftZeroFill(this.weekYear(), 4);
            },
            ggggg : function () {
                return leftZeroFill(this.weekYear(), 5);
            },
            GG   : function () {
                return leftZeroFill(this.isoWeekYear() % 100, 2);
            },
            GGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 4);
            },
            GGGGG : function () {
                return leftZeroFill(this.isoWeekYear(), 5);
            },
            e : function () {
                return this.weekday();
            },
            E : function () {
                return this.isoWeekday();
            },
            a    : function () {
                return this.lang().meridiem(this.hours(), this.minutes(), true);
            },
            A    : function () {
                return this.lang().meridiem(this.hours(), this.minutes(), false);
            },
            H    : function () {
                return this.hours();
            },
            h    : function () {
                return this.hours() % 12 || 12;
            },
            m    : function () {
                return this.minutes();
            },
            s    : function () {
                return this.seconds();
            },
            S    : function () {
                return toInt(this.milliseconds() / 100);
            },
            SS   : function () {
                return leftZeroFill(toInt(this.milliseconds() / 10), 2);
            },
            SSS  : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            SSSS : function () {
                return leftZeroFill(this.milliseconds(), 3);
            },
            Z    : function () {
                var a = -this.zone(),
                    b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-";
                }
                return b + leftZeroFill(toInt(a / 60), 2) + ":" + leftZeroFill(toInt(a) % 60, 2);
            },
            ZZ   : function () {
                var a = -this.zone(),
                    b = "+";
                if (a < 0) {
                    a = -a;
                    b = "-";
                }
                return b + leftZeroFill(toInt(a / 60), 2) + leftZeroFill(toInt(a) % 60, 2);
            },
            z : function () {
                return this.zoneAbbr();
            },
            zz : function () {
                return this.zoneName();
            },
            X    : function () {
                return this.unix();
            },
            Q : function () {
                return this.quarter();
            }
        },

        lists = ['months', 'monthsShort', 'weekdays', 'weekdaysShort', 'weekdaysMin'];

    // Pick the first defined of two or three arguments. dfl comes from
    // default.
    function dfl(a, b, c) {
        switch (arguments.length) {
            case 2: return a != null ? a : b;
            case 3: return a != null ? a : b != null ? b : c;
            default: throw new Error("Implement me");
        }
    }

    function defaultParsingFlags() {
        // We need to deep clone this object, and es5 standard is not very
        // helpful.
        return {
            empty : false,
            unusedTokens : [],
            unusedInput : [],
            overflow : -2,
            charsLeftOver : 0,
            nullInput : false,
            invalidMonth : null,
            invalidFormat : false,
            userInvalidated : false,
            iso: false
        };
    }

    function deprecate(msg, fn) {
        var firstTime = true;
        function printMsg() {
            if (moment.suppressDeprecationWarnings === false &&
                    typeof console !== 'undefined' && console.warn) {
                console.warn("Deprecation warning: " + msg);
            }
        }
        return extend(function () {
            if (firstTime) {
                printMsg();
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    function padToken(func, count) {
        return function (a) {
            return leftZeroFill(func.call(this, a), count);
        };
    }
    function ordinalizeToken(func, period) {
        return function (a) {
            return this.lang().ordinal(func.call(this, a), period);
        };
    }

    while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions[i + 'o'] = ordinalizeToken(formatTokenFunctions[i], i);
    }
    while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions[i + i] = padToken(formatTokenFunctions[i], 2);
    }
    formatTokenFunctions.DDDD = padToken(formatTokenFunctions.DDD, 3);


    /************************************
        Constructors
    ************************************/

    function Language() {

    }

    // Moment prototype object
    function Moment(config) {
        checkOverflow(config);
        extend(this, config);
    }

    // Duration Constructor
    function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._bubble();
    }

    /************************************
        Helpers
    ************************************/


    function extend(a, b) {
        for (var i in b) {
            if (b.hasOwnProperty(i)) {
                a[i] = b[i];
            }
        }

        if (b.hasOwnProperty("toString")) {
            a.toString = b.toString;
        }

        if (b.hasOwnProperty("valueOf")) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function cloneMoment(m) {
        var result = {}, i;
        for (i in m) {
            if (m.hasOwnProperty(i) && momentProperties.hasOwnProperty(i)) {
                result[i] = m[i];
            }
        }

        return result;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength, forceSign) {
        var output = '' + Math.abs(number),
            sign = number >= 0;

        while (output.length < targetLength) {
            output = '0' + output;
        }
        return (sign ? (forceSign ? '+' : '') : '-') + output;
    }

    // helper function for _.addTime and _.subtractTime
    function addOrSubtractDurationFromMoment(mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = duration._days,
            months = duration._months;
        updateOffset = updateOffset == null ? true : updateOffset;

        if (milliseconds) {
            mom._d.setTime(+mom._d + milliseconds * isAdding);
        }
        if (days) {
            rawSetter(mom, 'Date', rawGetter(mom, 'Date') + days * isAdding);
        }
        if (months) {
            rawMonthSetter(mom, rawGetter(mom, 'Month') + months * isAdding);
        }
        if (updateOffset) {
            moment.updateOffset(mom, days || months);
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    function isDate(input) {
        return  Object.prototype.toString.call(input) === '[object Date]' ||
                input instanceof Date;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function normalizeUnits(units) {
        if (units) {
            var lowered = units.toLowerCase().replace(/(.)s$/, '$1');
            units = unitAliases[units] || camelFunctions[lowered] || lowered;
        }
        return units;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (inputObject.hasOwnProperty(prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    function makeList(field) {
        var count, setter;

        if (field.indexOf('week') === 0) {
            count = 7;
            setter = 'day';
        }
        else if (field.indexOf('month') === 0) {
            count = 12;
            setter = 'month';
        }
        else {
            return;
        }

        moment[field] = function (format, index) {
            var i, getter,
                method = moment.fn._lang[field],
                results = [];

            if (typeof format === 'number') {
                index = format;
                format = undefined;
            }

            getter = function (i) {
                var m = moment().utc().set(setter, i);
                return method.call(moment.fn._lang, m, format || '');
            };

            if (index != null) {
                return getter(index);
            }
            else {
                for (i = 0; i < count; i++) {
                    results.push(getter(i));
                }
                return results;
            }
        };
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            if (coercedNumber >= 0) {
                value = Math.floor(coercedNumber);
            } else {
                value = Math.ceil(coercedNumber);
            }
        }

        return value;
    }

    function daysInMonth(year, month) {
        return new Date(Date.UTC(year, month + 1, 0)).getUTCDate();
    }

    function weeksInYear(year, dow, doy) {
        return weekOfYear(moment([year, 11, 31 + dow - doy]), dow, doy).week;
    }

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    function checkOverflow(m) {
        var overflow;
        if (m._a && m._pf.overflow === -2) {
            overflow =
                m._a[MONTH] < 0 || m._a[MONTH] > 11 ? MONTH :
                m._a[DATE] < 1 || m._a[DATE] > daysInMonth(m._a[YEAR], m._a[MONTH]) ? DATE :
                m._a[HOUR] < 0 || m._a[HOUR] > 23 ? HOUR :
                m._a[MINUTE] < 0 || m._a[MINUTE] > 59 ? MINUTE :
                m._a[SECOND] < 0 || m._a[SECOND] > 59 ? SECOND :
                m._a[MILLISECOND] < 0 || m._a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (m._pf._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }

            m._pf.overflow = overflow;
        }
    }

    function isValid(m) {
        if (m._isValid == null) {
            m._isValid = !isNaN(m._d.getTime()) &&
                m._pf.overflow < 0 &&
                !m._pf.empty &&
                !m._pf.invalidMonth &&
                !m._pf.nullInput &&
                !m._pf.invalidFormat &&
                !m._pf.userInvalidated;

            if (m._strict) {
                m._isValid = m._isValid &&
                    m._pf.charsLeftOver === 0 &&
                    m._pf.unusedTokens.length === 0;
            }
        }
        return m._isValid;
    }

    function normalizeLanguage(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function makeAs(input, model) {
        return model._isUTC ? moment(input).zone(model._offset || 0) :
            moment(input).local();
    }

    /************************************
        Languages
    ************************************/


    extend(Language.prototype, {

        set : function (config) {
            var prop, i;
            for (i in config) {
                prop = config[i];
                if (typeof prop === 'function') {
                    this[i] = prop;
                } else {
                    this['_' + i] = prop;
                }
            }
        },

        _months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        months : function (m) {
            return this._months[m.month()];
        },

        _monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        monthsShort : function (m) {
            return this._monthsShort[m.month()];
        },

        monthsParse : function (monthName) {
            var i, mom, regex;

            if (!this._monthsParse) {
                this._monthsParse = [];
            }

            for (i = 0; i < 12; i++) {
                // make the regex if we don't have it already
                if (!this._monthsParse[i]) {
                    mom = moment.utc([2000, i]);
                    regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                    this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._monthsParse[i].test(monthName)) {
                    return i;
                }
            }
        },

        _weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdays : function (m) {
            return this._weekdays[m.day()];
        },

        _weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        weekdaysShort : function (m) {
            return this._weekdaysShort[m.day()];
        },

        _weekdaysMin : "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
        weekdaysMin : function (m) {
            return this._weekdaysMin[m.day()];
        },

        weekdaysParse : function (weekdayName) {
            var i, mom, regex;

            if (!this._weekdaysParse) {
                this._weekdaysParse = [];
            }

            for (i = 0; i < 7; i++) {
                // make the regex if we don't have it already
                if (!this._weekdaysParse[i]) {
                    mom = moment([2000, 1]).day(i);
                    regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                    this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
                }
                // test the regex
                if (this._weekdaysParse[i].test(weekdayName)) {
                    return i;
                }
            }
        },

        _longDateFormat : {
            LT : "h:mm A",
            L : "MM/DD/YYYY",
            LL : "MMMM D YYYY",
            LLL : "MMMM D YYYY LT",
            LLLL : "dddd, MMMM D YYYY LT"
        },
        longDateFormat : function (key) {
            var output = this._longDateFormat[key];
            if (!output && this._longDateFormat[key.toUpperCase()]) {
                output = this._longDateFormat[key.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (val) {
                    return val.slice(1);
                });
                this._longDateFormat[key] = output;
            }
            return output;
        },

        isPM : function (input) {
            // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
            // Using charAt should be more compatible.
            return ((input + '').toLowerCase().charAt(0) === 'p');
        },

        _meridiemParse : /[ap]\.?m?\.?/i,
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'pm' : 'PM';
            } else {
                return isLower ? 'am' : 'AM';
            }
        },

        _calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendar[key];
            return typeof output === 'function' ? output.apply(mom) : output;
        },

        _relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        relativeTime : function (number, withoutSuffix, string, isFuture) {
            var output = this._relativeTime[string];
            return (typeof output === 'function') ?
                output(number, withoutSuffix, string, isFuture) :
                output.replace(/%d/i, number);
        },
        pastFuture : function (diff, output) {
            var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
            return typeof format === 'function' ? format(output) : format.replace(/%s/i, output);
        },

        ordinal : function (number) {
            return this._ordinal.replace("%d", number);
        },
        _ordinal : "%d",

        preparse : function (string) {
            return string;
        },

        postformat : function (string) {
            return string;
        },

        week : function (mom) {
            return weekOfYear(mom, this._week.dow, this._week.doy).week;
        },

        _week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        },

        _invalidDate: 'Invalid date',
        invalidDate: function () {
            return this._invalidDate;
        }
    });

    // Loads a language definition into the `languages` cache.  The function
    // takes a key and optionally values.  If not in the browser and no values
    // are provided, it will load the language file module.  As a convenience,
    // this function also returns the language values.
    function loadLang(key, values) {
        values.abbr = key;
        if (!languages[key]) {
            languages[key] = new Language();
        }
        languages[key].set(values);
        return languages[key];
    }

    // Remove a language from the `languages` cache. Mostly useful in tests.
    function unloadLang(key) {
        delete languages[key];
    }

    // Determines which language definition to use and returns it.
    //
    // With no parameters, it will return the global language.  If you
    // pass in a language key, such as 'en', it will return the
    // definition for 'en', so long as 'en' has already been loaded using
    // moment.lang.
    function getLangDefinition(key) {
        var i = 0, j, lang, next, split,
            get = function (k) {
                if (!languages[k] && hasModule) {
                    try {
                        require('./lang/' + k);
                    } catch (e) { }
                }
                return languages[k];
            };

        if (!key) {
            return moment.fn._lang;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            lang = get(key);
            if (lang) {
                return lang;
            }
            key = [key];
        }

        //pick the language from the array
        //try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
        //substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
        while (i < key.length) {
            split = normalizeLanguage(key[i]).split('-');
            j = split.length;
            next = normalizeLanguage(key[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                lang = get(split.slice(0, j).join('-'));
                if (lang) {
                    return lang;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return moment.fn._lang;
    }

    /************************************
        Formatting
    ************************************/


    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = "";
            for (i = 0; i < length; i++) {
                output += array[i] instanceof Function ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {

        if (!m.isValid()) {
            return m.lang().invalidDate();
        }

        format = expandFormat(format, m.lang());

        if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
        }

        return formatFunctions[format](m);
    }

    function expandFormat(format, lang) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return lang.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }


    /************************************
        Parsing
    ************************************/


    // get the regex to find the next token
    function getParseRegexForToken(token, config) {
        var a, strict = config._strict;
        switch (token) {
        case 'Q':
            return parseTokenOneDigit;
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
        case 'GGGG':
        case 'gggg':
            return strict ? parseTokenFourDigits : parseTokenOneToFourDigits;
        case 'Y':
        case 'G':
        case 'g':
            return parseTokenSignedNumber;
        case 'YYYYYY':
        case 'YYYYY':
        case 'GGGGG':
        case 'ggggg':
            return strict ? parseTokenSixDigits : parseTokenOneToSixDigits;
        case 'S':
            if (strict) { return parseTokenOneDigit; }
            /* falls through */
        case 'SS':
            if (strict) { return parseTokenTwoDigits; }
            /* falls through */
        case 'SSS':
            if (strict) { return parseTokenThreeDigits; }
            /* falls through */
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'dd':
        case 'ddd':
        case 'dddd':
            return parseTokenWord;
        case 'a':
        case 'A':
            return getLangDefinition(config._l)._meridiemParse;
        case 'X':
            return parseTokenTimestampMs;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'SSSS':
            return parseTokenDigits;
        case 'MM':
        case 'DD':
        case 'YY':
        case 'GG':
        case 'gg':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'ww':
        case 'WW':
            return strict ? parseTokenTwoDigits : parseTokenOneOrTwoDigits;
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
        case 'w':
        case 'W':
        case 'e':
        case 'E':
            return parseTokenOneOrTwoDigits;
        case 'Do':
            return parseTokenOrdinal;
        default :
            a = new RegExp(regexpEscape(unescapeFormat(token.replace('\\', '')), "i"));
            return a;
        }
    }

    function timezoneMinutesFromString(string) {
        string = string || "";
        var possibleTzMatches = (string.match(parseTokenTimezone) || []),
            tzChunk = possibleTzMatches[possibleTzMatches.length - 1] || [],
            parts = (tzChunk + '').match(parseTimezoneChunker) || ['-', 0, 0],
            minutes = +(parts[1] * 60) + toInt(parts[2]);

        return parts[0] === '+' ? -minutes : minutes;
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;

        switch (token) {
        // QUARTER
        case 'Q':
            if (input != null) {
                datePartArray[MONTH] = (toInt(input) - 1) * 3;
            }
            break;
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            if (input != null) {
                datePartArray[MONTH] = toInt(input) - 1;
            }
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            a = getLangDefinition(config._l).monthsParse(input);
            // if we didn't find a month name, mark the date as invalid.
            if (a != null) {
                datePartArray[MONTH] = a;
            } else {
                config._pf.invalidMonth = input;
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DD
        case 'DD' :
            if (input != null) {
                datePartArray[DATE] = toInt(input);
            }
            break;
        case 'Do' :
            if (input != null) {
                datePartArray[DATE] = toInt(parseInt(input, 10));
            }
            break;
        // DAY OF YEAR
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            if (input != null) {
                config._dayOfYear = toInt(input);
            }

            break;
        // YEAR
        case 'YY' :
            datePartArray[YEAR] = moment.parseTwoDigitYear(input);
            break;
        case 'YYYY' :
        case 'YYYYY' :
        case 'YYYYYY' :
            datePartArray[YEAR] = toInt(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config._isPm = getLangDefinition(config._l).isPM(input);
            break;
        // 24 HOUR
        case 'H' : // fall through to hh
        case 'HH' : // fall through to hh
        case 'h' : // fall through to hh
        case 'hh' :
            datePartArray[HOUR] = toInt(input);
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[MINUTE] = toInt(input);
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[SECOND] = toInt(input);
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
        case 'SSSS' :
            datePartArray[MILLISECOND] = toInt(('0.' + input) * 1000);
            break;
        // UNIX TIMESTAMP WITH MS
        case 'X':
            config._d = new Date(parseFloat(input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config._useUTC = true;
            config._tzm = timezoneMinutesFromString(input);
            break;
        // WEEKDAY - human
        case 'dd':
        case 'ddd':
        case 'dddd':
            a = getLangDefinition(config._l).weekdaysParse(input);
            // if we didn't get a weekday name, mark the date as invalid
            if (a != null) {
                config._w = config._w || {};
                config._w['d'] = a;
            } else {
                config._pf.invalidWeekday = input;
            }
            break;
        // WEEK, WEEK DAY - numeric
        case 'w':
        case 'ww':
        case 'W':
        case 'WW':
        case 'd':
        case 'e':
        case 'E':
            token = token.substr(0, 1);
            /* falls through */
        case 'gggg':
        case 'GGGG':
        case 'GGGGG':
            token = token.substr(0, 2);
            if (input) {
                config._w = config._w || {};
                config._w[token] = toInt(input);
            }
            break;
        case 'gg':
        case 'GG':
            config._w = config._w || {};
            config._w[token] = moment.parseTwoDigitYear(input);
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, lang;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = dfl(w.GG, config._a[YEAR], weekOfYear(moment(), 1, 4).year);
            week = dfl(w.W, 1);
            weekday = dfl(w.E, 1);
        } else {
            lang = getLangDefinition(config._l);
            dow = lang._week.dow;
            doy = lang._week.doy;

            weekYear = dfl(w.gg, config._a[YEAR], weekOfYear(moment(), dow, doy).year);
            week = dfl(w.w, 1);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < dow) {
                    ++week;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        temp = dayOfYearFromWeeks(weekYear, week, weekday, doy, dow);

        config._a[YEAR] = temp.year;
        config._dayOfYear = temp.dayOfYear;
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromConfig(config) {
        var i, date, input = [], currentDate, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear) {
            yearToUse = dfl(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse)) {
                config._pf._overflowDayOfYear = true;
            }

            date = makeUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        config._d = (config._useUTC ? makeUTCDate : makeDate).apply(null, input);
        // Apply timezone offset from input. The actual zone can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() + config._tzm);
        }
    }

    function dateFromObject(config) {
        var normalizedInput;

        if (config._d) {
            return;
        }

        normalizedInput = normalizeObjectUnits(config._i);
        config._a = [
            normalizedInput.year,
            normalizedInput.month,
            normalizedInput.day,
            normalizedInput.hour,
            normalizedInput.minute,
            normalizedInput.second,
            normalizedInput.millisecond
        ];

        dateFromConfig(config);
    }

    function currentDateArray(config) {
        var now = new Date();
        if (config._useUTC) {
            return [
                now.getUTCFullYear(),
                now.getUTCMonth(),
                now.getUTCDate()
            ];
        } else {
            return [now.getFullYear(), now.getMonth(), now.getDate()];
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(config) {

        if (config._f === moment.ISO_8601) {
            parseISO(config);
            return;
        }

        config._a = [];
        config._pf.empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var lang = getLangDefinition(config._l),
            string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, lang).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    config._pf.unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    config._pf.empty = false;
                }
                else {
                    config._pf.unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                config._pf.unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        config._pf.charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            config._pf.unusedInput.push(string);
        }

        // handle am pm
        if (config._isPm && config._a[HOUR] < 12) {
            config._a[HOUR] += 12;
        }
        // if is 12 am, change hours to 0
        if (config._isPm === false && config._a[HOUR] === 12) {
            config._a[HOUR] = 0;
        }

        dateFromConfig(config);
        checkOverflow(config);
    }

    function unescapeFormat(s) {
        return s.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        });
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function regexpEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            config._pf.invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = extend({}, config);
            tempConfig._pf = defaultParsingFlags();
            tempConfig._f = config._f[i];
            makeDateFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += tempConfig._pf.charsLeftOver;

            //or tokens
            currentScore += tempConfig._pf.unusedTokens.length * 10;

            tempConfig._pf.score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    // date from iso format
    function parseISO(config) {
        var i, l,
            string = config._i,
            match = isoRegex.exec(string);

        if (match) {
            config._pf.iso = true;
            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(string)) {
                    // match[5] should be "T" or undefined
                    config._f = isoDates[i][0] + (match[6] || " ");
                    break;
                }
            }
            for (i = 0, l = isoTimes.length; i < l; i++) {
                if (isoTimes[i][1].exec(string)) {
                    config._f += isoTimes[i][0];
                    break;
                }
            }
            if (string.match(parseTokenTimezone)) {
                config._f += "Z";
            }
            makeDateFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function makeDateFromString(config) {
        parseISO(config);
        if (config._isValid === false) {
            delete config._isValid;
            moment.createFromInputFallback(config);
        }
    }

    function makeDateFromInput(config) {
        var input = config._i,
            matched = aspNetJsonRegex.exec(input);

        if (input === undefined) {
            config._d = new Date();
        } else if (matched) {
            config._d = new Date(+matched[1]);
        } else if (typeof input === 'string') {
            makeDateFromString(config);
        } else if (isArray(input)) {
            config._a = input.slice(0);
            dateFromConfig(config);
        } else if (isDate(input)) {
            config._d = new Date(+input);
        } else if (typeof(input) === 'object') {
            dateFromObject(config);
        } else if (typeof(input) === 'number') {
            // from milliseconds
            config._d = new Date(input);
        } else {
            moment.createFromInputFallback(config);
        }
    }

    function makeDate(y, m, d, h, M, s, ms) {
        //can't just apply() to create a date:
        //http://stackoverflow.com/questions/181348/instantiating-a-javascript-object-by-calling-prototype-constructor-apply
        var date = new Date(y, m, d, h, M, s, ms);

        //the date constructor doesn't accept years < 1970
        if (y < 1970) {
            date.setFullYear(y);
        }
        return date;
    }

    function makeUTCDate(y) {
        var date = new Date(Date.UTC.apply(null, arguments));
        if (y < 1970) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    function parseWeekday(input, language) {
        if (typeof input === 'string') {
            if (!isNaN(input)) {
                input = parseInt(input, 10);
            }
            else {
                input = language.weekdaysParse(input);
                if (typeof input !== 'number') {
                    return null;
                }
            }
        }
        return input;
    }

    /************************************
        Relative Time
    ************************************/


    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, lang) {
        return lang.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime(milliseconds, withoutSuffix, lang) {
        var seconds = round(Math.abs(milliseconds) / 1000),
            minutes = round(seconds / 60),
            hours = round(minutes / 60),
            days = round(hours / 24),
            years = round(days / 365),
            args = seconds < relativeTimeThresholds.s  && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < relativeTimeThresholds.m && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < relativeTimeThresholds.h && ['hh', hours] ||
                days === 1 && ['d'] ||
                days <= relativeTimeThresholds.dd && ['dd', days] ||
                days <= relativeTimeThresholds.dm && ['M'] ||
                days < relativeTimeThresholds.dy && ['MM', round(days / 30)] ||
                years === 1 && ['y'] || ['yy', years];
        args[2] = withoutSuffix;
        args[3] = milliseconds > 0;
        args[4] = lang;
        return substituteTimeAgo.apply({}, args);
    }


    /************************************
        Week of Year
    ************************************/


    // firstDayOfWeek       0 = sun, 6 = sat
    //                      the day of the week that starts the week
    //                      (usually sunday or monday)
    // firstDayOfWeekOfYear 0 = sun, 6 = sat
    //                      the first week is the week that contains the first
    //                      of this day of the week
    //                      (eg. ISO weeks use thursday (4))
    function weekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek,
            daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(),
            adjustedMoment;


        if (daysToDayOfWeek > end) {
            daysToDayOfWeek -= 7;
        }

        if (daysToDayOfWeek < end - 7) {
            daysToDayOfWeek += 7;
        }

        adjustedMoment = moment(mom).add('d', daysToDayOfWeek);
        return {
            week: Math.ceil(adjustedMoment.dayOfYear() / 7),
            year: adjustedMoment.year()
        };
    }

    //http://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, firstDayOfWeekOfYear, firstDayOfWeek) {
        var d = makeUTCDate(year, 0, 1).getUTCDay(), daysToAdd, dayOfYear;

        d = d === 0 ? 7 : d;
        weekday = weekday != null ? weekday : firstDayOfWeek;
        daysToAdd = firstDayOfWeek - d + (d > firstDayOfWeekOfYear ? 7 : 0) - (d < firstDayOfWeek ? 7 : 0);
        dayOfYear = 7 * (week - 1) + (weekday - firstDayOfWeek) + daysToAdd + 1;

        return {
            year: dayOfYear > 0 ? year : year - 1,
            dayOfYear: dayOfYear > 0 ?  dayOfYear : daysInYear(year - 1) + dayOfYear
        };
    }

    /************************************
        Top Level Functions
    ************************************/

    function makeMoment(config) {
        var input = config._i,
            format = config._f;

        if (input === null || (format === undefined && input === '')) {
            return moment.invalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = getLangDefinition().preparse(input);
        }

        if (moment.isMoment(input)) {
            config = cloneMoment(input);

            config._d = new Date(+input._d);
        } else if (format) {
            if (isArray(format)) {
                makeDateFromStringAndArray(config);
            } else {
                makeDateFromStringAndFormat(config);
            }
        } else {
            makeDateFromInput(config);
        }

        return new Moment(config);
    }

    moment = function (input, format, lang, strict) {
        var c;

        if (typeof(lang) === "boolean") {
            strict = lang;
            lang = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._i = input;
        c._f = format;
        c._l = lang;
        c._strict = strict;
        c._isUTC = false;
        c._pf = defaultParsingFlags();

        return makeMoment(c);
    };

    moment.suppressDeprecationWarnings = false;

    moment.createFromInputFallback = deprecate(
            "moment construction falls back to js Date. This is " +
            "discouraged and will be removed in upcoming major " +
            "release. Please refer to " +
            "https://github.com/moment/moment/issues/1407 for more info.",
            function (config) {
        config._d = new Date(config._i);
    });

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return moment();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    moment.min = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    };

    moment.max = function () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    };

    // creating with utc
    moment.utc = function (input, format, lang, strict) {
        var c;

        if (typeof(lang) === "boolean") {
            strict = lang;
            lang = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c = {};
        c._isAMomentObject = true;
        c._useUTC = true;
        c._isUTC = true;
        c._l = lang;
        c._i = input;
        c._f = format;
        c._strict = strict;
        c._pf = defaultParsingFlags();

        return makeMoment(c).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            parseIso;

        if (moment.isDuration(input)) {
            duration = {
                ms: input._milliseconds,
                d: input._days,
                M: input._months
            };
        } else if (typeof input === 'number') {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetTimeSpanJsonRegex.exec(input))) {
            sign = (match[1] === "-") ? -1 : 1;
            duration = {
                y: 0,
                d: toInt(match[DATE]) * sign,
                h: toInt(match[HOUR]) * sign,
                m: toInt(match[MINUTE]) * sign,
                s: toInt(match[SECOND]) * sign,
                ms: toInt(match[MILLISECOND]) * sign
            };
        } else if (!!(match = isoDurationRegex.exec(input))) {
            sign = (match[1] === "-") ? -1 : 1;
            parseIso = function (inp) {
                // We'd normally use ~~inp for this, but unfortunately it also
                // converts floats to ints.
                // inp may be undefined, so careful calling replace on it.
                var res = inp && parseFloat(inp.replace(',', '.'));
                // apply sign while we're at it
                return (isNaN(res) ? 0 : res) * sign;
            };
            duration = {
                y: parseIso(match[2]),
                M: parseIso(match[3]),
                d: parseIso(match[4]),
                h: parseIso(match[5]),
                m: parseIso(match[6]),
                s: parseIso(match[7]),
                w: parseIso(match[8])
            };
        }

        ret = new Duration(duration);

        if (moment.isDuration(input) && input.hasOwnProperty('_lang')) {
            ret._lang = input._lang;
        }

        return ret;
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // constant that refers to the ISO standard
    moment.ISO_8601 = function () {};

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    moment.momentProperties = momentProperties;

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    moment.updateOffset = function () {};

    // This function allows you to set a threshold for relative time strings
    moment.relativeTimeThreshold = function(threshold, limit) {
      if (relativeTimeThresholds[threshold] === undefined) {
        return false;
      }
      relativeTimeThresholds[threshold] = limit;
      return true;
    };

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    moment.lang = function (key, values) {
        var r;
        if (!key) {
            return moment.fn._lang._abbr;
        }
        if (values) {
            loadLang(normalizeLanguage(key), values);
        } else if (values === null) {
            unloadLang(key);
            key = 'en';
        } else if (!languages[key]) {
            getLangDefinition(key);
        }
        r = moment.duration.fn._lang = moment.fn._lang = getLangDefinition(key);
        return r._abbr;
    };

    // returns language data
    moment.langData = function (key) {
        if (key && key._lang && key._lang._abbr) {
            key = key._lang._abbr;
        }
        return getLangDefinition(key);
    };

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment ||
            (obj != null &&  obj.hasOwnProperty('_isAMomentObject'));
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    for (i = lists.length - 1; i >= 0; --i) {
        makeList(lists[i]);
    }

    moment.normalizeUnits = function (units) {
        return normalizeUnits(units);
    };

    moment.invalid = function (flags) {
        var m = moment.utc(NaN);
        if (flags != null) {
            extend(m._pf, flags);
        }
        else {
            m._pf.userInvalidated = true;
        }

        return m;
    };

    moment.parseZone = function () {
        return moment.apply(null, arguments).parseZone();
    };

    moment.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    /************************************
        Moment Prototype
    ************************************/


    extend(moment.fn = Moment.prototype, {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d + ((this._offset || 0) * 60000);
        },

        unix : function () {
            return Math.floor(+this / 1000);
        },

        toString : function () {
            return this.clone().lang('en').format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
        },

        toDate : function () {
            return this._offset ? new Date(+this) : this._d;
        },

        toISOString : function () {
            var m = moment(this).utc();
            if (0 < m.year() && m.year() <= 9999) {
                return formatMoment(m, 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            } else {
                return formatMoment(m, 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]');
            }
        },

        toArray : function () {
            var m = this;
            return [
                m.year(),
                m.month(),
                m.date(),
                m.hours(),
                m.minutes(),
                m.seconds(),
                m.milliseconds()
            ];
        },

        isValid : function () {
            return isValid(this);
        },

        isDSTShifted : function () {

            if (this._a) {
                return this.isValid() && compareArrays(this._a, (this._isUTC ? moment.utc(this._a) : moment(this._a)).toArray()) > 0;
            }

            return false;
        },

        parsingFlags : function () {
            return extend({}, this._pf);
        },

        invalidAt: function () {
            return this._pf.overflow;
        },

        utc : function () {
            return this.zone(0);
        },

        local : function () {
            this.zone(0);
            this._isUTC = false;
            return this;
        },

        format : function (inputString) {
            var output = formatMoment(this, inputString || moment.defaultFormat);
            return this.lang().postformat(output);
        },

        add : function (input, val) {
            var dur;
            // switch args to support add('s', 1) and add(1, 's')
            if (typeof input === 'string' && typeof val === 'string') {
                dur = moment.duration(isNaN(+val) ? +input : +val, isNaN(+val) ? val : input);
            } else if (typeof input === 'string') {
                dur = moment.duration(+val, input);
            } else {
                dur = moment.duration(input, val);
            }
            addOrSubtractDurationFromMoment(this, dur, 1);
            return this;
        },

        subtract : function (input, val) {
            var dur;
            // switch args to support subtract('s', 1) and subtract(1, 's')
            if (typeof input === 'string' && typeof val === 'string') {
                dur = moment.duration(isNaN(+val) ? +input : +val, isNaN(+val) ? val : input);
            } else if (typeof input === 'string') {
                dur = moment.duration(+val, input);
            } else {
                dur = moment.duration(input, val);
            }
            addOrSubtractDurationFromMoment(this, dur, -1);
            return this;
        },

        diff : function (input, units, asFloat) {
            var that = makeAs(input, this),
                zoneDiff = (this.zone() - that.zone()) * 6e4,
                diff, output;

            units = normalizeUnits(units);

            if (units === 'year' || units === 'month') {
                // average number of days in the months in the given dates
                diff = (this.daysInMonth() + that.daysInMonth()) * 432e5; // 24 * 60 * 60 * 1000 / 2
                // difference in months
                output = ((this.year() - that.year()) * 12) + (this.month() - that.month());
                // adjust by taking difference in days, average number of days
                // and dst in the given months.
                output += ((this - moment(this).startOf('month')) -
                        (that - moment(that).startOf('month'))) / diff;
                // same as above but with zones, to negate all dst
                output -= ((this.zone() - moment(this).startOf('month').zone()) -
                        (that.zone() - moment(that).startOf('month').zone())) * 6e4 / diff;
                if (units === 'year') {
                    output = output / 12;
                }
            } else {
                diff = (this - that);
                output = units === 'second' ? diff / 1e3 : // 1000
                    units === 'minute' ? diff / 6e4 : // 1000 * 60
                    units === 'hour' ? diff / 36e5 : // 1000 * 60 * 60
                    units === 'day' ? (diff - zoneDiff) / 864e5 : // 1000 * 60 * 60 * 24, negate dst
                    units === 'week' ? (diff - zoneDiff) / 6048e5 : // 1000 * 60 * 60 * 24 * 7, negate dst
                    diff;
            }
            return asFloat ? output : absRound(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration(this.diff(time)).lang(this.lang()._abbr).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function (time) {
            // We want to compare the start of today, vs this.
            // Getting start-of-today depends on whether we're zone'd or not.
            var now = time || moment(),
                sod = makeAs(now, this).startOf('day'),
                diff = this.diff(sod, 'days', true),
                format = diff < -6 ? 'sameElse' :
                    diff < -1 ? 'lastWeek' :
                    diff < 0 ? 'lastDay' :
                    diff < 1 ? 'sameDay' :
                    diff < 2 ? 'nextDay' :
                    diff < 7 ? 'nextWeek' : 'sameElse';
            return this.format(this.lang().calendar(format, this));
        },

        isLeapYear : function () {
            return isLeapYear(this.year());
        },

        isDST : function () {
            return (this.zone() < this.clone().month(0).zone() ||
                this.zone() < this.clone().month(5).zone());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            if (input != null) {
                input = parseWeekday(input, this.lang());
                return this.add({ d : input - day });
            } else {
                return day;
            }
        },

        month : makeAccessor('Month', true),

        startOf: function (units) {
            units = normalizeUnits(units);
            // the following switch intentionally omits break keywords
            // to utilize falling through the cases.
            switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
                /* falls through */
            }

            // weeks are a special case
            if (units === 'week') {
                this.weekday(0);
            } else if (units === 'isoWeek') {
                this.isoWeekday(1);
            }

            // quarters are also special
            if (units === 'quarter') {
                this.month(Math.floor(this.month() / 3) * 3);
            }

            return this;
        },

        endOf: function (units) {
            units = normalizeUnits(units);
            return this.startOf(units).add((units === 'isoWeek' ? 'week' : units), 1).subtract('ms', 1);
        },

        isAfter: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) > +moment(input).startOf(units);
        },

        isBefore: function (input, units) {
            units = typeof units !== 'undefined' ? units : 'millisecond';
            return +this.clone().startOf(units) < +moment(input).startOf(units);
        },

        isSame: function (input, units) {
            units = units || 'ms';
            return +this.clone().startOf(units) === +makeAs(input, this).startOf(units);
        },

        min: deprecate(
                 "moment().min is deprecated, use moment.min instead. https://github.com/moment/moment/issues/1548",
                 function (other) {
                     other = moment.apply(null, arguments);
                     return other < this ? this : other;
                 }
         ),

        max: deprecate(
                "moment().max is deprecated, use moment.max instead. https://github.com/moment/moment/issues/1548",
                function (other) {
                    other = moment.apply(null, arguments);
                    return other > this ? this : other;
                }
        ),

        // keepTime = true means only change the timezone, without affecting
        // the local hour. So 5:31:26 +0300 --[zone(2, true)]--> 5:31:26 +0200
        // It is possible that 5:31:26 doesn't exist int zone +0200, so we
        // adjust the time as needed, to be valid.
        //
        // Keeping the time actually adds/subtracts (one hour)
        // from the actual represented time. That is why we call updateOffset
        // a second time. In case it wants us to change the offset again
        // _changeInProgress == true case, then we have to adjust, because
        // there is no such time in the given timezone.
        zone : function (input, keepTime) {
            var offset = this._offset || 0;
            if (input != null) {
                if (typeof input === "string") {
                    input = timezoneMinutesFromString(input);
                }
                if (Math.abs(input) < 16) {
                    input = input * 60;
                }
                this._offset = input;
                this._isUTC = true;
                if (offset !== input) {
                    if (!keepTime || this._changeInProgress) {
                        addOrSubtractDurationFromMoment(this,
                                moment.duration(offset - input, 'm'), 1, false);
                    } else if (!this._changeInProgress) {
                        this._changeInProgress = true;
                        moment.updateOffset(this, true);
                        this._changeInProgress = null;
                    }
                }
            } else {
                return this._isUTC ? offset : this._d.getTimezoneOffset();
            }
            return this;
        },

        zoneAbbr : function () {
            return this._isUTC ? "UTC" : "";
        },

        zoneName : function () {
            return this._isUTC ? "Coordinated Universal Time" : "";
        },

        parseZone : function () {
            if (this._tzm) {
                this.zone(this._tzm);
            } else if (typeof this._i === 'string') {
                this.zone(this._i);
            }
            return this;
        },

        hasAlignedHourOffset : function (input) {
            if (!input) {
                input = 0;
            }
            else {
                input = moment(input).zone();
            }

            return (this.zone() - input) % 60 === 0;
        },

        daysInMonth : function () {
            return daysInMonth(this.year(), this.month());
        },

        dayOfYear : function (input) {
            var dayOfYear = round((moment(this).startOf('day') - moment(this).startOf('year')) / 864e5) + 1;
            return input == null ? dayOfYear : this.add("d", (input - dayOfYear));
        },

        quarter : function (input) {
            return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
        },

        weekYear : function (input) {
            var year = weekOfYear(this, this.lang()._week.dow, this.lang()._week.doy).year;
            return input == null ? year : this.add("y", (input - year));
        },

        isoWeekYear : function (input) {
            var year = weekOfYear(this, 1, 4).year;
            return input == null ? year : this.add("y", (input - year));
        },

        week : function (input) {
            var week = this.lang().week(this);
            return input == null ? week : this.add("d", (input - week) * 7);
        },

        isoWeek : function (input) {
            var week = weekOfYear(this, 1, 4).week;
            return input == null ? week : this.add("d", (input - week) * 7);
        },

        weekday : function (input) {
            var weekday = (this.day() + 7 - this.lang()._week.dow) % 7;
            return input == null ? weekday : this.add("d", input - weekday);
        },

        isoWeekday : function (input) {
            // behaves the same as moment#day except
            // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
            // as a setter, sunday should belong to the previous week.
            return input == null ? this.day() || 7 : this.day(this.day() % 7 ? input : input - 7);
        },

        isoWeeksInYear : function () {
            return weeksInYear(this.year(), 1, 4);
        },

        weeksInYear : function () {
            var weekInfo = this._lang._week;
            return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units]();
        },

        set : function (units, value) {
            units = normalizeUnits(units);
            if (typeof this[units] === 'function') {
                this[units](value);
            }
            return this;
        },

        // If passed a language key, it will set the language for this
        // instance.  Otherwise, it will return the language configuration
        // variables for this instance.
        lang : function (key) {
            if (key === undefined) {
                return this._lang;
            } else {
                this._lang = getLangDefinition(key);
                return this;
            }
        }
    });

    function rawMonthSetter(mom, value) {
        var dayOfMonth;

        // TODO: Move this out of here!
        if (typeof value === 'string') {
            value = mom.lang().monthsParse(value);
            // TODO: Another silent failure?
            if (typeof value !== 'number') {
                return mom;
            }
        }

        dayOfMonth = Math.min(mom.date(),
                daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function rawGetter(mom, unit) {
        return mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]();
    }

    function rawSetter(mom, unit, value) {
        if (unit === 'Month') {
            return rawMonthSetter(mom, value);
        } else {
            return mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
        }
    }

    function makeAccessor(unit, keepTime) {
        return function (value) {
            if (value != null) {
                rawSetter(this, unit, value);
                moment.updateOffset(this, keepTime);
                return this;
            } else {
                return rawGetter(this, unit);
            }
        };
    }

    moment.fn.millisecond = moment.fn.milliseconds = makeAccessor('Milliseconds', false);
    moment.fn.second = moment.fn.seconds = makeAccessor('Seconds', false);
    moment.fn.minute = moment.fn.minutes = makeAccessor('Minutes', false);
    // Setting the hour should keep the time, because the user explicitly
    // specified which hour he wants. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    moment.fn.hour = moment.fn.hours = makeAccessor('Hours', true);
    // moment.fn.month is defined separately
    moment.fn.date = makeAccessor('Date', true);
    moment.fn.dates = deprecate("dates accessor is deprecated. Use date instead.", makeAccessor('Date', true));
    moment.fn.year = makeAccessor('FullYear', true);
    moment.fn.years = deprecate("years accessor is deprecated. Use year instead.", makeAccessor('FullYear', true));

    // add plural methods
    moment.fn.days = moment.fn.day;
    moment.fn.months = moment.fn.month;
    moment.fn.weeks = moment.fn.week;
    moment.fn.isoWeeks = moment.fn.isoWeek;
    moment.fn.quarters = moment.fn.quarter;

    // add aliased format methods
    moment.fn.toJSON = moment.fn.toISOString;

    /************************************
        Duration Prototype
    ************************************/


    extend(moment.duration.fn = Duration.prototype, {

        _bubble : function () {
            var milliseconds = this._milliseconds,
                days = this._days,
                months = this._months,
                data = this._data,
                seconds, minutes, hours, years;

            // The following code bubbles up values, see the tests for
            // examples of what that means.
            data.milliseconds = milliseconds % 1000;

            seconds = absRound(milliseconds / 1000);
            data.seconds = seconds % 60;

            minutes = absRound(seconds / 60);
            data.minutes = minutes % 60;

            hours = absRound(minutes / 60);
            data.hours = hours % 24;

            days += absRound(hours / 24);
            data.days = days % 30;

            months += absRound(days / 30);
            data.months = months % 12;

            years = absRound(months / 12);
            data.years = years;
        },

        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6;
        },

        humanize : function (withSuffix) {
            var difference = +this,
                output = relativeTime(difference, !withSuffix, this.lang());

            if (withSuffix) {
                output = this.lang().pastFuture(difference, output);
            }

            return this.lang().postformat(output);
        },

        add : function (input, val) {
            // supports only 2.0-style add(1, 's') or add(moment)
            var dur = moment.duration(input, val);

            this._milliseconds += dur._milliseconds;
            this._days += dur._days;
            this._months += dur._months;

            this._bubble();

            return this;
        },

        subtract : function (input, val) {
            var dur = moment.duration(input, val);

            this._milliseconds -= dur._milliseconds;
            this._days -= dur._days;
            this._months -= dur._months;

            this._bubble();

            return this;
        },

        get : function (units) {
            units = normalizeUnits(units);
            return this[units.toLowerCase() + 's']();
        },

        as : function (units) {
            units = normalizeUnits(units);
            return this['as' + units.charAt(0).toUpperCase() + units.slice(1) + 's']();
        },

        lang : moment.fn.lang,

        toIsoString : function () {
            // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
            var years = Math.abs(this.years()),
                months = Math.abs(this.months()),
                days = Math.abs(this.days()),
                hours = Math.abs(this.hours()),
                minutes = Math.abs(this.minutes()),
                seconds = Math.abs(this.seconds() + this.milliseconds() / 1000);

            if (!this.asSeconds()) {
                // this is the same as C#'s (Noda) and python (isodate)...
                // but not other JS (goog.date)
                return 'P0D';
            }

            return (this.asSeconds() < 0 ? '-' : '') +
                'P' +
                (years ? years + 'Y' : '') +
                (months ? months + 'M' : '') +
                (days ? days + 'D' : '') +
                ((hours || minutes || seconds) ? 'T' : '') +
                (hours ? hours + 'H' : '') +
                (minutes ? minutes + 'M' : '') +
                (seconds ? seconds + 'S' : '');
        }
    });

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    function makeDurationAsGetter(name, factor) {
        moment.duration.fn['as' + name] = function () {
            return +this / factor;
        };
    }

    for (i in unitMillisecondFactors) {
        if (unitMillisecondFactors.hasOwnProperty(i)) {
            makeDurationAsGetter(i, unitMillisecondFactors[i]);
            makeDurationGetter(i.toLowerCase());
        }
    }

    makeDurationAsGetter('Weeks', 6048e5);
    moment.duration.fn.asMonths = function () {
        return (+this - this.years() * 31536e6) / 2592e6 + this.years() * 12;
    };


    /************************************
        Default Lang
    ************************************/


    // Set default language, other languages will inherit from English.
    moment.lang('en', {
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    /* EMBED_LANGUAGES */

    /************************************
        Exposing Moment
    ************************************/

    function makeGlobal(shouldDeprecate) {
        /*global ender:false */
        if (typeof ender !== 'undefined') {
            return;
        }
        oldGlobalMoment = globalScope.moment;
        if (shouldDeprecate) {
            globalScope.moment = deprecate(
                    "Accessing Moment through the global scope is " +
                    "deprecated, and will be removed in an upcoming " +
                    "release.",
                    moment);
        } else {
            globalScope.moment = moment;
        }
    }

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
    } else if (typeof define === "function" && define.amd) {
        define("moment", function (require, exports, module) {
            if (module.config && module.config() && module.config().noGlobal === true) {
                // release the global variable
                globalScope.moment = oldGlobalMoment;
            }

            return moment;
        });
        makeGlobal(true);
    } else {
        makeGlobal();
    }
}).call(this);

});

require.register("johntron~moment-timezone@0f4b9df99d9f6212c2036f5ae6f74b240f289381", function (exports, module) {
var moment = module.exports = require("johntron~moment-timezone@0f4b9df99d9f6212c2036f5ae6f74b240f289381/moment-timezone.js");
moment.tz.load(require('johntron~moment-timezone@0f4b9df99d9f6212c2036f5ae6f74b240f289381/data/packed/latest.json'));

});

require.register("johntron~moment-timezone@0f4b9df99d9f6212c2036f5ae6f74b240f289381/moment-timezone.js", function (exports, module) {
//! moment-timezone.js
//! version : 0.2.0
//! author : Tim Wood
//! license : MIT
//! github.com/moment/moment-timezone

(function (root, factory) {
	"use strict";

	/*global define*/
	if (typeof define === 'function' && define.amd) {
		define(['moment'], factory);                 // AMD
	} else if (typeof exports === 'object') {
		module.exports = factory(require('moment~moment@2.7.0')); // Node
	} else {
		factory(root.moment);                        // Browser
	}
}(this, function (moment) {
	"use strict";

	// Do not load moment-timezone a second time.
	if (moment.tz !== undefined) { return moment; }

	var VERSION = "0.2.0",
		zones = {},
		links = {};

	/************************************
		Unpacking
	************************************/

	function charCodeToInt(charCode) {
		if (charCode > 96) {
			return charCode - 87;
		} else if (charCode > 64) {
			return charCode - 29;
		}
		return charCode - 48;
	}

	function unpackBase60(string) {
		var i = 0,
			parts = string.split('.'),
			whole = parts[0],
			fractional = parts[1] || '',
			multiplier = 1,
			num,
			out = 0,
			sign = 1;

		// handle negative numbers
		if (string.charCodeAt(0) === 45) {
			i = 1;
			sign = -1;
		}

		// handle digits before the decimal
		for (i; i < whole.length; i++) {
			num = charCodeToInt(whole.charCodeAt(i));
			out = 60 * out + num;
		}

		// handle digits after the decimal
		for (i = 0; i < fractional.length; i++) {
			multiplier = multiplier / 60;
			num = charCodeToInt(fractional.charCodeAt(i));
			out += num * multiplier;
		}

		return out * sign;
	}

	function arrayToInt (array) {
		for (var i = 0; i < array.length; i++) {
			array[i] = unpackBase60(array[i]);
		}
	}

	function intToUntil (array, length) {
		for (var i = 0; i < length; i++) {
			array[i] = Math.round((array[i - 1] || 0) + (array[i] * 60000)); // minutes to milliseconds
		}

		array[length - 1] = Infinity;
	}

	function mapIndices (source, indices) {
		var out = [], i;

		for (i = 0; i < indices.length; i++) {
			out[i] = source[indices[i]];
		}

		return out;
	}

	function unpack (string) {
		var data = string.split('|'),
			offsets = data[2].split(' '),
			indices = data[3].split(''),
			untils  = data[4].split(' ');

		arrayToInt(offsets);
		arrayToInt(indices);
		arrayToInt(untils);

		intToUntil(untils, indices.length);

		return {
			name    : data[0],
			abbrs   : mapIndices(data[1].split(' '), indices),
			offsets : mapIndices(offsets, indices),
			untils  : untils
		};
	}

	/************************************
		Zone object
	************************************/

	function Zone (packedString) {
		if (packedString) {
			this._set(unpack(packedString));
		}
	}

	Zone.prototype = {
		_set : function (unpacked) {
			this.name    = unpacked.name;
			this.abbrs   = unpacked.abbrs;
			this.untils  = unpacked.untils;
			this.offsets = unpacked.offsets;
		},

		_index : function (timestamp) {
			var target = +timestamp,
				untils = this.untils,
				i;

			for (i = 0; i < untils.length; i++) {
				if (target < untils[i]) {
					return i;
				}
			}
		},

		parse : function (timestamp) {
			var target  = +timestamp,
				offsets = this.offsets,
				untils  = this.untils,
				max     = untils.length - 1,
				offset, offsetNext, offsetPrev, i;

			for (i = 0; i < max; i++) {
				offset     = offsets[i];
				offsetNext = offsets[i + 1];
				offsetPrev = offsets[i ? i - 1 : i];

				if (offset < offsetNext && tz.moveAmbiguousForward) {
					offset = offsetNext;
				} else if (offset > offsetPrev && tz.moveInvalidForward) {
					offset = offsetPrev;
				}

				if (target < untils[i] - (offset * 60000)) {
					return offsets[i];
				}
			}

			return offsets[max];
		},

		abbr : function (mom) {
			return this.abbrs[this._index(mom)];
		},

		offset : function (mom) {
			return this.offsets[this._index(mom)];
		}
	};

	/************************************
		Global Methods
	************************************/

	function normalizeName (name) {
		return (name || '').toLowerCase().replace(/\//g, '_');
	}

	function addZone (packed) {
		var i, zone, zoneName;

		if (typeof packed === "string") {
			packed = [packed];
		}

		for (i = 0; i < packed.length; i++) {
			zone = new Zone(packed[i]);
			zoneName = normalizeName(zone.name);
			zones[zoneName] = zone;
			upgradeLinksToZones(zoneName);
		}
	}

	function getZone (name) {
		return zones[normalizeName(name)] || null;
	}

	function getNames () {
		var i, out = [];

		for (i in zones) {
			if (zones.hasOwnProperty(i) && zones[i]) {
				out.push(zones[i].name);
			}
		}

		return out.sort();
	}

	function addLink (aliases) {
		var i, alias;

		if (typeof aliases === "string") {
			aliases = [aliases];
		}

		for (i = 0; i < aliases.length; i++) {
			alias = aliases[i].split('|');
			pushLink(alias[0], alias[1]);
			pushLink(alias[1], alias[0]);
		}
	}

	function upgradeLinksToZones (zoneName) {
		if (!links[zoneName]) {
			return;
		}

		var i,
			zone = zones[zoneName],
			linkNames = links[zoneName];

		for (i = 0; i < linkNames.length; i++) {
			copyZoneWithName(zone, linkNames[i]);
		}

		links[zoneName] = null;
	}

	function copyZoneWithName (zone, name) {
		var linkZone = zones[normalizeName(name)] = new Zone();
		linkZone._set(zone);
		linkZone.name = name;
	}

	function pushLink (zoneName, linkName) {
		zoneName = normalizeName(zoneName);

		if (zones[zoneName]) {
			copyZoneWithName(zones[zoneName], linkName);
		} else {
			links[zoneName] = links[zoneName] || [];
			links[zoneName].push(linkName);
		}
	}

	function loadData (data) {
		addZone(data.zones);
		addLink(data.links);
		tz.dataVersion = data.version;
	}

	function zoneExists (name) {
		if (!zoneExists.didShowError) {
			zoneExists.didShowError = true;
			if (typeof console !== 'undefined' && typeof console.error === 'function') {
				console.error("moment.tz.zoneExists('" + name + "') has been deprecated in favor of !moment.tz.zone('" + name + "')");
			}
		}
		return !!getZone(name);
	}

	function needsOffset (m) {
		return !!(m._a && (m._tzm === undefined));
	}

	function logError (message) {
		if (typeof console !== 'undefined' && typeof console.error === 'function') {
			console.error(message);
		}
	}

	/************************************
		moment.tz namespace
	************************************/

	function tz () {
		var args = Array.prototype.slice.call(arguments, 0, -1),
			name = arguments[arguments.length - 1],
			zone = getZone(name),
			out  = moment.utc.apply(null, args);

		if (zone && needsOffset(out)) {
			out.add('minutes', zone.parse(out));
		}

		out.tz(name);

		return out;
	}

	tz.version      = VERSION;
	tz.dataVersion  = '';
	tz._zones       = zones;
	tz._links       = links;
	tz.add          = addZone;
	tz.link         = addLink;
	tz.load         = loadData;
	tz.zone         = getZone;
	tz.zoneExists   = zoneExists; // deprecated in 0.1.0
	tz.names        = getNames;
	tz.Zone         = Zone;
	tz.unpack       = unpack;
	tz.unpackBase60 = unpackBase60;
	tz.needsOffset  = needsOffset;
	tz.moveInvalidForward   = true;
	tz.moveAmbiguousForward = false;

	/************************************
		Interface with Moment.js
	************************************/

	var fn = moment.fn;

	moment.tz = tz;

	moment.updateOffset = function (mom, keepTime) {
		var offset;
		if (mom._z) {
			offset = mom._z.offset(mom);
			if (Math.abs(offset) < 16) {
				offset = offset / 60;
			}
			mom.zone(offset, keepTime);
		}
	};

	fn.tz = function (name) {
		if (name) {
			this._z = getZone(name);
			if (this._z) {
				moment.updateOffset(this);
			} else {
				logError("Moment Timezone has no data for " + name + ". See http://momentjs.com/timezone/docs/#/data-loading/.");
			}
			return this;
		}
		if (this._z) { return this._z.name; }
	};

	function abbrWrap (old) {
		return function () {
			if (this._z) { return this._z.abbr(this); }
			return old.call(this);
		};
	}

	function resetZoneWrap (old) {
		return function () {
			this._z = null;
			return old.call(this);
		};
	}

	fn.zoneName = abbrWrap(fn.zoneName);
	fn.zoneAbbr = abbrWrap(fn.zoneAbbr);
	fn.utc      = resetZoneWrap(fn.utc);

	// Cloning a moment should include the _z property.
	moment.momentProperties._z = null;

	// INJECT DATA

	return moment;
}));

});

require.define("johntron~moment-timezone@0f4b9df99d9f6212c2036f5ae6f74b240f289381/data/packed/latest.json", {
	"version": "2014e",
	"zones": [
		"Africa/Abidjan|LMT GMT|g.8 0|01|-2ldXH.Q",
		"Africa/Accra|LMT GMT GHST|.Q 0 -k|0121212121212121|-26BbX.8 JrbX.8 MnE 1BAk MnE 1BAk MnE 1BAk MnE 1C0k MnE 1BAk MnE 1BAk MnE",
		"Africa/Addis_Ababa|ADMT EAT|-2z.k -30|01|-1lVCz.k",
		"Africa/Algiers|PMT WET WEST CET CEST|-9.l 0 -10 -10 -20|0121212121212121343431312123431213|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 DA0 Imo0 rd0 De0 9Xz0 1fb0 1ap0 16K0 2yo0 mEp0 hwL0 jxA0 11A0 dDd0 17b0 11B0 1cN0 2Dy0 1cN0 1fB0 1cL0",
		"Africa/Bamako|LMT GMT WAT|w 0 10|0121|-2ldXs RULs 144p0",
		"Africa/Bangui|LMT WAT|-1e.k -10|01|-2le1e.k",
		"Africa/Banjul|LMT BMT WAT GMT|16.A 16.A 10 0|0123|-2ldWR.o U0o0 1aALR.o",
		"Africa/Bissau|LMT WAT GMT|12.k 10 0|012|-2mFWV.E 2yQnV.E",
		"Africa/Blantyre|LMT CAT|-2k -20|01|-2GJek",
		"Africa/Brazzaville|LMT WAT|-11.8 -10|01|-2le11.8",
		"Africa/Bujumbura|CAT|-20|0|",
		"Africa/Cairo|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-1bIO0 vb0 1ip0 11z0 1iN0 1nz0 12p0 1pz0 10N0 1pz0 16p0 1jz0 s3d0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1WL0 rd0 1Rz0 wp0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1qL0 Xd0 1oL0 11d0 1oL0 11d0 1pb0 11d0 1oL0 11d0 1oL0 11d0 1ny0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 WL0 1qN0 Rb0 1wp0 On0 1zd0 Lz0 1EN0 Fb0 c10 8n0 8Nd0 gL0 e10 mn0 1o10 jz0 gN0 pb0 1qN0 dX0 e10 xz0 1o10 bb0 e10 An0 1o10 5z0 e10 FX0 1o10 2L0 e10 IL0 1C10 Lz0 1wp0 TX0 1qN0 WL0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0",
		"Africa/Casablanca|LMT WET WEST CET|u.k 0 -10 -10|012121212121212121312121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2gMnt.E 130Lt.E rb0 Dd0 dVb0 b6p0 TX0 EoB0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4mn0 SyN0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uo0 e00 DA0 11A0 rA0 e00 Jc0 WM0 m00 gM0 M00 WM0 jc0 e00 RA0 11A0 dA0 e00 Uo0 11A0 800 gM0 Xc0 11A0 5c0 e00 17A0 WM0 2o0 e00 1ao0 19A0 1g00 16M0 1iM0 1400 1lA0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qo0 1200 1kM0 14M0 1i00",
		"Africa/Ceuta|WET WEST CET CEST|0 -10 -10 -20|010101010101010101010232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-25KN0 11z0 drd0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1y7p0 LL0 gnd0 rz0 43d0 AL0 1Nd0 XX0 1Cp0 pz0 dEp0 4VB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Africa/Conakry|LMT GMT WAT|S.Q 0 10|0121|-2ldX5.8 RUL5.8 12U10",
		"Africa/Dakar|LMT WAT GMT|19.I 10 0|012|-2ldWO.g 1bBzO.g",
		"Africa/Dar_es_Salaam|LMT EAT BEAUT|-2B.8 -30 -2J|0121|-1yW2B.8 FnzB.8 vDAf",
		"Africa/Djibouti|LMT EAT|-2Q.A -30|01|-2mrCQ.A",
		"Africa/Douala|LMT WAT|-C.M -10|01|-2le0C.M",
		"Africa/El_Aaiun|LMT WAT WET WEST|Q.M 10 0 -10|0123232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1rDz7.c 1GVA7.c 6L0 AL0 1Nd0 XX0 1Cp0 pz0 1cBB0 AL0 1Nd0 wn0 1FB0 Db0 1zd0 Lz0 1Nf0 wM0 co0 go0 1o00 s00 dA0 vc0 11A0 A00 e00 y00 11A0 uo0 e00 DA0 11A0 rA0 e00 Jc0 WM0 m00 gM0 M00 WM0 jc0 e00 RA0 11A0 dA0 e00 Uo0 11A0 800 gM0 Xc0 11A0 5c0 e00 17A0 WM0 2o0 e00 1ao0 19A0 1g00 16M0 1iM0 1400 1lA0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qo0 1200 1kM0 14M0 1i00",
		"Africa/Freetown|FMT WAT SLST WAT SLST GMT|R 10 k 0 -10 0|0121212121212121213454545454545|-2hLb7 Ry07 MLk 1BAE MLk 1BcE MLk 1BcE MLk 1BcE MLk 1BAE MLk 1BcE MLk 1BcE MLk yGoE 10n0 AL0 1Nd0 AL0 1Nd0 AL0 1NB0 AL0 1Nd0 AL0 1Nd0 AL0",
		"Africa/Gaborone|SAST CAT CAST|-1u -20 -30|0121|-2GJdu 1CINu 1cL0",
		"Africa/Harare|LMT CAT|-24.c -20|01|-2GJe4.c",
		"Africa/Johannesburg|SAST SAST SAST|-1u -20 -30|012121|-2GJdu 1Ajdu 1cL0 1cN0 1cL0",
		"Africa/Juba|LMT CAT CAST EAT|-2a.8 -20 -30 -30|01212121212121212121212121212121213|-1yW2a.8 1zK0a.8 16L0 1iN0 17b0 1jd0 17b0 1ip0 17z0 1i10 17X0 1hB0 18n0 1hd0 19b0 1gp0 19z0 1iN0 17b0 1ip0 17z0 1i10 18n0 1hd0 18L0 1gN0 19b0 1gp0 19z0 1iN0 17z0 1i10 17X0 yGd0",
		"Africa/Kampala|LMT EAT BEAT BEAUT|-29.E -30 -2u -2J|01231|-1F3C9.E 3Dz9.E HNAu lTbJ",
		"Africa/Kigali|LMT CAT|-20.g -20|01|-1ode0.g",
		"Africa/Kinshasa|WAT|-10|0|",
		"Africa/Lagos|LMT WAT|-d.A -10|01|-22y0d.A",
		"Africa/Libreville|LMT WAT|-B.M -10|01|-2le0B.M",
		"Africa/Lome|GMT|0|0|",
		"Africa/Luanda|AOT WAT|-Q.4 -10|01|-2mG0Q.4",
		"Africa/Lusaka|LMT CAT|-1R.8 -20|01|-2GJdR.8",
		"Africa/Malabo|LMT GMT WAT|-z.8 0 -10|012|-2le0z.8 26uoz.8",
		"Africa/Maputo|LMT CAT|-2a.k -20|01|-2GJea.k",
		"Africa/Maseru|LMT SAST SAST|-1O -20 -30|0121|-2GJdO 1CINO 1cL0",
		"Africa/Mbabane|LMT SAST|-24.o -20|01|-2GJe4.o",
		"Africa/Mogadishu|EAT BEAT|-30 -2u|010|-1yW30 13iMu",
		"Africa/Monrovia|MMT LRT GMT|H.8 I.u 0|012|-23Lzg.Q 29s01.m",
		"Africa/Nairobi|LMT EAT BEAT BEAUT|-2r.g -30 -2u -2J|01231|-1F3Cr.g 3Dzr.g okMu MFXJ",
		"Africa/Ndjamena|LMT WAT WAST|-10.c -10 -20|0121|-2le10.c 2J3c0.c Wn0",
		"Africa/Niamey|LMT WAT GMT WAT|-8.s 10 0 -10|0123|-2le08.s RUN8.s 12TX0",
		"Africa/Nouakchott|LMT GMT WAT|13.M 0 10|0121|-2ldWU.c RUKU.c 158N0",
		"Africa/Ouagadougou|LMT GMT|6.4 0|01|-2ldXR.U",
		"Africa/Porto-Novo|LMT GMT WAT|-a.s 0 -10|012|-2le0a.s RUMa.s",
		"Africa/Sao_Tome|LMT GMT|A.w 0|01|-2ldXn.s",
		"Africa/Tripoli|LMT CET CEST EET|-Q.I -10 -20 -20|012121213121212121212121213123123|-21JcQ.I 1hnBQ.I vx0 4iP0 xx0 4eN0 Bb0 7ip0 U0n0 A10 1db0 1cN0 1db0 1dd0 1db0 1eN0 1bb0 1e10 1cL0 1c10 1db0 1dd0 1db0 1cN0 1db0 1q10 fAn0 1ep0 1db0 AKq0 TA0 1o00",
		"Africa/Tunis|PMT CET CEST|-9.l -10 -20|0121212121212121212121212121212121|-2nco9.l 18pa9.l 1qM0 DA0 3Tc0 11B0 1ze0 WM0 7z0 3d0 14L0 1cN0 1f90 1ar0 16J0 1gXB0 WM0 1rA0 11c0 nwo0 Ko0 1cM0 1cM0 1rA0 10M0 zuM0 10N0 1aN0 1qM0 WM0 1qM0 11A0 1o00",
		"Africa/Windhoek|SWAT SAST SAST CAT WAT WAST|-1u -20 -30 -20 -10 -20|012134545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2GJdu 1Ajdu 1cL0 1SqL0 9NA0 11D0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 11B0 1nX0 11B0",
		"America/Adak|NST NWT NPT BST BDT AHST HAST HADT|b0 a0 a0 b0 a0 a0 a0 90|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Anchorage|CAT CAWT CAPT AHST AHDT YST AKST AKDT|a0 90 90 a0 90 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T00 8wX0 iA0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cm0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Anguilla|LMT AST|46.4 40|01|-2kNvR.U",
		"America/Antigua|LMT EST AST|47.c 50 40|012|-2kNvQ.M 1yxAQ.M",
		"America/Araguaina|LMT BRT BRST|3c.M 30 20|0121212121212121212121212121212121212121212121212121|-2glwL.c HdKL.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 ny10 Lz0",
		"America/Argentina/Buenos_Aires|CMT ART ARST ART ARST|4g.M 40 30 30 20|0121212121212121212121212121212121212121213434343434343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0",
		"America/Argentina/Catamarca|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
		"America/Argentina/Cordoba|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343454343234343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0 1qN0 WL0",
		"America/Argentina/Jujuy|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1ze0 TX0 1ld0 WK0 1wp0 TX0 g0p0 10M0 j3c0 uL0",
		"America/Argentina/La_Rioja|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
		"America/Argentina/Mendoza|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|0121212121212121212121212121212121212121213434345656543235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1u20 SL0 1vd0 Tb0 1wp0 TW0 g0p0 10M0 agM0 Op0 7TX0 uL0",
		"America/Argentina/Rio_Gallegos|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ako0 7B0 8zb0 uL0",
		"America/Argentina/Salta|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434543432343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 j3c0 uL0",
		"America/Argentina/San_Juan|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|01212121212121212121212121212121212121212134343434534343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Qn0 qO0 16n0 Rb0 1wp0 TX0 g0p0 10M0 ak00 m10 8lb0 uL0",
		"America/Argentina/San_Luis|CMT ART ARST ART ARST WART WARST|4g.M 40 30 30 20 40 30|01212121212121212121212121212121212121212134343456536353465653|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 XX0 1q20 SL0 AN0 kin0 10M0 ak00 m10 8lb0 8L0 jd0 1qN0 WL0 1qN0",
		"America/Argentina/Tucuman|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|012121212121212121212121212121212121212121343434345434323534343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wq0 Ra0 1wp0 TX0 g0p0 10M0 ako0 4N0 8BX0 uL0 1qN0 WL0",
		"America/Argentina/Ushuaia|CMT ART ARST ART ARST WART|4g.M 40 30 30 20 40|0121212121212121212121212121212121212121213434343434343235343|-20UHH.c pKnH.c Mn0 1iN0 Tb0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 1C10 LX0 1C10 LX0 1C10 LX0 1C10 Mn0 MN0 2jz0 MN0 4lX0 u10 5Lb0 1pB0 Fnz0 u10 uL0 1vd0 SL0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 zvd0 Bz0 1tB0 TX0 1wp0 Rb0 1wp0 Rb0 1wp0 TX0 g0p0 10M0 ajA0 8p0 8zb0 uL0",
		"America/Aruba|LMT ANT AST|4z.L 4u 40|012|-2kV7o.d 28KLS.d",
		"America/Asuncion|AMT PYT PYT PYST|3O.E 40 30 30|012131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|-1x589.k 1DKM9.k 3CL0 3Dd0 10L0 1pB0 10n0 1pB0 10n0 1pB0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1dd0 1cL0 1dd0 1cL0 1dd0 1db0 1dd0 1cL0 1lB0 14n0 1dd0 1cL0 1fd0 WL0 1rd0 1aL0 1dB0 Xz0 1qp0 Xb0 1qN0 10L0 1rB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 WN0 1qL0 11B0 1nX0 1ip0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 TX0 1tB0 19X0 1a10 1fz0 1a10 1fz0 1cN0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1ip0 17b0 1ip0 17b0 1ip0",
		"America/Atikokan|CST CDT CWT CPT EST|60 50 50 50 50|0101234|-25TQ0 1in0 Rnb0 3je0 8x30 iw0",
		"America/Bahia|LMT BRT BRST|2y.4 30 20|01212121212121212121212121212121212121212121212121212121212121|-2glxp.U HdLp.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 l5B0 Rb0",
		"America/Bahia_Banderas|LMT MST CST PST MDT CDT|71 70 60 80 60 50|0121212131414141414141414141414141414152525252525252525252525252525252525252525252525252525252|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nW0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Barbados|LMT BMT AST ADT|3W.t 3W.t 40 30|01232323232|-1Q0I1.v jsM0 1ODC1.v IL0 1ip0 17b0 1ip0 17b0 1ld0 13b0",
		"America/Belem|LMT BRT BRST|3d.U 30 20|012121212121212121212121212121|-2glwK.4 HdKK.4 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0",
		"America/Belize|LMT CST CHDT CDT|5Q.M 60 5u 50|01212121212121212121212121212121212121212121212121213131|-2kBu7.c fPA7.c Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1wou Rbu 1zcu Onu 1zcu Onu 1zcu Rbu 1wou Rbu 1f0Mu qn0 lxB0 mn0",
		"America/Blanc-Sablon|AST ADT AWT APT|40 30 30 30|010230|-25TS0 1in0 UGp0 8x50 iu0",
		"America/Boa_Vista|LMT AMT AMST|42.E 40 30|0121212121212121212121212121212121|-2glvV.k HdKV.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 smp0 WL0 1tB0 2L0",
		"America/Bogota|BMT COT COST|4U.g 50 40|0121|-2eb73.I 38yo3.I 2en0",
		"America/Boise|PST PDT MST MWT MPT MDT|80 70 70 60 60 60|0101023425252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-261q0 1nX0 11B0 1nX0 8C10 JCL0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 Dd0 1Kn0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Cambridge_Bay|zzz MST MWT MPT MDDT MDT CST CDT EST|0 70 60 60 50 60 60 50 50|0123141515151515151515151515151515151515151515678651515151515151515151515151515151515151515151515151515151515151515151515151|-21Jc0 RO90 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11A0 1nX0 2K0 WQ0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Campo_Grande|LMT AMT AMST|3C.s 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwl.w HdLl.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0",
		"America/Cancun|LMT CST EST EDT CDT|5L.4 60 50 40 50|0123232341414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQG0 2q2o0 yLB0 1lb0 14p0 1lb0 14p0 Lz0 xB0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Caracas|CMT VET VET|4r.E 4u 40|0121|-2kV7w.k 28KM2.k 1IwOu",
		"America/Cayenne|LMT GFT GFT|3t.k 40 30|012|-2mrwu.E 2gWou.E",
		"America/Cayman|KMT EST|57.b 50|01|-2l1uQ.N",
		"America/Chicago|CST CDT EST CWT CPT|60 50 50 50 50|01010101010101010101010101010101010102010101010103401010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 1wp0 TX0 WN0 1qL0 1cN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 11B0 1Hz0 14p0 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Chihuahua|LMT MST CST CDT MDT|74.k 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Costa_Rica|SJMT CST CDT|5A.d 60 50|0121212121|-1Xd6n.L 2lu0n.L Db0 1Kp0 Db0 pRB0 15b0 1kp0 mL0",
		"America/Creston|MST PST|70 80|010|-29DR0 43B0",
		"America/Cuiaba|LMT AMT AMST|3I.k 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwf.E HdLf.E 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 4a10 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0",
		"America/Danmarkshavn|LMT WGT WGST GMT|1e.E 30 20 0|01212121212121212121212121212121213|-2a5WJ.k 2z5fJ.k 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 DC0",
		"America/Dawson|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 jrA0 fNd0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Dawson_Creek|PST PDT PWT PPT MST|80 70 70 70 70|0102301010101010101010101010101010101010101010101010101014|-25TO0 1in0 UGp0 8x10 iy0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 ML0",
		"America/Denver|MST MDT MWT MPT|70 60 60 60|01010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 11B0 1qL0 WN0 mn0 Ord0 8x20 ix0 LCN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Detroit|LMT CST EST EWT EPT EDT|5w.b 60 50 40 40 40|01234252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2Cgir.N peqr.N 156L0 8x40 iv0 6fd0 11z0 Jy10 SL0 dnB0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Edmonton|LMT MST MDT MWT MPT|7x.Q 70 60 60 60|01212121212121341212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2yd4q.8 shdq.8 1in0 17d0 hz0 2dB0 1fz0 1a10 11z0 1qN0 WL0 1qN0 11z0 IGN0 8x20 ix0 3NB0 11z0 LFB0 1cL0 3Cp0 1cL0 66N0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Eirunepe|LMT ACT ACST AMT|4D.s 50 40 40|0121212121212121212121212121212131|-2glvk.w HdLk.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0 yTd0 d5X0",
		"America/El_Salvador|LMT CST CDT|5U.M 60 50|012121|-1XiG3.c 2Fvc3.c WL0 1qN0 WL0",
		"America/Ensenada|LMT MST PST PDT PWT PPT|7M.4 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOP0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Fort_Wayne|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010101023010101010101010101040454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 QI10 Db0 RB0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 5Tz0 1o10 qLb0 1cL0 1cN0 1cL0 1qhd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Fortaleza|LMT BRT BRST|2y 30 20|0121212121212121212121212121212121212121|-2glxq HdLq 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 5z0 2mN0 On0",
		"America/Glace_Bay|LMT AST ADT AWT APT|3X.M 40 30 30 30|012134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsI0.c CwO0.c 1in0 UGp0 8x50 iu0 iq10 11z0 Jg10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Godthab|LMT WGT WGST|3q.U 30 20|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5Ux.4 2z5dx.4 19U0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"America/Goose_Bay|NST NDT NST NDT NWT NPT AST ADT ADDT|3u.Q 2u.Q 3u 2u 2u 2u 40 30 20|010232323232323245232323232323232323232323232323232323232326767676767676767676767676767676767676767676768676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-25TSt.8 1in0 DXb0 2HbX.8 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 S10 g0u 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Grand_Turk|KMT EST EDT|57.b 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2l1uQ.N 2HHBQ.N 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Guatemala|LMT CST CDT|62.4 60 50|0121212121|-24KhV.U 2efXV.U An0 mtd0 Nz0 ifB0 17b0 zDB0 11z0",
		"America/Guayaquil|QMT ECT|5e 50|01|-1yVSK",
		"America/Guyana|LMT GBGT GYT GYT GYT|3Q.E 3J 3J 30 40|01234|-2dvU7.k 24JzQ.k mlc0 Bxbf",
		"America/Halifax|LMT AST ADT AWT APT|4e.o 40 30 30 30|0121212121212121212121212121212121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsHJ.A xzzJ.A 1db0 3I30 1in0 3HX0 IL0 1E10 ML0 1yN0 Pb0 1Bd0 Mn0 1Bd0 Rz0 1w10 Xb0 1w10 LX0 1w10 Xb0 1w10 Lz0 1C10 Jz0 1E10 OL0 1yN0 Un0 1qp0 Xb0 1qp0 11X0 1w10 Lz0 1HB0 LX0 1C10 FX0 1w10 Xb0 1qp0 Xb0 1BB0 LX0 1td0 Xb0 1qp0 Xb0 Rf0 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 3Qp0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 6i10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Havana|HMT CST CDT|5t.A 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Meuu.o 72zu.o ML0 sld0 An0 1Nd0 Db0 1Nd0 An0 6Ep0 An0 1Nd0 An0 JDd0 Mn0 1Ap0 On0 1fd0 11X0 1qN0 WL0 1wp0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 14n0 1ld0 14L0 1kN0 15b0 1kp0 1cL0 1cN0 1fz0 1a10 1fz0 1fB0 11z0 14p0 1nX0 11B0 1nX0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 1a10 1in0 1a10 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 17c0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 11A0 6i00 Rc0 1wo0 U00 1tA0 Rc0 1wo0 U00 1wo0 U00 1zc0 U00 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0",
		"America/Hermosillo|LMT MST CST PST MDT|7n.Q 70 60 80 60|0121212131414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0",
		"America/Indiana/Knox|CST CDT CWT CPT EST|60 50 50 50 50|0101023010101010101010101010101010101040101010101010101010101010101010101010101010101010141010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 3NB0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 3Cn0 8wp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 z8o0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Marengo|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010104545454545414545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 dyN0 11z0 6fd0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1e6p0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Petersburg|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010104010101010101010101010141014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 njX0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 3Fb0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 19co0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Tell_City|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Vevay|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|010102304545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 kPB0 Awn0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1lnd0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Vincennes|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010454541014545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 g0p0 11z0 1o10 11z0 1qL0 WN0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 caL0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Indiana/Winamac|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|01010230101010101010101010101010101010454541054545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 jrz0 1cL0 1cN0 1cL0 1qhd0 1o00 Rd0 1za0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Inuvik|zzz PST PDDT MST MDT|0 80 60 70 60|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-FnA0 tWU0 1fA0 wPe0 2pz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Iqaluit|zzz EWT EPT EST EDDT EDT CST CDT|0 40 40 50 30 40 60 50|01234353535353535353535353535353535353535353567353535353535353535353535353535353535353535353535353535353535353535353535353|-16K00 7nX0 iv0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Jamaica|KMT EST EDT|57.b 50 40|0121212121212121212121|-2l1uQ.N 2vwNQ.N 1cL0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0",
		"America/Juneau|PST PWT PPT PDT YDT YST AKST AKDT|80 70 70 70 80 90 90 80|01203030303030303030303030403030356767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cM0 1cM0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Kentucky/Louisville|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101010102301010101010101010101010101454545454545414545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 3Fd0 Nb0 LPd0 11z0 RB0 8x30 iw0 Bb0 10N0 2bB0 8in0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 xz0 gso0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1VA0 LA0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Kentucky/Monticello|CST CDT CWT CPT EST EDT|60 50 50 50 50 40|0101023010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454545454|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 SWp0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/La_Paz|CMT BOST BOT|4w.A 3w.A 40|012|-1x37r.o 13b0",
		"America/Lima|LMT PET PEST|58.A 50 40|0121212121212121|-2tyGP.o 1bDzP.o zX0 1aN0 1cL0 1cN0 1cL0 1PrB0 zX0 1O10 zX0 6Gp0 zX0 98p0 zX0",
		"America/Los_Angeles|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 5Wp0 1Vb0 3dB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Maceio|LMT BRT BRST|2m.Q 30 20|012121212121212121212121212121212121212121|-2glxB.8 HdLB.8 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 dMN0 Lz0 8Q10 WL0 1tB0 5z0 2mN0 On0",
		"America/Managua|MMT CST EST CDT|5J.c 60 50 50|0121313121213131|-1quie.M 1yAMe.M 4mn0 9Up0 Dz0 1K10 Dz0 s3F0 1KH0 DB0 9In0 k8p0 19X0 1o30 11y0",
		"America/Manaus|LMT AMT AMST|40.4 40 30|01212121212121212121212121212121|-2glvX.U HdKX.U 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 dPB0 On0",
		"America/Martinique|FFMT AST ADT|44.k 40 30|0121|-2mPTT.E 2LPbT.E 19X0",
		"America/Matamoros|LMT CST CDT|6E 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Mazatlan|LMT MST CST PST MDT|75.E 70 60 80 60|0121212131414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 otX0 gmN0 P2N0 13Vd0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Menominee|CST CDT CWT CPT EST|60 50 50 50 50|01010230101041010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 1o10 11z0 LCN0 1fz0 6410 9Jb0 1cM0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Merida|LMT CST EST CDT|5W.s 60 50 50|0121313131313131313131313131313131313131313131313131313131313131313131313131313131313131|-1UQG0 2q2o0 2hz0 wu30 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Metlakatla|PST PWT PPT PDT MeST|80 70 70 70 80|0120303030303030303030303030303034|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0",
		"America/Mexico_City|LMT MST CST CDT CWT|6A.A 70 60 50 50|012121232324232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 gEn0 TX0 3xd0 Jb0 6zB0 SL0 e5d0 17b0 1Pff0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Miquelon|LMT AST PMST PMDT|3I.E 40 30 20|012323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-2mKkf.k 2LTAf.k gQ10 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Moncton|EST AST ADT AWT APT|50 40 30 30 30|012121212121212121212134121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2IsH0 CwN0 1in0 zAo0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1K10 Lz0 1zB0 NX0 1u10 Wn0 S20 8x50 iu0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14n1 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 ReX 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Monterrey|LMT CST CDT|6F.g 60 50|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1UQG0 2FjC0 1nX0 i6p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Montevideo|MMT UYT UYHST UYST UYT UYHST|3I.I 3u 30 20 30 2u|012121212121212121212121213434343434345454543453434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-20UIf.g 8jzJ.g 1cLu 1dcu 1cLu 1dcu 1cLu ircu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu WLu 1qMu WLu 1qMu 11zu 1o0u 11zu NAu 11bu 2iMu zWu Dq10 19X0 pd0 jz0 cm10 19X0 1fB0 1on0 11d0 1oL0 1nB0 1fzu 1aou 1fzu 1aou 1fzu 3nAu Jb0 3MN0 1SLu 4jzu 2PB0 Lb0 3Dd0 1pb0 ixd0 An0 1MN0 An0 1wp0 On0 1wp0 Rb0 1zd0 On0 1wp0 Rb0 s8p0 1fB0 1ip0 11z0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10 14n0 1ld0 14n0 1ld0 14n0 1ld0 14n0 1o10 11z0 1o10 11z0 1o10",
		"America/Montreal|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-28tR0 bV0 2m30 1in0 121u 1nb0 1g10 11z0 1o0u 11zu 1o0u 11zu 3VAu Rzu 1qMu WLu 1qMu WLu 1qKu WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kO0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Nassau|LMT EST EDT|59.u 50 40|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2kNuO.u 26XdO.u 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/New_York|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 11B0 1qL0 1a10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 RB0 8x40 iv0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Nipigon|EST EDT EWT EPT|50 40 40 40|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 Rnb0 3je0 8x40 iv0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Nome|NST NWT NPT BST BDT YST AKST AKDT|b0 a0 a0 b0 a0 90 90 80|012034343434343434343434343434343456767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676767676|-17SX0 8wW0 iB0 Qlb0 52O0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cl0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Noronha|LMT FNT FNST|29.E 20 10|0121212121212121212121212121212121212121|-2glxO.k HdKO.k 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0",
		"America/North_Dakota/Beulah|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Oo0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/North_Dakota/Center|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101014545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/North_Dakota/New_Salem|MST MDT MWT MPT CST CDT|70 60 60 60 60 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101454545454545454545454545454545454545454545454545454545454545454545454|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14o0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Ojinaga|LMT MST CST CDT MDT|6V.E 70 60 50 60|0121212323241414141414141414141414141414141414141414141414141414141414141414141414141414141|-1UQF0 deL0 8lc0 17c0 10M0 1dd0 2zQN0 1lb0 14p0 1lb0 14q0 1lb0 14p0 1nX0 11B0 1nX0 1fB0 WL0 1fB0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 U10 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Panama|CMT EST|5j.A 50|01|-2uduE.o",
		"America/Pangnirtung|zzz AST AWT APT ADDT ADT EDT EST CST CDT|0 40 30 30 20 30 40 50 60 50|012314151515151515151515151515151515167676767689767676767676767676767676767676767676767676767676767676767676767676767676767|-1XiM0 PnG0 8x50 iu0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1o00 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11C0 1nX0 11A0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Paramaribo|LMT PMT PMT NEGT SRT SRT|3E.E 3E.Q 3E.A 3u 3u 30|012345|-2nDUj.k Wqo0.c qanX.I 1dmLN.o lzc0",
		"America/Phoenix|MST MDT MWT|70 60 60|01010202010|-261r0 1nX0 11B0 1nX0 SgN0 4Al1 Ap0 1db0 SWqX 1cL0",
		"America/Port-au-Prince|PPMT EST EDT|4N 50 40|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-28RHb 2FnMb 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14q0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 i6n0 1nX0 11B0 1nX0 d430 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Porto_Acre|LMT ACT ACST AMT|4v.c 50 40 40|01212121212121212121212121212131|-2glvs.M HdLs.M 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0 d5X0",
		"America/Porto_Velho|LMT AMT AMST|4f.A 40 30|012121212121212121212121212121|-2glvI.o HdKI.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0",
		"America/Puerto_Rico|AST AWT APT|40 30 30|0120|-17lU0 7XT0 iu0",
		"America/Rainy_River|CST CDT CWT CPT|60 50 50 50|010123010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TQ0 1in0 Rnb0 3je0 8x30 iw0 19yN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Rankin_Inlet|zzz CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313131313131313131313131313131313131313131313131313131313131313131|-vDc0 keu0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Recife|LMT BRT BRST|2j.A 30 20|0121212121212121212121212121212121212121|-2glxE.o HdLE.o 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 nsp0 WL0 1tB0 2L0 2pB0 On0",
		"America/Regina|LMT MST MDT MWT MPT CST|6W.A 70 60 60 60 60|012121212121212121212121341212121212121212121212121215|-2AD51.o uHe1.o 1in0 s2L0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 66N0 1cL0 1cN0 19X0 1fB0 1cL0 1fB0 1cL0 1cN0 1cL0 M30 8x20 ix0 1ip0 1cL0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 3NB0 1cL0 1cN0",
		"America/Resolute|zzz CST CDDT CDT EST|0 60 40 50 50|012131313131313131313131313131313131313131313431313131313431313131313131313131313131313131313131313131313131313131313131|-SnA0 GWS0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Santa_Isabel|LMT MST PST PDT PWT PPT|7D.s 70 80 70 70 70|012123245232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UQE0 4PX0 8mM0 8lc0 SN0 1cL0 pHB0 83r0 zI0 5O10 1Rz0 cOP0 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 BUp0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0",
		"America/Santarem|LMT AMT AMST BRT|3C.M 40 30 30|0121212121212121212121212121213|-2glwl.c HdLl.c 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 qe10 xb0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 NBd0",
		"America/Santiago|SMT CLT CLT CLST CLST|4G.K 50 40 40 30|010203131313131313124242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424|-2q5Th.e fNch.e 5gLG.K 21bh.e jRAG.K 1pbh.e 11d0 1oL0 11d0 1oL0 11d0 1oL0 11d0 1pb0 11d0 nHX0 op0 9UK0 1Je0 Qen0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1ld0 14n0 1qN0 11z0 1cN0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0",
		"America/Santo_Domingo|SDMT EST EDT EHDT AST|4E 50 40 4u 40|01213131313131414|-1ttjk 1lJMk Mn0 6sp0 Lbu 1Cou yLu 1RAu wLu 1QMu xzu 1Q0u xXu 1PAu 13jB0 e00",
		"America/Sao_Paulo|LMT BRT BRST|36.s 30 20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-2glwR.w HdKR.w 1cc0 1e10 1bX0 Ezd0 So0 1vA0 Mn0 1BB0 ML0 1BB0 zX0 pTd0 PX0 2ep0 nz0 1C10 zX0 1C10 LX0 1C10 Mn0 H210 Rb0 1tB0 IL0 1Fd0 FX0 1EN0 FX0 1HB0 Lz0 1EN0 Lz0 1C10 IL0 1HB0 Db0 1HB0 On0 1zd0 On0 1zd0 Lz0 1zd0 Rb0 1wN0 Wn0 1tB0 Rb0 1tB0 WL0 1tB0 Rb0 1zd0 On0 1HB0 FX0 1C10 Lz0 1Ip0 HX0 1zd0 On0 1HB0 IL0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1zd0 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0 On0 1zd0 On0 1zd0 On0 1C10 Lz0 1C10 Lz0 1C10 Lz0 1C10 On0 1zd0 Rb0 1wp0 On0 1C10 Lz0 1C10 On0 1zd0",
		"America/Scoresbysund|LMT CGT CGST EGST EGT|1r.Q 20 10 0 10|0121343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2a5Ww.8 2z5ew.8 1a00 1cK0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"America/Sitka|PST PWT PPT PDT YST AKST AKDT|80 70 70 70 90 90 80|01203030303030303030303030303030345656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-17T20 8x10 iy0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 co0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/St_Johns|NST NDT NST NDT NWT NPT NDDT|3u.Q 2u.Q 3u 2u 2u 2u 1u|01010101010101010101010101010101010102323232323232324523232323232323232323232323232323232323232323232323232323232323232323232323232323232326232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-28oit.8 14L0 1nB0 1in0 1gm0 Dz0 1JB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1fB0 19X0 1fB0 19X0 10O0 eKX.8 19X0 1iq0 WL0 1qN0 WL0 1qN0 WL0 1tB0 TX0 1tB0 WL0 1qN0 WL0 1qN0 7UHu itu 1tB0 WL0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1tB0 WL0 1ld0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14n1 1lb0 14p0 1nW0 11C0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zcX Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Swift_Current|LMT MST MDT MWT MPT CST|7b.k 70 60 60 60 60|012134121212121212121215|-2AD4M.E uHdM.E 1in0 UGp0 8x20 ix0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 isN0 1cL0 3Cp0 1cL0 1cN0 11z0 1qN0 WL0 pMp0",
		"America/Tegucigalpa|LMT CST CDT|5M.Q 60 50|01212121|-1WGGb.8 2ETcb.8 WL0 1qN0 WL0 GRd0 AL0",
		"America/Thule|LMT AST ADT|4z.8 40 30|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a5To.Q 31NBo.Q 1cL0 1cN0 1cL0 1fB0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Thunder_Bay|CST EST EWT EPT EDT|60 50 40 40 40|0123141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141414141|-2q5S0 1iaN0 8x40 iv0 XNB0 1cL0 1cN0 1fz0 1cN0 1cL0 3Cp0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Toronto|EST EDT EWT EPT|50 40 40 40|01010101010101010101010101010101010101010101012301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TR0 1in0 11Wu 1nzu 1fD0 WJ0 1wr0 Nb0 1Ap0 On0 1zd0 On0 1wp0 TX0 1tB0 TX0 1tB0 TX0 1tB0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 4kM0 8x40 iv0 1o10 11z0 1nX0 11z0 1o10 11z0 1o10 1qL0 11D0 1nX0 11B0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Vancouver|PST PDT PWT PPT|80 70 70 70|0102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-25TO0 1in0 UGp0 8x10 iy0 1o10 17b0 1ip0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Whitehorse|YST YDT YWT YPT YDDT PST PDT|90 80 80 80 70 80 70|0101023040565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565|-25TN0 1in0 1o10 13V0 Ser0 8x00 iz0 LCL0 1fA0 1Be0 xDz0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Winnipeg|CST CDT CWT CPT|60 50 50 50|010101023010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aIi0 WL0 3ND0 1in0 Jap0 Rb0 aCN0 8x30 iw0 1tB0 11z0 1ip0 11z0 1o10 11z0 1o10 11z0 1rd0 10L0 1op0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 1cL0 1cN0 11z0 6i10 WL0 6i10 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1o00 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1o00 11A0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Yakutat|YST YWT YPT YDT AKST AKDT|90 80 80 80 90 80|01203030303030303030303030303030304545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-17T10 8x00 iz0 Vo10 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 cn0 10q0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"America/Yellowknife|zzz MST MWT MPT MDDT MDT|0 70 60 60 50 60|012314151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151515151|-1pdA0 hix0 8x20 ix0 LCL0 1fA0 zgO0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"Antarctica/Casey|zzz WST CAST|0 -80 -b0|012121|-2q00 1DjS0 T90 40P0 KL0",
		"Antarctica/Davis|zzz DAVT DAVT|0 -70 -50|01012121|-vyo0 iXt0 alj0 1D7v0 VB0 3Wn0 KN0",
		"Antarctica/DumontDUrville|zzz PMT DDUT|0 -a0 -a0|0102|-U0o0 cfq0 bFm0",
		"Antarctica/Macquarie|EST EST zzz MIST|-a0 -b0 0 -b0|0102010101010101010101010101010101010101010101010101010101010101010101010101010101010101013|-29E80 19X0 4SL0 1ayy0 Lvs0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0",
		"Antarctica/Mawson|zzz MAWT MAWT|0 -60 -50|012|-CEo0 2fyk0",
		"Antarctica/McMurdo|NZMT NZST NZST NZDT|-bu -cu -c0 -d0|01020202020202020202020202023232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323|-1GCVu Lz0 1tB0 11zu 1o0u 11zu 1o0u 11zu 1o0u 14nu 1lcu 14nu 1lcu 1lbu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1nXu 11Au 1qLu WMu 1qLu 11Au 1n1bu IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00",
		"Antarctica/Palmer|zzz ARST ART ART ARST CLT CLST|0 30 40 30 20 40 30|012121212123435656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656565656|-cao0 nD0 1vd0 SL0 1vd0 17z0 1cN0 1fz0 1cN0 1cL0 1cN0 asn0 Db0 jsN0 14N0 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1ld0 14n0 1qN0 11z0 1cN0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0",
		"Antarctica/Rothera|zzz ROTT|0 30|01|gOo0",
		"Antarctica/Syowa|zzz SYOT|0 -30|01|-vs00",
		"Antarctica/Troll|zzz UTC CEST|0 0 -20|01212121212121212121212121212121212121212121212121212121212121212121|1puo0 hd0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Antarctica/Vostok|zzz VOST|0 -60|01|-tjA0",
		"Arctic/Longyearbyen|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2awM0 Qm0 W6o0 5pf0 WM0 1fA0 1cM0 1cM0 1cM0 1cM0 wJc0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1qM0 WM0 zpc0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Asia/Aden|LMT AST|-2X.S -30|01|-MG2X.S",
		"Asia/Almaty|LMT ALMT ALMT ALMST|-57.M -50 -60 -70|0123232323232323232323232323232323232323232323232|-1Pc57.M eUo7.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 3Cl0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0",
		"Asia/Amman|LMT EET EEST|-2n.I -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1yW2n.I 1HiMn.I KL0 1oN0 11b0 1oN0 11b0 1pd0 1dz0 1cp0 11b0 1op0 11b0 fO10 1db0 1e10 1cL0 1cN0 1cL0 1cN0 1fz0 1pd0 10n0 1ld0 14n0 1hB0 15b0 1ip0 19X0 1cN0 1cL0 1cN0 17b0 1ld0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1So0 y00 1fc0 1dc0 1co0 1dc0 1cM0 1cM0 1cM0 1o00 11A0 1lc0 17c0 1cM0 1cM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 4bX0 Dd0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0",
		"Asia/Anadyr|LMT ANAT ANAT ANAST ANAST ANAST ANAT|-bN.U -c0 -d0 -e0 -d0 -c0 -b0|01232414141414141414141561414141414141414141414141414141414141561|-1PcbN.U eUnN.U 23CL0 1db0 1cN0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0",
		"Asia/Aqtau|LMT FORT FORT SHET SHET SHEST AQTT AQTST AQTST AQTT|-3l.4 -40 -50 -50 -60 -60 -50 -60 -50 -40|012345353535353535353536767676898989898989898989896|-1Pc3l.4 eUnl.4 1jcL0 JDc0 1cL0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cN0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 RW0",
		"Asia/Aqtobe|LMT AKTT AKTT AKTST AKTT AQTT AQTST|-3M.E -40 -50 -60 -60 -50 -60|01234323232323232323232565656565656565656565656565|-1Pc3M.E eUnM.E 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0",
		"Asia/Ashgabat|LMT ASHT ASHT ASHST ASHST TMT TMT|-3R.w -40 -50 -60 -50 -40 -50|012323232323232323232324156|-1Pc3R.w eUnR.w 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 ba0 xC0",
		"Asia/Baghdad|BMT AST ADT|-2V.A -30 -40|012121212121212121212121212121212121212121212121212121|-26BeV.A 2ACnV.A 11b0 1cp0 1dz0 1dd0 1db0 1cN0 1cp0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1de0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0 1dc0 1dc0 1cM0 1dc0 1cM0 1dc0 1cM0 1dc0",
		"Asia/Bahrain|LMT GST AST|-3m.k -40 -30|012|-21Jfm.k 27BXm.k",
		"Asia/Baku|LMT BAKT BAKT BAKST BAKST AZST AZT AZT AZST|-3j.o -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245657878787878787878787878787878787878787878787878787878787878787878787878787878787878787|-1Pc3j.o 1jUoj.o WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 10K0 c30 1cJ0 1cL0 8wu0 1o00 11z0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Asia/Bangkok|BMT ICT|-6G.4 -70|01|-218SG.4",
		"Asia/Beirut|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-21aq0 1on0 1410 1db0 19B0 1in0 1ip0 WL0 1lQp0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 q6N0 En0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1op0 11b0 dA10 17b0 1iN0 17b0 1iN0 17b0 1iN0 17b0 1vB0 SL0 1mp0 13z0 1iN0 17b0 1iN0 17b0 1jd0 12n0 1a10 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0",
		"Asia/Bishkek|LMT FRUT FRUT FRUST FRUST KGT KGST KGT|-4W.o -50 -60 -70 -60 -50 -60 -60|01232323232323232323232456565656565656565656565656567|-1Pc4W.o eUnW.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11c0 1tX0 17b0 1ip0 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1cPu 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 T8u",
		"Asia/Brunei|LMT BNT BNT|-7D.E -7u -80|012|-1KITD.E gDc9.E",
		"Asia/Calcutta|HMT BURT IST IST|-5R.k -6u -5u -6u|01232|-18LFR.k 1unn.k HB0 7zX0",
		"Asia/Choibalsan|LMT ULAT ULAT CHOST CHOT CHOT|-7C -70 -80 -a0 -90 -80|012343434343434343434343434343434343434343434345|-2APHC 2UkoC cKn0 1da0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 3Db0",
		"Asia/Chongqing|LMT LONT CST CDT|-76.k -70 -80 -90|012323232323232|-1Ggv6.k 27pA6.k eBz0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0",
		"Asia/Colombo|MMT IST IHST IST LKT LKT|-5j.w -5u -60 -6u -6u -60|01231451|-2zOtj.w 1rFbN.w 1zzu 7Apu 23dz0 11zu n3cu",
		"Asia/Dacca|HMT BURT IST DACT BDT BDST|-5R.k -6u -5u -60 -60 -70|01213454|-18LFR.k 1unn.k HB0 m6n0 LqMu 1x6n0 1hXX",
		"Asia/Damascus|LMT EET EEST|-2p.c -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-21Jep.c Hep.c 17b0 1ip0 17b0 1ip0 17b0 1ip0 19X0 1xRB0 11X0 1oN0 10L0 1pB0 11b0 1oN0 10L0 1mp0 13X0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 Nb0 1AN0 Nb0 bcp0 19X0 1gp0 19X0 3ld0 1xX0 Vd0 1Bz0 Sp0 1vX0 10p0 1dz0 1cN0 1cL0 1db0 1db0 1g10 1an0 1ap0 1db0 1fd0 1db0 1cN0 1db0 1dd0 1db0 1cp0 1dz0 1c10 1dX0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1db0 1cN0 1db0 1cN0 19z0 1fB0 1qL0 11B0 1on0 Wp0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 1qL0 WN0 1qL0",
		"Asia/Dili|LMT TLT JST TLT WITA|-8m.k -80 -90 -90 -80|012343|-2le8m.k 1dnXm.k 8HA0 1ew00 Xld0",
		"Asia/Dubai|LMT GST|-3F.c -40|01|-21JfF.c",
		"Asia/Dushanbe|LMT DUST DUST DUSST DUSST TJT|-4z.c -50 -60 -70 -60 -50|0123232323232323232323245|-1Pc4z.c eUnz.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 14N0",
		"Asia/Gaza|EET EET EEST IST IDT|-20 -30 -30 -20 -30|010101010102020202020202020202023434343434343434343434343430202020202020202020202020202020202020202020202020202020202020202020202020202020202020|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 11z0 1o10 14o0 1lA1 SKX 1xd1 MKX 1AN0 1a00 1fA0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0",
		"Asia/Harbin|LMT CHAT CST CHAT CDT|-8q.I -8u -80 -90 -90|012312424242424242|-1Ggwq.I a8nU.I j4Mu 146L0 y5Au eBAu Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0",
		"Asia/Hebron|EET EET EEST IST IDT|-20 -30 -30 -20 -30|01010101010202020202020202020202343434343434343434343434343020202020202020202020202020202020202020202020202020202020202020202020202020202020202020|-1c2q0 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 pBd0 Vz0 1oN0 11b0 1oO0 10N0 1pz0 10N0 1pb0 10N0 1pb0 10N0 1pb0 10N0 1pz0 10N0 1pb0 10N0 1pb0 11d0 1oL0 dW0 hfB0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 M10 C00 17c0 1io0 17c0 1io0 17c0 1o00 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 17c0 1io0 18N0 1bz0 19z0 1gp0 1610 1iL0 12L0 1mN0 14o0 1lc0 Tb0 1xd1 MKX bB0 cn0 1cN0 1a00 1fA0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 19X0 1fB0 19X0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0",
		"Asia/Ho_Chi_Minh|LMT SMT ICT ICT|-76.E -76.k -70 -80|01232|-2yKT6.E byo1.k 2KM5.k Kfz0",
		"Asia/Hong_Kong|LMT HKT HKST JST|-7A.G -80 -90 -90|0121312121212121212121212121212121212121212121212121212121212121212121|-2CFHA.G 1sEP6.G 1cL0 ylu 93X0 1qQu 1tX0 Rd0 1In0 NB0 1cL0 11B0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1kL0 14N0 1nX0 U10 1tz0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 Rd0 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 17d0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 s10 1Vz0 1cN0 1cL0 1cN0 1cL0 6fd0 14n0",
		"Asia/Hovd|LMT HOVT HOVT HOVST|-66.A -60 -70 -80|01232323232323232323232323232323232323232323232|-2APG6.A 2Uko6.A cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0",
		"Asia/Irkutsk|IMT IRKT IRKT IRKST IRKST IRKT|-6V.k -70 -80 -90 -80 -90|01232323232323232323232412323232323232323232323232323232323232325|-21zGV.k pjXV.k 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Asia/Istanbul|IMT EET EEST TRST TRT|-1U.U -20 -30 -40 -30|012121212121212121212121212121212121212121212121212121234343434342121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ogNU.U dzzU.U 11b0 8tB0 1on0 1410 1db0 19B0 1in0 3Rd0 Un0 1oN0 11b0 zSp0 CL0 mN0 1Vz0 1gN0 1pz0 5Rd0 1fz0 1yp0 ML0 1kp0 17b0 1ip0 17b0 1fB0 19X0 1jB0 18L0 1ip0 17z0 qdd0 xX0 3S10 Tz0 dA10 11z0 1o10 11z0 1qN0 11z0 1ze0 11B0 WM0 1qO0 WI0 1nX0 1rB0 10L0 11B0 1in0 17d0 1in0 2pX0 19E0 1fU0 16Q0 1iI0 16Q0 1iI0 1Vd0 pb0 3Kp0 14o0 1df0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WO0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 Xc0 1qo0 WM0 1qM0 11A0 1o00 1200 1nA0 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Asia/Jakarta|BMT JAVT WIB JST WIB WIB|-77.c -7k -7u -90 -80 -70|01232425|-1Q0Tk luM0 mPzO 8vWu 6kpu 4PXu xhcu",
		"Asia/Jayapura|LMT WIT CST|-9m.M -90 -9u|0121|-1uu9m.M sMMm.M L4nu",
		"Asia/Jerusalem|JMT IST IDT IDDT|-2k.E -20 -30 -40|01212121212132121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-26Bek.E SyMk.E 5Rb0 10r0 1px0 10N0 1pz0 16p0 1jB0 16p0 1jx0 3LB0 Em0 or0 1cn0 1dB0 16n0 10O0 1ja0 1tC0 14o0 1cM0 1a00 11A0 1Na0 An0 1MP0 AJ0 1Kp0 LC0 1oo0 Wl0 EQN0 Db0 1fB0 Rb0 npB0 11z0 1C10 IL0 1s10 10n0 1o10 WL0 1zd0 On0 1ld0 11z0 1o10 14n0 1o10 14n0 1nd0 12n0 1nd0 Xz0 1q10 12n0 1hB0 1dX0 1ep0 1aL0 1eN0 17X0 1nf0 11z0 1tB0 19W0 1e10 17b0 1ep0 1gL0 18N0 1fz0 1eN0 17b0 1gq0 1gn0 19d0 1dz0 1c10 17X0 1hB0 1gn0 19d0 1dz0 1c10 17X0 1kp0 1dz0 1c10 1aL0 1eN0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0 10N0 1rz0 W10 1rz0 W10 1rz0 W10 1rz0 10N0 1oL0 10N0 1oL0",
		"Asia/Kabul|AFT AFT|-40 -4u|01|-10Qs0",
		"Asia/Kamchatka|LMT PETT PETT PETST PETST|-ay.A -b0 -c0 -d0 -c0|01232323232323232323232412323232323232323232323232323232323232412|-1SLKy.A ivXy.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0",
		"Asia/Karachi|LMT IST IST KART PKT PKST|-4s.c -5u -6u -50 -50 -60|012134545454|-2xoss.c 1qOKW.c 7zX0 eup0 LqMu 1fy01 1cL0 dK0X 11b0 1610 1jX0",
		"Asia/Kashgar|LMT KAST KAST CST CDT|-53.U -5u -50 -80 -90|0123434343434343|-1Ggt3.U tdbx.U 1Ccou eBx0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0",
		"Asia/Kathmandu|LMT IST NPT|-5F.g -5u -5J|012|-21JhF.g 2EGMb.g",
		"Asia/Khandyga|LMT YAKT YAKT YAKST YAKST VLAT VLAST VLAT YAKT|-92.d -80 -90 -a0 -90 -a0 -b0 -b0 -a0|0123232323232323232323241232323232323232323232323256565656565656578|-21Q92.d pAp2.d 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 qK0 yN0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0",
		"Asia/Krasnoyarsk|LMT KRAT KRAT KRAST KRAST KRAT|-6b.k -60 -70 -80 -70 -80|01232323232323232323232412323232323232323232323232323232323232325|-21Hib.k prAb.k 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Asia/Kuala_Lumpur|SMT MALT MALST MALT MALT JST MYT|-6T.p -70 -7k -7k -7u -90 -80|01234546|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu 1so1u",
		"Asia/Kuching|LMT BORT BORT BORTST JST MYT|-7l.k -7u -80 -8k -90 -80|01232323232323232425|-1KITl.k gDbP.k 6ynu AnE 1O0k AnE 1NAk AnE 1NAk AnE 1NAk AnE 1O0k AnE 1NAk AnE pAk 8Fz0 1so10",
		"Asia/Kuwait|LMT AST|-3b.U -30|01|-MG3b.U",
		"Asia/Macao|LMT MOT MOST CST|-7y.k -80 -90 -80|0121212121212121212121212121212121212121213|-2le7y.k 1XO34.k 1wn0 Rd0 1wn0 R9u 1wqu U10 1tz0 TVu 1tz0 17gu 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cOu 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cJu 1cL0 1cN0 1fz0 1cN0 1cL0 KEp0",
		"Asia/Magadan|LMT MAGT MAGT MAGST MAGST MAGT|-a3.c -a0 -b0 -c0 -b0 -c0|01232323232323232323232412323232323232323232323232323232323232325|-1Pca3.c eUo3.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Asia/Makassar|LMT MMT WITA JST|-7V.A -7V.A -80 -90|01232|-21JjV.A vfc0 myLV.A 8ML0",
		"Asia/Manila|PHT PHST JST|-80 -90 -90|010201010|-1kJI0 AL0 cK10 65X0 mXB0 vX0 VK10 1db0",
		"Asia/Muscat|LMT GST|-3S.o -40|01|-21JfS.o",
		"Asia/Nicosia|LMT EET EEST|-2d.s -20 -30|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1Vc2d.s 2a3cd.s 1cL0 1qp0 Xz0 19B0 19X0 1fB0 1db0 1cp0 1cL0 1fB0 19X0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1o30 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Asia/Novokuznetsk|NMT KRAT KRAT KRAST KRAST NOVST NOVT NOVT|-5M.M -60 -70 -80 -70 -70 -60 -70|01232323232323232323232412323232323232323232323232323232323232567|-21HhM.M przM.M 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0",
		"Asia/Novosibirsk|LMT NOVT NOVT NOVST NOVST|-5v.E -60 -70 -80 -70|012323232323232323232324123234141414141414141414141414141414141412|-21Qnv.E pAFv.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 ml0 Os0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Asia/Omsk|LMT OMST OMST OMSST OMSST OMST|-4R.A -50 -60 -70 -60 -70|01232323232323232323232412323232323232323232323232323232323232325|-224sR.A pMLR.A 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Asia/Oral|LMT URAT URAT URAST URAT URAST ORAT ORAST ORAT|-3p.o -40 -50 -60 -60 -50 -40 -50 -50|012343232323232323251516767676767676767676767676768|-1Pc3p.o eUnp.o 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 2UK0 Fz0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 RW0",
		"Asia/Phnom_Penh|LMT SMT ICT ICT|-6X.E -76.k -70 -80|01232|-2yKSX.E bynS.k 2KM5.k Kfz0",
		"Asia/Pontianak|LMT PMT WIB JST WIB WITA WIB|-7h.k -7h.k -7u -90 -80 -80 -70|012324256|-2ua7h.k XE00 munL.k 8Rau 6kpu 4PXu xhcu Wqnu",
		"Asia/Pyongyang|KST KST KST|-8u -90 -80|010121|-2CsUu Ucnu 9Iou S5Xu hXB0",
		"Asia/Qatar|LMT GST AST|-3q.8 -40 -30|012|-21Jfq.8 27BXq.8",
		"Asia/Qyzylorda|LMT KIZT KIZT KIZST KIZT QYZT QYZT QYZST|-4l.Q -40 -50 -60 -60 -50 -60 -70|012343232323232323232325676767676767676767676767676|-1Pc4l.Q eUol.Q 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 2UK0 dC0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0",
		"Asia/Rangoon|RMT BURT JST MMT|-6o.E -6u -90 -6u|0123|-21Jio.E SmnS.E 7j9u",
		"Asia/Riyadh|LMT AST|-36.Q -30|01|-MG36.Q",
		"Asia/Sakhalin|LMT CJT JST SAKT SAKST SAKST SAKT|-9u.M -90 -90 -b0 -c0 -b0 -a0|012343434343434343434343563434343434356565656565656565656565656563|-2AGVu.M 1iLAu.M iBc0 1qFa0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o10 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Asia/Samarkand|LMT SAMT SAMT SAMST TAST UZST UZT|-4r.c -40 -50 -60 -60 -60 -50|01234323232323232323232356|-1Pc4r.c eUor.c 23CL0 1db0 1cM0 1dc0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11x0 bf0",
		"Asia/Seoul|KST KST KST KDT KDT|-8u -90 -80 -90 -a0|0101232014141|-2CsUu Ucnu 9Iou S5Xu eWN0 Mn0 2cp0 hnzu JhXu 11z0 1o10 11z0",
		"Asia/Shanghai|LMT CST CDT|-85.V -80 -90|012121212121212121|-1Ggw5.V ueM5.V LX0 16p0 1jz0 1Myp0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0",
		"Asia/Singapore|SMT MALT MALST MALT MALT JST SGT SGT|-6T.p -70 -7k -7k -7u -90 -7u -80|012345467|-2Bg6T.p 17anT.p 7hXE dM00 17bO 8Fyu Mspu DTA0",
		"Asia/Taipei|CST CDT|-80 -90|01010101010101010101010101010101010101010|-104w0 11b0 1oN0 11b0 1oN0 11b0 1pd0 11b0 1oN0 11b0 1oN0 11b0 1oN0 11b0 10N0 1BX0 10p0 1pz0 10p0 1pz0 10p0 1db0 1dd0 1db0 1cN0 1db0 1cN0 1db0 1cN0 1db0 1BB0 ML0 1Bd0 ML0 uq10 1db0 1cN0 1db0 97d0 AL0",
		"Asia/Tashkent|LMT TAST TAST TASST TASST UZST UZT|-4B.c -50 -60 -70 -60 -60 -50|01232323232323232323232456|-1Pc4B.c eUnB.c 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 11y0 bf0",
		"Asia/Tbilisi|TBMT TBIT TBIT TBIST TBIST GEST GET GET GEST|-2X.g -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245656565787878787878787878567|-1Pc2X.g 1jUnX.g WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 3y0 19f0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cM0 1cL0 1fB0 3Nz0 11B0 1nX0 11B0 1qL0 WN0 1qL0 WN0 1qL0 11B0 1nX0 11B0 1nX0 11B0 An0 Os0 WM0",
		"Asia/Tehran|LMT TMT IRST IRST IRDT IRDT|-3p.I -3p.I -3u -40 -50 -4u|01234325252525252525252525252525252525252525252525252525252525252525252525252525252525252525252525252|-2btDp.I 1d3c0 1huLT.I TXu 1pz0 sN0 vAu 1cL0 1dB0 1en0 pNB0 UL0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 64p0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0 1cN0 1dz0 1cp0 1dz0 1cp0 1dz0 1cp0 1dz0",
		"Asia/Thimbu|LMT IST BTT|-5W.A -5u -60|012|-Su5W.A 1BGMs.A",
		"Asia/Tokyo|CJT JST JDT|-90 -90 -a0|0121212121|-1hTl0 p9C0 QL0 1lB0 13X0 1zB0 NX0 1zB0 NX0",
		"Asia/Ulaanbaatar|LMT ULAT ULAT ULAST|-77.w -70 -80 -90|01232323232323232323232323232323232323232323232|-2APH7.w 2Uko7.w cKn0 1db0 1dd0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 6hD0 11z0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0",
		"Asia/Urumqi|LMT URUT CST CDT|-5O.k -60 -80 -90|012323232323232|-1GgtO.k 27pzO.k eBy0 Rb0 1o10 11z0 1o10 11z0 1qN0 11z0 1o10 11z0 1o10 11z0",
		"Asia/Ust-Nera|LMT YAKT YAKT MAGST MAGT MAGST MAGT MAGT VLAT|-9w.S -80 -90 -c0 -b0 -b0 -a0 -c0 -b0|012343434343434343434345643434343434343434343434343434343434343478|-21Q9w.S pApw.S 23CL0 1d90 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 17V0",
		"Asia/Vientiane|LMT SMT ICT ICT|-6O.o -76.k -70 -80|01232|-2yKSO.o bynJ.4 2KM5.k Kfz0",
		"Asia/Vladivostok|LMT VLAT VLAT VLAST VLAST VLAT|-8L.I -90 -a0 -b0 -a0 -b0|01232323232323232323232412323232323232323232323232323232323232325|-1SJIL.I itXL.I 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Asia/Yakutsk|LMT YAKT YAKT YAKST YAKST YAKT|-8C.E -80 -90 -a0 -90 -a0|01232323232323232323232412323232323232323232323232323232323232325|-21Q8C.E pAoC.E 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Asia/Yekaterinburg|LMT SVET SVET SVEST SVEST YEKT YEKST YEKT|-42.o -40 -50 -60 -50 -50 -60 -60|01232323232323232323232415656565656565656565656565656565656565657|-22Rc2.o qBw2.o 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Asia/Yerevan|LMT YERT YERT YERST YERST AMST AMT AMT AMST|-2W -30 -40 -50 -40 -40 -30 -40 -50|0123232323232323232323245656565657878787878787878787878787878787|-1Pc2W 1jUnW WCL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1am0 2r0 1cJ0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fb0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0",
		"Atlantic/Azores|HMT AZOT AZOST AZOMT AZOT AZOST WET|1S.w 20 10 0 10 0 0|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545456545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2mGK5.s ckL5.s Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cL0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Atlantic/Bermuda|LMT AST ADT|4j.i 40 30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1BnRE.G 1LTbE.G 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"Atlantic/Canary|LMT CANT WET WEST|11.A 10 0 -10|01232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-1UtaW.o XPAW.o 1lAK0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Atlantic/Cape_Verde|LMT CVT CVST CVT|1y.4 20 10 10|01213|-2xomp.U 1qOMp.U 7zX0 1djf0",
		"Atlantic/Faeroe|LMT WET WEST|r.4 0 -10|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2uSnw.U 2Wgow.U 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Atlantic/Madeira|FMT MADT MADST MADMT WET WEST|17.A 10 0 -10 0 -10|01212121212121212121212121212121212121212121232123212321232121212121212121212121212121212121212121454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2mGKQ.o ckKQ.o Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 qIl0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Atlantic/Reykjavik|RMT IST ISST GMT|1r.M 10 0 0|01212121212121212121212121212121212121212121212121212121212121213|-2uWmw.c mfaw.c 1Bd0 ML0 1LB0 NLX0 1pe0 zd0 1EL0 LA0 1C00 Oo0 1wo0 Rc0 1wo0 Rc0 1wo0 Rc0 1zc0 Oo0 1zc0 14o0 1lc0 14o0 1lc0 14o0 1o00 11A0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1lc0 14o0 1o00 14o0",
		"Atlantic/South_Georgia|GST|20|0|",
		"Atlantic/St_Helena|JMT GMT|m.M 0|01|-KfXB.c",
		"Atlantic/Stanley|SMT FKT FKST FKT FKST|3P.o 40 30 30 20|0121212121212134343212121212121212121212121212121212121212121212121212|-2kJw8.A 12bA8.A 19X0 1fB0 19X0 1ip0 19X0 1fB0 19X0 1fB0 19X0 1fB0 Cn0 1Cc10 WL0 1qL0 U10 1tz0 U10 1qM0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 U10 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1tz0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qL0 WN0 1qN0 U10 1wn0 Rd0 1wn0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1tz0 U10 1wn0 U10 1tz0 U10 1tz0 U10",
		"Australia/ACT|EST EST|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/Adelaide|CST CST|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 WM0 1qM0 Rc0 1zc0 U00 1tA0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/Brisbane|EST EST|-a0 -b0|01010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0",
		"Australia/Broken_Hill|CST CST|-9u -au|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 14o0 1o00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1tA0 WM0 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/Currie|EST EST|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/Darwin|CST CST|-9u -au|010101010|-293lt xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0",
		"Australia/Eucla|CWST CWST|-8J -9J|0101010101010101010|-293kI xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0",
		"Australia/Hobart|EST EST|-a0 -b0|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-29E80 19X0 10jd0 yL0 1cN0 1cL0 1fB0 19X0 VfB0 1cM0 1o00 Rc0 1wo0 Rc0 1wo0 U00 1wo0 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 11A0 1qM0 WM0 1qM0 Oo0 1zc0 Oo0 1zc0 Oo0 1wo0 WM0 1tA0 WM0 1tA0 U00 1tA0 U00 1tA0 11A0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 11A0 1o00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/LHI|EST LHST LHST LHST|-a0 -au -bu -b0|0121212121313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313131313|raC0 1zdu Rb0 1zd0 On0 1zd0 On0 1zd0 On0 1zd0 TXu 1qMu WLu 1tAu WLu 1tAu TXu 1tAu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu 11zu 1o0u 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 11Au 1nXu 1qMu 11zu 1o0u 11zu 1o0u 11zu 1qMu WLu 1qMu 11zu 1o0u WLu 1qMu 14nu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1fzu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1cMu 1cLu 1fAu 1cLu 1cMu 1cLu 1cMu",
		"Australia/Lindeman|EST EST|-a0 -b0|010101010101010101010|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 H1A0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0",
		"Australia/Melbourne|EST EST|-a0 -b0|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101|-293lX xcX 10jd0 yL0 1cN0 1cL0 1fB0 19X0 17c10 LA0 1C00 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 U00 1qM0 WM0 1qM0 11A0 1tA0 U00 1tA0 U00 1tA0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 11A0 1o00 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 14o0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0",
		"Australia/Perth|WST WST|-80 -90|0101010101010101010|-293jX xcX 10jd0 yL0 1cN0 1cL0 1gSp0 Oo0 l5A0 Oo0 iJA0 G00 zU00 IM0 1qM0 11A0 1o00 11A0",
		"CET|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"CST6CDT|CST CDT CWT CPT|60 50 50 50|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261s0 1nX0 11B0 1nX0 SgN0 8x30 iw0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"Chile/EasterIsland|EMT EASST EAST EAST EASST|7h.s 60 70 60 50|012121212121212121212121212121213434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-1uSgG.w nHUG.w op0 9UK0 RXB0 WL0 1zd0 On0 1ip0 11z0 1o10 11z0 1qN0 WL0 1ld0 14n0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 WL0 1qN0 1cL0 1cN0 11z0 1ld0 14n0 1qN0 11z0 1cN0 19X0 1qN0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1ip0 1fz0 1fB0 11z0 1qN0 WL0 1qN0 WL0 1qN0 WL0 1qN0 11z0 1o10 11z0 1o10 11z0 1qN0 WL0 1qN0 17b0 1ip0 11z0 1o10 19X0 1fB0 1nX0 G10 1EL0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1wn0 Rd0 1zb0 Op0 1zb0 Rd0 1wn0 Rd0",
		"EET|EET EEST|-20 -30|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"EST|EST|50|0|",
		"EST5EDT|EST EDT EWT EPT|50 40 40 40|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261t0 1nX0 11B0 1nX0 SgN0 8x40 iv0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"Eire|DMT IST GMT BST IST|p.l -y.D 0 -10 -10|01232323232324242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242424242|-2ax9y.D Rc0 1fzy.D 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 g5X0 14p0 1wn0 17d0 1io0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Etc/GMT+1|GMT+1|10|0|",
		"Etc/GMT+10|GMT+10|a0|0|",
		"Etc/GMT+11|GMT+11|b0|0|",
		"Etc/GMT+12|GMT+12|c0|0|",
		"Etc/GMT+2|GMT+2|20|0|",
		"Etc/GMT+3|GMT+3|30|0|",
		"Etc/GMT+4|GMT+4|40|0|",
		"Etc/GMT+5|GMT+5|50|0|",
		"Etc/GMT+6|GMT+6|60|0|",
		"Etc/GMT+7|GMT+7|70|0|",
		"Etc/GMT+8|GMT+8|80|0|",
		"Etc/GMT+9|GMT+9|90|0|",
		"Etc/GMT-1|GMT-1|-10|0|",
		"Etc/GMT-10|GMT-10|-a0|0|",
		"Etc/GMT-11|GMT-11|-b0|0|",
		"Etc/GMT-12|GMT-12|-c0|0|",
		"Etc/GMT-13|GMT-13|-d0|0|",
		"Etc/GMT-14|GMT-14|-e0|0|",
		"Etc/GMT-2|GMT-2|-20|0|",
		"Etc/GMT-3|GMT-3|-30|0|",
		"Etc/GMT-4|GMT-4|-40|0|",
		"Etc/GMT-5|GMT-5|-50|0|",
		"Etc/GMT-6|GMT-6|-60|0|",
		"Etc/GMT-7|GMT-7|-70|0|",
		"Etc/GMT-8|GMT-8|-80|0|",
		"Etc/GMT-9|GMT-9|-90|0|",
		"Etc/UCT|UCT|0|0|",
		"Etc/UTC|UTC|0|0|",
		"Europe/Amsterdam|AMT NST NEST NET CEST CET|-j.w -1j.w -1k -k -20 -10|010101010101010101010101010101010101010101012323234545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545|-2aFcj.w 11b0 1iP0 11A0 1io0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1co0 1io0 1yo0 Pc0 1a00 1fA0 1Bc0 Mo0 1tc0 Uo0 1tA0 U00 1uo0 W00 1s00 VA0 1so0 Vc0 1sM0 UM0 1wo0 Rc0 1u00 Wo0 1rA0 W00 1s00 VA0 1sM0 UM0 1w00 fV0 BCX.w 1tA0 U00 1u00 Wo0 1sm0 601k WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Andorra|WET CET CEST|0 -10 -20|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-UBA0 1xIN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Athens|AMT EET EEST CEST CET|-1y.Q -20 -30 -20 -10|012123434121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2a61x.Q CNbx.Q mn0 kU10 9b0 3Es0 Xa0 1fb0 1dd0 k3X0 Nz0 SCp0 1vc0 SO0 1cM0 1a00 1ao0 1fc0 1a10 1fG0 1cg0 1dX0 1bX0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Belfast|GMT BST BDST|0 -10 -20|0101010101010101010101010101010101010101010101010121212121210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1a00 1qM0 WM0 1qM0 11A0 1o00 WM0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1tA0 IM0 90o0 U00 1tA0 U00 1tA0 U00 1tA0 U00 1tA0 WM0 1qM0 WM0 1qM0 WM0 1tA0 U00 1tA0 U00 1tA0 11z0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1o00 14o0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Belgrade|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19RC0 3IP0 WM0 1fA0 1cM0 1cM0 1rc0 Qo0 1vmo0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Berlin|CET CEST CEMT|-10 -20 -30|01010101010101210101210101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 kL0 Nc0 m10 WM0 1ao0 1cp0 dX0 jz0 Dd0 1io0 17c0 1fA0 1a00 1ehA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Bratislava|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 16M0 1lc0 1tA0 17A0 11c0 1io0 17c0 1io0 17c0 1fc0 1ao0 1bNc0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Brussels|WET CET CEST WEST|0 -10 -20 -10|0121212103030303030303030303030303030303030303030303212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ehc0 3zX0 11c0 1iO0 11A0 1o00 11A0 my0 Ic0 1qM0 Rc0 1EM0 UM0 1u00 10o0 1io0 1io0 17c0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a30 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 y00 5Wn0 WM0 1fA0 1cM0 16M0 1iM0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Bucharest|BMT EET EEST|-1I.o -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1xApI.o 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Axc0 On0 1fA0 1a10 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Budapest|CET CEST|-10 -20|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1ip0 1cn0 1jd0 11b0 1ld0 1bb0 NVc0 3O00 WM0 1fA0 1cM0 1cM0 1oJ0 1e00 Xf0 1fA0 1cM0 1cM0 1cM0 1cM0 1fA0 1a00 1iM0 1fA0 8Ha0 Rb0 1wN0 Rb0 1BB0 Lz0 1C20 LB0 SNX0 1a10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Busingen|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-19Lc0 11A0 1o00 11A0 1xG10 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Chisinau|CMT BMT EET EEST CEST CET MSK MSD|-1T -1I.o -20 -30 -20 -10 -30 -40|0123232323232323232345454676767676767676767623232323232323232323232323232323232323232323232323232323232323232323232323232323232323232323232|-26jdT wGMa.A 20LI.o RA0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 27A0 2en0 39g0 WM0 1fA0 1cM0 V90 1t7z0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1ty0 2bD0 1cM0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Copenhagen|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 Tz0 VuO0 60q0 WM0 1fA0 1cM0 1cM0 1cM0 S00 1HA0 Nc0 1C00 Dc0 1Nc0 Ao0 1h5A0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Gibraltar|GMT BST BDST CET CEST|0 -10 -20 -10 -20|010101010101010101010101010101010101010101010101012121212121010121010101010101010101034343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-2axa0 Rc0 1fA0 14M0 1fc0 1g00 1co0 1dc0 1co0 1oo0 1400 1dc0 19A0 1io0 1io0 WM0 1o00 14o0 1o00 17c0 1io0 17c0 1fA0 1a00 1lc0 17c0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1cM0 1io0 17c0 1fA0 1a00 1io0 17c0 1io0 17c0 1fA0 1a00 1io0 1qM0 Dc0 2Rz0 Dc0 1zc0 Oo0 1zc0 Rc0 1wo0 17c0 1iM0 FA0 xB0 1fA0 1a00 14o0 bb0 LA0 xB0 Rc0 1wo0 11A0 1o00 17c0 1fA0 1a00 1fA0 1cM0 1fA0 1a00 17c0 1fA0 1a00 1io0 17c0 1lc0 17c0 1fA0 10Jz0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Helsinki|HMT EET EEST|-1D.Q -20 -30|0121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-1WuND.Q OULD.Q 1db0 1xGP0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Kaliningrad|CET CEST CET CEST MSK MSD EEST EET FET|-10 -20 -20 -30 -30 -40 -30 -20 -30|010101010101023245454545454545454545467676767676767676767676767676767676767678|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 Am0 Lb0 1en0 op0 1pNz0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1cJ0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Europe/Kiev|KMT EET MSK CEST CET MSD EEST|-22.4 -20 -30 -20 -10 -40 -30|0123434252525252525252525256161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc22.4 eUo2.4 rnz0 2Hg0 WM0 1fA0 da0 1v4m0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 Db0 3220 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Lisbon|LMT WET WEST WEMT CET CEST|A.w 0 -10 -20 -10 -20|012121212121212121212121212121212121212121212321232123212321212121212121212121212121212121212121214121212121212121212121212121212124545454212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ldXn.s aPWn.s Sp0 LX0 1vc0 Tc0 1uM0 SM0 1vc0 Tc0 1vc0 SM0 1vc0 6600 1co0 3E00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 3I00 17c0 1cM0 1cM0 3Fc0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 1tA0 1cM0 1dc0 1400 gL0 IM0 s10 U00 dX0 Rc0 pd0 Rc0 gL0 Oo0 pd0 Rc0 gL0 Oo0 pd0 14o0 1cM0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 3Co0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 pvy0 1cM0 1cM0 1fA0 1cM0 1cM0 1cN0 1cL0 1cN0 1cM0 1cM0 1cM0 1cM0 1cN0 1cL0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Luxembourg|LMT CET CEST WET WEST WEST WET|-o.A -10 -20 0 -10 -20 -10|0121212134343434343434343434343434343434343434343434565651212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2DG0o.A t6mo.A TB0 1nX0 Up0 1o20 11A0 rW0 CM0 1qP0 R90 1EO0 UK0 1u20 10m0 1ip0 1in0 17e0 19W0 1fB0 1db0 1cp0 1in0 17d0 1fz0 1a10 1in0 1a10 1in0 17f0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Dc0 vA0 60L0 WM0 1fA0 1cM0 17c0 1io0 16M0 1C00 Uo0 1eeo0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Madrid|WET WEST WEMT CET CEST|0 -10 -20 -10 -20|01010101010101010101010121212121234343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343|-28dd0 11A0 1go0 19A0 1co0 1dA0 b1A0 18o0 3I00 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 iyo0 Rc0 18o0 1hc0 1io0 1a00 14o0 5aL0 MM0 1vc0 17A0 1i00 1bc0 1eo0 17d0 1in0 17A0 6hA0 10N0 XIL0 1a10 1in0 17d0 19X0 1cN0 1fz0 1a10 1fX0 1cp0 1cO0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Malta|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2as10 M00 1cM0 1cM0 14o0 1o00 WM0 1qM0 17c0 1cM0 M3A0 5M20 WM0 1fA0 1cM0 1cM0 1cM0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 Lz0 1C10 Lz0 1EN0 Lz0 1C10 Lz0 1zd0 Oo0 1C00 On0 1cp0 1cM0 1lA0 Xc0 1qq0 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1o10 11z0 1iN0 19z0 1fB0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Minsk|MMT EET MSK CEST CET MSD EEST FET|-1O -20 -30 -20 -10 -40 -30 -30|01234343252525252525252525261616161616161616161616161616161616161617|-1Pc1O eUnO qNX0 3gQ0 WM0 1fA0 1cM0 Al0 1tsn0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 3Fc0 1cN0 1cK0 1cM0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Europe/Monaco|PMT WET WEST WEMT CET CEST|-9.l 0 -10 -20 -10 -20|01212121212121212121212121212121212121212121212121232323232345454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-2nco9.l cNb9.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 2RV0 11z0 11B0 1ze0 WM0 1fA0 1cM0 1fa0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Moscow|MMT MMT MST MDST MSD MSK MSM EET EEST MSK|-2u -2u.M -3u.M -4u.M -40 -30 -50 -20 -30 -40|01213234546457545454545454545454545875454545454545454545454545454545454545459|-2ag2u 2pyX.c 1bA0 11X0 GN0 1Hb0 c20 imu.M 3DA0 dz0 15A0 c10 2q10 iM10 23CL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 IM0 rU0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Europe/Paris|PMT WET WEST CEST CET WEMT|-9.l 0 -10 -20 -10 -20|0121212121212121212121212121212121212121212121212123434352543434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434343434|-2nco8.l cNb8.l HA0 19A0 1iM0 11c0 1oo0 Wo0 1rc0 QM0 1EM0 UM0 1u00 10o0 1io0 1wo0 Rc0 1a00 1fA0 1cM0 1cM0 1io0 17c0 1fA0 1a00 1io0 1a00 1io0 17c0 1fA0 1a00 1io0 17c0 1cM0 1cM0 1a00 1io0 1cM0 1cM0 1a00 1fA0 1io0 17c0 1cM0 1cM0 1a00 1fA0 1io0 1qM0 Df0 Ik0 5M30 WM0 1fA0 1cM0 Vx0 hB0 1aq0 16M0 1ekn0 1cL0 1fC0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Riga|RMT LST EET MSK CEST CET MSD EEST|-1A.o -2A.o -20 -30 -20 -10 -40 -30|010102345454536363636363636363727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272727272|-25TzA.o 11A0 1iM0 ko0 gWm0 yDXA.o 2bX0 3fE0 WM0 1fA0 1cM0 1cM0 4m0 1sLy0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1o00 11A0 1o00 11A0 1qM0 3oo0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Rome|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2as10 M00 1cM0 1cM0 14o0 1o00 WM0 1qM0 17c0 1cM0 M3A0 5M20 WM0 1fA0 1cM0 16K0 1iO0 16m0 1de0 1lc0 14m0 1lc0 WO0 1qM0 GTW0 On0 1C10 Lz0 1C10 Lz0 1EN0 Lz0 1C10 Lz0 1zd0 Oo0 1C00 On0 1C10 Lz0 1zd0 On0 1C10 LA0 1C00 LA0 1zc0 Oo0 1C00 Oo0 1zc0 Oo0 1fC0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Samara|LMT SAMT SAMT KUYT KUYST KUYST KUYT KUYST SAMST SAMST|-3k.A -30 -40 -40 -50 -40 -30 -30 -50 -40|012343434343434343435656762828282828282828282828282828282828282912|-22WNk.A qHak.A bcn0 1Qqo0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cN0 8o0 14j0 1cL0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qN0 WM0",
		"Europe/Simferopol|SMT EET MSK CEST CET MSD EEST MSK|-2g -20 -30 -20 -10 -40 -30 -40|01234343252525252525252525216161652525261616161616161616161616161616161617|-1Pc2g eUog rEn0 2qs0 WM0 1fA0 1cM0 3V0 1u0L0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 4eL0 1cL0 1cN0 1cL0 1cN0 dX0 WL0 1cN0 1cL0 1fB0 1o30 11B0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11z0",
		"Europe/Sofia|EET CET CEST EEST|-20 -10 -20 -30|01212103030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030|-168L0 WM0 1fA0 1cM0 1cM0 1cN0 1mKH0 1dd0 1fb0 1ap0 1fb0 1a20 1fy0 1a30 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cK0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 1nX0 11E0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Stockholm|CET CEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2azC0 TB0 2yDe0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Tallinn|TMT CET CEST EET MSK MSD EEST|-1D -10 -20 -20 -30 -40 -30|012103421212454545454545454546363636363636363636363636363636363636363636363636363636363636363636363636363636363636363636363|-26oND teD 11A0 1Ta0 4rXl KSLD 2FX0 2Jg0 WM0 1fA0 1cM0 18J0 1sTX0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o10 11A0 1qM0 5QM0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Tirane|LMT CET CEST|-1j.k -10 -20|01212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2glBj.k 14pcj.k 5LC0 WM0 4M0 1fCK0 10n0 1op0 11z0 1pd0 11z0 1qN0 WL0 1qp0 Xb0 1qp0 Xb0 1qp0 11z0 1lB0 11z0 1qN0 11z0 1iN0 16n0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Uzhgorod|CET CEST MSK MSD EET EEST|-10 -20 -30 -40 -20 -30|010101023232323232323232320454545454545454545454545454545454545454545454545454545454545454545454545454545454545454545454|-1cqL0 6i00 WM0 1fA0 1cM0 1ml0 1Cp0 1r3W0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1Q00 1Nf0 2pw0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Vienna|CET CEST|-10 -20|0101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 3KM0 14o0 LA00 6i00 WM0 1fA0 1cM0 1cM0 1cM0 400 2qM0 1a00 1cM0 1cM0 1io0 17c0 1gHa0 19X0 1cP0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Vilnius|WMT KMT CET EET MSK CEST MSD EEST|-1o -1z.A -10 -20 -30 -20 -40 -30|012324525254646464646464646464647373737373737352537373737373737373737373737373737373737373737373737373737373737373737373|-293do 6ILM.o 1Ooz.A zz0 Mfd0 29W0 3is0 WM0 1fA0 1cM0 LV0 1tgL0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11B0 1o00 11A0 1qM0 8io0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Volgograd|LMT TSAT STAT STAT VOLT VOLST VOLST VOLT|-2V.E -30 -30 -40 -40 -50 -40 -30|01234545454545454545467674676767676767676767676767676767676767674|-21IqV.E cLXV.E cEM0 1gqn0 Lco0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1fA0 1cM0 2pz0 1cJ0 1cQ0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0",
		"Europe/Warsaw|WMT CET CEST EET EEST|-1o -10 -20 -20 -30|012121234312121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121|-2ctdo 1LXo 11d0 1iO0 11A0 1o00 11A0 1on0 11A0 6zy0 HWP0 5IM0 WM0 1fA0 1cM0 1dz0 1mL0 1en0 15B0 1aq0 1nA0 11A0 1io0 17c0 1fA0 1a00 iDX0 LA0 1cM0 1cM0 1C00 Oo0 1cM0 1cM0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1C00 LA0 uso0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cN0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"Europe/Zaporozhye|CUT EET MSK CEST CET MSD EEST|-2k -20 -30 -20 -10 -40 -30|01234342525252525252525252526161616161616161616161616161616161616161616161616161616161616161616161616161616161616161616161|-1Pc2k eUok rdb0 2RE0 WM0 1fA0 8m0 1v9a0 1db0 1cN0 1db0 1cN0 1db0 1dd0 1cO0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cK0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cQ0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"HST|HST|a0|0|",
		"Indian/Antananarivo|LMT EAT EAST|-3a.4 -30 -40|0121|-2mrDa.4 1HRba.4 Ao0",
		"Indian/Chagos|LMT IOT IOT|-4N.E -50 -60|012|-2xosN.E 3AGLN.E",
		"Indian/Christmas|CXT|-70|0|",
		"Indian/Cocos|CCT|-6u|0|",
		"Indian/Comoro|LMT EAT|-2R.4 -30|01|-2mrCR.4",
		"Indian/Kerguelen|zzz TFT|0 -50|01|-MG00",
		"Indian/Mahe|LMT SCT|-3F.M -40|01|-2yO3F.M",
		"Indian/Maldives|MMT MVT|-4S -50|01|-olgS",
		"Indian/Mauritius|LMT MUT MUST|-3O -40 -50|012121|-2xorO 34unO 14L0 12kr0 11z0",
		"Indian/Mayotte|LMT EAT|-30.U -30|01|-2mrD0.U",
		"Indian/Reunion|LMT RET|-3F.Q -40|01|-2mDDF.Q",
		"Kwajalein|MHT KWAT MHT|-b0 c0 -c0|012|-AX0 W9X0",
		"MET|MET MEST|-10 -20|01010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-2aFe0 11d0 1iO0 11A0 1o00 11A0 Qrc0 6i00 WM0 1fA0 1cM0 1cM0 1cM0 16M0 1gMM0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00",
		"MST|MST|70|0|",
		"MST7MDT|MST MDT MWT MPT|70 60 60 60|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261r0 1nX0 11B0 1nX0 SgN0 8x20 ix0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"NZ-CHAT|LMT CHAST CHADT|-cd.M -cJ -dJ|012121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212121212|-vDod.M Hq2d.M IM0 1C00 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Oo0 1zc0 Rc0 1zc0 Oo0 1qM0 14o0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1lc0 14o0 1lc0 14o0 1lc0 17c0 1io0 17c0 1io0 17c0 1io0 17c0 1io0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00",
		"PST8PDT|PST PDT PWT PPT|80 70 70 70|010102301010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|-261q0 1nX0 11B0 1nX0 SgN0 8x10 iy0 QwN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1cN0 1cL0 1cN0 1cL0 s10 1Vz0 LB0 1BX0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1fz0 1a10 1fz0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 14p0 1lb0 14p0 1lb0 14p0 1nX0 11B0 1nX0 11B0 1nX0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Rd0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0 Op0 1zb0",
		"Pacific/Apia|LMT SAMT WST WSDT WSDT WST|bq.U bu b0 a0 -e0 -d0|01232345454545454545454545454545454545454545454545454545454|-2nDMx.4 1yW03.4 2rRbu 1ff0 1a00 CI0 AQ0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1io0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1a00 1fA0 1cM0 1fA0 1a00 1fA0 1a00",
		"Pacific/Chuuk|CHUT|-a0|0|",
		"Pacific/Efate|LMT VUT VUST|-bd.g -b0 -c0|0121212121212121212121|-2l9nd.g 2Szcd.g 1cL0 1oN0 10L0 1fB0 19X0 1fB0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1cN0 1cL0 1fB0 Lz0 1Nd0 An0",
		"Pacific/Enderbury|PHOT PHOT PHOT|c0 b0 -d0|012|nIc0 B8n0",
		"Pacific/Fakaofo|TKT TKT|b0 -d0|01|1Gfn0",
		"Pacific/Fiji|LMT FJT FJST|-bT.I -c0 -d0|012121212121212121212121212121212121212121212121212121212121212|-2bUzT.I 3m8NT.I LA0 1EM0 IM0 nJc0 LA0 1o00 Rc0 1wo0 Ao0 1Nc0 Ao0 1Q00 xz0 1Q10 xz0 1Q10 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Q10 xz0 1Q10 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Q10 xz0 1Q10 xz0 1Q10 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Q10 xz0 1Q10 xz0 1Q10 An0 1Nd0 An0 1Nd0 An0 1Nd0 An0 1Q10 xz0 1Q10",
		"Pacific/Funafuti|TVT|-c0|0|",
		"Pacific/Galapagos|LMT ECT GALT|5W.o 50 60|012|-1yVS1.A 2dTz1.A",
		"Pacific/Gambier|LMT GAMT|8X.M 90|01|-2jof0.c",
		"Pacific/Guadalcanal|LMT SBT|-aD.M -b0|01|-2joyD.M",
		"Pacific/Guam|GST ChST|-a0 -a0|01|1fpq0",
		"Pacific/Honolulu|HST HDT HST|au 9u a0|010102|-1thLu 8x0 lef0 8Pz0 46p0",
		"Pacific/Kiritimati|LINT LINT LINT|aE a0 -e0|012|nIaE B8nk",
		"Pacific/Kosrae|KOST KOST|-b0 -c0|010|-AX0 1bdz0",
		"Pacific/Majuro|MHT MHT|-b0 -c0|01|-AX0",
		"Pacific/Marquesas|LMT MART|9i 9u|01|-2joeG",
		"Pacific/Midway|NST NDT BST SST|b0 a0 b0 b0|01023|-x3N0 An0 pJd0 EyM0",
		"Pacific/Nauru|LMT NRT JST NRT|-b7.E -bu -90 -c0|01213|-1Xdn7.E PvzB.E 5RCu 1ouJu",
		"Pacific/Niue|NUT NUT NUT|bk bu b0|012|-KfME 17y0a",
		"Pacific/Norfolk|NMT NFT|-bc -bu|01|-Kgbc",
		"Pacific/Noumea|LMT NCT NCST|-b5.M -b0 -c0|01212121|-2l9n5.M 2EqM5.M xX0 1PB0 yn0 HeP0 Ao0",
		"Pacific/Pago_Pago|LMT SAMT NST BST SST|bm.M bu b0 b0 b0|01234|-2nDMB.c 1yW07.c FXzu EyM0",
		"Pacific/Palau|PWT|-90|0|",
		"Pacific/Pitcairn|PNT PST|8u 80|01|18Vku",
		"Pacific/Pohnpei|PONT|-b0|0|",
		"Pacific/Port_Moresby|PGT|-a0|0|",
		"Pacific/Rarotonga|CKT CKHST CKT|au 9u a0|012121212121212121212121212|lyWu IL0 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Onu 1zcu Rbu 1zcu Onu 1zcu Onu 1zcu Onu",
		"Pacific/Saipan|MPT MPT ChST|-90 -a0 -a0|012|-AV0 1g2n0",
		"Pacific/Tahiti|LMT TAHT|9W.g a0|01|-2joe1.I",
		"Pacific/Tarawa|GILT|-c0|0|",
		"Pacific/Tongatapu|TOT TOT TOST|-ck -d0 -e0|01212121|-1aB0k 2n5dk 15A0 1wo0 xz0 1Q10 xz0",
		"Pacific/Wake|WAKT|-c0|0|",
		"Pacific/Wallis|WFT|-c0|0|",
		"WET|WET WEST|0 -10|010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010|hDB0 1a00 1fA0 1cM0 1cM0 1cM0 1fA0 1a00 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1cM0 1fA0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00 11A0 1qM0 WM0 1qM0 WM0 1qM0 WM0 1qM0 11A0 1o00 11A0 1o00"
	],
	"links": [
		"Africa/Addis_Ababa|Africa/Asmara",
		"Africa/Addis_Ababa|Africa/Asmera",
		"Africa/Bamako|Africa/Timbuktu",
		"Africa/Bujumbura|Africa/Lubumbashi",
		"Africa/Cairo|Egypt",
		"Africa/Juba|Africa/Khartoum",
		"Africa/Lome|Etc/GMT",
		"Africa/Lome|Etc/GMT+0",
		"Africa/Lome|Etc/GMT-0",
		"Africa/Lome|Etc/GMT0",
		"Africa/Lome|Etc/Greenwich",
		"Africa/Lome|GMT",
		"Africa/Lome|GMT+0",
		"Africa/Lome|GMT-0",
		"Africa/Lome|GMT0",
		"Africa/Lome|Greenwich",
		"Africa/Tripoli|Libya",
		"America/Adak|America/Atka",
		"America/Adak|US/Aleutian",
		"America/Anchorage|US/Alaska",
		"America/Anguilla|America/Dominica",
		"America/Anguilla|America/Grenada",
		"America/Anguilla|America/Guadeloupe",
		"America/Anguilla|America/Marigot",
		"America/Anguilla|America/Montserrat",
		"America/Anguilla|America/Port_of_Spain",
		"America/Anguilla|America/St_Barthelemy",
		"America/Anguilla|America/St_Kitts",
		"America/Anguilla|America/St_Lucia",
		"America/Anguilla|America/St_Thomas",
		"America/Anguilla|America/St_Vincent",
		"America/Anguilla|America/Tortola",
		"America/Anguilla|America/Virgin",
		"America/Argentina/Buenos_Aires|America/Buenos_Aires",
		"America/Argentina/Catamarca|America/Argentina/ComodRivadavia",
		"America/Argentina/Catamarca|America/Catamarca",
		"America/Argentina/Cordoba|America/Cordoba",
		"America/Argentina/Cordoba|America/Rosario",
		"America/Argentina/Jujuy|America/Jujuy",
		"America/Argentina/Mendoza|America/Mendoza",
		"America/Aruba|America/Curacao",
		"America/Aruba|America/Kralendijk",
		"America/Aruba|America/Lower_Princes",
		"America/Atikokan|America/Coral_Harbour",
		"America/Chicago|US/Central",
		"America/Denver|America/Shiprock",
		"America/Denver|Navajo",
		"America/Denver|US/Mountain",
		"America/Detroit|US/Michigan",
		"America/Edmonton|Canada/Mountain",
		"America/Ensenada|America/Tijuana",
		"America/Ensenada|Mexico/BajaNorte",
		"America/Fort_Wayne|America/Indiana/Indianapolis",
		"America/Fort_Wayne|America/Indianapolis",
		"America/Fort_Wayne|US/East-Indiana",
		"America/Halifax|Canada/Atlantic",
		"America/Havana|Cuba",
		"America/Indiana/Knox|America/Knox_IN",
		"America/Indiana/Knox|US/Indiana-Starke",
		"America/Jamaica|Jamaica",
		"America/Kentucky/Louisville|America/Louisville",
		"America/Los_Angeles|US/Pacific",
		"America/Los_Angeles|US/Pacific-New",
		"America/Manaus|Brazil/West",
		"America/Mazatlan|Mexico/BajaSur",
		"America/Mexico_City|Mexico/General",
		"America/New_York|US/Eastern",
		"America/Noronha|Brazil/DeNoronha",
		"America/Phoenix|US/Arizona",
		"America/Porto_Acre|America/Rio_Branco",
		"America/Porto_Acre|Brazil/Acre",
		"America/Regina|Canada/East-Saskatchewan",
		"America/Regina|Canada/Saskatchewan",
		"America/Santiago|Chile/Continental",
		"America/Sao_Paulo|Brazil/East",
		"America/St_Johns|Canada/Newfoundland",
		"America/Toronto|Canada/Eastern",
		"America/Vancouver|Canada/Pacific",
		"America/Whitehorse|Canada/Yukon",
		"America/Winnipeg|Canada/Central",
		"Antarctica/McMurdo|Antarctica/South_Pole",
		"Antarctica/McMurdo|NZ",
		"Antarctica/McMurdo|Pacific/Auckland",
		"Arctic/Longyearbyen|Atlantic/Jan_Mayen",
		"Arctic/Longyearbyen|Europe/Oslo",
		"Asia/Ashgabat|Asia/Ashkhabad",
		"Asia/Calcutta|Asia/Kolkata",
		"Asia/Chongqing|Asia/Chungking",
		"Asia/Dacca|Asia/Dhaka",
		"Asia/Ho_Chi_Minh|Asia/Saigon",
		"Asia/Hong_Kong|Hongkong",
		"Asia/Istanbul|Europe/Istanbul",
		"Asia/Istanbul|Turkey",
		"Asia/Jerusalem|Asia/Tel_Aviv",
		"Asia/Jerusalem|Israel",
		"Asia/Kathmandu|Asia/Katmandu",
		"Asia/Macao|Asia/Macau",
		"Asia/Makassar|Asia/Ujung_Pandang",
		"Asia/Nicosia|Europe/Nicosia",
		"Asia/Seoul|ROK",
		"Asia/Shanghai|PRC",
		"Asia/Singapore|Singapore",
		"Asia/Taipei|ROC",
		"Asia/Tehran|Iran",
		"Asia/Thimbu|Asia/Thimphu",
		"Asia/Tokyo|Japan",
		"Asia/Ulaanbaatar|Asia/Ulan_Bator",
		"Atlantic/Faeroe|Atlantic/Faroe",
		"Atlantic/Reykjavik|Iceland",
		"Australia/ACT|Australia/Canberra",
		"Australia/ACT|Australia/NSW",
		"Australia/ACT|Australia/Sydney",
		"Australia/Adelaide|Australia/South",
		"Australia/Brisbane|Australia/Queensland",
		"Australia/Broken_Hill|Australia/Yancowinna",
		"Australia/Darwin|Australia/North",
		"Australia/Hobart|Australia/Tasmania",
		"Australia/LHI|Australia/Lord_Howe",
		"Australia/Melbourne|Australia/Victoria",
		"Australia/Perth|Australia/West",
		"Chile/EasterIsland|Pacific/Easter",
		"Eire|Europe/Dublin",
		"Etc/UCT|UCT",
		"Etc/UTC|Etc/Universal",
		"Etc/UTC|Etc/Zulu",
		"Etc/UTC|UTC",
		"Etc/UTC|Universal",
		"Etc/UTC|Zulu",
		"Europe/Belfast|Europe/Guernsey",
		"Europe/Belfast|Europe/Isle_of_Man",
		"Europe/Belfast|Europe/Jersey",
		"Europe/Belfast|Europe/London",
		"Europe/Belfast|GB",
		"Europe/Belfast|GB-Eire",
		"Europe/Belgrade|Europe/Ljubljana",
		"Europe/Belgrade|Europe/Podgorica",
		"Europe/Belgrade|Europe/Sarajevo",
		"Europe/Belgrade|Europe/Skopje",
		"Europe/Belgrade|Europe/Zagreb",
		"Europe/Bratislava|Europe/Prague",
		"Europe/Busingen|Europe/Vaduz",
		"Europe/Busingen|Europe/Zurich",
		"Europe/Chisinau|Europe/Tiraspol",
		"Europe/Helsinki|Europe/Mariehamn",
		"Europe/Lisbon|Portugal",
		"Europe/Moscow|W-SU",
		"Europe/Rome|Europe/San_Marino",
		"Europe/Rome|Europe/Vatican",
		"Europe/Warsaw|Poland",
		"Kwajalein|Pacific/Kwajalein",
		"NZ-CHAT|Pacific/Chatham",
		"Pacific/Chuuk|Pacific/Truk",
		"Pacific/Chuuk|Pacific/Yap",
		"Pacific/Honolulu|Pacific/Johnston",
		"Pacific/Honolulu|US/Hawaii",
		"Pacific/Pago_Pago|Pacific/Samoa",
		"Pacific/Pago_Pago|US/Samoa",
		"Pacific/Pohnpei|Pacific/Ponape"
	]
});

require.register("jashkenas~underscore@1.8.2", function (exports, module) {
//     Underscore.js 1.8.2
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.2';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var isArrayLike = function(collection) {
    var length = collection && collection.length;
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given value (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, target, fromIndex) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    return _.indexOf(obj, target, typeof fromIndex == 'number' && fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = input && input.length; i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (array == null) return [];
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = array.length; i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    if (array == null) return [];
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = array.length; i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, 'length').length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = list && list.length; i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    var i = 0, length = array && array.length;
    if (typeof isSorted == 'number') {
      i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
    } else if (isSorted && length) {
      i = _.sortedIndex(array, item);
      return array[i] === item ? i : -1;
    }
    if (item !== item) {
      return _.findIndex(slice.call(array, i), _.isNaN);
    }
    for (; i < length; i++) if (array[i] === item) return i;
    return -1;
  };

  _.lastIndexOf = function(array, item, from) {
    var idx = array ? array.length : 0;
    if (typeof from == 'number') {
      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
    }
    if (item !== item) {
      return _.findLastIndex(slice.call(array, 0, idx), _.isNaN);
    }
    while (--idx >= 0) if (array[idx] === item) return idx;
    return -1;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = array != null && array.length;
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createIndexFinder(1);

  _.findLastIndex = createIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    
    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of 
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;
  
  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

});

require.register("component~trim@0.0.1", function (exports, module) {

exports = module.exports = trim;

function trim(str){
  if (str.trim) return str.trim();
  return str.replace(/^\s*|\s*$/g, '');
}

exports.left = function(str){
  if (str.trimLeft) return str.trimLeft();
  return str.replace(/^\s*/, '');
};

exports.right = function(str){
  if (str.trimRight) return str.trimRight();
  return str.replace(/\s*$/, '');
};

});

require.register("component~value@1.1.0", function (exports, module) {

/**
 * Module dependencies.
 */

var typeOf = require('component~type@1.0.0');

/**
 * Set or get `el`'s' value.
 *
 * @param {Element} el
 * @param {Mixed} val
 * @return {Mixed}
 * @api public
 */

module.exports = function(el, val){
  if (2 == arguments.length) return set(el, val);
  return get(el);
};

/**
 * Get `el`'s value.
 */

function get(el) {
  switch (type(el)) {
    case 'checkbox':
    case 'radio':
      if (el.checked) {
        var attr = el.getAttribute('value');
        return null == attr ? true : attr;
      } else {
        return false;
      }
    case 'radiogroup':
      for (var i = 0, radio; radio = el[i]; i++) {
        if (radio.checked) return radio.value;
      }
      break;
    case 'select':
      for (var i = 0, option; option = el.options[i]; i++) {
        if (option.selected) return option.value;
      }
      break;
    default:
      return el.value;
  }
}

/**
 * Set `el`'s value.
 */

function set(el, val) {
  switch (type(el)) {
    case 'checkbox':
    case 'radio':
      if (val) {
        el.checked = true;
      } else {
        el.checked = false;
      }
      break;
    case 'radiogroup':
      for (var i = 0, radio; radio = el[i]; i++) {
        radio.checked = radio.value === val;
      }
      break;
    case 'select':
      for (var i = 0, option; option = el.options[i]; i++) {
        option.selected = option.value === val;
      }
      break;
    default:
      el.value = val;
  }
}

/**
 * Element type.
 */

function type(el) {
  var group = 'array' == typeOf(el) || 'object' == typeOf(el);
  if (group) el = el[0];
  var name = el.nodeName.toLowerCase();
  var type = el.getAttribute('type');

  if (group && type && 'radio' == type.toLowerCase()) return 'radiogroup';
  if ('input' == name && type && 'checkbox' == type.toLowerCase()) return 'checkbox';
  if ('input' == name && type && 'radio' == type.toLowerCase()) return 'radio';
  if ('select' == name) return 'select';
  return name;
}

});

require.register("component~bind@1.0.0", function (exports, module) {
/**
 * Slice reference.
 */

var slice = [].slice;

/**
 * Bind `obj` to `fn`.
 *
 * @param {Object} obj
 * @param {Function|String} fn or string
 * @return {Function}
 * @api public
 */

module.exports = function(obj, fn){
  if ('string' == typeof fn) fn = obj[fn];
  if ('function' != typeof fn) throw new Error('bind() requires a function');
  var args = slice.call(arguments, 2);
  return function(){
    return fn.apply(obj, args.concat(slice.call(arguments)));
  }
};

});

require.register("segmentio~bind-all@0.0.2", function (exports, module) {

try {
  var bind = require('component~bind@1.0.0');
  var type = require('component~type@1.0.0');
} catch (e) {
  var bind = require('bind-component');
  var type = require('type-component');
}

module.exports = function (obj) {
  for (var key in obj) {
    var val = obj[key];
    if (type(val) === 'function') obj[key] = bind(obj, obj[key]);
  }
  return obj;
};
});

require.register("ianstormtaylor~bind@0.0.2", function (exports, module) {

try {
  var bind = require('component~bind@1.0.0');
} catch (e) {
  var bind = require('bind-component');
}

var bindAll = require('segmentio~bind-all@0.0.2');


/**
 * Expose `bind`.
 */

module.exports = exports = bind;


/**
 * Expose `bindAll`.
 */

exports.all = bindAll;


/**
 * Expose `bindMethods`.
 */

exports.methods = bindMethods;


/**
 * Bind `methods` on `obj` to always be called with the `obj` as context.
 *
 * @param {Object} obj
 * @param {String} methods...
 */

function bindMethods (obj, methods) {
  methods = [].slice.call(arguments, 1);
  for (var i = 0, method; method = methods[i]; i++) {
    obj[method] = bind(obj, obj[method]);
  }
  return obj;
}
});

require.register("segmentio~is-email@0.1.1", function (exports, module) {

/**
 * Expose `isEmail`.
 */

module.exports = isEmail;


/**
 * Email address matcher.
 */

var matcher = /.+\@.+\..+/;


/**
 * Loosely validate an email address.
 *
 * @param {String} string
 * @return {Boolean}
 */

function isEmail (string) {
  return matcher.test(string);
}
});

require.register("segmentio~is-hex-color@0.0.1", function (exports, module) {

/**
 * Expose `isHexColor`.
 */

module.exports = isHexColor;


/**
 * Hex color matcher.
 */

var matcher = /^#[a-f0-9]{3}([a-f0-9]{3})?$/i;


/**
 * Check whether a `string` is a hex color.
 *
 * @param {String} string
 * @return {Boolean}
 */

function isHexColor (string) {
  return matcher.test(string);
}
});

require.register("segmentio~is-hsl-color@0.0.1", function (exports, module) {

/**
 * Expose `isHslColor`.
 */

module.exports = isHslColor;


/**
 * HSL(A) color matcher.
 */

var matcher = /^hsla?\(\s*\d{1,3}\s*,\s*\d{1,3}%\s*,\s*\d{1,3}%\s*(,\s*[\d\.]+)?\s*\)$/;


/**
 * Loosely check whether a `string` is an HSL(A) color string.
 *
 * @param {String} string
 * @return {Boolean}
 */

function isHslColor (string) {
  return matcher.test(string);
}
});

require.register("segmentio~is-rgb-color@0.0.1", function (exports, module) {

/**
 * Expose `isRgbColor`.
 */

module.exports = isRgbColor;


/**
 * RGB(A) color matcher.
 */

var matcher = /^rgba?\(\s*\d{1,3}\s*,\s*\d{1,3}\s*,\s*\d{1,3}\s*(,\s*[\d\.]+)?\s*\)$/;


/**
 * Loosely check whether a `string` is an RGB(A) color string.
 *
 * @param {String} string
 * @return {Boolean}
 */

function isRgbColor (string) {
  return matcher.test(string);
}
});

require.register("segmentio~is-url@0.1.0", function (exports, module) {

/**
 * Expose `isUrl`.
 */

module.exports = isUrl;


/**
 * Matcher.
 */

var matcher = /^(ftp|https?):\/\/([^\s\.]+\.[^\s]{2,}|localhost)$/;


/**
 * Loosely validate a URL.
 *
 * @param {String} string
 * @return {Boolean}
 */

function isUrl (string) {
  return matcher.test(string);
}
});

require.register("segmentio~is-domain@0.0.1", function (exports, module) {
/**
 * Expose `isDomain`.
 */

module.exports = isDomain;

/**
 * Matcher.
 */

var matcher = /^[a-zA-Z0-9_-]+\.[.a-zA-Z0-9_-]+$/;

/**
 * Loosely validate a domain `string`.
 *
 * @param {String} string
 * @return {Boolean}
 */

function isDomain(string){
  return matcher.test(string);
}
});

require.register("timoxley~keycode@2.0.0", function (exports, module) {
// Source: http://jsfiddle.net/vWx8V/
// http://stackoverflow.com/questions/5603195/full-list-of-javascript-keycodes



/**
 * Conenience method returns corresponding value for given keyName or keyCode.
 *
 * @param {Mixed} keyCode {Number} or keyName {String}
 * @return {Mixed}
 * @api public
 */

exports = module.exports = function(searchInput) {
  // Keyboard Events
  if (searchInput && 'object' === typeof searchInput) {
    var hasKeyCode = searchInput.which || searchInput.keyCode || searchInput.charCode
    if (hasKeyCode) searchInput = hasKeyCode
  }

  // Numbers
  if ('number' === typeof searchInput) return names[searchInput]

  // Everything else (cast to string)
  var search = String(searchInput)

  // check codes
  var foundNamedKey = codes[search.toLowerCase()]
  if (foundNamedKey) return foundNamedKey

  // check aliases
  var foundNamedKey = aliases[search.toLowerCase()]
  if (foundNamedKey) return foundNamedKey

  // weird character?
  if (search.length === 1) return search.charCodeAt(0)

  return undefined
}

/**
 * Get by name
 *
 *   exports.code['enter'] // => 13
 */

var codes = exports.code = exports.codes = {
  'backspace': 8,
  'tab': 9,
  'enter': 13,
  'shift': 16,
  'ctrl': 17,
  'alt': 18,
  'pause/break': 19,
  'caps lock': 20,
  'esc': 27,
  'space': 32,
  'page up': 33,
  'page down': 34,
  'end': 35,
  'home': 36,
  'left': 37,
  'up': 38,
  'right': 39,
  'down': 40,
  'insert': 45,
  'delete': 46,
  'command': 91,
  'right click': 93,
  'numpad *': 106,
  'numpad +': 107,
  'numpad -': 109,
  'numpad .': 110,
  'numpad /': 111,
  'num lock': 144,
  'scroll lock': 145,
  'my computer': 182,
  'my calculator': 183,
  ';': 186,
  '=': 187,
  ',': 188,
  '-': 189,
  '.': 190,
  '/': 191,
  '`': 192,
  '[': 219,
  '\\': 220,
  ']': 221,
  "'": 222,
}

// Helper aliases

var aliases = exports.aliases = {
  'windows': 91,
  '⇧': 16,
  '⌥': 18,
  '⌃': 17,
  '⌘': 91,
  'ctl': 17,
  'control': 17,
  'option': 18,
  'pause': 19,
  'break': 19,
  'caps': 20,
  'escape': 27,
  'spc': 32,
  'pgup': 33,
  'pgdn': 33,
  'ins': 45,
  'del': 46,
  'cmd': 91
}


/*!
 * Programatically add the following
 */

// lower case chars
for (i = 97; i < 123; i++) codes[String.fromCharCode(i)] = i - 32

// numbers
for (var i = 48; i < 58; i++) codes[i - 48] = i

// function keys
for (i = 1; i < 13; i++) codes['f'+i] = i + 111

// numpad keys
for (i = 0; i < 10; i++) codes['numpad '+i] = i + 96

/**
 * Get by code
 *
 *   exports.name[13] // => 'Enter'
 */

var names = exports.names = exports.title = {} // title for backward compat

// Create reverse mapping
for (i in codes) names[codes[i]] = i

// Add aliases
for (var alias in aliases) {
  codes[alias] = aliases[alias]
}

});

require.register("segmentio~extend@1.0.0", function (exports, module) {

module.exports = function extend (object) {
    // Takes an unlimited number of extenders.
    var args = Array.prototype.slice.call(arguments, 1);

    // For each extender, copy their properties on our object.
    for (var i = 0, source; source = args[i]; i++) {
        if (!source) continue;
        for (var property in source) {
            object[property] = source[property];
        }
    }

    return object;
};
});

require.register("ianstormtaylor~create-event@0.0.4", function (exports, module) {

var extend = require('segmentio~extend@1.0.0')
  , keycode = require('timoxley~keycode@2.0.0');


/**
 * Expose `createEvent`.
 */

module.exports = !!document.createEvent
  ? createEvent
  : createIeEvent;


/**
 * Default options.
 */

var defaults = {
  alt           : false,
  bubbles       : true,
  button        : 0,
  cancelable    : true,
  clientX       : 0,
  clientY       : 0,
  ctrl          : false,
  detail        : 1,
  key           : 0,
  meta          : false,
  relatedTarget : null,
  screenX       : 0,
  screenY       : 0,
  shift         : false,
  view          : window
};


/**
 * Create a non-IE event object.
 *
 * @param {String} type
 * @param {Object} options
 */

function createEvent (type, options) {
  switch (type) {
    case 'dblclick':
    case 'click':
      return createMouseEvent(type, options);
    case 'keydown':
    case 'keyup':
      return createKeyboardEvent(type, options);
  }
}


/**
 * Create a non-IE mouse event.
 *
 * @param {String} type
 * @param {Object} options
 */

function createMouseEvent (type, options) {
  options = clean(type, options);
  var e = document.createEvent('MouseEvent');
  e.initMouseEvent(
    type,
    options.bubbles,      // bubbles?
    options.cancelable,   // cancelable?
    options.view,         // view
    options.detail,       // detail
    options.screenX,      // screenX
    options.screenY,      // screenY
    options.clientX ,     // clientX
    options.clientY,      // clientY
    options.ctrl,         // ctrlKey
    options.alt,          // altKey
    options.shift,        // shiftKey
    options.meta,         // metaKey
    options.button,       // button
    options.relatedTarget // relatedTarget
  );
  return e;
}


/**
 * Create a non-IE keyboard event.
 *
 * @param {String} type
 * @param {Object} options
 */

function createKeyboardEvent (type, options) {
  options = clean(type, options);
  var e = document.createEvent('KeyboardEvent');
  (e.initKeyEvent || e.initKeyboardEvent).call(
    e,
    type,
    options.bubbles,    // bubbles?
    options.cancelable, // cancelable?
    options.view,       // view
    options.ctrl,       // ctrlKey
    options.alt,        // altKey
    options.shift,      // shiftKey
    options.meta,       // metaKey
    options.key,        // keyCode
    options.key         // charCode
  );

  // super hack: http://stackoverflow.com/questions/10455626/keydown-simulation-in-chrome-fires-normally-but-not-the-correct-key/10520017#10520017
  if (e.keyCode !== options.key) {
    Object.defineProperty(e, 'keyCode', {
      get: function () { return options.key; }
    });
    Object.defineProperty(e, 'charCode', {
      get: function () { return options.key; }
    });
    Object.defineProperty(e, 'which', {
      get: function () { return options.key; }
    });
    Object.defineProperty(e, 'shiftKey', {
      get: function () { return options.shift; }
    });
  }

  return e;
}


/**
 * Create an IE event. Surprisingly nicer API, eh?
 *
 * @param {String} type
 * @param {Object} options
 */

function createIeEvent (type, options) {
  options = clean(type, options);
  var e = document.createEventObject();
  e.altKey = options.alt;
  e.bubbles = options.bubbles;
  e.button = options.button;
  e.cancelable = options.cancelable;
  e.clientX = options.clientX;
  e.clientY = options.clientY;
  e.ctrlKey = options.ctrl;
  e.detail = options.detail;
  e.metaKey = options.meta;
  e.screenX = options.screenX;
  e.screenY = options.screenY;
  e.shiftKey = options.shift;
  e.keyCode = options.key;
  e.charCode = options.key;
  e.view = options.view;
  return e;
}


/**
 * Back an `options` object by defaults, and convert some convenience features.
 *
 * @param {String} type
 * @param {Object} options
 * @return {Object} [description]
 */

function clean (type, options) {
  options = extend({}, defaults, options);
  if ('dblclick' === type) options.detail = 2;
  if ('string' === typeof options.key) options.key = keycode(options.key);
  return options;
}

});

require.register("ianstormtaylor~trigger-event@0.1.0", function (exports, module) {

var create = require('ianstormtaylor~create-event@0.0.4');


/**
 * Expose `trigger`.
 */

module.exports = trigger;


/**
 * Trigger an event of `type` on an `el` with `options`.
 *
 * @param {Element} el
 * @param {String} type
 * @param {Object} options
 */

function trigger (el, type, options) {

  // default el is `document`
  if ('string' === typeof el) {
    options = type;
    type = el;
    el = document;
  }

  var e = create(type, options);
  el.dispatchEvent
    ? el.dispatchEvent(e)
    : el.fireEvent(ieify(type), e);
}


/**
 * Convert a type into an IE-specific type.
 *
 * @param {String} type
 * @return {String}
 */

function ieify (type) {
  return 'on' + type[0].toUpperCase() + type.slice(1);
}
});

require.register("segmentio~submit-form@0.0.1", function (exports, module) {

var trigger = require('ianstormtaylor~trigger-event@0.1.0');


/**
 * Expose `submitForm`.
 */

module.exports = submitForm;


/**
 * Submit a `form` programmatically, triggering submit handlers.
 *
 * @param {Element} form
 */

function submitForm (form) {
  var button = document.createElement('button');
  button.style.display = 'none';
  form.appendChild(button);
  trigger(button, 'click');
  form.removeChild(button);
}
});

require.register("segmentio~each@0.1.1", function (exports, module) {

/**
 * Module dependencies.
 */

var toFunction = require('component~to-function@2.0.3');
var type;

try {
  type = require('type-component');
} catch (e) {
  type = require('component~type@1.0.0');
}

/**
 * HOP reference.
 */

var has = Object.prototype.hasOwnProperty;

/**
 * Iterate the given `obj` and invoke `fn(val, i)`.
 *
 * @param {String|Array|Object} obj
 * @param {Function} fn
 * @api public
 */

module.exports = function(obj, fn){
  fn = toFunction(fn);
  switch (type(obj)) {
    case 'array':
      return array(obj, fn);
    case 'object':
      if ('number' == typeof obj.length) return array(obj, fn);
      return object(obj, fn);
    case 'string':
      return string(obj, fn);
  }
};

/**
 * Iterate string chars.
 *
 * @param {String} obj
 * @param {Function} fn
 * @api private
 */

function string(obj, fn) {
  for (var i = 0; i < obj.length; ++i) {
    fn(obj.charAt(i), i);
  }
}

/**
 * Iterate object keys.
 *
 * @param {Object} obj
 * @param {Function} fn
 * @api private
 */

function object(obj, fn) {
  for (var key in obj) {
    if (has.call(obj, key)) {
      fn(key, obj[key]);
    }
  }
}

/**
 * Iterate array-ish.
 *
 * @param {Array|Object} obj
 * @param {Function} fn
 * @api private
 */

function array(obj, fn) {
  for (var i = 0; i < obj.length; ++i) {
    fn(obj[i], i);
  }
}

});

require.register("timoxley~next-tick@0.0.2", function (exports, module) {
"use strict"

if (typeof setImmediate == 'function') {
  module.exports = function(f){ setImmediate(f) }
}
// legacy node.js
else if (typeof process != 'undefined' && typeof process.nextTick == 'function') {
  module.exports = process.nextTick
}
// fallback for other environments / postMessage behaves badly on IE8
else if (typeof window == 'undefined' || window.ActiveXObject || !window.postMessage) {
  module.exports = function(f){ setTimeout(f) };
} else {
  var q = [];

  window.addEventListener('message', function(){
    var i = 0;
    while (i < q.length) {
      try { q[i++](); }
      catch (e) {
        q = q.slice(i);
        window.postMessage('tic!', '*');
        throw e;
      }
    }
    q.length = 0;
  }, true);

  module.exports = function(fn){
    if (!q.length) window.postMessage('tic!', '*');
    q.push(fn);
  }
}

});

require.register("segmentio~ware@0.2.0", function (exports, module) {

/**
 * Expose `Ware`.
 */

module.exports = Ware;


/**
 * Initialize a new `Ware` manager.
 */

function Ware () {
  if (!(this instanceof Ware)) return new Ware();
  this.fns = [];
}


/**
 * Use a middleware `fn`.
 *
 * @param {Function} fn
 * @return {Ware}
 */

Ware.prototype.use = function (fn) {
  this.fns.push(fn);
  return this;
};


/**
 * Run through the middleware with the given `args` and optional `callback`.
 *
 * @param {Mixed} args...
 * @param {Function} callback (optional)
 * @return {Ware}
 */

Ware.prototype.run = function () {
  var fns = this.fns;
  var i = 0;
  var last = arguments[arguments.length - 1];
  var callback = 'function' == typeof last ? last : null;
  var args = callback
    ? [].slice.call(arguments, 0, arguments.length - 1)
    : [].slice.call(arguments);

  function next (err) {
    var fn = fns[i++];
    if (!fn) return callback && callback.apply(null, [err].concat(args));
    if (fn.length < args.length + 2 && err) return next(err);

    var arr = [].slice.call(args);
    if (err) arr.unshift(err);
    arr.push(next);
    fn.apply(null, arr);
  }

  next();
  return this;
};
});

require.register("segmentio~validator@0.0.13", function (exports, module) {

var ware = require('segmentio~ware@0.2.0');
var each;

/**
 * Try to require from component and node
 */

try {
  each = require('segmentio~each@0.1.1');
} catch (err) {
  each = require('each-component');
}

/**
 * Trace helper.
 *
 * TODO: move to npm
 */

function tracer(trace) {
  var ids = 0;
  return function(name, obj){
    var id = ++ids;
    obj = obj || {};
    obj.id = id;

    trace(name + ':start', obj);
    return function(obj){
      trace(name + ':end');
    }
  }
}

/**
 * Expose `Validator`.
 */

module.exports = Validator;

/**
 * Initialize a new `Validator`.
 */

function Validator (opts) {
  if (!(this instanceof Validator)) return new Validator(opts);
  opts = opts || {};
  this.trace = tracer(opts.trace || function(){});
  this.rules = [];
  this._optional = false;
}

/**
 * Add a new rule `fn`, with optional `context`.
 *
 * @param {Function} fn
 * @param {Mixed} context (optional)
 * @return {Validator}
 */

Validator.prototype.rule = function (fn, context) {
  this.rules.push({
    fn: fn,
    context: context
  });
  return this;
};

/**
 * Kick off the validation against all our rules.
 *
 * @param {Function} callback(err, valid, [context])
 * @return {Validator}
 */

Validator.prototype.validate = function (value, callback) {
  var rules = this.rules;
  var optional = this._optional;
  var middleware = ware();
  var trace = this.trace;

  each(rules, function (rule) {
    middleware.use(function (value, done) {

      // handle optional setting
      if (!value && optional) return done();

      // dont handle errors so that things like fs.exists work
      var finish = function (err, valid) {
        if (err) return done(err);
        if (!valid) return done(new ValidationError(rule));
        done();
      };

      // async
      if (rule.fn.length > 1) {
        var end = trace('validator:' + rule.fn.name);
        return rule.fn(value, function(){
          end();
          finish.apply(null, arguments);
        });
      }

      // sync
      var end = trace('validator:' + rule.fn.name);
      var val = rule.fn(value);
      end();
      finish(null, val);
    });
  });

  middleware.run(value, function (err) {
    if (!err) return callback(null, true);
    if (err && err instanceof ValidationError) {
      return callback(null, false, err.rule.context);
    }
    return callback(err);
  });

  return this;
};

/**
 * Make the validator pass on empty values.
 *
 * @param {Boolean} optional
 * @return {Validator}
 */

Validator.prototype.optional = function (optional) {
  this._optional = false === optional ? false : true;
  return this;
};

/**
 * A simple error constructor to store the rule.
 */

function ValidationError (rule) {
  this.rule = rule;
}
});

require.register("yields~prevent@0.0.2", function (exports, module) {

/**
 * prevent default on the given `e`.
 * 
 * examples:
 * 
 *      anchor.onclick = prevent;
 *      anchor.onclick = function(e){
 *        if (something) return prevent(e);
 *      };
 * 
 * @param {Event} e
 */

module.exports = function(e){
  e = e || window.event
  return e.preventDefault
    ? e.preventDefault()
    : e.returnValue = false;
};

});

require.register("yields~stop@0.0.2", function (exports, module) {

/**
 * stop propagation on the given `e`.
 * 
 * examples:
 * 
 *      anchor.onclick = require('stop');
 *      anchor.onclick = function(e){
 *        if (!some) return require('stop')(e);
 *      };
 * 
 * 
 * @param {Event} e
 */

module.exports = function(e){
  e = e || window.event;
  return e.stopPropagation
    ? e.stopPropagation()
    : e.cancelBubble = true;
};

});

require.register("johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2/lib/adapter.js", function (exports, module) {

var classes = require('component~classes@1.1.4');
var domify = require('component~domify@1.1.1');
var next = require('ianstormtaylor~next-sibling@0.0.1');
var type = require('component~type@1.0.0');
var value = require('component~value@1.1.0');


/**
 * Default element accessor.
 *
 * @param {Element|Object} view
 */

exports.el = function (view) {
  if (view.el) return view.el; // handle views
  return view;
};


/**
 * Default value method.
 *
 * @param {Element|Object} view
 */

exports.value = function (view) {
  var el = this.el(view);
  if ('function' == typeof view.value) return view.value();
  if ('element' != type(el)) return;
  return value(el);
};


/**
 * Default valid method.
 *
 * @param {Element|Object} view
 */

exports.valid = function (view) {
  this.clear(view);
  var el = this.el(view);
  if ('function' == typeof view.valid) return view.valid();
  if ('element' != type(el)) return;

  classes(el).add('valid');
};


/**
 * Default invalid method.
 *
 * @param {Element|Object} view
 * @param {String} msg
 */

exports.invalid = function (view, msg) {
  this.clear(view);
  var el = this.el(view);
  if ('function' == typeof view.invalid) return view.invalid(msg);
  if ('element' != type(el)) return;

  classes(el).add('invalid');
  if (msg && el.parentNode) {
    var message = domify('<label class="validator-message">');
    message.textContent = msg;
    el.parentNode.insertBefore(message, el.nextSibling);
  }
};


/**
 * Default clear validation method.
 *
 * @param {Element|Object} view
 */

exports.clear = function (view) {
  var el = this.el(view);
  if ('function' == typeof view.valid) return view.valid();
  if ('element' != type(el)) return;

  classes(el).remove('valid').remove('invalid');
  var message;
  while (message = next(el, '.validator-message')) {
    if (el.parentNode) el.parentNode.removeChild(message);
  }
};
});

require.register("johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2/lib/field.js", function (exports, module) {

var adapter = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2/lib/adapter.js');
var bind = require('component~event@0.1.2').bind;
var each = require('component~each@0.1.0');
var type = require('component~type@1.0.0');
var Validator = require('segmentio~validator@0.0.13');
var validators = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2/lib/validators.js');


/**
 * Expose `Field`.
 */

module.exports = Field;


/**
 * Initialize a new `Field`.
 *
 * @param {Element} el
 * @param {Object} adapter
 * @param {Object} validators
 */

function Field (el, validator) {
  this.el = el;
  this.validator = validator;
  this.adapter = validator.adapter;
  this.validators = validator.validators;
  this._validator = new Validator().optional();
  this._valid = true;
  this.form = validator.form;
}


/**
 * Add a validation `fn` displaying `message` when invalid.
 *
 * @param {Function|RegExp|String} fn
 * @param {Mixed} settings (optional)
 * @param {String} message (optional)
 * @return {Field}
 */

Field.prototype.is = function (fn) {
  var settings = arguments.length < 3 ? [] : [].slice.call(arguments, 1, arguments.length - 1);
  var message = arguments.length == 1 ? '' : arguments[arguments.length - 1];

  // required
  if ('required' == fn) this._validator.optional(false);

  // regexp
  if ('regexp' == type(fn)) fn = this.validators.regexp(fn);

  // shorthand
  if ('string' == type(fn)) fn = this.validators[fn];

  // handle fns that take settings
  if (settings.length) fn = fn.apply(this, settings);

  this._validator.rule(fn, message);
  return this;
};


/**
 * Validate our element against all of its rules, and `callback(valid)`.
 *
 * @param {Function} callback (optional)
 * @return {Field}
 */

Field.prototype.validate = function (callback) {
  var self = this;
  var value = this.adapter.value(this.el);

  this._validator.validate(value, function (err, valid, msg) {
    valid
      ? self.adapter.valid(self.el)
      : self.adapter.invalid(self.el, msg);
    callback && callback(err, valid, msg);
  });

  return this;
};


/**
 * Set an `event` trigger for validation.
 *
 * @param {String} event
 * @return {Field}
 */

Field.prototype.on = function (event) {
  var self = this;
  bind(this.el, event, function (e) {
    // don't validate an empty input on blur, that's annoying
    if ('blur' === event && !self.adapter.value(self.el)) return;
    self.validate();
  });
  return this;
};

});

require.register("johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2", function (exports, module) {

var adapter = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2/lib/adapter.js');
var bind = require('ianstormtaylor~bind@0.0.2');
var event = require('component~event@0.1.2');
var clone = require('component~clone@0.2.2');
var Field = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2/lib/field.js');
var submit = require('segmentio~submit-form@0.0.1');
var Vldtr = require('segmentio~validator@0.0.13');
var validators = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2/lib/validators.js');


/**
 * Expose `Validator`.
 */

module.exports = exports = Validator;


/**
 * Initialize a new `Validator`.
 *
 * @param {Element} form
 */

function Validator (form) {
  if (!(this instanceof Validator)) return new Validator(form);
  this.form = form;
  this._validator = new Vldtr();
  this.adapter = clone(adapter);
  this.validators = clone(validators);
  this.submit = bind(this, this.submit);
  this.bind();
}


/**
 * Use a `plugin`.
 *
 * @param {Function} plugin
 * @return {Validator}
 */

Validator.prototype.use = function (plugin) {
  plugin(this);
  return this;
};


/**
 * Set an aditional trigger `event` for individual field validation.
 *
 * @param {String} event
 * @return {Validator}
 */

Validator.prototype.on = function (event) {
  this._event = event;
  return this;
};


/**
 * Add a field `el` to be validated.
 *
 * @param {Element|String} el
 * @return {Validator}
 */

Validator.prototype.field = function (el) {
  if ('string' === typeof el) el = this.form.querySelector('[name="' + el + '"]');
  var field = new Field(el, this);
  if (this._event) field.on(this._event);

  this._validator.rule(function (val, done) {
    field.validate(done);
  });

  // let us chain `is` like we were the field
  this.is = function () {
    field.is.apply(field, arguments);
    return this;
  };

  return this;
};


/**
 * Validate each field and `callback(valid)`.
 *
 * @param {Function} callback
 * @return {Validator}
 */

Validator.prototype.validate = function (callback) {
  this._validator.validate(null, function (err, valid, msg) {
    callback && callback(err, valid, msg);
  });
  return this;
};


/**
 * Define a view-specific validator `fn`.
 *
 * @param {String|Object} name
 * @param {Function} fn
 * @return {Validator}
 */

Validator.prototype.validator = function (name, fn) {
  if ('object' == typeof name) {
    for (var key in name) this.validator(key, name[key]);
    return;
  }

  this.validators[name] = fn;
  return this;
};


/**
 * Define a view-specific el adapter `fn`.
 *
 * @param {Function} fn
 * @return {Validator}
 */

Validator.prototype.el = function (fn) {
  this.adapter.el = fn;
  return this;
};


/**
 * Define a view-specific value adapter `fn`.
 *
 * @param {Function} fn
 * @return {Validator}
 */

Validator.prototype.value = function (fn) {
  this.adapter.value = fn;
  return this;
};


/**
 * Define a view-specific valid adapter `fn`.
 *
 * @param {Function} fn
 * @return {Validator}
 */

Validator.prototype.valid = function (fn) {
  this.adapter.valid = fn;
  return this;
};


/**
 * Define a view-specific invalid adapter `fn`.
 *
 * @param {Function} fn
 * @return {Validator}
 */

Validator.prototype.invalid = function (fn) {
  this.adapter.invalid = fn;
  return this;
};


/**
 * Define a view-specific clear adapter `fn`.
 *
 * @param {Function} fn
 * @return {Validator}
 */

Validator.prototype.clear = function (fn) {
  this.adapter.clear = fn;
  return this;
};


/**
 * Bind the form's submit handler.
 *
 * @return {Validator}
 * @api private
 */

Validator.prototype.bind = function () {
  // capture to preempt other handlers
  event.bind(this.form, 'submit', this.submit, true);
  // prevent the browser from validating for us
  this.form.setAttribute('novalidate', true);
  return this;
};


/**
 * Unind the form's submit handler.
 *
 * @return {Validator}
 * @api private
 */

Validator.prototype.unbind = function () {
  // capture to preempt other handlers
  event.unbind(this.form, 'submit', this.submit, true);
  // enable browser form validation
  this.form.removeAttribute('novalidate');
  return this;
};


/**
 * Form submit handler.
 *
 * @param {Event} e
 * @api private
 */

Validator.prototype.submit = function (e) {
  e.stopImmediatePropagation();
  e.preventDefault();
  var self = this;
  this.validate(function (err, valid) {
    if (!err && valid) {
      self.unbind();
      submit(self.form);
    }
  });
};

});

require.register("johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2/lib/validators.js", function (exports, module) {

var email = require('segmentio~is-email@0.1.1');
var hex = require('segmentio~is-hex-color@0.0.1');
var hsl = require('segmentio~is-hsl-color@0.0.1');
var rgb = require('segmentio~is-rgb-color@0.0.1');
var trim = require('component~trim@0.0.1');
var type = require('component~type@1.0.0');
var url = require('segmentio~is-url@0.1.0');
var domain = require('segmentio~is-domain@0.0.1');


/**
 * Required.
 */

exports.required = function (val) {
  return type(val) === 'string' ? trim(val) : val;
};


/**
 * Email addresses.
 */

exports.email = email;


/**
 * URLs.
 */

exports.url = url;

/**
 * Domains.
 */

exports.domain = domain;

/**
 * HEX color.
 */

exports.hex = hex;


/**
 * HSL color.
 */

exports.hsla = exports.hsl = hsl;


/**
 * RGB color.
 */

exports.rgba = exports.rgb = rgb;


/**
 * Any color string.
 */

exports.color = function (val) {
  return hex(val) || hsl(val) || rgb(val);
};


/**
 * Number.
 *
 * Note: this won't work for straight up element validation since they
 * always return strings.
 */

exports.number = function (val) {
  return 'number' == typeof val;
};


/**
 * Regexp.
 *
 * @param {RegExp|String} regexp
 */

exports.regexp = function (regexp) {
  if ('string' === typeof regexp) regexp = new RegExp(regexp);
  return function (val) {
    return regexp.test(val);
  };
};


/**
 * Minimum length.
 *
 * @param {Number} length
 */

exports.min =
exports.minimum = function (length) {
  return function (val) {
    var l = val.length ? val.length : val;
    return l >= length;
  };
};


/**
 * Maximum length.
 * @param {Number} length
 */

exports.max =
exports.maximum = function (length) {
  return function (val) {
    var l = val.length ? val.length : val;
    return l <= length;
  };
};


/**
 * Validation rule that requires 1 field be equal to another
 *
 * When a string is used, it will search for an input element with that name.
 * Otherwise, it's assumed to be something that field.adapter.value will
 * recognize
 *
 * @param {String|mixed} other
 * @returns {Function}
 */

exports.equal = function (other) {
    var field = this;
    return function (val) {
      if (type(other) === 'string') {
        var el = field.form.querySelector("[name=\"" + other + "\"]");
      }
      return val === field.adapter.value(el || other);
    };
};

});

require.register("johntron~is-ip-address@39a0715c025a0be4d5956e1b891682d6d0f18e18", function (exports, module) {
var ipv6_matcher = /^((([0-9A-Fa-f]{1,4}:){7}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}:[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){5}:([0-9A-Fa-f]{1,4}:)?[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){4}:([0-9A-Fa-f]{1,4}:){0,2}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){3}:([0-9A-Fa-f]{1,4}:){0,3}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){2}:([0-9A-Fa-f]{1,4}:){0,4}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){6}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(([0-9A-Fa-f]{1,4}:){0,5}:((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|(::([0-9A-Fa-f]{1,4}:){0,5}((\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b)\.){3}(\b((25[0-5])|(1\d{2})|(2[0-4]\d)|(\d{1,2}))\b))|([0-9A-Fa-f]{1,4}::([0-9A-Fa-f]{1,4}:){0,5}[0-9A-Fa-f]{1,4})|(::([0-9A-Fa-f]{1,4}:){0,6}[0-9A-Fa-f]{1,4})|(([0-9A-Fa-f]{1,4}:){1,7}:))$/,
    ipv4_matcher = /^([1-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(\.([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])){3}$/;

module.exports = function (validator) {
    validator.validators.ip = module.exports.validate;
};

module.exports.validate = function (string) {
    var matcher;

    if (string.match(/:/) !== null) {
        matcher = ipv6_matcher;
    } else {
        matcher = ipv4_matcher;
    }

    return matcher.test(string);
};
});

require.register("johntron~trigger-event@edf8b02871143c7beedd732614226038f8938b68", function (exports, module) {
module.exports = trigger;

/** 
  Event type mappings.
  This is not an exhaustive list, feel free to fork and contribute more.
  Namely keyboard events are not currently supported.
*/
var eventTypes = {
  load:        'HTMLEvents', 
  unload:      'HTMLEvents', 
  abort:       'HTMLEvents', 
  error:       'HTMLEvents', 
  select:      'HTMLEvents', 
  change:      'HTMLEvents', 
  submit:      'HTMLEvents', 
  reset:       'HTMLEvents', 
  focus:       'HTMLEvents', 
  blur:        'HTMLEvents', 
  resize:      'HTMLEvents', 
  scroll:      'HTMLEvents', 
  input:       'HTMLEvents',

  keyup:	   'KeyboardEvent',
  keydown:	   'KeyboardEvent',
  
  click:       'MouseEvents',
  dblclick:    'MouseEvents', 
  mousedown:   'MouseEvents', 
  mouseup:     'MouseEvents', 
  mouseover:   'MouseEvents', 
  mousemove:   'MouseEvents', 
  mouseout:    'MouseEvents',
  contextmenu: 'MouseEvents'
};

// Default event properties:
var defaults = {
  clientX: 0,
  clientY: 0,
  button: 0,
  ctrlKey: false,
  altKey: false,
  shiftKey: false,
  metaKey: false,
  bubbles: true,
  cancelable: true,
  view: null,
  key: '',
  location: 0,
  modifiers: '',
  repeat: 0,
  locale: ''
};

/**
 * Trigger a DOM event.
 * 
 *    trigger(document.body, "click", {clientX: 10, clientY: 35});
 *
 * Where sensible, sane defaults will be filled in.  See the list of event
 * types for supported events.
 *
 * Loosely based on:
 * https://github.com/kangax/protolicious/blob/master/event.simulate.js
 */
function trigger(el, name, options){
  var event, type;
  
  options = options || {};
  for (var attr in defaults) {
	  if (!options.hasOwnProperty(attr)) {
		  options[attr] = defaults[attr];
	  }
  }
  
  if (document.createEvent) {
    // Standard Event
    type = eventTypes[name] || 'CustomEvent';
    event = document.createEvent(type);
    initializers[type](el, name, event, options);
    el.dispatchEvent(event);
  } else {
    // IE Event
    event = document.createEventObject();
    for (var key in options){
      event[key] = options[key];
    }
    el.fireEvent('on' + name, event);
  }
}

var initializers = {
  HTMLEvents: function(el, name, event, o){
    return event.initEvent(name, o.bubbles, o.cancelable);
  },
  KeyboardEvent: function(el, name, event, o){
	// This is still incomplete, but useful for unit testing
    if (event.initKeyboardEvent) {
		return event.initKeyboardEvent(
			name,
			o.bubbles,
			o.cancelable,
			o.view,
			'' + o.key,
			o.location,
			o.modifiers,
			o.repeat,
			o.locale
		);
	} else {
		return event.initKeyEvent(
			name,
			o.bubbles,
			o.cancelable,
			o.view,
			o.ctrlKey,
			o.altKey,
			o.shiftKey,
			o.metaKey,
			o.key,
			o.key
		);
	}
  },
  MouseEvents: function(el, name, event, o){
    var screenX = ('screenX' in o) ? o.screenX : o.clientX;
    var screenY = ('screenY' in o) ? o.screenY : o.clientY;
    var clicks;
    var button;
    
    if ('detail' in o) {
      clicks = o.detail;
    } else if (name === 'dblclick') {
      clicks = 2;
    } else {
      clicks = 1;
    }
    
    // Default context menu to be a right click
    if (name === 'contextmenu') {
      button = button = o.button || 2;
    }
    
    return event.initMouseEvent(name, o.bubbles, o.cancelable, document.defaultView, 
          clicks, screenX, screenY, o.clientX, o.clientY,
          o.ctrlKey, o.altKey, o.shiftKey, o.metaKey, button, el);
  },
  CustomEvent: function(el, name, event, o){
    return event.initCustomEvent(name, o.bubbles, o.cancelable, o.detail);
  }
};

});

require.register("matthewmueller~debounce@0.0.1", function (exports, module) {
/**
 * Debounce
 *
 * Returns a function, that, as long as it continues to be invoked, will not
 * be triggered. The function will be called after it stops being called for
 * N milliseconds. If `immediate` is passed, trigger the function on the
 * leading edge, instead of the trailing.
 *
 * @param {Function} func
 * @param {Number} wait
 * @param {Boolean} immediate
 * @return {Function}
 */

module.exports = function(func, wait, immediate) {
  var timeout, result;
  return function() {
    var context = this, args = arguments;
    var later = function() {
      timeout = null;
      if (!immediate) result = func.apply(context, args);
    };
    var callNow = immediate && !timeout;
    clearTimeout(timeout);
    timeout = setTimeout(later, wait);
    if (callNow) result = func.apply(context, args);
    return result;
  };
};

});

require.register("johntron~is-host@9f441b6f34440e715b31f06157611292e67565a5", function (exports, module) {
var is_ip_address = require('johntron~is-ip-address@39a0715c025a0be4d5956e1b891682d6d0f18e18').validate,
    tlds = require('johntron~is-host@9f441b6f34440e715b31f06157611292e67565a5/tlds.js');

function is_hostname(str) {
    var labels = str.split('.').slice(0, -1),
        tld = str.split('.').slice(-1)[0],
        valid_label = new RegExp("^[a-z0-9]?[a-z0-9-]*[a-z0-9]$");

    if (tld === '') {
        // Don't allow trailing '.', because this format is mostly only used in zone files
        return false;
    }

    if (str.length > 253) {
        return false;
    }

    if (tld !== 'local' && tlds.indexOf(tld) === -1) {
        // Not a valid TLD
        return false;
    }

    for (var i = 0; i < labels.length; i++) {
        var label = labels[i];

        if (label.length < 1 || label.length > 63) {
            return false;
        }

        if (!valid_label.test(label)) {
            // Must be alphanumeric with hyphens only in the middle
            return false;
        }
    }

    return true;
}

module.exports = function (validator) {
    validator.validators.host = module.exports.validate;
};

module.exports.validate = function (string) {
    return is_ip_address(string) || is_hostname(string);
};

//var tests = [
//    ["a.com", true], // gTLD
//    ["a.cc", true], // ccTLD
//    ["a.local", true], // Special TLD
//    ["a", false], // No TLD
//    ["a.a.a.a", false], // Invalid TLD
//    ["192.168.1.1", true], // v4
//    ["ff::1", true], // v6
//    ["192.", false],
//    ["ff:", false]
//];
//
//tests.forEach(function (test) {
//    var str = test[0],
//        expected = test[1];
//
//    if (module.exports.validate(str) !== expected) {
//        console.error('Expected', str, 'to be', expected ? 'valid' : 'invalid');
//    }
//});
});

require.register("johntron~is-host@9f441b6f34440e715b31f06157611292e67565a5/tlds.js", function (exports, module) {
/**
 * Taken from http://www.iana.org/domains/root/db on 1 Dec 2014 with this:
 *
 *  var links = document.querySelectorAll('.domain.tld a'),
 *      str = '';
 *
 *  [].forEach.call(links, function (link) { str += link.textContent.replace(/\./, '') + '\n'; });
 *
 *  console.log(str);
 */
module.exports = [
    "abogado",
    "ac",
    "academy",
    "accountants",
    "active",
    "actor",
    "ad",
    "ae",
    "aero",
    "af",
    "ag",
    "agency",
    "ai",
    "airforce",
    "al",
    "allfinanz",
    "alsace",
    "am",
    "an",
    "android",
    "ao",
    "aq",
    "ar",
    "archi",
    "army",
    "arpa",
    "as",
    "asia",
    "associates",
    "at",
    "attorney",
    "au",
    "auction",
    "audio",
    "autos",
    "aw",
    "ax",
    "axa",
    "az",
    "ba",
    "band",
    "bar",
    "bargains",
    "bayern",
    "bb",
    "bd",
    "be",
    "beer",
    "berlin",
    "best",
    "bf",
    "bg",
    "bh",
    "bi",
    "bid",
    "bike",
    "bio",
    "biz",
    "bj",
    "bl",
    "black",
    "blackfriday",
    "bloomberg",
    "blue",
    "bm",
    "bmw",
    "bn",
    "bnpparibas",
    "bo",
    "boo",
    "boutique",
    "bq",
    "br",
    "brussels",
    "bs",
    "bt",
    "budapest",
    "build",
    "builders",
    "business",
    "buzz",
    "bv",
    "bw",
    "by",
    "bz",
    "bzh",
    "ca",
    "cab",
    "cal",
    "camera",
    "camp",
    "cancerresearch",
    "capetown",
    "capital",
    "caravan",
    "cards",
    "care",
    "career",
    "careers",
    "casa",
    "cash",
    "cat",
    "catering",
    "cc",
    "cd",
    "center",
    "ceo",
    "cern",
    "cf",
    "cg",
    "ch",
    "channel",
    "cheap",
    "christmas",
    "chrome",
    "church",
    "ci",
    "citic",
    "city",
    "ck",
    "cl",
    "claims",
    "cleaning",
    "click",
    "clinic",
    "clothing",
    "club",
    "cm",
    "cn",
    "co",
    "coach",
    "codes",
    "coffee",
    "college",
    "cologne",
    "com",
    "community",
    "company",
    "computer",
    "condos",
    "construction",
    "consulting",
    "contractors",
    "cooking",
    "cool",
    "coop",
    "country",
    "cr",
    "credit",
    "creditcard",
    "cricket",
    "crs",
    "cruises",
    "cu",
    "cuisinella",
    "cv",
    "cw",
    "cx",
    "cy",
    "cymru",
    "cz",
    "dad",
    "dance",
    "dating",
    "day",
    "de",
    "deals",
    "degree",
    "delivery",
    "democrat",
    "dental",
    "dentist",
    "desi",
    "diamonds",
    "diet",
    "digital",
    "direct",
    "directory",
    "discount",
    "dj",
    "dk",
    "dm",
    "dnp",
    "do",
    "domains",
    "durban",
    "dvag",
    "dz",
    "eat",
    "ec",
    "edu",
    "education",
    "ee",
    "eg",
    "eh",
    "email",
    "emerck",
    "energy",
    "engineer",
    "engineering",
    "enterprises",
    "equipment",
    "er",
    "es",
    "esq",
    "estate",
    "et",
    "eu",
    "eus",
    "events",
    "everbank",
    "exchange",
    "expert",
    "exposed",
    "fail",
    "farm",
    "feedback",
    "fi",
    "finance",
    "financial",
    "firmdale",
    "fish",
    "fishing",
    "fitness",
    "fj",
    "fk",
    "flights",
    "florist",
    "flsmidth",
    "fly",
    "fm",
    "fo",
    "foo",
    "forsale",
    "foundation",
    "fr",
    "frl",
    "frogans",
    "fund",
    "furniture",
    "futbol",
    "ga",
    "gal",
    "gallery",
    "gb",
    "gbiz",
    "gd",
    "ge",
    "gent",
    "gf",
    "gg",
    "gh",
    "gi",
    "gift",
    "gifts",
    "gives",
    "gl",
    "glass",
    "gle",
    "global",
    "globo",
    "gm",
    "gmail",
    "gmo",
    "gmx",
    "gn",
    "google",
    "gop",
    "gov",
    "gp",
    "gq",
    "gr",
    "graphics",
    "gratis",
    "green",
    "gripe",
    "gs",
    "gt",
    "gu",
    "guide",
    "guitars",
    "guru",
    "gw",
    "gy",
    "hamburg",
    "haus",
    "healthcare",
    "help",
    "here",
    "hiphop",
    "hiv",
    "hk",
    "hm",
    "hn",
    "holdings",
    "holiday",
    "homes",
    "horse",
    "host",
    "hosting",
    "house",
    "how",
    "hr",
    "ht",
    "hu",
    "ibm",
    "id",
    "ie",
    "il",
    "im",
    "immo",
    "immobilien",
    "in",
    "industries",
    "info",
    "ing",
    "ink",
    "institute",
    "insure",
    "int",
    "international",
    "investments",
    "io",
    "iq",
    "ir",
    "is",
    "it",
    "je",
    "jetzt",
    "jm",
    "jo",
    "jobs",
    "joburg",
    "jp",
    "juegos",
    "kaufen",
    "ke",
    "kg",
    "kh",
    "ki",
    "kim",
    "kitchen",
    "kiwi",
    "km",
    "kn",
    "koeln",
    "kp",
    "kr",
    "krd",
    "kred",
    "kw",
    "ky",
    "kz",
    "la",
    "lacaixa",
    "land",
    "lawyer",
    "lb",
    "lc",
    "lds",
    "lease",
    "legal",
    "lgbt",
    "li",
    "life",
    "lighting",
    "limited",
    "limo",
    "link",
    "lk",
    "loans",
    "london",
    "lotto",
    "lr",
    "ls",
    "lt",
    "ltda",
    "lu",
    "luxe",
    "luxury",
    "lv",
    "ly",
    "ma",
    "madrid",
    "maison",
    "management",
    "mango",
    "market",
    "marketing",
    "mc",
    "md",
    "me",
    "media",
    "meet",
    "melbourne",
    "meme",
    "memorial",
    "menu",
    "mf",
    "mg",
    "mh",
    "miami",
    "mil",
    "mini",
    "mk",
    "ml",
    "mm",
    "mn",
    "mo",
    "mobi",
    "moda",
    "moe",
    "monash",
    "money",
    "mormon",
    "mortgage",
    "moscow",
    "motorcycles",
    "mov",
    "mp",
    "mq",
    "mr",
    "ms",
    "mt",
    "mu",
    "museum",
    "mv",
    "mw",
    "mx",
    "my",
    "mz",
    "na",
    "nagoya",
    "name",
    "navy",
    "nc",
    "ne",
    "net",
    "network",
    "neustar",
    "new",
    "nexus",
    "nf",
    "ng",
    "ngo",
    "nhk",
    "ni",
    "ninja",
    "nl",
    "no",
    "np",
    "nr",
    "nra",
    "nrw",
    "nu",
    "nyc",
    "nz",
    "okinawa",
    "om",
    "ong",
    "onl",
    "ooo",
    "org",
    "organic",
    "otsuka",
    "ovh",
    "pa",
    "paris",
    "partners",
    "parts",
    "party",
    "pe",
    "pf",
    "pg",
    "ph",
    "pharmacy",
    "photo",
    "photography",
    "photos",
    "physio",
    "pics",
    "pictures",
    "pink",
    "pizza",
    "pk",
    "pl",
    "place",
    "plumbing",
    "pm",
    "pn",
    "pohl",
    "poker",
    "post",
    "pr",
    "praxi",
    "press",
    "pro",
    "prod",
    "productions",
    "prof",
    "properties",
    "property",
    "ps",
    "pt",
    "pub",
    "pw",
    "py",
    "qa",
    "qpon",
    "quebec",
    "re",
    "realtor",
    "recipes",
    "red",
    "rehab",
    "reise",
    "reisen",
    "reit",
    "ren",
    "rentals",
    "repair",
    "report",
    "republican",
    "rest",
    "restaurant",
    "reviews",
    "rich",
    "rio",
    "rip",
    "ro",
    "rocks",
    "rodeo",
    "rs",
    "rsvp",
    "ru",
    "ruhr",
    "rw",
    "ryukyu",
    "sa",
    "saarland",
    "sarl",
    "sb",
    "sc",
    "sca",
    "scb",
    "schmidt",
    "schule",
    "science",
    "scot",
    "sd",
    "se",
    "services",
    "sexy",
    "sg",
    "sh",
    "shiksha",
    "shoes",
    "si",
    "singles",
    "sj",
    "sk",
    "sl",
    "sm",
    "sn",
    "so",
    "social",
    "software",
    "sohu",
    "solar",
    "solutions",
    "soy",
    "space",
    "spiegel",
    "sr",
    "ss",
    "st",
    "su",
    "supplies",
    "supply",
    "support",
    "surf",
    "surgery",
    "suzuki",
    "sv",
    "sx",
    "sy",
    "sydney",
    "systems",
    "sz",
    "taipei",
    "tatar",
    "tattoo",
    "tax",
    "tc",
    "td",
    "technology",
    "tel",
    "tf",
    "tg",
    "th",
    "tienda",
    "tips",
    "tirol",
    "tj",
    "tk",
    "tl",
    "tm",
    "tn",
    "to",
    "today",
    "tokyo",
    "tools",
    "top",
    "town",
    "toys",
    "tp",
    "tr",
    "trade",
    "training",
    "travel",
    "tt",
    "tui",
    "tv",
    "tw",
    "tz",
    "ua",
    "ug",
    "uk",
    "um",
    "university",
    "uno",
    "uol",
    "us",
    "uy",
    "uz",
    "va",
    "vacations",
    "vc",
    "ve",
    "vegas",
    "ventures",
    "versicherung",
    "vet",
    "vg",
    "vi",
    "viajes",
    "villas",
    "vision",
    "vlaanderen",
    "vn",
    "vodka",
    "vote",
    "voting",
    "voto",
    "voyage",
    "vu",
    "wales",
    "wang",
    "watch",
    "webcam",
    "website",
    "wed",
    "wedding",
    "wf",
    "whoswho",
    "wien",
    "wiki",
    "williamhill",
    "wme",
    "work",
    "works",
    "world",
    "ws",
    "wtc",
    "wtf",
    "测试",
    "परीक्षा",
    "佛山",
    "集团",
    "在线",
    "한국",
    "ভারত",
    "八卦",
    "موقع",
    "বাংলা",
    "公益",
    "公司",
    "移动",
    "我爱你",
    "москва",
    "испытание",
    "қаз",
    "онлайн",
    "сайт",
    "срб",
    "бел",
    "테스트",
    "орг",
    "삼성",
    "சிங்கப்பூர்",
    "商标",
    "商城",
    "дети",
    "мкд",
    "טעסט",
    "中文网",
    "中信",
    "中国",
    "中國",
    "谷歌",
    "భారత్",
    "ලංකා",
    "測試",
    "ભારત",
    "भारत",
    "آزمایشی",
    "பரிட்சை",
    "संगठन",
    "网络",
    "укр",
    "香港",
    "δοκιμή",
    "إختبار",
    "台湾",
    "台灣",
    "手机",
    "мон",
    "الجزائر",
    "عمان",
    "ایران",
    "امارات",
    "بازار",
    "پاکستان",
    "الاردن",
    "بھارت",
    "المغرب",
    "السعودية",
    "سودان",
    "عراق",
    "مليسيا",
    "شبكة",
    "გე",
    "机构",
    "组织机构",
    "ไทย",
    "سورية",
    "рус",
    "рф",
    "تونس",
    "みんな",
    "グーグル",
    "世界",
    "ਭਾਰਤ",
    "网址",
    "游戏",
    "vermögensberater",
    "vermögensberatung",
    "企业",
    "مصر",
    "قطر",
    "广东",
    "இலங்கை",
    "இந்தியா",
    "հայ",
    "新加坡",
    "فلسطين",
    "テスト",
    "政务",
    "xxx",
    "xyz",
    "yachts",
    "yandex",
    "ye",
    "yoga",
    "yokohama",
    "youtube",
    "yt",
    "za",
    "zip",
    "zm",
    "zone",
    "zw"
];
});

require.register("houzhenyu1117~humanize@component", function (exports, module) {
(function() {
  var Humanize, LABELS_FOR_POWERS_OF_KILO, isArray, isFinite, isNaN, objectRef, timeFormats, toString;

  objectRef = new function() {};

  toString = objectRef.toString;

  isNaN = function(value) {
    return value !== value;
  };

  isFinite = function(value) {
    return ((typeof window !== "undefined" && window !== null ? window.isFinite : void 0) || global.isFinite)(value) && !isNaN(parseFloat(value));
  };

  isArray = function(value) {
    return toString.call(value) === '[object Array]';
  };

  timeFormats = [
    {
      name: 'second',
      value: 1e3
    }, {
      name: 'minute',
      value: 6e4
    }, {
      name: 'hour',
      value: 36e5
    }, {
      name: 'day',
      value: 864e5
    }, {
      name: 'week',
      value: 6048e5
    }
  ];

  Humanize = {};

  Humanize.intword = function(number, charWidth, decimals) {
    if (decimals == null) {
      decimals = 2;
    }
    /*
        # This method is deprecated. Please use compactInteger instead.
        # intword will be going away in the next major version.
    */

    return Humanize.compactInteger(number, decimals);
  };

  Humanize.compactInteger = function(input, decimals) {
    var bigNumPrefixes, decimalIndex, decimalPart, decimalPartArray, length, number, numberLength, numberLengths, output, outputNumber, signString, unsignedNumber, unsignedNumberCharacterArray, unsignedNumberString, wholePart, wholePartArray, _i, _len, _length;
    if (decimals == null) {
      decimals = 0;
    }
    decimals = Math.max(decimals, 0);
    number = parseInt(input, 10);
    signString = number < 0 ? "-" : "";
    unsignedNumber = Math.abs(number);
    unsignedNumberString = "" + unsignedNumber;
    numberLength = unsignedNumberString.length;
    numberLengths = [13, 10, 7, 4];
    bigNumPrefixes = ['T', 'B', 'M', 'k'];
    if (unsignedNumber < 1000) {
      return "" + signString + unsignedNumberString;
    }
    if (numberLength > numberLengths[0] + 3) {
      return number.toExponential(decimals).replace('e+', 'x10^');
    }
    for (_i = 0, _len = numberLengths.length; _i < _len; _i++) {
      _length = numberLengths[_i];
      if (numberLength >= _length) {
        length = _length;
        break;
      }
    }
    decimalIndex = numberLength - length + 1;
    unsignedNumberCharacterArray = unsignedNumberString.split("");
    wholePartArray = unsignedNumberCharacterArray.slice(0, decimalIndex);
    decimalPartArray = unsignedNumberCharacterArray.slice(decimalIndex, decimalIndex + decimals + 1);
    wholePart = wholePartArray.join("");
    decimalPart = decimalPartArray.join("");
    if (decimalPart.length < decimals) {
      decimalPart += "" + (Array(decimals - decimalPart.length + 1).join('0'));
    }
    if (decimals === 0) {
      output = "" + signString + wholePart + bigNumPrefixes[numberLengths.indexOf(length)];
    } else {
      outputNumber = (+("" + wholePart + "." + decimalPart)).toFixed(decimals);
      output = "" + signString + outputNumber + bigNumPrefixes[numberLengths.indexOf(length)];
    }
    return output;
  };

  Humanize.intcomma = Humanize.intComma = function(number, decimals) {
    if (decimals == null) {
      decimals = 0;
    }
    return Humanize.formatNumber(number, decimals);
  };

  LABELS_FOR_POWERS_OF_KILO = {
    "P": Math.pow(2, 50),
    "T": Math.pow(2, 40),
    "G": Math.pow(2, 30),
    "M": Math.pow(2, 20)
  };

  Humanize.filesize = Humanize.fileSize = function(filesize) {
    var label, minnum;
    for (label in LABELS_FOR_POWERS_OF_KILO) {
      minnum = LABELS_FOR_POWERS_OF_KILO[label];
      if (filesize >= minnum) {
        return Humanize.formatNumber(filesize / minnum, 2, "") + " " + label + "B";
      }
    }
    if (filesize >= 1024) {
      return Humanize.formatNumber(filesize / 1024, 0) + " KB";
    }
    return Humanize.formatNumber(filesize, 0) + Humanize.pluralize(filesize, " byte");
  };

  Humanize.formatNumber = function(number, precision, thousand, decimal) {
    var base, commas, decimals, firstComma, mod, negative, usePrecision;
    if (precision == null) {
      precision = 0;
    }
    if (thousand == null) {
      thousand = ",";
    }
    if (decimal == null) {
      decimal = ".";
    }
    firstComma = function(number, thousand, position) {
      if (position) {
        return number.substr(0, position) + thousand;
      } else {
        return "";
      }
    };
    commas = function(number, thousand, position) {
      return number.substr(position).replace(/(\d{3})(?=\d)/g, "$1" + thousand);
    };
    decimals = function(number, decimal, usePrecision) {
      if (usePrecision) {
        return decimal + Humanize.toFixed(Math.abs(number), usePrecision).split(".")[1];
      } else {
        return "";
      }
    };
    usePrecision = Humanize.normalizePrecision(precision);
    negative = number < 0 && "-" || "";
    base = parseInt(Humanize.toFixed(Math.abs(number || 0), usePrecision), 10) + "";
    mod = base.length > 3 ? base.length % 3 : 0;
    return negative + firstComma(base, thousand, mod) + commas(base, thousand, mod) + decimals(number, decimal, usePrecision);
  };

  Humanize.toFixed = function(value, precision) {
    var power;
    if (precision == null) {
      precision = Humanize.normalizePrecision(precision, 0);
    }
    power = Math.pow(10, precision);
    return (Math.round(value * power) / power).toFixed(precision);
  };

  Humanize.normalizePrecision = function(value, base) {
    value = Math.round(Math.abs(value));
    if (isNaN(value)) {
      return base;
    } else {
      return value;
    }
  };

  Humanize.ordinal = function(value) {
    var end, leastSignificant, number, specialCase;
    number = parseInt(value, 10);
    if (number === 0) {
      return value;
    }
    specialCase = number % 100;
    if (specialCase === 11 || specialCase === 12 || specialCase === 13) {
      return "" + number + "th";
    }
    leastSignificant = number % 10;
    switch (leastSignificant) {
      case 1:
        end = "st";
        break;
      case 2:
        end = "nd";
        break;
      case 3:
        end = "rd";
        break;
      default:
        end = "th";
    }
    return "" + number + end;
  };

  Humanize.times = function(value, overrides) {
    var number, smallTimes, _ref;
    if (overrides == null) {
      overrides = {};
    }
    if (isFinite(value) && value >= 0) {
      number = parseFloat(value);
      smallTimes = ['never', 'once', 'twice'];
      if (overrides[number] != null) {
        return "" + overrides[number];
      } else {
        return "" + (((_ref = smallTimes[number]) != null ? _ref.toString() : void 0) || number.toString() + ' times');
      }
    }
  };

  Humanize.pluralize = function(number, singular, plural) {
    if (!((number != null) && (singular != null))) {
      return;
    }
    if (plural == null) {
      plural = singular + "s";
    }
    if (parseInt(number, 10) === 1) {
      return singular;
    } else {
      return plural;
    }
  };

  Humanize.truncate = function(str, length, ending) {
    if (length == null) {
      length = 100;
    }
    if (ending == null) {
      ending = '...';
    }
    if (str.length > length) {
      return str.substring(0, length - ending.length) + ending;
    } else {
      return str;
    }
  };

  Humanize.truncatewords = Humanize.truncateWords = function(string, length) {
    var array, i, result;
    array = string.split(" ");
    result = "";
    i = 0;
    while (i < length) {
      if (array[i] != null) {
        result += "" + array[i] + " ";
      }
      i++;
    }
    if (array.length > length) {
      return result += "...";
    }
  };

  Humanize.truncatenumber = Humanize.boundedNumber = function(num, bound, ending) {
    var result;
    if (bound == null) {
      bound = 100;
    }
    if (ending == null) {
      ending = "+";
    }
    result = null;
    if (isFinite(num) && isFinite(bound)) {
      if (num > bound) {
        result = bound + ending;
      }
    }
    return (result || num).toString();
  };

  Humanize.oxford = function(items, limit, limitStr) {
    var extra, limitIndex, numItems;
    numItems = items.length;
    if (numItems < 2) {
      return "" + items;
    } else if (numItems === 2) {
      return items.join(' and ');
    } else if ((limit != null) && numItems > limit) {
      extra = numItems - limit;
      limitIndex = limit;
      if (limitStr == null) {
        limitStr = ", and " + extra + " " + (Humanize.pluralize(extra, 'other'));
      }
    } else {
      limitIndex = -1;
      limitStr = ", and " + items[numItems - 1];
    }
    return items.slice(0, limitIndex).join(', ') + limitStr;
  };

  Humanize.dictionary = function(object, joiner, separator) {
    var defs, key, result, val;
    if (joiner == null) {
      joiner = ' is ';
    }
    if (separator == null) {
      separator = ', ';
    }
    result = '';
    if ((object != null) && typeof object === 'object' && Object.prototype.toString.call(object) !== '[object Array]') {
      defs = [];
      for (key in object) {
        val = object[key];
        defs.push("" + key + joiner + val);
      }
      result = defs.join(separator);
    }
    return result;
  };

  Humanize.frequency = function(list, verb) {
    var len, str, times;
    if (!isArray(list)) {
      return;
    }
    len = list.length;
    times = Humanize.times(len);
    if (len === 0) {
      str = "" + times + " " + verb;
    } else {
      str = "" + verb + " " + times;
    }
    return str;
  };

  Humanize.pace = function(value, intervalMs, unit) {
    var f, prefix, rate, relativePace, roundedPace, timeUnit, _i, _len;
    if (unit == null) {
      unit = 'time';
    }
    if (value === 0 || intervalMs === 0) {
      return "No " + (Humanize.pluralize(unit));
    }
    prefix = 'Approximately';
    timeUnit = null;
    rate = value / intervalMs;
    for (_i = 0, _len = timeFormats.length; _i < _len; _i++) {
      f = timeFormats[_i];
      relativePace = rate * f.value;
      if (relativePace > 1) {
        timeUnit = f.name;
        break;
      }
    }
    if (!timeUnit) {
      prefix = 'Less than';
      relativePace = 1;
      timeUnit = timeFormats[timeFormats.length - 1].name;
    }
    roundedPace = Math.round(relativePace);
    unit = Humanize.pluralize(roundedPace, unit);
    return "" + prefix + " " + roundedPace + " " + unit + " per " + timeUnit;
  };

  Humanize.nl2br = function(string, replacement) {
    if (replacement == null) {
      replacement = '<br/>';
    }
    return string.replace(/\n/g, replacement);
  };

  Humanize.br2nl = function(string, replacement) {
    if (replacement == null) {
      replacement = '\r\n';
    }
    return string.replace(/\<br\s*\/?\>/g, replacement);
  };

  Humanize.capitalize = function(string, downCaseTail) {
    if (downCaseTail == null) {
      downCaseTail = false;
    }
    return "" + (string.charAt(0).toUpperCase()) + (downCaseTail ? string.slice(1).toLowerCase() : string.slice(1));
  };

  Humanize.capitalizeAll = function(string) {
    return string.replace(/(?:^|\s)\S/g, function(a) {
      return a.toUpperCase();
    });
  };

  Humanize.titlecase = Humanize.titleCase = function(string) {
    var doTitleCase, internalCaps, smallWords, splitOnHyphensRegex, splitOnWhiteSpaceRegex,
      _this = this;
    smallWords = /\b(a|an|and|at|but|by|de|en|for|if|in|of|on|or|the|to|via|vs?\.?)\b/i;
    internalCaps = /\S+[A-Z]+\S*/;
    splitOnWhiteSpaceRegex = /\s+/;
    splitOnHyphensRegex = /-/;
    doTitleCase = function(_string, hyphenated, firstOrLast) {
      var index, stringArray, titleCasedArray, word, _i, _len;
      if (hyphenated == null) {
        hyphenated = false;
      }
      if (firstOrLast == null) {
        firstOrLast = true;
      }
      titleCasedArray = [];
      stringArray = _string.split(hyphenated ? splitOnHyphensRegex : splitOnWhiteSpaceRegex);
      for (index = _i = 0, _len = stringArray.length; _i < _len; index = ++_i) {
        word = stringArray[index];
        if (word.indexOf('-') !== -1) {
          titleCasedArray.push(doTitleCase(word, true, index === 0 || index === stringArray.length - 1));
          continue;
        }
        if (firstOrLast && (index === 0 || index === stringArray.length - 1)) {
          titleCasedArray.push(internalCaps.test(word) ? word : Humanize.capitalize(word));
          continue;
        }
        if (internalCaps.test(word)) {
          titleCasedArray.push(word);
        } else if (smallWords.test(word)) {
          titleCasedArray.push(word.toLowerCase());
        } else {
          titleCasedArray.push(Humanize.capitalize(word));
        }
      }
      return titleCasedArray.join(hyphenated ? '-' : ' ');
    };
    return doTitleCase(string);
  };

  this.Humanize = Humanize;

  if (typeof module !== "undefined" && module !== null) {
    module.exports = Humanize;
  }

}).call(this);

});

require.register("harthur~color-convert@503685a2995b74ca16cea510f150ba671a4b613b", function (exports, module) {
var conversions = require("harthur~color-convert@503685a2995b74ca16cea510f150ba671a4b613b/conversions.js");

var convert = function() {
   return new Converter();
}

for (var func in conversions) {
  // export Raw versions
  convert[func + "Raw"] =  (function(func) {
    // accept array or plain args
    return function(arg) {
      if (typeof arg == "number")
        arg = Array.prototype.slice.call(arguments);
      return conversions[func](arg);
    }
  })(func);

  var pair = /(\w+)2(\w+)/.exec(func),
      from = pair[1],
      to = pair[2];

  // export rgb2hsl and ["rgb"]["hsl"]
  convert[from] = convert[from] || {};

  convert[from][to] = convert[func] = (function(func) { 
    return function(arg) {
      if (typeof arg == "number")
        arg = Array.prototype.slice.call(arguments);
      
      var val = conversions[func](arg);
      if (typeof val == "string" || val === undefined)
        return val; // keyword

      for (var i = 0; i < val.length; i++)
        val[i] = Math.round(val[i]);
      return val;
    }
  })(func);
}


/* Converter does lazy conversion and caching */
var Converter = function() {
   this.convs = {};
};

/* Either get the values for a space or
  set the values for a space, depending on args */
Converter.prototype.routeSpace = function(space, args) {
   var values = args[0];
   if (values === undefined) {
      // color.rgb()
      return this.getValues(space);
   }
   // color.rgb(10, 10, 10)
   if (typeof values == "number") {
      values = Array.prototype.slice.call(args);        
   }

   return this.setValues(space, values);
};
  
/* Set the values for a space, invalidating cache */
Converter.prototype.setValues = function(space, values) {
   this.space = space;
   this.convs = {};
   this.convs[space] = values;
   return this;
};

/* Get the values for a space. If there's already
  a conversion for the space, fetch it, otherwise
  compute it */
Converter.prototype.getValues = function(space) {
   var vals = this.convs[space];
   if (!vals) {
      var fspace = this.space,
          from = this.convs[fspace];
      vals = convert[fspace][space](from);

      this.convs[space] = vals;
   }
  return vals;
};

["rgb", "hsl", "hsv", "cmyk", "keyword"].forEach(function(space) {
   Converter.prototype[space] = function(vals) {
      return this.routeSpace(space, arguments);
   }
});

module.exports = convert;
});

require.register("harthur~color-convert@503685a2995b74ca16cea510f150ba671a4b613b/conversions.js", function (exports, module) {
/* MIT license */

module.exports = {
  rgb2hsl: rgb2hsl,
  rgb2hsv: rgb2hsv,
  rgb2hwb: rgb2hwb,
  rgb2cmyk: rgb2cmyk,
  rgb2keyword: rgb2keyword,
  rgb2xyz: rgb2xyz,
  rgb2lab: rgb2lab,
  rgb2lch: rgb2lch,

  hsl2rgb: hsl2rgb,
  hsl2hsv: hsl2hsv,
  hsl2hwb: hsl2hwb,
  hsl2cmyk: hsl2cmyk,
  hsl2keyword: hsl2keyword,

  hsv2rgb: hsv2rgb,
  hsv2hsl: hsv2hsl,
  hsv2hwb: hsv2hwb,
  hsv2cmyk: hsv2cmyk,
  hsv2keyword: hsv2keyword,

  hwb2rgb: hwb2rgb,
  hwb2hsl: hwb2hsl,
  hwb2hsv: hwb2hsv,
  hwb2cmyk: hwb2cmyk,
  hwb2keyword: hwb2keyword,

  cmyk2rgb: cmyk2rgb,
  cmyk2hsl: cmyk2hsl,
  cmyk2hsv: cmyk2hsv,
  cmyk2hwb: cmyk2hwb,
  cmyk2keyword: cmyk2keyword,

  keyword2rgb: keyword2rgb,
  keyword2hsl: keyword2hsl,
  keyword2hsv: keyword2hsv,
  keyword2hwb: keyword2hwb,
  keyword2cmyk: keyword2cmyk,
  keyword2lab: keyword2lab,
  keyword2xyz: keyword2xyz,

  xyz2rgb: xyz2rgb,
  xyz2lab: xyz2lab,
  xyz2lch: xyz2lch,

  lab2xyz: lab2xyz,
  lab2rgb: lab2rgb,
  lab2lch: lab2lch,

  lch2lab: lch2lab,
  lch2xyz: lch2xyz,
  lch2rgb: lch2rgb
}


function rgb2hsl(rgb) {
  var r = rgb[0]/255,
      g = rgb[1]/255,
      b = rgb[2]/255,
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      delta = max - min,
      h, s, l;

  if (max == min)
    h = 0;
  else if (r == max)
    h = (g - b) / delta;
  else if (g == max)
    h = 2 + (b - r) / delta;
  else if (b == max)
    h = 4 + (r - g)/ delta;

  h = Math.min(h * 60, 360);

  if (h < 0)
    h += 360;

  l = (min + max) / 2;

  if (max == min)
    s = 0;
  else if (l <= 0.5)
    s = delta / (max + min);
  else
    s = delta / (2 - max - min);

  return [h, s * 100, l * 100];
}

function rgb2hsv(rgb) {
  var r = rgb[0],
      g = rgb[1],
      b = rgb[2],
      min = Math.min(r, g, b),
      max = Math.max(r, g, b),
      delta = max - min,
      h, s, v;

  if (max == 0)
    s = 0;
  else
    s = (delta/max * 1000)/10;

  if (max == min)
    h = 0;
  else if (r == max)
    h = (g - b) / delta;
  else if (g == max)
    h = 2 + (b - r) / delta;
  else if (b == max)
    h = 4 + (r - g) / delta;

  h = Math.min(h * 60, 360);

  if (h < 0)
    h += 360;

  v = ((max / 255) * 1000) / 10;

  return [h, s, v];
}

function rgb2hwb(rgb) {
  var r = rgb[0],
      g = rgb[1],
      b = rgb[2],
      h = rgb2hsl(rgb)[0],
      w = 1/255 * Math.min(r, Math.min(g, b)),
      b = 1 - 1/255 * Math.max(r, Math.max(g, b));

  return [h, w * 100, b * 100];
}

function rgb2cmyk(rgb) {
  var r = rgb[0] / 255,
      g = rgb[1] / 255,
      b = rgb[2] / 255,
      c, m, y, k;

  k = Math.min(1 - r, 1 - g, 1 - b);
  c = (1 - r - k) / (1 - k) || 0;
  m = (1 - g - k) / (1 - k) || 0;
  y = (1 - b - k) / (1 - k) || 0;
  return [c * 100, m * 100, y * 100, k * 100];
}

function rgb2keyword(rgb) {
  return reverseKeywords[JSON.stringify(rgb)];
}

function rgb2xyz(rgb) {
  var r = rgb[0] / 255,
      g = rgb[1] / 255,
      b = rgb[2] / 255;

  // assume sRGB
  r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
  g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
  b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

  var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
  var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
  var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

  return [x * 100, y *100, z * 100];
}

function rgb2lab(rgb) {
  var xyz = rgb2xyz(rgb),
        x = xyz[0],
        y = xyz[1],
        z = xyz[2],
        l, a, b;

  x /= 95.047;
  y /= 100;
  z /= 108.883;

  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

  l = (116 * y) - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);

  return [l, a, b];
}

function rgb2lch(args) {
  return lab2lch(rgb2lab(args));
}

function hsl2rgb(hsl) {
  var h = hsl[0] / 360,
      s = hsl[1] / 100,
      l = hsl[2] / 100,
      t1, t2, t3, rgb, val;

  if (s == 0) {
    val = l * 255;
    return [val, val, val];
  }

  if (l < 0.5)
    t2 = l * (1 + s);
  else
    t2 = l + s - l * s;
  t1 = 2 * l - t2;

  rgb = [0, 0, 0];
  for (var i = 0; i < 3; i++) {
    t3 = h + 1 / 3 * - (i - 1);
    t3 < 0 && t3++;
    t3 > 1 && t3--;

    if (6 * t3 < 1)
      val = t1 + (t2 - t1) * 6 * t3;
    else if (2 * t3 < 1)
      val = t2;
    else if (3 * t3 < 2)
      val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
    else
      val = t1;

    rgb[i] = val * 255;
  }

  return rgb;
}

function hsl2hsv(hsl) {
  var h = hsl[0],
      s = hsl[1] / 100,
      l = hsl[2] / 100,
      sv, v;
  l *= 2;
  s *= (l <= 1) ? l : 2 - l;
  v = (l + s) / 2;
  sv = (2 * s) / (l + s);
  return [h, sv * 100, v * 100];
}

function hsl2hwb(args) {
  return rgb2hwb(hsl2rgb(args));
}

function hsl2cmyk(args) {
  return rgb2cmyk(hsl2rgb(args));
}

function hsl2keyword(args) {
  return rgb2keyword(hsl2rgb(args));
}


function hsv2rgb(hsv) {
  var h = hsv[0] / 60,
      s = hsv[1] / 100,
      v = hsv[2] / 100,
      hi = Math.floor(h) % 6;

  var f = h - Math.floor(h),
      p = 255 * v * (1 - s),
      q = 255 * v * (1 - (s * f)),
      t = 255 * v * (1 - (s * (1 - f))),
      v = 255 * v;

  switch(hi) {
    case 0:
      return [v, t, p];
    case 1:
      return [q, v, p];
    case 2:
      return [p, v, t];
    case 3:
      return [p, q, v];
    case 4:
      return [t, p, v];
    case 5:
      return [v, p, q];
  }
}

function hsv2hsl(hsv) {
  var h = hsv[0],
      s = hsv[1] / 100,
      v = hsv[2] / 100,
      sl, l;

  l = (2 - s) * v;
  sl = s * v;
  sl /= (l <= 1) ? l : 2 - l;
  sl = sl || 0;
  l /= 2;
  return [h, sl * 100, l * 100];
}

function hsv2hwb(args) {
  return rgb2hwb(hsv2rgb(args))
}

function hsv2cmyk(args) {
  return rgb2cmyk(hsv2rgb(args));
}

function hsv2keyword(args) {
  return rgb2keyword(hsv2rgb(args));
}

// http://dev.w3.org/csswg/css-color/#hwb-to-rgb
function hwb2rgb(hwb) {
  var h = hwb[0] / 360,
      wh = hwb[1] / 100,
      bl = hwb[2] / 100,
      ratio = wh + bl,
      i, v, f, n;

  // wh + bl cant be > 1
  if (ratio > 1) {
    wh /= ratio;
    bl /= ratio;
  }

  i = Math.floor(6 * h);
  v = 1 - bl;
  f = 6 * h - i;
  if ((i & 0x01) != 0) {
    f = 1 - f;
  }
  n = wh + f * (v - wh);  // linear interpolation

  switch (i) {
    default:
    case 6:
    case 0: r = v; g = n; b = wh; break;
    case 1: r = n; g = v; b = wh; break;
    case 2: r = wh; g = v; b = n; break;
    case 3: r = wh; g = n; b = v; break;
    case 4: r = n; g = wh; b = v; break;
    case 5: r = v; g = wh; b = n; break;
  }

  return [r * 255, g * 255, b * 255];
}

function hwb2hsl(args) {
  return rgb2hsl(hwb2rgb(args));
}

function hwb2hsv(args) {
  return rgb2hsv(hwb2rgb(args));
}

function hwb2cmyk(args) {
  return rgb2cmyk(hwb2rgb(args));
}

function hwb2keyword(args) {
  return rgb2keyword(hwb2rgb(args));
}

function cmyk2rgb(cmyk) {
  var c = cmyk[0] / 100,
      m = cmyk[1] / 100,
      y = cmyk[2] / 100,
      k = cmyk[3] / 100,
      r, g, b;

  r = 1 - Math.min(1, c * (1 - k) + k);
  g = 1 - Math.min(1, m * (1 - k) + k);
  b = 1 - Math.min(1, y * (1 - k) + k);
  return [r * 255, g * 255, b * 255];
}

function cmyk2hsl(args) {
  return rgb2hsl(cmyk2rgb(args));
}

function cmyk2hsv(args) {
  return rgb2hsv(cmyk2rgb(args));
}

function cmyk2hwb(args) {
  return rgb2hwb(cmyk2rgb(args));
}

function cmyk2keyword(args) {
  return rgb2keyword(cmyk2rgb(args));
}


function xyz2rgb(xyz) {
  var x = xyz[0] / 100,
      y = xyz[1] / 100,
      z = xyz[2] / 100,
      r, g, b;

  r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
  g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
  b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

  // assume sRGB
  r = r > 0.0031308 ? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
    : r = (r * 12.92);

  g = g > 0.0031308 ? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
    : g = (g * 12.92);

  b = b > 0.0031308 ? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
    : b = (b * 12.92);

  r = Math.min(Math.max(0, r), 1);
  g = Math.min(Math.max(0, g), 1);
  b = Math.min(Math.max(0, b), 1);

  return [r * 255, g * 255, b * 255];
}

function xyz2lab(xyz) {
  var x = xyz[0],
      y = xyz[1],
      z = xyz[2],
      l, a, b;

  x /= 95.047;
  y /= 100;
  z /= 108.883;

  x = x > 0.008856 ? Math.pow(x, 1/3) : (7.787 * x) + (16 / 116);
  y = y > 0.008856 ? Math.pow(y, 1/3) : (7.787 * y) + (16 / 116);
  z = z > 0.008856 ? Math.pow(z, 1/3) : (7.787 * z) + (16 / 116);

  l = (116 * y) - 16;
  a = 500 * (x - y);
  b = 200 * (y - z);

  return [l, a, b];
}

function xyz2lch(args) {
  return lab2lch(xyz2lab(args));
}

function lab2xyz(lab) {
  var l = lab[0],
      a = lab[1],
      b = lab[2],
      x, y, z, y2;

  if (l <= 8) {
    y = (l * 100) / 903.3;
    y2 = (7.787 * (y / 100)) + (16 / 116);
  } else {
    y = 100 * Math.pow((l + 16) / 116, 3);
    y2 = Math.pow(y / 100, 1/3);
  }

  x = x / 95.047 <= 0.008856 ? x = (95.047 * ((a / 500) + y2 - (16 / 116))) / 7.787 : 95.047 * Math.pow((a / 500) + y2, 3);

  z = z / 108.883 <= 0.008859 ? z = (108.883 * (y2 - (b / 200) - (16 / 116))) / 7.787 : 108.883 * Math.pow(y2 - (b / 200), 3);

  return [x, y, z];
}

function lab2lch(lab) {
  var l = lab[0],
      a = lab[1],
      b = lab[2],
      hr, h, c;

  hr = Math.atan2(b, a);
  h = hr * 360 / 2 / Math.PI;
  if (h < 0) {
    h += 360;
  }
  c = Math.sqrt(a * a + b * b);
  return [l, c, h];
}

function lab2rgb(args) {
  return xyz2rgb(lab2xyz(args));
}

function lch2lab(lch) {
  var l = lch[0],
      c = lch[1],
      h = lch[2],
      a, b, hr;

  hr = h / 360 * 2 * Math.PI;
  a = c * Math.cos(hr);
  b = c * Math.sin(hr);
  return [l, a, b];
}

function lch2xyz(args) {
  return lab2xyz(lch2lab(args));
}

function lch2rgb(args) {
  return lab2rgb(lch2lab(args));
}

function keyword2rgb(keyword) {
  return cssKeywords[keyword];
}

function keyword2hsl(args) {
  return rgb2hsl(keyword2rgb(args));
}

function keyword2hsv(args) {
  return rgb2hsv(keyword2rgb(args));
}

function keyword2hwb(args) {
  return rgb2hwb(keyword2rgb(args));
}

function keyword2cmyk(args) {
  return rgb2cmyk(keyword2rgb(args));
}

function keyword2lab(args) {
  return rgb2lab(keyword2rgb(args));
}

function keyword2xyz(args) {
  return rgb2xyz(keyword2rgb(args));
}

var cssKeywords = {
  aliceblue:  [240,248,255],
  antiquewhite: [250,235,215],
  aqua: [0,255,255],
  aquamarine: [127,255,212],
  azure:  [240,255,255],
  beige:  [245,245,220],
  bisque: [255,228,196],
  black:  [0,0,0],
  blanchedalmond: [255,235,205],
  blue: [0,0,255],
  blueviolet: [138,43,226],
  brown:  [165,42,42],
  burlywood:  [222,184,135],
  cadetblue:  [95,158,160],
  chartreuse: [127,255,0],
  chocolate:  [210,105,30],
  coral:  [255,127,80],
  cornflowerblue: [100,149,237],
  cornsilk: [255,248,220],
  crimson:  [220,20,60],
  cyan: [0,255,255],
  darkblue: [0,0,139],
  darkcyan: [0,139,139],
  darkgoldenrod:  [184,134,11],
  darkgray: [169,169,169],
  darkgreen:  [0,100,0],
  darkgrey: [169,169,169],
  darkkhaki:  [189,183,107],
  darkmagenta:  [139,0,139],
  darkolivegreen: [85,107,47],
  darkorange: [255,140,0],
  darkorchid: [153,50,204],
  darkred:  [139,0,0],
  darksalmon: [233,150,122],
  darkseagreen: [143,188,143],
  darkslateblue:  [72,61,139],
  darkslategray:  [47,79,79],
  darkslategrey:  [47,79,79],
  darkturquoise:  [0,206,209],
  darkviolet: [148,0,211],
  deeppink: [255,20,147],
  deepskyblue:  [0,191,255],
  dimgray:  [105,105,105],
  dimgrey:  [105,105,105],
  dodgerblue: [30,144,255],
  firebrick:  [178,34,34],
  floralwhite:  [255,250,240],
  forestgreen:  [34,139,34],
  fuchsia:  [255,0,255],
  gainsboro:  [220,220,220],
  ghostwhite: [248,248,255],
  gold: [255,215,0],
  goldenrod:  [218,165,32],
  gray: [128,128,128],
  green:  [0,128,0],
  greenyellow:  [173,255,47],
  grey: [128,128,128],
  honeydew: [240,255,240],
  hotpink:  [255,105,180],
  indianred:  [205,92,92],
  indigo: [75,0,130],
  ivory:  [255,255,240],
  khaki:  [240,230,140],
  lavender: [230,230,250],
  lavenderblush:  [255,240,245],
  lawngreen:  [124,252,0],
  lemonchiffon: [255,250,205],
  lightblue:  [173,216,230],
  lightcoral: [240,128,128],
  lightcyan:  [224,255,255],
  lightgoldenrodyellow: [250,250,210],
  lightgray:  [211,211,211],
  lightgreen: [144,238,144],
  lightgrey:  [211,211,211],
  lightpink:  [255,182,193],
  lightsalmon:  [255,160,122],
  lightseagreen:  [32,178,170],
  lightskyblue: [135,206,250],
  lightslategray: [119,136,153],
  lightslategrey: [119,136,153],
  lightsteelblue: [176,196,222],
  lightyellow:  [255,255,224],
  lime: [0,255,0],
  limegreen:  [50,205,50],
  linen:  [250,240,230],
  magenta:  [255,0,255],
  maroon: [128,0,0],
  mediumaquamarine: [102,205,170],
  mediumblue: [0,0,205],
  mediumorchid: [186,85,211],
  mediumpurple: [147,112,219],
  mediumseagreen: [60,179,113],
  mediumslateblue:  [123,104,238],
  mediumspringgreen:  [0,250,154],
  mediumturquoise:  [72,209,204],
  mediumvioletred:  [199,21,133],
  midnightblue: [25,25,112],
  mintcream:  [245,255,250],
  mistyrose:  [255,228,225],
  moccasin: [255,228,181],
  navajowhite:  [255,222,173],
  navy: [0,0,128],
  oldlace:  [253,245,230],
  olive:  [128,128,0],
  olivedrab:  [107,142,35],
  orange: [255,165,0],
  orangered:  [255,69,0],
  orchid: [218,112,214],
  palegoldenrod:  [238,232,170],
  palegreen:  [152,251,152],
  paleturquoise:  [175,238,238],
  palevioletred:  [219,112,147],
  papayawhip: [255,239,213],
  peachpuff:  [255,218,185],
  peru: [205,133,63],
  pink: [255,192,203],
  plum: [221,160,221],
  powderblue: [176,224,230],
  purple: [128,0,128],
  rebeccapurple: [102, 51, 153],
  red:  [255,0,0],
  rosybrown:  [188,143,143],
  royalblue:  [65,105,225],
  saddlebrown:  [139,69,19],
  salmon: [250,128,114],
  sandybrown: [244,164,96],
  seagreen: [46,139,87],
  seashell: [255,245,238],
  sienna: [160,82,45],
  silver: [192,192,192],
  skyblue:  [135,206,235],
  slateblue:  [106,90,205],
  slategray:  [112,128,144],
  slategrey:  [112,128,144],
  snow: [255,250,250],
  springgreen:  [0,255,127],
  steelblue:  [70,130,180],
  tan:  [210,180,140],
  teal: [0,128,128],
  thistle:  [216,191,216],
  tomato: [255,99,71],
  turquoise:  [64,224,208],
  violet: [238,130,238],
  wheat:  [245,222,179],
  white:  [255,255,255],
  whitesmoke: [245,245,245],
  yellow: [255,255,0],
  yellowgreen:  [154,205,50]
};

var reverseKeywords = {};
for (var key in cssKeywords) {
  reverseKeywords[JSON.stringify(cssKeywords[key])] = key;
}

});

require.register("johntron~color-slicer@66cbde8b409f975015b69d4ebc5a2b65ea8461f0", function (exports, module) {
// This uses fairSlicer to provide arbitrarily fine
// divisions of the hue space. It uses the lab color
// space to maintain legibility and distinctiveness.

// x here is a hue angle in degrees

var fairSlicer = require('johntron~color-slicer@66cbde8b409f975015b69d4ebc5a2b65ea8461f0/lib/fair-slicer.js');
var converter = require("harthur~color-convert@503685a2995b74ca16cea510f150ba671a4b613b");

module.exports = {
  hueToLch: function(options, h) {
    h = Math.round(h);
    var l, c;
    if (options.l) {
      l = options.l;
    } else if (options.bright) {
      l = 74;
    } else if (options.unsafe) {
      l = 60;
    } else {
      l = 49;
    }
    if (options.c) {
      c = options.c;
    } else {
      c = 3 + l / 2;

      // vary chroma to roughly match boundary of darkest RGB-expressible colors
      var delta = 5 + l/4;
      var most_constrained_hue = 210;
      var hr = (h - most_constrained_hue) / 360 * 2 * Math.PI;
      c += Math.floor(delta - delta * Math.cos(hr));

      // constrain chroma by lightest RGB-expressible colors
      var overpower = Math.max(Math.floor(160 - (l * 8 / 5)), 0);
      c = Math.min(c, overpower);
    }
    return [l, c, h]
  },

  lchToRgb: function(lch) {
    return converter.lch2rgb.apply(converter, lch);
  },

  lchToCss: function(lch) {
    return "rgb("+this.lchToRgb(lch).join(',')+")";
  },

  getLchColors: function(limit, startX, options) {
    if (startX === undefined) {
      startX = 330;
    }
    if (!options) {
      options = {};
    }

    var hueToLch = function(h) {
      return this.hueToLch(options, h);
    }.bind(this);

    var slices = fairSlicer(limit, 0, 360, startX);
    return slices.map(hueToLch);
  },

  getRgbColors: function(limit, startX, options) {
    var lchColors = this.getLchColors(limit, startX, options);
    return lchColors.map(this.lchToRgb);
  },

  getColors: function(limit, startX, options) {
    var lchColors = this.getLchColors(limit, startX, options);
    return lchColors.map(this.lchToCss.bind(this));
  }
};

});

require.register("johntron~color-slicer@66cbde8b409f975015b69d4ebc5a2b65ea8461f0/lib/fair-slicer.js", function (exports, module) {
// This divides a range iteratively using the golden ratio.
// This method keeps gaps to similar size and ensures
// that any small contiguous set is spaced apart.

var PHI = (1+ Math.sqrt(5))/2;

module.exports = function(count, min, max, start) {
  if (min === undefined) {
    min = 0;
  }
  if (max === undefined) {
    max = 1;
  }
  if (start === undefined) {
    start = 0;
  }
  var width = max - min;

  var slices = [];
  var slice = start;
  var shift = width / PHI;
  for (var i = 0; i < count; i++) {
    slices.push(slice);
    slice += shift;
    if (slice > max) {slice -= width;}
  }

  return slices;
};

});

require.register("./components-ixia/logger", function (exports, module) {
/*global $:true, navigator:true */

var window = window || {},
    navigator = window.navigator || {},
    noop = function () {},
    logger,
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a');

/**
 * Creates an object that can log messages to a server via AJAX
 *
 * @param level
 * @param environment Object containing additional info to send in all messages
 * @param target_url URL to send log messages to
 * @constructor
 */
function Logger(level, environment, target_url) {
    this.set_level(level);
    this.environment = this.get_environment(environment);
    this.target_url = target_url;

    // Expose dependencies for test stubbing
    this.request = request;
}

Logger.levels = {
    critical: 1,
    error: 2,
    warning: 4,
    info: 8,
    debug: 16
};

Logger.strings = {
    critical: 'CRITICAL',
    error: 'ERROR',
    warning: 'WARNING',
    info: 'INFO',
    debug: 'DEBUG'
};

Logger.console_map = {
    critical: noop,
    error: noop,
    warning: noop,
    info: noop,
    debug: noop
};

if (window.console) {
    Logger.console_map = {
        critical: window.console.error,
        error: window.console.error,
        warning: window.console.warn || window.console.error,
        info: window.console.info,
        debug: window.console.debug || window.console.info
    };
}

Logger.prototype.use = function (fn) {
    fn(this);
};

Logger.prototype.log = function (level, e) {
    var console_handler;

    e = this.get_error_object(level, e);

    if (this.level >= Logger.levels.debug && window.console) {
        console_handler = Logger.console_map[level].bind(window.console);
        // Allow arbitrary parameters to be logged with console.log()
        var args = [e.message].concat([].slice.call(arguments, 2));
        console_handler.apply(window, args);
    }

    if (this.target_url) {
        try {
            this.request.post(this.target_url)
                .use(no_cache)
                .send(e)
                .set('Content-type', 'application/json')
                .end(noop, Logger.console_map.error);
        } catch (ex) {
            // Avoid endless loops when errors occur during transmission
            return;
        }
    }
};

/**
 * Change logging level
 *
 * @param level
 * @param and_below Boolean include logging levels below `level` (default: true)
 * @returns {Logger.level|int}
 */
Logger.prototype.set_level = function (level, and_below) {
    var l;

    if (typeof level === 'string') {
        level = Logger.levels[level.toLowerCase()] || Logger.levels.error;

    }

    and_below = and_below === undefined ? true : and_below; // Default to true
    if (and_below) {
        // Include all levels below specified level
        level += level - 1;
    }

    this.level = level;

    // Create Logger.* methods for each *active* log level
    for (l in Logger.levels) {
        if (Logger.levels.hasOwnProperty(l)) {
            /*jslint bitwise:true */
            if (Logger.levels[l] & this.level) {
                // Log level is enabled
                this[l] = this.log.bind(this, l);
            } else {
                // Disabled
                this[l] = noop;
            }
            /*jslint bitwise:false */
        }
    }

    return this.level;
};

/**
 * Used internally to create a JSON-friendly object from most kinds of
 * variable
 *
 * @param level One of levels.*
 * @param e
 * @returns Object
 */
Logger.prototype.get_error_object = function (level, e) {
    var new_e = {};

    // Convert all errors to objects
    if (typeof e === 'object') {
        // Include non-enumerable properties (i.e. Error.message)
        Object.getOwnPropertyNames(e).forEach(function (prop) {
            new_e[prop] = e[prop];
        });

        e = new_e;
    } else {
        e = {message: e};
    }

    e.type = Logger.strings[level];

    // Merge additional info
    e.environment = this.environment;

    // Include a timestamp
    e.timestamp = new Date();

    return e;
};

Logger.prototype.get_environment = function (environment) {
    var property;

    // Add browser attributes
    for (property in navigator) {
        if (navigator.hasOwnProperty(property)) {
            environment[property] = navigator[property];
        }
    }

    return environment;
};

function handleWindowError(message, url, linenumber, colnumber, errorObj) {
    var e = {
        message: message,
        url: url,
        linenumber: url,
        colnumber: colnumber,
        errorObj: errorObj
    };

    this.error(e);

    return true;
}

Logger.prototype.attachWindowErrorHandler = function () {
    window.onerror = handleWindowError.bind(this);
};

module.exports = Logger;

});

require.register("./components-ixia/logger-jquery-ajax", function (exports, module) {
/*global $:true */

function handler(jqXhr, textStatus, e) {
    e.ajax = true;
    e.timeStamp = jqXhr.timeStamp;
    e.textStatus = textStatus;
    this.error(e);
}

module.exports = function (logger) {
    // Handle ajax errors and pass em' back to the server
    $(document).ajaxError(handler.bind(logger));
};

});

require.register("./components-ixia/asset-manager", function (exports, module) {
//http://www.html5rocks.com/en/tutorials/games/assetmanager/

function AssetManager() {
    this.successCount = 0;
    this.errorCount = 0;
    this.cache = {};
    this.downloadQueue = [];
}

module.exports = AssetManager;

AssetManager.prototype.queueDownload = function (path) {
    var self = AssetManager.typesafe(this);

    if (self.downloadQueue.indexOf(path) === -1) {
        self.downloadQueue.push(path);
    }
};

AssetManager.prototype.downloadAll = function (callback) {
    var self = AssetManager.typesafe(this);

    if (self.downloadQueue.length === 0 || self.isDone()) {
        callback();
    }

    for (var i = 0; i < self.downloadQueue.length; i++) {
        var path = this.downloadQueue[i];
        var img = new Image();
        img.addEventListener("load", function () {
            self.successCount++;
            if (self.isDone()) {
                callback();
            }
        }, false);
        img.addEventListener("error", function () {
            self.errorCount++;
            if (self.isDone()) {
                callback();
            }
        }, false);
        img.src = path;
        self.cache[path] = img;
    }
};

AssetManager.prototype.getAsset = function (path) {
    var self = AssetManager.typesafe(this);

    return self.cache[path];
}

AssetManager.prototype.isDone = function () {
    var self = AssetManager.typesafe(this);

    return self.downloadQueue.length === self.successCount + self.errorCount;
};

//Type check
AssetManager.typesafe = function (that) {
    if (!(that instanceof AssetManager)) {
        throw new Error('This method must be executed on a AssetManager');
    }

    return that;
};
});

require.register("./components-ixia/lightbox", function (exports, module) {
/*global $: true */

var emitter = require('component~emitter@1.0.1'),
    lightboxOptionDefaults = {
        url: "",
        selector: "",
        data: null,
        cancelSelector: null,
        isModal: false,
        onOpenComplete: $.noop,
        onClose: $.noop
    };

function Lightbox(template) {
    if ('[object Function]' === Object.prototype.toString.call(template)) {
        this.getTemplate = template;
    } else {
        this.getTemplate = function () {};
    }
    this.lastCancelSelector = '';
    this.default_title = document.querySelector('title').textContent;
}

emitter(Lightbox.prototype);

module.exports = Lightbox;

//Warning: if used with a click event be sure to stopPropogation so click handlers on body aren't fired.
Lightbox.prototype.open = function (options) {
    if (this.isOpen) {
        this.close();
    }

    options = $.extend({}, lightboxOptionDefaults, options);

    this.getTemplate(options.url, options.selector, this.openWithElement.bind(this, options));
};

Lightbox.prototype.error = function (header, message) {
    message = message || header;

    var workingVm = new LightboxWorkingViewModel(header, message);
    workingVm.status('error');
    this.working(workingVm);
};

Lightbox.prototype.openWithElement = function (options, element) {
    if ($("#fade").length === 0) {
        $("body").append("<div id='fade'></div>");
        $("#fade").append(element.tmpl(options.data));
    } else {
        $("#fade").empty().append(element);
    }

    this.bindEvents(options.isModal, options.cancelSelector, options.onClose);

    options.onOpenComplete(element);
    if ($(window).height() < $("#fade > div").height()) {
        bodyHeight = $(window).height() - 25;
        $("#fade > div").height(bodyHeight);
        $("#fade > div").css({'overflow-y': 'scroll', 'overflow-x': 'hidden'});
    }
    this.isOpen = true;
};

Lightbox.prototype.bindEvents = function (isModal, cancelSelector, onClose) {
    var $mousedown_target = undefined;

    this.unbindEvents();

    if (!isModal) {
        $("body").on("keydown.lightbox", function (e) {
            if (e.which === 27) { //esc
                onClose();
                this.close();
            }
        }.bind(this));
        $("#fade").on("mousedown.lightbox", function (e) {
            $mousedown_target = e.target;
        });
        $("#fade").on("click.lightbox", function () {
            var $dialog = document.querySelector('#fade > div');

            // Make sure they didn't mousedown on dialog first
            if ($dialog.contains($mousedown_target)) {
                return; // Short-circuit
            }

            onClose();
            this.close();
        }.bind(this));
        $(cancelSelector).on("click.lightbox", function (e) {
            onClose();
            this.close();
        }.bind(this));

        this.lastCancelSelector = cancelSelector;
    }
    $("#fade").children().on("click.lightbox", function (e) {
        e.stopPropagation();
    });
};

Lightbox.prototype.unbindEvents = function () {
    $("body").off(".lightbox");
    $(this.lastCancelSelector).off(".lightbox");
    $("#fade").children().off(".lightbox");
};

Lightbox.prototype.openError = function (header, message) {
    var lightboxErrorVm = new LightboxErrorViewModel(header, message);

    var options = {
        url: 'html/lightbox_tmpl',
        selector: '#lightbox-error-template',
        cancelSelector: '.ok-button',
        onOpenComplete: function () {
            ko.applyBindings(lightboxErrorVm, document.getElementById('lightbox-error'));
        }
    };

    this.open(options);
};

Lightbox.prototype.openDeviceAuthError = function (testConfigVm, device, header, message) {
    var lightboxErrorVm = new LightboxDeviceAuthErrorViewModel(testConfigVm, device, header, message);

    var options = {
        url: 'templates/lightbox.tmpl.html',
        selector: '#lightbox-device-auth-error-template',
        cancelSelector: '.cancel',
        onOpenComplete: function () {
            ko.applyBindings(lightboxErrorVm, document.getElementById('lightbox-device-auth-error'));
        }
    };

    this.open(options);
};

Lightbox.prototype.openMessage = function (message) {
    var options = {
        url: 'templates/lightbox.tmpl.html',
        selector: '#lightbox-message-template',
        cancelSelector: '.ok-button',
        onOpenComplete: function () {
            ko.applyBindings({lightboxText: message}, document.getElementById('lightbox-message'));
        }
    };

    this.open(options);
};

Lightbox.prototype.openAlert = function (header, message) {
    var lightboxWarningVm = new LightboxErrorViewModel(header, message);

    var options = {
        url: 'templates/lightbox.tmpl.html',
        selector: '#lightbox-alert-template',
        cancelSelector: '.ok-button',
        onOpenComplete: function () {
            ko.applyBindings(lightboxWarningVm, document.getElementById('lightbox-alert'));
        }
    };

    this.open(options);
};


Lightbox.prototype.openWarning = function (header, message) {
    var lightboxWarningVm = new LightboxErrorViewModel(header, message);

    var options = {
        url: 'templates/lightbox.tmpl.html',
        selector: '#lightbox-error-warning-template',
        cancelSelector: '.ok-button',
        onOpenComplete: function () {
            ko.applyBindings(lightboxWarningVm, document.getElementById('lightbox-error-warning'));
        }
    };

    this.open(options);
};

Lightbox.prototype.confirmIgnoreWorking = function () {
    var text = 'Working';
    if (this instanceof LightboxWorkingViewModel) {
        text = this.actionText().replace('...', '');
    }
    return "Are you sure you want to leave the page while " + text + "?";
}

Lightbox.prototype.working = function (workingVm) {
    var $lb = document.getElementById('lightbox-working'),
        $title = document.querySelector('title');

    window.onbeforeunload = this.confirmIgnoreWorking.bind(workingVm);

    $title.textContent = workingVm.actionText() || 'Loading';

    if ($lb) {
        ko.applyBindings(workingVm, $lb);
    } else {
        this.open({
            url: 'html/lightbox_tmpl',
            selector: '#lightbox-working-template',
            cancelSelector: '.cancel-button',
            isModal: true,
            onOpenComplete: function () {
                ko.applyBindings(workingVm, document.getElementById('lightbox-working'));
            }
        });
    }
    return workingVm;
}

Lightbox.prototype.close = function () {
    $("#fade").remove();
    $("body").off(".lightbox");
    this.isOpen = false;
    window.onbeforeunload = null;
    document.querySelector('title').textContent = this.default_title;
    this.emit('close');
}

Lightbox.prototype.confirmation_dialog = function (invoker, text, okFunction) {
    var self = this;
    invoker.okFunction = function() {
        self.close();
        okFunction.call(invoker);
    };
    invoker.lightboxText = text;
    this.open({
        url: 'html/lightbox_tmpl',
        selector: '#lightbox-warning-template',
        cancelSelector: '.cancel-button',
        onOpenComplete: function () {
            ko.applyBindings(invoker, document.getElementById('lightbox-warning'));
        }
    });
};

});

require.register("./components-ixia/utility-functions", function (exports, module) {
/*global logger:true */

var Lightbox = require('./components-ixia/lightbox'),
    classes = require('component~classes@1.2.3'),
    next = require('ianstormtaylor~next-sibling@0.0.1'),
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a');

/**
 *
 * @param url
 * @param template_selector
 * @param callback - Receives template (a <script> element - see below)
 * @param reload
 * @param log
 */
function getTemplate(url, template_selector, callback, reload, log) {
    callback = callback || $.noop;
    log = (log === null || log === undefined) ? true : log;
    if ($(template_selector).length > 0 && reload) {
        $(template_selector).remove();
    }
    if ($(template_selector).length < 1) {
        $.ajax({
            url: url,
            dataType: "html",
            success: function (templateData) {
                $("body").append(templateData);
                var $template = $(template_selector);
                if ($template.length < 1 && log) {
                    logger.warning("Tried to get element: " + template_selector + " in " + url + " but was not found.");
                }
                // Warning: $template is a <script> element with string
                // content - we need to call $.tmpl() on this to convert its
                // contents to DOM elements. See
                // for an example of how to do this.
                callback($template);
            }
        });
    } else {
        callback($(template_selector));
    }
}

function greaterOf(control, test) {
    return control > test ? control : test;
}

function arrayToJSON(array) {
    var jsonArray = [];
    for (var i = 0; i < array.length; i++) {
        jsonArray.push(array[i].toJSON());
    }
    return jsonArray;
}

function setTags(taggedObject, tagJson) {
    taggedObject.tags.removeAll();
    var tags = new Array();
    if (tagJson) {
        if (tagJson["user_defined"])
            taggedObject.tags(tagJson["user_defined"]);
        if (tagJson["company"])
            taggedObject.customer(tagJson["company"]);
        if (tagJson["location"])
            taggedObject.location(tagJson["location"]);

        if (tagJson["favorite"])
            taggedObject.favorite(tagJson["favorite"]);
        else
            taggedObject.favorite(false);
    }
    return taggedObject;
}

function getTags(taggedObject) {
    var tags = { user_defined: new Array() };
    var tagArray = taggedObject.tags();
    for (var i = 0; i < tagArray.length; i++)
        tags.user_defined.push(tagArray[i]);

    if (taggedObject.customer() && taggedObject.customer() != "select one") {
        tags.company = taggedObject.customer();
    }
    if (taggedObject.location() && taggedObject.location() != "select one") {
        tags.location = taggedObject.location();
    }
    if (taggedObject.favorite()) {
        tags.favorite = taggedObject.favorite();
    }
    return tags;
}

function trimTag(tag) {
    // trim outter whitespace and non-alphanumeric characters
    return tag.replace(/^\s+|\s+$|[^a-zA-Z0-9\s]+/g, '');
}

function sanitizeUnqualifiedTagGroup(tags) {
    // trim everything other than alphanumeric, spaces and commas
    return tags.replace(/[^,a-zA-Z0-9\s]+/g, '').replace(/,,/g, ',');
}

function formatRequestData(key, data) {
    if (key.indexOf("get") == -1) {
        return ko.toJSON(data);//{ "data": data };
    }
    else {
        var jsonData = ko.toJSON(data);
        util.logData(jsonData);
        return 'data=' + jsonData;
    }
}

function getConfigSetting(key) {
    var rootPath = "/ixia/";
    var stubsPath = "stubs/";

    var config = {
        "get_ixiacr_tests": rootPath + "get_ixiacr_tests.json",
        "get_recent_news": rootPath + "get_recent_news.json",
        "devices_status": rootPath + "devices/status",
        "time_sync_status": rootPath + "status/time_sync",
        "get_results": rootPath + "get_results.json",
        "get_endpoints": rootPath + "get_endpoints.json",
        "get_devices": rootPath + "get_devices.json",
        "get_ports": rootPath + "get_ports.json",
        "get_customers": rootPath + "get_customer_tags.json",
        "get_locations": rootPath + "get_location_tags.json",
        "get_language": rootPath + "get_language",
        "set_language": rootPath + "set_language",
        "get_result_history": rootPath + "get_result_history.json",
        "get_portlets": rootPath + "get_portlets.json",
        "get_tags": rootPath + "get_user_defined_tags.json",
        "save_axon_test": rootPath + "save_axon_test",
        "save_test_template": rootPath + "save_test_template",
        "save_endpoint": rootPath + "save_endpoint",
        "save_device": rootPath + "save_device",
        "save_result": rootPath + "save_result",
        "config_test": rootPath + "config_test",
        "run_test": rootPath + "run_test",
        "create_test_event": rootPath + "schedule/test-events",
        "get_istestready": rootPath + "get_istestready",
        "get_result_types": rootPath + "get_result_types.json",
        "cancel_test": rootPath + "cancel_test",
        "request_final_table": rootPath + "request_final_table",
        "upgrade_device": rootPath + "upgrade_device",
        "get_display_messages": rootPath + "get_display_messages.json",
        "get_global_settings": rootPath + "get_global_settings.json",
        "save_customers": rootPath + "save_customers",
        "save_locations": rootPath + "save_locations",
        "save_global_settings": rootPath + "save_global_settings",
        "add_user": rootPath + "add_user.json",
        "verify_user": rootPath + "verify_user.json",
        "verify_password": rootPath + "verify_password.json",
        "set_admin_password": rootPath + "set_admin_password",
        "backup": rootPath + "backup",
        "restore_backup": rootPath + "restore_backup",
        "reboot_axon": rootPath + "reboot_axon",
        "shutdown_axon": rootPath + "shutdown_axon",
        "get_task_status": rootPath + "get_task_status",
        "get_cr_logs": rootPath + "get_axon_logs",
        "delete_device": rootPath + "delete_device",
        "get_device_time_sync": rootPath + "get_device_time_sync",
        "get_timing_accuracies": rootPath + "get_timing_accuracies.json",
        "delete_backup": rootPath + "delete_backup",
        "archive_backup": rootPath + "archive_backup",
        "import_backup": rootPath + "import_backup",
        "get_backup_status": rootPath + "get_backup_status",
        "check_updates": rootPath + "check_updates"
    };


    if (config[key])
        return config[key];
    else
        logger.warn('unknown config key: "' + key + '"');
}

function logData(data) {
    logger.info(data);
}

function isNullOrEmpty(val) {
    return val == null || val.length == 0 || /\S/.test(val) == false;
}

function objectsEqual(control, test) {
    return JSON.stringify(control) == JSON.stringify(test);
}

function trueOrOptional(value) {
    return value === undefined || value === null || value === true;
}

function toType(obj) {
    return ({}).toString.call(obj).match(/\s([a-zA-Z]+)/)[1].toLowerCase()
}

function setObservableArray(observableArray, array) {
    observableArray.removeAll();
    for (var i = 0; i < array.length; i++) {
        observableArray.push(array[i]);
    }
}
function parseUnixTimestampStringToDate(string, desiredFormat) {
    var newdate = parseInt(string),
        outputFormat;
    if (!desiredFormat) {
        outputFormat = "MM-dd-yy HH:mm";
    } else {
        outputFormat = desiredFormat;
    }
    return new Date(newdate * 1000).format(outputFormat);
}
function commafyNumber(number) {
    var parts = number.toString().split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ",");
    return parts.join(".");
}

function getMagnitude(number) {
    var isNegative = number < 0;
    number = Math.abs(number);

    if (number == 0) {
        return 0;
    } else if (number >= 1) {
        var i = 0;
        while (number >= 10) {
            number /= 10;
            i++;
        }
        var mag = Math.pow(10, i);
        return isNegative ? mag * -1 : mag;
    } else {
        var i = 0;
        while (number < 1) {
            number *= 10;
            i--;
        }
        var mag = Math.pow(10, i);
        return isNegative ? mag * -1 : mag;
    }
}

function minOrDefault(control, test) {
    control = parseFloat(control);
    test = parseFloat(test);
    if (isNaN(control) && isNaN(test)) {
        return;
    }
    if (!isNaN(control) && isNaN(test)) {
        return control;
    }
    if (isNaN(control) && !isNaN(test)) {
        return test;
    }
    return control > test ? test : control;
}

function maxOrDefault(control, test) {
    control = parseFloat(control);
    test = parseFloat(test);
    if (isNaN(control) && isNaN(test)) {
        return;
    }
    if (!isNaN(control) && isNaN(test)) {
        return control;
    }
    if (isNaN(control) && !isNaN(test)) {
        return test;
    }
    return control < test ? test : control;
}

function floatFix(number) {
    return (parseFloat(number.toPrecision(3)));
}

function padNumber(number, length) {
    number = number.toString();
    if (number.length < length) {
        while (number.length < length) {
            number = "0" + number;
        }
    }
    return number;
}

function recursiveUnwrapObservable(value, returnCounter) {
    var result = value;
    var counter = 0;

    while (ko.isObservable(result)) {
        result = result();
        counter++;
    }

    if (returnCounter) {
        return {
            value: result,
            counter: counter
        }
    }

    return result;
}

function stringAdd() {
    var total = 0;
    for (var i = 0; i < arguments.length; i++) {
        var number = parseInt(arguments[i]);

        if (isNaN(number)) {
            throw "Argument " + i + " is not a number.";
        }
        total += number;
    }

    return total.toString();
}

function applyFunction(array, func, args) {
    if ($.isFunction(func)) {
        for (var i = 0; i < array.length; i++) {
            if (array[i])
                func.apply(array[i], args);
        }
    }

    if (typeof func == 'string') {
        for (var i = 0; i < array.length; i++) {
            if (array[i])
                array[i][func].apply(array[i], args);
        }
    }
}

function sortArrayByObjectKeyKoObservable(field, reverse, primer) {
    var key = function (x) {
        return primer ? primer(x[field]) : x[field]
    };
    return function (a, b) {
        var A = a[field](), B = b[field]();
        return ( (A < B) ? -1 : ((A > B) ? 1 : 0) ) * [-1, 1][+!!reverse];
    }
}
function sortArrayByObjectKey(field, reverse, primer) {
    var key = function (x) {
        return primer ? primer(x[field]) : x[field]
    };

    return function (a, b) {
        var A = key(a), B = key(b);
        return ( (A < B) ? -1 : ((A > B) ? 1 : 0) ) * [-1, 1][+!!reverse];
    }
}

function sort_devices (devices) {
    var localChassisRecord = devices.shift();
    devices.sort(function(a,b) {
        var a_name = typeof a.name === 'function' ? a.name() : a.name,
            b_name = typeof b.name === 'function' ? b.name() : b.name;

        return (a_name > b_name) ? 1 : ((b_name > a_name) ? -1 : 0);
    } );
    devices.unshift(localChassisRecord);
    return devices;
}

function arraysShareValue(array1, array2, caseInsensitive) {
    if (!caseInsensitive) {
        for (var i = 0; i < array1.length; i++) {
            if (array2.indexOf(array1[i]) != -1) {
                return true;
            }
        }

        return false;
    }


    array1 = $.map(array1, function (n) {
        return(n.toUpperCase());
    });
    array2 = $.map(array2, function (n) {
        return(n.toUpperCase());
    });

    for (var i = 0; i < array1.length; i++) {
        if (array2.indexOf(array1[i]) != -1) {
            return true;
        }
    }
}

function warningLightbox(text, okCallback, closeOnOk) {
    var viewModel = {
        lightboxText: text,
        okFunction: function () {
            okCallback.apply(this, arguments);
            if (trueOrOptional(closeOnOk)) {
                lightbox.close();
            }
        }
    };

    util.lightbox.open({
        url: 'html/lightbox_tmpl',
        selector: '#lightbox-warning-template',
        cancelSelector: '.cancel-button',
        onOpenComplete: function () {
            ko.applyBindings(viewModel, document.getElementById('lightbox-warning'));
        }
    });
}

function debounce(func, threshold, execAsap){
    var timeout;
    if (false !== execAsap) execAsap = true;

    return function debounced(){
        var obj = this, args = arguments;

        function delayed () {
            if (!execAsap) {
                func.apply(obj, args);
            }
            timeout = null;
        }

        if (timeout) {
            clearTimeout(timeout);
        } else if (execAsap) {
            func.apply(obj, args);
        }

        timeout = setTimeout(delayed, threshold || 100);
    };
}

function clear_validation_messages (el) {
    var message;

    classes(el).remove('valid').remove('invalid');

    while (message = next(el, '.validator-message')) {
        if (el.parentNode) el.parentNode.removeChild(message);
    }
}

function clear_all_validation_messages (el) {
    var $temps;

    $temps = el.querySelectorAll('.invalid, .valid');

    [].forEach.call($temps, function($temp){
        classes($temp).remove('valid').remove('invalid');
    });

    $temps = el.querySelectorAll('.validator-message');

    [].forEach.call($temps, function($temp){
        if ($temp.parentNode) $temp.parentNode.removeChild($temp);
    });
}

function get_chassis_reservationa_status (callback) {
    return

    request
        .get('/spirent/get_reservation_status')
        .use(no_cache)
        .end(function(error, response){
            var data;

            if(error){
                return callback(null,error);
            };

            if( response.body && response.body.result === 'FAILURE' ){
                return callback(null,response.body.message);
            };

            data =  response.body;

            return callback(data);


        });
}

function decimal_format (value, digit) {
    var weight = Math.pow(10, digit);
    return isNaN(value)?value:Math.round(value * weight)/weight;
}

/**
 * Covert array to custom string
 *
 * @param array - Input array which need to covert to string
 * @param join - Join last value in array
 * @param separator - Suffix separator for every value in array
 */
function array_to_string (array, join, separator) {
    if (!separator) {
        separator = "";
    }

    if (array.length == 1) {
        return array[0] + separator;
    }

    var pretty_string = "";
    for (var i = 0; i < array.length; i++) {
        if (i == (array.length - 1)) {
            pretty_string += " " + join + " " + array[i] + separator;
        } else {
            pretty_string += ", " + array[i] + separator;
        }
    }

    return pretty_string
}

var util = module.exports = {
    getTemplate: getTemplate,
    arrayToJSON: arrayToJSON,
    getRequestMethod: function() { return 'POST'; },
    setObservableArray: setObservableArray,
    commafyNumber: commafyNumber,
    getMagnitude: getMagnitude,
    maxOrDefault: maxOrDefault,
    minOrDefault: minOrDefault,
    trueOrOptional: trueOrOptional,
    floatFix: floatFix,
    padNumber: padNumber,
    greaterOf: greaterOf,
    lightbox: new Lightbox(getTemplate),
    warningLightbox: warningLightbox,
    setTags: setTags,
    getTags: getTags,
    getConfigSetting: getConfigSetting,
    formatRequestData: formatRequestData,
    logData: logData,
    toType: toType,
    objectsEqual: objectsEqual,
    isNullOrEmpty: isNullOrEmpty,
    recursiveUnwrapObservable: recursiveUnwrapObservable,
    stringAdd: stringAdd,
    applyFunction: applyFunction,
    arraysShareValue: arraysShareValue,
    sortArrayByObjectKey: sortArrayByObjectKey,
    sortArrayByObjectKeyKoObservable: sortArrayByObjectKeyKoObservable,
    sort_devices: sort_devices,
    parseUnixTimestampStringToDate: parseUnixTimestampStringToDate,
    trimTag: trimTag,
    sanitizeUnqualifiedTagGroup: sanitizeUnqualifiedTagGroup,
    debounce: debounce,
    clear_validation_messages: clear_validation_messages,
    clear_all_validation_messages: clear_all_validation_messages,
    get_chassis_reservationa_status: get_chassis_reservationa_status,
    decimal_format:decimal_format,
    array_to_string: array_to_string
};
});

require.register("./components-ixia/translator", function (exports, module) {
function resolvePluralFormId(dictionary, pluralIndicator) {
    var n = pluralIndicator;
    // TODO replace eval with a better alternative
    return eval(dictionary.pluralFormExpression);
}

function getMessage(dictionary, messageKey, pluralIndicator) {
    var message = dictionary.content[messageKey];

    if (message === undefined) {
        window.logger.info('Missing translation for: ' + messageKey);
        message = messageKey;
    }

    if (typeof message === 'object') {
        if (pluralIndicator === null) {
            throw "pluralIndicator is required";
        }

        message = message[resolvePluralFormId(dictionary, pluralIndicator)];
    }

    return message;
}

function interpolate(message, mapping) {
    // TODO implement more efficient algorithm of interpolation
    var result = message,
        prop;

    for (prop in mapping) {
        if (mapping.hasOwnProperty(prop)) {
            result = result.replace('{' + prop + '}', mapping[prop]);
        }
    }

    return result;
}

function translate(dictionary, messageKey, mapping, pluralIndicatorAttr) {
    var pluralIndicator = null,
        message;

    if (pluralIndicatorAttr !== undefined) {
        pluralIndicator = mapping[pluralIndicatorAttr];
    }

    message = getMessage(dictionary, messageKey, pluralIndicator);

    if (mapping !== undefined) {
        if (message !== undefined) {
            message = interpolate(message, mapping);
        } else {
            logger.warning("Missing translation for messageKey: " + messageKey);
            message = interpolate(messageKey, mapping);
        }
    }

    return message;
}

/**
 * @param dictionary is an object containing translations for one
 * language. Example of dictionary:
 * {
     *     pluralFormExpression: '(n==1 ? 0 : 1)',
     *     content: {
     *         'License Upload': 'License Upload',
     *         'Showing {number} Tracks': {
     *             0: 'Showing {number} Track',
     *             1: 'Showing {number} Tracks'
     *         }
     *     }
     * }
 * @returns {Function} accepting three arguments: message key, object
 * containing message parameters, name of parameter used for defining
 * plural form.
 */
function Translator(dictionary) {
    return translate.bind(this, dictionary);
}

module.exports = Translator;
});

require.register("./components-ixia/dictionary-provider", function (exports, module) {
var request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a'),
    dictionaries = {};

function DictionaryProvider(language, next) {
    if (dictionaries.hasOwnProperty(language)) {
        next(dictionaries[language]);
    }

    // Load the dict before firing callback
    DictionaryProvider.load(language, next);
}

module.exports = DictionaryProvider;

DictionaryProvider.set = function (language, dict) {
    dictionaries[language] = dict;
};

DictionaryProvider.get = function (language) {
    return dictionaries[language];
};

DictionaryProvider.load = function (language, callback) {
    request.get('/static/translations/' + language + '.json?' + window.Axon.build_number)
        .use(no_cache)
        .set('Accept', 'application/json')
        .end(function (res) {

            DictionaryProvider.set(language, res.body);
            callback(DictionaryProvider.get(language));
        });
};
});

require.register("./components-ixia/ixia-view-model", function (exports, module) {
var translate_tests_configurations = require('./components-ixia/ixia-view-model/test-configurations-adapter.js');

function IxiaViewModel() {
    var self = this;
    var $ = jQuery;

    self.user = ko.observable();

    self.availableDevices = ko.observableArray();
    self.availablePorts = ko.observableArray();
    self.availableTests = ko.observableArray();
    self.enterpriseTests = ko.observableArray();
    self.hostTests = ko.observableArray();
    self.availableTestsByCategory = ko.observableDictionary({});
    self.availableDatapointsMap = ko.observableArray();
    self.availableResultTypes = new Array();
    self.availableDisplayMessages = new Array();
    self.availableCustomers = ko.observableArray();
    self.availableLocations = ko.observableArray();
    self.language = ko.observable();
    self.testResultsHistory = ko.observableArray();
    self.testResultsHistoryHandlers = new Array();
    self.availableDiskSpace = ko.observable(); //will be updated by disk management
    self.recentNews = ko.observableArray();

    self.startingTab = 'dashboard';
    self.defaultThrottleDuration = 1;
    self.selectedTab = ko.observable();

    self.selectedTest = ko.observable(null);

    self.testLibraryTemplateName = ko.observable('placeholder-template');
    self.dashboardTemplateName = ko.observable('placeholder-template');
    self.administrationTemplateName = ko.observable('placeholder-template');
    self.historyTemplateName = ko.observable('placeholder-template');
    self.helpcenterTemplateName = ko.observable('placeholder-template');
    //Use this to keep session flags
    self.syncFlags = ko.observableArray();

    self.dashboardTabClass = ko.computed(function () {
        return 'dashboard ' + self.getTabClassFor('dashboard');
    }).extend({ throttle: self.defaultThrottleDuration });

    self.testLibraryTabClass = ko.computed(function () {
        return 'library ' + self.getTabClassFor('testLibrary');
    }).extend({ throttle: self.defaultThrottleDuration });

    self.historyTabClass = ko.computed(function () {
        return 'history ' + self.getTabClassFor('history');
    }).extend({ throttle: self.defaultThrottleDuration });

    self.administrationTabClass = ko.computed(function () {
        return 'administration ' + self.getTabClassFor('administration');
    }).extend({ throttle: self.defaultThrottleDuration });

    self.vmGlobalSettings = new GlobalSettingsViewModel(self);

    self.vmDashboard = new DashboardViewModel(self);
    self.vmTest = new TestViewModel(self);
    self.vmHistory = new HistoryViewModel(self);
    self.vmAdministration = new AdministrationViewModel(self);

    self.completionPercent = 40;
    self.completionMessage = "";
    self.ajaxModels = new Array(translate("Global Settings"),
        translate("Devices"),
        translate("Tests"),
        translate("Recent News"),
        translate("Customers"),
        translate("Locations"),
        translate("Languages"),
        translate("Display Messages"),
        translate("Test Library"),
        translate("Recent Results"),
        translate("Ports"));
    self.ajaxModelsToComplete = self.ajaxModels.slice(0);
    self.failedAjaxModels = new Array();
};

IxiaViewModel.typesafe = function (that) {
    if (!(that instanceof IxiaViewModel)) {
        throw 'This method must be executed on a IxiaViewModel';
    }

    return that;
};

IxiaViewModel.prototype.updateAppLoadMessage = function (model, failed) {
    var self = IxiaViewModel.typesafe(this);

    self.ajaxModelsToComplete.splice($.inArray(model, self.ajaxModelsToComplete), 1);
    if (failed) {
        self.failedAjaxModels.push(model);
        logger.error('Get ' + model + ' Failed');
    }

    if (self.ajaxModelsToComplete.length > 1) {
        if (failed) {
            self.completionMessage = translate('Failed to load {name}...', {
                name: model
            });
        } else {
            self.completionMessage = translate('Loaded {name}...', {
                name: model
            });
        }
    } else {
        if (self.failedAjaxModels.length == 0) {
            self.completionMessage = translate('Loading {name}...', {
                name: model
            });
        } else {
            self.header = translate('App Loading Error');
            self.message = translate('The following failed to load:<br>{failed}<br><br>Please contact Spirent support at {link}', {
                failed: self.failedAjaxModels.join('<br>'),
                link: '<a href="http://www.ixiacom.com">www.ixiacom.com</a>'
            });
            util.lightbox.open({
                url: 'html/lightbox_tmpl',
                selector: '#lightbox-error-template',
                cancelSelector: '.ok-button',
                onOpenComplete: function () {
                    ko.applyBindings(self, document.getElementById('lightbox-error'));
                }
            });
            return;
        }
    }

    var completion = self.ajaxModels.length - self.ajaxModelsToComplete.length;
    completion /= self.ajaxModels.length; // 0 to 1
    completion *= 60; // Entire process should take 60% of total completion

    util.lightbox.working(new LightboxWorkingViewModel("Loading", self.completionMessage, self.completionPercent + completion));
};

IxiaViewModel.prototype.init = function (callback) {
    var self = IxiaViewModel.typesafe(this);

    var settingsAjax = self.getGlobalSettings()
        .done(function () {
            self.updateAppLoadMessage(self.ajaxModels[0]);
        })
        .fail(function () {
            self.updateAppLoadMessage(self.ajaxModels[0], true);
        });

    var devicesAjax = self.getAvailableDevices()
        .done(function () {
            self.updateAppLoadMessage(self.ajaxModels[1]);
        })
        .fail(function () {
            self.updateAppLoadMessage(self.ajaxModels[1], true);
        });

    var portsAjax = self.getAvailablePorts()
        .done(function () {
            self.updateAppLoadMessage(self.ajaxModels[10]);
        })
        .fail(function () {
            self.updateAppLoadMessage(self.ajaxModels[10], true);
        });

    var testsAjax = self.getAvailableTests()
        .done(function () {
            self.updateAppLoadMessage(self.ajaxModels[2]);
        })
        .fail(function () {
            self.updateAppLoadMessage(self.ajaxModels[2], true);
        });

    var newsAjax = self.getRecentNews()
        .done(function () {
            self.updateAppLoadMessage(self.ajaxModels[3]);
        })
        .fail(function () {
            self.updateAppLoadMessage(self.ajaxModels[3], true);
        });

    var languageAjax = self.getLanguage()
        .done(function () {
            self.updateAppLoadMessage(self.ajaxModels[6]);
        })
        .fail(function () {
            self.updateAppLoadMessage(self.ajaxModels[6], true);
        });

        self.selectTab(self.startingTab);

        self.initStart = (new Date()).getTime();

    return $.when(
        settingsAjax,
        devicesAjax,
        portsAjax,
        languageAjax,
        testsAjax,
        newsAjax
    );
};

IxiaViewModel.prototype.setUser = function (user) {
    var self = IxiaViewModel.typesafe(this);
    self.user = user;
};

IxiaViewModel.prototype.refreshTestDraggables = function () {
    var self = IxiaViewModel.typesafe(this);
    self.vmTest.refreshTestDraggables();
};

IxiaViewModel.prototype.loadTest = function (test) {
    var self = IxiaViewModel.typesafe(this);
    self.selectedTest(test);
};

IxiaViewModel.prototype.loadRecentTest = function (historyItem) {
    var self = IxiaViewModel.typesafe(this);
    self.vmTest.loadRecentTest(historyItem);
};

IxiaViewModel.prototype.openUrl = function (url) {
    var self = IxiaViewModel.typesafe(this);
    window.open(url);
};

IxiaViewModel.prototype.getTabClassFor = function (tabName) {
    var self = IxiaViewModel.typesafe(this);
    if (self.selectedTab() == tabName) {
        return 'selected';
    }

    return '';
};

IxiaViewModel.prototype.showTestLibrary = function () {
    var self = IxiaViewModel.typesafe(this);
    self.selectTab('testLibrary');
};

IxiaViewModel.prototype.showDashboard = function () {
    var self = IxiaViewModel.typesafe(this);
    self.selectTab('dashboard');
};

IxiaViewModel.prototype.showHistory = function () {
    var self = IxiaViewModel.typesafe(this);
    self.selectTab('history');
};

IxiaViewModel.prototype.showAdministration = function () {
    var self = IxiaViewModel.typesafe(this);
    self.selectTab('administration');
};

IxiaViewModel.prototype.selectTab = function (tabName, done) {
    done = done || function () {};

    var self = IxiaViewModel.typesafe(this);

    function showTab (cb) {
        if($('#' + tabName + '-template').length == 0){
            util.getTemplate('html/' + tabName + '_tmpl', '#' + tabName + '-template', function(template){
                self[tabName + 'TemplateName'](tabName + '-template');
                self.selectedTab(tabName);
                cb();
            });
        } else {
            // added this here, because when template was already loaded somewhere - tab content will never show
            self[tabName + 'TemplateName'](tabName + '-template');
            self.selectedTab(tabName);
            cb();
        }
    }

    switch (tabName) {
        case 'dashboard':
            showTab(function () {
                self.getResultHistory();
                appHistory.push(self);
                done();
            });
            break
        case 'history':
            showTab(function () {
                appHistory.push(self);
                done();
            });
            break;
        case 'administration':
            if ($('#administration-template').length == 0) {
                util.getTemplate('html/administration_tmpl', '#administration-template', function (template) {
                    var $parent = document.querySelector('#main > .administration'),
                        template = template.get(0).innerHTML;
                    if(!$parent.innerHTML.length > 0)
                        self.vmAdministration.render($parent, template);
                    self.administrationTemplateName('administration-template');

                    self.selectedTab('administration');
                    appHistory.push(self);
                    done();
                });
            } else {
                self.selectedTab('administration');
                self.vmAdministration.selectTab(null);
                appHistory.push(self);
                done();
            }
            break;
        case 'testLibrary':
            showTab(function () {
                appHistory.push(self);
                done();
            });
            break;
    }
};

IxiaViewModel.prototype.getGlobalSettings = function (callback, reload) {
    var self = IxiaViewModel.typesafe(this);

    var url = util.getConfigSetting('get_global_settings');
    if (reload)
        url += '?reload=1'

    var ajax = $.ajax({
        type: 'POST',
        url: url,
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            self.vmGlobalSettings.inflate(data);
            if (callback){
                callback();
            }
        }
    });

    return ajax;
};

IxiaViewModel.prototype.getAvailableCustomers = function () {
    var self = IxiaViewModel.typesafe(this);

    self.availableCustomers.removeAll();

    var ajax = $.ajax({
        type: 'GET',
        url: util.getConfigSetting('get_customers'),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            var availableCustomers = data;

            //self.availableCustomers.push("select one");
            for (var i = 0; i < availableCustomers.length; i++) {
                self.availableCustomers.push(availableCustomers[i]);
            }
        }
    });

    return ajax;
};

IxiaViewModel.prototype.getAvailableLocations = function () {
    var self = IxiaViewModel.typesafe(this);

    self.availableLocations.removeAll();

    var ajax = $.ajax({
        type: 'GET',
        url: util.getConfigSetting('get_locations'),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            var availableLocations = data;

            //self.availableLocations.push("select one");
            for (var i = 0; i < availableLocations.length; i++) {
                self.availableLocations.push(availableLocations[i]);
            }
        }
    });

    return ajax;
};

IxiaViewModel.prototype.getLanguage = function() {
    var self = IxiaViewModel.typesafe(this);

    var ajax = $.ajax({
        type: 'GET',
        url: util.getConfigSetting('get_language'),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            self.language(data.language);
        }
    });

    return ajax;
};

IxiaViewModel.prototype.getAvailableTests = function (params, callback) {
    var self = IxiaViewModel.typesafe(this);

    var ajax = $.ajax({
        type: "GET",
        url: util.getConfigSetting("get_ixiacr_tests"),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            self.availableTests.removeAll();
            self.enterpriseTests.removeAll();
            self.hostTests.removeAll();
            self.fillAvailableTests(data);

            if (callback){
                callback();
            }
        }
    });

    return ajax;
};

IxiaViewModel.prototype.fillAvailableTests = function (data){
    var self = IxiaViewModel.typesafe(this);
    var availableTests = data = translate_tests_configurations(data);

    for (var i = 0; i < availableTests.length; i++) {
        var existingTest = null,
            test = new TestTemplateViewModel(self);
        test.inflate(availableTests[i]);
        existingTest = ko.utils.arrayFirst(self.availableTests(), function (item) {
            return (test.id() === item.id());
        });
        if (existingTest === null) {
            self.availableTests.push(test);

            if (test.type() === "HOST") {
                self.hostTests.push(test);
            } else {
                if (self.selectedTest() == null) {
                    self.selectedTest(test);
                }
                self.enterpriseTests.push(test);
            }
        }
    }

    //self.availableTests.sort(util.sortArrayByObjectKeyKoObservable("id", true));
    //self.hostTests.sort(util.sortArrayByObjectKeyKoObservable("id", true));
    //self.enterpriseTests.sort(util.sortArrayByObjectKeyKoObservable("id", true));
};

IxiaViewModel.prototype.getRecentNews = function (params, callback) {
    var self = IxiaViewModel.typesafe(this);

    var ajax = $.ajax({
        type: "GET",
        url: util.getConfigSetting("get_recent_news"),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            self.recentNews.removeAll();
            for (var i = 0; i < data.length; i++) {
                var existingNews = null,
                    news = new RecentNewsViewModel(self);
                news.inflate(data[i]);

                existingNews = ko.utils.arrayFirst(self.recentNews(), function (item) {
                    return (news.id() === item.id());
                });
                if (existingNews === null) {
                    self.recentNews.push(news);
                }
            }

            if (callback){
                callback();
            }
        }
    });

    return ajax;
};

IxiaViewModel.prototype.getResultHistory = function (params, callback) {
    var self = IxiaViewModel.typesafe(this);
    var url = util.getConfigSetting("get_result_history");
    var isRefreshDashboard = true;
    if (params) {
        if (params['result_id']) {
            isRefreshDashboard = false;
            url += '?result_id=' + params['result_id'];
        } else {
            if (params['page']) {
                url += '?page=' + params['page'];
                if (params['page_size']) {
                    url += '&page_size=' + params['page_size'];
                }
            } else {
                if (params['page_size']) {
                    url += '?page_size=' + params['page_size'];
                }
            }
        }
    }
    var ajax = $.ajax({
        type: "GET",
        url: url,
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            if (data['total_number']) {
                self.vmDashboard.totalHistoryResults = data['total_number'];
            }
            self.fillHistoryTestsResults(data['data'], isRefreshDashboard);

            for (var i = 0; i < self.testResultsHistoryHandlers.length; i++) {
                self.testResultsHistoryHandlers[i].updateCache(data['data']);
            }

            if (callback){
                callback();
            }
        }
    });

    return ajax;
};

IxiaViewModel.prototype.fillHistoryTestsResults = function (data, isRefreshDashboard){
    var self = IxiaViewModel.typesafe(this);
    var recentTests = data;
    var existingHistoryResult;

    for (var i = 0; i < recentTests.length; i++) {
        var recentTest = new TestHistoryViewModel(self.vmDashboard);
        recentTest.inflate(recentTests[i]);

        existingHistoryResult = ko.utils.arrayFirst(self.testResultsHistory(), function (item) {
            return item.result_id() === recentTest.result_id();
        });

        if (existingHistoryResult === null) {
            self.testResultsHistory.push(recentTest);
        } else {
            // Update the latest one in the Array
            self.testResultsHistory.replace(existingHistoryResult, recentTest);
        }
    }
    self.testResultsHistory.sort(function(pre, next) {return (pre.result_id() > next.result_id() ? -1 : 1)});
};

IxiaViewModel.prototype.getAvailableDevices = function (callback, responseData) {
    var self = IxiaViewModel.typesafe(this);

    self.availableDevices.removeAll();

    var ajax = $.ajax({
        type: "GET",
        url: util.getConfigSetting("get_devices"),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            var availableDevices = data;
            if (availableDevices.length > 1){
                availableDevices = util.sort_devices(availableDevices);
            }

            for (var i = 0; i < availableDevices.length; i++) {
                var device = new TestDeviceViewModel(self);
                device.inflate(availableDevices[i]);

                self.availableDevices.push(device);
            }
            if (callback){
                callback(responseData);
            }
        }
    });

    return ajax;
};

IxiaViewModel.prototype.updateDeviceTimeSyncCapabilities = function (data) {
    var self = IxiaViewModel.typesafe(this);

    self.availableDevices().forEach(function(device) {
        device.updateTimeSyncCapability(data); // Handles mapping of devices
    });
};

IxiaViewModel.prototype.getAvailablePorts = function (callback, responseData) {
    var self = IxiaViewModel.typesafe(this);

    self.availablePorts.removeAll();

    var ajax = $.ajax({
        type: "GET",
        url: util.getConfigSetting("get_ports"),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            var availablePorts = data;
            for (var i = 0; i < availablePorts.length; i++) {
                var port = new PortViewModel(self);
                port.inflate(availablePorts[i]);

                self.availablePorts.push(port);
            }
            if (callback){
                callback(responseData);
            }
        }
    });

    return ajax;
};

IxiaViewModel.prototype.getResultTypes = function () {
    var self = IxiaViewModel.typesafe(this);

    self.availableResultTypes = new Array();

    var ajax = $.ajax({
        type: "GET",
        url: util.getConfigSetting("get_result_types"),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            var availableResultTypes = data;

            for (var i = 0; i < availableResultTypes.length; i++) {
                self.availableResultTypes.push(new ResultTypeViewModel(availableResultTypes[i]));
            }
        },
        error: function (jqXhr, textStatus, errorThrown) {
            util.logData(textStatus);
        }
    });

    return ajax;
};

IxiaViewModel.prototype.getAvailableDisplayMessages = function () {
    var self = IxiaViewModel.typesafe(this);

    var ajax = $.ajax({
        type: "GET",
        url: util.getConfigSetting("get_display_messages"),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            self.availableDisplayMessages = data;
        },
        error: function (jqXhr, textStatus, errorThrown) {
            util.logData(textStatus);
        }
    });

    return ajax;
};

IxiaViewModel.prototype.addToCategoryView = function (newTest) {
    var self = IxiaViewModel.typesafe(this)
    var categories = newTest.categories();

    for (var i = 0; i < categories.length; i += 1) {
        var category = categories[i];
        if (self.availableTestsByCategory.indexOf(category.type) === -1) {
            self.availableTestsByCategory.set(category.type, {
                categoryName: category.name,
                tests: [newTest]
            });
            self.availableTestsByCategory.items.sort(function(category1, category2){
                return category1.value().categoryName < category2.value().categoryName;
            });
        } else {
            var testsByCategory = self.availableTestsByCategory.get(category.type)().tests;

            var existingTest = ko.utils.arrayFirst(testsByCategory, function (item) {
                return newTest.id() === item.id() && newTest.isUserSave === item.isUserSave;
            });

            if (existingTest !== null) {
                testsByCategory.splice(testsByCategory.indexOf(existingTest), 1);
            }

            // To make 'Throughput Test' at the second position in 'Test Library'
            if (newTest.template_name() == 'Throughput Test') {
                if (testsByCategory.length > 1) {
                    // Insert value
                    testsByCategory.splice(1, 0, newTest);
                } else {
                    testsByCategory.push(newTest);
                }
            } else {
                testsByCategory.push(newTest);
            }
        }
    }
};

IxiaViewModel.prototype.deleteTest = function () {
    var self = IxiaViewModel.typesafe(this);
    logger.info("removeFromCategoryView unimplemented");
    //find test
    //remove from array
    //removeFromCategoryView();
};

IxiaViewModel.prototype.openTestCreationLightbox = function () {
    var self = IxiaViewModel.typesafe(this);
    self.vmTest.openTestCreationLightbox();
};

IxiaViewModel.prototype.openTestCreationLightboxUnlessLoaded = function () {
    var self = IxiaViewModel.typesafe(this);
    if(!self.vmTest.vmConfiguration.isLoaded())
        self.vmTest.openTestCreationLightbox();
    else
        self.showTest();
};

IxiaViewModel.prototype.getState = function(){
    var self = IxiaViewModel.typesafe(this);

    var stateViewModel = {};

    stateViewModel.mainTab = self.selectedTab();
    stateViewModel.testTab = self.vmTest.selectedTab();
    stateViewModel.adminTab = self.vmAdministration.selectedTab();
    stateViewModel.resultsTab = self.vmTest.vmResults.selectedTab();

    return stateViewModel;
};

IxiaViewModel.prototype.restoreState = function(stateViewModel){
    var self = IxiaViewModel.typesafe(this);

    self.selectedTab(stateViewModel.mainTab);
    self.vmTest.selectedTab(stateViewModel.testTab);
    self.vmAdministration.selectedTab(stateViewModel.adminTab);
    self.vmTest.vmResults.selectTab(stateViewModel.resultsTab);
};

module.exports = IxiaViewModel;
});

require.register("./components-ixia/ixia-view-model/test-configurations-adapter.js", function (exports, module) {
/**
 * Provides an abstraction layer between REST API and UI code.
 *
 * @param config Array of test configuration JSON data (from REST API)
 * @return Array
 */
module.exports = function (config) {
    return config.map(function (test) {
        // Move the player type (unicast/multicast) from supplemental config to
        // top of test - helps instantiate the proper traffic player later on
        if (test.supplemental_configuration && test.supplemental_configuration.default_player_type) {
            test.default_player_type = test.supplemental_configuration.default_player_type;
            delete test.supplemental_configuration.default_player_type;
        }

        if (test.traffic_players && test.traffic_players.length) {
            // Move any stored multicast settings to top of traffic players
            test.traffic_players = test.traffic_players.map(function (player) {
                if (player.supplemental_configuration && player.supplemental_configuration.multicast_settings) {
                    player.multicast_settings = player.supplemental_configuration.multicast_settings;
                    delete player.supplemental_configuration.multicast_settings;

                    if (Object.keys(player.supplemental_configuration).length === 0) {
                        delete player.supplemental_configuration;
                    }
                }

                return player;
            });
        }

        return test;
    });
};
});

require.register("./components-ixia/device-model", function (exports, module) {
var noop = function () {},
    DeviceModelError = require('./components-ixia/device-model/error.js'),
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a'),
    status_url = require('./components-ixia/utility-functions').getConfigSetting("devices_status"),
    model = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12'),
    defaults = require('segmentio~model-defaults@1.0.6'),
    devices = [],
    DeviceModel = model('DeviceModel')
        .use(defaults)
        .route(status_url)
        .attr('id');

DeviceModel.primaryKey = "id";

function factory(id) {
    if (devices[id]) {
        return devices[id]; // Short-circuit
    }

    var device = new DeviceModel();
    device.id(id);
    device.last_updated = null;
    devices[id] = device;

    return device;
}

DeviceModel.prototype.get = function (callback) {
    callback = callback || noop;

    var self = this;

    function handle(err, response) {
        var error,
            device;

        if (err || 'FAILURE' === response.body.result) {
            error = new DeviceModelError('Error getting status for device ' + self.id() + ': ' + (err || JSON.stringify(response)));
            callback(error);
            return; // Short-circuit
        }

        device = response.body[0];

        self.set(device);
        self.last_updated = new Date();

        callback(null, device);
    }

    request.get(self.url(self.id()))
        .use(no_cache)
        .end(handle);
};

DeviceModel.url = function (path) {
    var url = this._base;
    if (undefined === path) return url;

    if (!isNaN(path)) {
        return url + '?device_ids[]=' + path;
    }

    return url + '/' + path;
};


// Export a facade
module.exports = {
    factory: factory
};

});

require.register("./components-ixia/device-model/error.js", function (exports, module) {
function DeviceModelError(message) {
    this.name = 'DeviceModelError';
    this.message = message;
    this.stack = (new Error()).stack;
}
DeviceModelError.prototype = new Error();

module.exports = DeviceModelError;

});

require.register("./components-ixia/capture-filter-chooser", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    template = require('./components-ixia/capture-filter-chooser/template.js'),
    event = require('component~event@0.1.4'),
    emitter = require('component~emitter@1.0.1'),
    classes = require('component~classes@1.2.3');
var mobile = {};
    mobile.isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|windows phone/i.test(navigator.userAgent);

function CaptureFilterChooser(string) {
    this.$el = domify(template);
    this.current_filter = string || '';
    this.presets = {
        "TCP only": "tcp",
        "IP only": "ip",
        "No DNS": "tcp port not 53 and udp port not 53",
        "IPv4 address only": "ip host 1.2.3.4",
        "IPv6 address only": "ip6 host 2001::2",
        "Host (MAC) address only": "xx:xx:xx:xx:xx:xx",
        "TCP port": "tcp port 80",
        "Only web traffic": "tcp port 80 or tcp port 443",
        "Multiple hosts": "ip host a or ip6 host b",
        "Source port": "tcp src port 1000",
        "Traffic between hosts": "(ip src a and ip dst b) or (ip src b and ip dst a)"
    };
}

emitter(CaptureFilterChooser.prototype);

CaptureFilterChooser.prototype.set = function (string) {
    this.current_filter = string;
};
CaptureFilterChooser.prototype.get = function () {
    return this.current_filter;
};

CaptureFilterChooser.prototype.render = function () {
    var $presets = this.$el.querySelector('.presets'),
        presets = this.presets,
        label,
        current_filter = this.current_filter,
        filter_string,
        $choice;

    if(mobile.isMobile){
        $($presets).removeAttr("multiple");
        $($presets).css("height","2em");
    }

    $presets.innerHTML = '';

    for (label in presets) {
        if (presets.hasOwnProperty(label)) {
            filter_string = presets[label];
            $choice = domify('<option></option>');
            $choice.innerHTML = label;
            $choice.value = filter_string;
            $choice.selected = current_filter.trim() === filter_string;
            $presets.add($choice);
        }
    }

    this.bind();

    return this.$el;
};

CaptureFilterChooser.prototype.show = function () {
    classes(this.$el).remove('hidden');
};

CaptureFilterChooser.prototype.hide = function () {
    classes(this.$el).add('hidden');
};

CaptureFilterChooser.prototype.bind = function () {
    var select = this.select.bind(this),
        $cancel = this.$el.querySelector('.cancel'),
        hide = this.hide.bind(this),
        $done = this.$el.querySelector('.done');

    event.bind($done, 'click', select);
    event.bind($cancel, 'click', hide);
};

CaptureFilterChooser.prototype.select = function () {
    var $presets = this.$el.querySelector('select.presets'),
        i = $presets.options.selectedIndex,
        $selected;

    if (i !== -1) {
        $selected = $presets.options.item(i);
        this.filter_string = $selected.value;
        this.emit('select', this.filter_string);
    }
};

CaptureFilterChooser.prototype.remove = function () {
    this.$el.parentNode.removeChild(this.$el);
};

module.exports = CaptureFilterChooser;
});

require.register("./components-ixia/capture-filter-chooser/template.js", function (exports, module) {
module.exports = '<div class="capture-filter-chooser">\n    <div>\n        <div>\n            <h1>Choose a capture filter</h1>\n            <button class="done button dark">Done</button>\n            <button class="cancel button dark">Cancel</button>\n        </div>\n        <select multiple class="presets"></select>\n    </div>\n</div>';
});

require.register("./components-ixia/player", function (exports, module) {
module.exports = {
    delegates: {
        "test-view-model": require('./components-ixia/player/delegates/test-view-model.js')
    }
};
});

require.register("./components-ixia/player/delegates/test-view-model.js", function (exports, module) {
/**
 * Implements the delegated behavior of the traffic player.
 * See parent, TestViewModel.
 */

var domify = require('component~domify@1.3.1'),
    template = domify(require('./components-ixia/player/templates/header.js')),
    ko = window.ko,
    util = require('./components-ixia/utility-functions');

function PlayerTestViewModelDelegate() {
    this.parent = undefined;
    this.$el = undefined;
}

PlayerTestViewModelDelegate.prototype.setParent = function (parent) {
    this.parent = parent;
};

PlayerTestViewModelDelegate.prototype.canRenderTab = function (tab_name) {
    return 'test' === tab_name;
};

PlayerTestViewModelDelegate.prototype.render = function () {
    this.$el = template.cloneNode(true);

    ko.applyBindings(this.parent, this.$el);

    return this.$el;
};

PlayerTestViewModelDelegate.prototype.validate = function (result) {
    return result;
};

PlayerTestViewModelDelegate.prototype.loadTest = function(testConfiguration, testEvent) {
    var self = this;
    self.executeLoadTest(testConfiguration);
};

PlayerTestViewModelDelegate.prototype.executeLoadTest = function(testConfiguration) {
    var self = this;
    var callback = function () {
        self.parent.selectTab('testLibrary');
    }.bind(self);

    self.parent.ensureUnreservedOrFail(callback);
};

PlayerTestViewModelDelegate.prototype.openTestCreationLightbox = function() {
    var complete = function(){
            var lightboxViewModel = new LightboxViewModel(this.parent);
            ko.applyBindings(lightboxViewModel, document.getElementById("lightbox"));
        }.bind(this);

    this.parent.ensureUnreservedOrFail(function() {
        util.lightbox.open({
            url : "html/lightbox_tmpl",
            selector : "#lightbox-create-test-tmpl",
            cancelSelector: ".cancel-button",
            onOpenComplete: complete
        });
    })
};

PlayerTestViewModelDelegate.prototype.closeTestEditor = function () {
    // Not used
};

PlayerTestViewModelDelegate.prototype.openSaveModal = function() {
    var complete = function(){
            this.parent.startState = {
                name: this.parent.name()
            };
            ko.applyBindings(this.parent, document.getElementById('lightbox-save-test'));
        }.bind(this),
        close = function(){
            if (this.parent.name() === '' || this.parent.name() != this.parent.startState.name) {
                this.parent.name(this.parent.startState.name);
            }
            this.parent.preValidationResult(null);
        }.bind(this);

    util.lightbox.open({
        url : 'html/lightbox_tmpl',
        selector : '#lightbox-save-test-template',
        cancelSelector: '.cancel-button',
        onOpenComplete: complete,
        onClose: close
    });
};

PlayerTestViewModelDelegate.prototype.afterRender = function () {
    var self = this,
        selected_tab = self.parent.rootVm.selectedTab(),
        $parent = document.querySelector('.' + selected_tab),
        $header;


    self.render();

    // Remove existing HTML from .test-controller
    $header = $parent.querySelector('.test-controller');
    while ($header.firstChild) {
        $header.removeChild($header.firstChild);
    }

    // Append new header delegate view
    $header.appendChild(self.$el);
}

module.exports = PlayerTestViewModelDelegate;
});

require.register("./components-ixia/player/templates/header.js", function (exports, module) {
module.exports = '<div class="header player" data-bind="css: {running: isTestRunning, indefinite: indefinite, \'static_duration\': static_duration}">\n    <div class="container" data-bind="rentalBlockUI: {}">\n        <div class="test-player">\n            <div class="progress">\n                <div class="top-dots">\n                    <div class="fill" data-bind="attr: { \'style\': \'width: \'+vmResults.percentComplete()+\'%\' }"></div>\n                </div>\n                <div class="top-middle-dots">\n                    <div class="fill" data-bind="attr: { \'style\': \'width: \'+vmResults.percentComplete()+\'%\' }"></div>\n                </div>\n                <div class="bar-segments">\n                    <div class="fill" data-bind="attr: { \'style\': \'width: \'+vmResults.percentComplete()+\'%\' }"></div>\n                </div>\n                <div class="bottom-middle-dots">\n                    <div class="fill" data-bind="attr: { \'style\': \'width: \'+vmResults.percentComplete()+\'%\' }"></div>\n                </div>\n                <div class="bottom-dots">\n                    <div class="fill" data-bind="attr: { \'style\': \'width: \'+vmResults.percentComplete()+\'%\' }"></div>\n                </div>\n            </div>\n            <div class="run" data-bind="click: runTest, clickBubble: false"><img src="static/images/test-player-play-button.png" class="test-play-button" data-bind="visible: vmResults.status() != \'running\'"><img src="static/images/test-player-stop-button.png" class="test-stop-button" data-bind="visible: vmResults.status() == \'running\'"></div>\n            <div class="duration">\n                <p class="duration-header" data-bind="text: strings.Duration + \':\'">Duration:</p>\n                <p data-bind="text: vmConfiguration.formattedDuration" class="duration-text"></p>\n                <select data-bind="options: availableDurations, optionsText: \'text\', optionsValue: \'value\', value: vmConfiguration.duration, disable: vmResults.status() == \'running\', css: { \'disabled\': vmResults.status() == \'running\' }"></select>\n            </div>\n            <div class="duration indefinite">\n                <p class="duration-header" data-bind="text: strings[\'Duration is based on configuration\']">Duration is based on configuration</p>\n            </div>\n            <div class="duration static">\n                <p class="duration-header" data-bind="text: durationText()">5 MIN</p>\n            </div>\n        </div>\n        <div class="test-detail">\n            <ul>\n                <li><h2 data-bind="text: vmConfiguration.name"></h2></li>\n                <li><h3 data-bind="text: vmConfiguration.categories()[0].name"></h3></li>\n                <li>\n                    <span class="round-button-outer" data-bind="visible: vmResults.status() != \'running\'"><a class="round-button" href="javascript:void(0);" data-bind="click: openSaveModal, clickBubble: false"><span class="round-button-text" data-bind="text: strings.save">SAVE</span><img src="static/images/save.png" /></a></span>\n                    <!--<span class="round-button-outer"><a class="round-button" href="javascript:void(0);" data-bind="click: openHelpModal, clickBubble: false"><img class="question_mark_button" src="images/question-mark.png" /></a></span>-->\n                </li>\n            </ul>\n        </div>\n        <div class="clear"></div>\n    </div>\n</div>';
});

require.register("./components-ixia/test-view-model", function (exports, module) {
var DefaultHeaderDelegate = require('./components-ixia/player').delegates["test-view-model"],
    indefinite_modules = [
    ],
    static_duration_modules = {
        "axon.testcases.spirent.multicast_join_leave_latency": 5 // Always runs for ~5 minutes
    },
    util = require('./components-ixia/utility-functions');

/**
 * Test configuration page - manages ConfiguredTestViewModel internally
 *
 * @param rootVModel IxiaCRViewModel
 * @param delegate
 * @constructor
 */
function TestViewModel(rootVModel, delegate) {
    var self = this;

    self.rootVm = rootVModel;
    self.vmDashboard = rootVModel.vmDashboard
    self.getAvailableDevices = self.rootVm.getAvailableDevices;
    self.getAvailableTests = self.rootVm.getAvailableTests;
    self.availableDevices = self.rootVm.availableDevices;
    self.availableTests = self.rootVm.availableTests;
    self.availableTestsByCategory = self.rootVm.availableTestsByCategory;
    self.getResultTypes = self.rootVm.getResultTypes;
    self.availableCustomers = self.rootVm.availableCustomers;
    self.availableLocations = self.rootVm.availableLocations;

    self.leftPortlets = ko.observableArray(self.vmDashboard.leftPortlets());
    self.vmDashboard.leftPortlets.subscribe(function () {
        self.leftPortlets(self.vmDashboard.leftPortlets());
    });

    self.rightPortlets = ko.observableArray(self.vmDashboard.rightPortlets());
    self.vmDashboard.rightPortlets.subscribe(function () {
        self.rightPortlets(self.vmDashboard.rightPortlets());
    });

    self.strings = {
        "save": translate('Save'),
        "close": translate('CLOSE'),
        "Duration": translate('Duration'),
        "Duration is based on configuration": translate("Duration is based on configuration")
    };

    self.availableDurations = [];
    for (var i = 1; i <= 15; i++) {
        self.availableDurations.push({
            value: i,
            text: translate('{value} MIN', {
                value: i
            })
        });
    }
    for (var i = 20; i <= 120; i+=5) {
        self.availableDurations.push({
            value: i,
            text: translate('{value} MIN', {
                value: i
            })
        });
    }

    self.vmConfiguration = new ConfiguredTestViewModel(self);
    self.vmResults = new TestResultsViewModel(self);
    self.vmDocumentation = new TestDocumentationViewModel(self);
    self.vmSidebar = new TestSidebarViewModel(self);

    self.startingTab = self.vmSidebar.startingTab;
    self.name = self.vmConfiguration.name;
    self.description = self.vmConfiguration.description;
    self.initializeAvailableTestsDraggable = self.vmSidebar.initializeAvailableTestsDraggable;

    self.selectedTab = ko.observable();
    self.startingTab = 'configuration';

    self.selectedTab(self.startingTab);

    self.isTestRunning = ko.observable(false);
    self.hasResults = ko.observable(false);

    self.testConfigurationTemplateName = ko.observable('placeholder-template');
    self.testResultsTemplateName = ko.observable('placeholder-template');
    self.testDocumentationTemplateName = ko.observable('placeholder-template');

    self.save = self.vmConfiguration.save.bind(self.vmConfiguration);

    self.displayTags = ko.computed({
        read: self.vmConfiguration.displayTagsRead.bind(self.vmConfiguration),
        write: self.vmConfiguration.displayTagsWrite.bind(self.vmConfiguration)
    }).extend({ throttle: self.rootVm.defaultThrottleDuration });

    self.configurationTabClass = ko.computed(self.getTabClassFor.bind(self, 'configuration')).extend({ throttle: self.rootVm.defaultThrottleDuration });

    self.resultsTabClass = ko.computed(self.getTabClassForResults.bind(self, 'results')).extend({ throttle: self.rootVm.defaultThrottleDuration });

    self.documentationTabClass = ko.computed(self.getTabClassFor.bind(self, 'documentation')).extend({ throttle: self.rootVm.defaultThrottleDuration });

    self.isShowConfiguration = ko.computed(self.computeIsShowConfiguration.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.isShowResults = ko.computed(self.computeIsShowResults.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.isShowDocumentation = ko.computed(self.computeIsShowDocumentation.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.indefinite = ko.observable(true);
    self.static_duration = ko.observable(true);

    // Note: vmConfiguration.module is not an observable
    self.vmConfiguration.on('changed:module', function (new_module) {
        var duration = static_duration_modules[new_module];
        self.indefinite(-1 !== indefinite_modules.indexOf(new_module));
        self.static_duration(duration !== undefined);

        if (self.static_duration()) {
            self.vmConfiguration.duration(duration);
        }
    });

    self.lightboxText = ko.observable();
    self.preValidationResult = self.vmConfiguration.preValidationResult;

    // Allow extension through delegation - i.e. loading, saving, etc.
    if (!delegate) {
        delegate = new DefaultHeaderDelegate();
    }
    delegate.setParent(self);
    self.delegate = delegate;
}

TestViewModel.prototype.durationText = function () {
    return window.translate("{duration} MIN", {
        duration: this.vmConfiguration.duration()
    });
};

TestViewModel.prototype.afterRender = function () {
    var self = this.data,
        selected_tab = self.rootVm.selectedTab(),
        $parent = document.querySelector('.' + selected_tab),
        $header;

    if (!self.delegate.canRenderTab(selected_tab)) {
        return;
    }

    return self.delegate.afterRender();
};

TestViewModel.typesafe = function (that) {
    if (!(that instanceof TestViewModel)) {
        throw 'This method must be executed on a TestViewModel';
    }

    return that;
};

TestViewModel.prototype.computeIsShowConfiguration = function () {
    var self = TestViewModel.typesafe(this);

    return self.selectedTab() == 'configuration';
};

TestViewModel.prototype.computeIsShowResults = function () {
    var self = TestViewModel.typesafe(this);

    return self.selectedTab() == 'results';
};

TestViewModel.prototype.computeIsShowDocumentation = function () {
    var self = TestViewModel.typesafe(this);

    return self.selectedTab() == 'documentation';
};

TestViewModel.prototype.openSaveModal = function () {
    this.delegate.openSaveModal();
};

TestViewModel.prototype.openHelpModal = function () {
    var self = TestViewModel.typesafe(this);

    util.lightbox.open({
        url : 'html/lightbox_tmpl',
        selector : '#lightbox-test-header-help-template',
        cancelSelector: '.cancel-button',
        onOpenComplete: function(){
            ko.applyBindings(self, document.getElementById('lightbox-test-header-help'));
        }
    });
};

TestViewModel.prototype.getTabClassFor = function (tabName) {
    var self = TestViewModel.typesafe(this);

    if (self.selectedTab() == tabName) {
        return 'selected';
    }

    return '';
};

TestViewModel.prototype.getTabClassForResults = function (tabName) {
    var self = TestViewModel.typesafe(this);

    if (self.selectedTab() == tabName) {
        return 'selected';
    } else if(self.hasResults()) {
        return
    } else {
        return 'disabled'
    }

    return '';
};

TestViewModel.prototype.selectTab = function(tab, callback){
    var self = TestViewModel.typesafe(this);
    callback = callback || function(){};

    self.selectedTab(tab);

    var testModule = self.vmConfiguration.module.split('.').pop();
    var configurationTemplateRoute = "test_module/test_configuration_tmpl/"+testModule;
    var configurationTemplateName = "test-configuration-"+testModule;
    var documentationTemplateRoute = "test_module/test_documentation_tmpl/"+testModule;
    switch (tab) {
        case 'configuration':
            util.lightbox.close();
            util.lightbox.working(new LightboxWorkingViewModel(translate("Loading"), translate("Loading")));
            util.getTemplate(configurationTemplateRoute, '#' + configurationTemplateName, function(template){
                self.testConfigurationTemplateName(configurationTemplateName);
                util.lightbox.close();
                callback();
            }, self.selectedTab() != tab);
            break;
        case 'results':
            util.lightbox.close();
            util.lightbox.working(new LightboxWorkingViewModel(translate("Loading"), translate("Loading")));
            util.getTemplate(configurationTemplateRoute, '#' + configurationTemplateName, function(template){
                self.testConfigurationTemplateName(configurationTemplateName);
                util.lightbox.close();
                self.templateResultsTab(self.isTestRunning(), callback);
            }, self.selectedTab() != tab);

            break;
        case 'documentation':
            util.getTemplate(documentationTemplateRoute, '#test-documentation-tmpl', function(template){
                self.testDocumentationTemplateName('test-documentation-tmpl');
            }, self.selectedTab() != tab);

            callback();

            break;
    }

    appHistory.push(ixiaCRVm);
};

TestViewModel.prototype.templateResultsTab = function(isTestRunning, callback){
    var self = TestViewModel.typesafe(this),
        moduleName = self.vmConfiguration.module.split('.').pop(),
        resultsTemplateRoute = "test_module/test_results_tmpl/"+self.vmConfiguration.module.split('.').pop(),
        resultsNeedToRunSelector = "#results-need-to-run-tmpl-" + moduleName,
        resultsChartSelector = "#results-chart-tmpl-" + moduleName;

    callback = callback || $.noop;

    if(!self.hasResults() && !isTestRunning){
        util.lightbox.close();
        util.lightbox.working(new LightboxWorkingViewModel(translate("Loading"), translate("Loading")));
        util.getTemplate(resultsTemplateRoute, resultsNeedToRunSelector, function(template){
            template.tmpl().appendTo($(".results").empty());
            util.lightbox.close();
            callback();
        }, true);
    }else{
        if(self.hasResults()){
            callback();

            self.refreshActiveChartOnVisible();

            return;
        }

        util.lightbox.close();
        util.lightbox.working(new LightboxWorkingViewModel(translate("Loading"), translate("Loading")));
        util.getTemplate(resultsTemplateRoute, resultsChartSelector, function(template){
            template.tmpl().appendTo($(".results").empty());
            self.hasResults(true);
            util.lightbox.close();
            callback();
        }, true);
    }
};

TestViewModel.prototype.refreshTestDraggables = function () {
    var self = TestViewModel.typesafe(this);

    self.vmSidebar.refreshTestDraggables();
};

TestViewModel.prototype.refreshActiveChartOnVisible = function () {
    var self = TestViewModel.typesafe(this);

    if ($('.results #result-charts:visible').length == 0) {
        setTimeout(function () { self.refreshActiveChartOnVisible(); }, 1);
        return;
    }

    self.vmResults.activeChart().activate();
};

TestViewModel.prototype.onSelectedTabUpdated = function (value) {
    var self = TestViewModel.typesafe(this);

    if (value == 'results') {
        if (self.hasResults()) {
            self.vmResults.activeChart().activate();
        }
    }
};

TestViewModel.prototype.showConfiguration = function () {
    var self = TestViewModel.typesafe(this);

    self.selectTab('configuration');
};

TestViewModel.prototype.showResults = function (closeLightbox) {
    var self = TestViewModel.typesafe(this);

    if (self.hasResults()){
        self.selectTab('results');
        if (closeLightbox === true){
            setTimeout(function(){util.lightbox.close();},2000);
        }
    }
};

TestViewModel.prototype.showDocumentation = function () {
    var self = TestViewModel.typesafe(this);
    self.selectTab('documentation');
};

TestViewModel.prototype.ensureUnreservedOrFail = function(callback) {
    var self = TestViewModel.typesafe(this),
        handle_response = function(data,error){
            if(error){
                util.lightbox.openError(window.translate('Error'), window.translate('Unable to get reservation status.'));
                window.logger.error(error);
                return;
            }


            var reserved_info = data.reserved_remotely;
            if(reserved_info.reserved === false){
                callback();
            }
            else if(reserved_info.is_reserved_by_me === true){
                self.lightboxText = translate('A test is already running.  Please wait for the current test to complete before loading a new test.');
                util.lightbox.open({
                    url : 'html/lightbox_tmpl',
                    selector : '#lightbox-message-template',
                    cancelSelector: '.ok-button',
                    onOpenComplete: function(){
                        ko.applyBindings(self, document.getElementById('lightbox-message'));
                    }
                });
            } else {
                self.lightboxText = translate('This Axon chassis is currently reserved.<br/><br/>' +
                    'User: {user}<br/>From: {from}<br/>Since: {since}<br/><br/>' +
                    'Please wait for the chassis to become available before loading a test.<br><br>', {
                    user: reserved_info.reserved_by,
                    from: reserved_info.reserved_addr,
                    since: reserved_info.reserved_since
                });
                util.lightbox.open({
                    url : 'html/lightbox_tmpl',
                    selector : '#lightbox-reserved-template',
                    cancelSelector: '.ok-button',
                    onOpenComplete: function(){
                        ko.applyBindings(self, document.getElementById('lightbox-message'));
                    }
                });
            }
        };


    util.get_chassis_reservationa_status(handle_response);

}

/**
 * Loads configuration from a selected test
 *
 * @param testConfiguration TestTemplateViewModel
 * @param eventConfiguration TestTemplateViewModel
 */
TestViewModel.prototype.loadTest = function (testConfiguration, eventConfiguration) {
    this.delegate.loadTest.apply(this.delegate, arguments);
};

TestViewModel.prototype.loadRecentTest = function (historyItem) {
    var self = TestViewModel.typesafe(this);
    self.ensureUnreservedOrFail(function() {
        var matchedTest = ko.utils.arrayFirst(self.rootVm.availableTests, function (item) {
            return (item.id() === historyItem.test_id && !item.isFactoryTest() && (item.result_id && item.result_id === historyItem.result_id()));
        });

        if (matchedTest === null) {
            self.rootVm.getAvailableTests({"test_id" : historyItem.test_id, "result_id" : historyItem.result_id()}, function() {
                matchedTest = ko.utils.arrayFirst(self.rootVm.availableTests, function (item) {
                            return (item.id() === historyItem.test_id && !item.isFactoryTest() && (item.result_id && item.result_id === historyItem.result_id()));
                        });
                if (matchedTest !== null) {
                    self.loadingTest(self, historyItem, matchedTest);
                }
            });
        } else {
            self.loadingTest(self, historyItem, matchedTest);
        }
    })
};

TestViewModel.prototype.loadingTest = function(self, historyItem, testConfiguration) {
    self.executeLoadTest(self, historyItem, testConfiguration);
};

/**
 * Loading test from a selected history results or axon test
 * @param self TestViewModel
 * @param historyItem TestHistoryViewModel
 * @param matchedTest TestTemplateViewModel
 */
TestViewModel.prototype.executeLoadTest = function (self, historyItem, matchedTest) {
    self.vmDocumentation.loadTest(matchedTest);
    self.vmConfiguration.loadTest(matchedTest, function(){
        self.rootVm.selectTab('testLibrary');
    }.bind(self));
};

TestViewModel.prototype.openTestCreationLightbox = function(){
    this.delegate.openTestCreationLightbox();
};

TestViewModel.prototype.closeTestEditor = function () {
    this.delegate.closeTestEditor();
}

TestViewModel.prototype.runTest = function () {

    /**
     * Scenarios:
     *  1. Test is running - always allow test to stop (immediately)
     *  2. Test is not running and chassis is reserved - prevent test from starting and show error
     *  3. Test is not running and chassis is not reserved - start test
     */

    var self = TestViewModel.typesafe(this),
        run_test;

    if (self.vmResults.status() === 'running') {
        // The chassis will be reserved, so no need to check - just abort immediately
        self.vmResults.status('aborted');
        util.lightbox.working(new LightboxWorkingViewModel(translate("Stop"), translate("Stopping Test...")));
        util.applyFunction(self.vmResults.charts(), "dispose");
        self.vmConfiguration.cancelTest(function() {
            self.isTestRunning(false);
            self.rootVm.getResultHistory();
        });
        return; // Short-circuit
    }

    run_test = function(data,error){
        if(error){
            util.lightbox.openError(window.translate('Error'), window.translate('Unable to get reservation status.'));
            window.logger.error(error);
            return; // Short-circuit
        }

        // Start the test
        util.lightbox.working(new LightboxWorkingViewModel(translate("Start"), translate("Validating Test...")));
        self.hasResults(false);
        self.testResultsTemplateName("placeholder-template");
        self.vmResults.reset();

        setTimeout(function () { self.vmConfiguration.validate(function() {
            self.vmConfiguration.runTest();
        }) }, 1000);
    };
};

TestViewModel.prototype.abortTestWithError = function (data) {
    var self = TestViewModel.typesafe(this);

    self.vmResults.status('aborted');
    util.applyFunction(self.vmResults.charts(), "dispose");
    util.lightbox.openError(data.messages[0].header, data.messages[0].content);
};

TestViewModel.prototype.validate = function(success, error){
    var self = TestViewModel.typesafe(this),
        result = new ValidationResultsViewModel(self.vmConfiguration);

    success = success || $.noop;
    error = error || $.noop;

    //result = self.delegate.validate(result);
    result = self.vmConfiguration.validate(undefined, result);

    if(result.is_valid){
        success();
    }else{
        error(result);
    }
};

TestViewModel.prototype.getJsonConfiguration = function () {
    var self = TestViewModel.typesafe(this);

    return JSON.stringify(self.vmConfiguration.toJSON());
};

module.exports = TestViewModel;
});

require.register("./components-ixia/async-poller", function (exports, module) {
function AsyncPoller(fn, delay) {
    this.fn = fn;
    this.delay = delay || 10000;
    this.timeout = undefined;
}

AsyncPoller.prototype.poll = AsyncPoller.prototype.start = function () {
    // Call function immediately, then poll
    this.fn(this.callback.bind(this));
};

AsyncPoller.prototype.stop = function () {
    if (this.timeout) {
        clearTimeout(this.timeout);
    }
};

AsyncPoller.prototype.callback = function () {
    // Always overwrite any previous polling
    this.stop();

    this.timeout = setTimeout(this.poll.bind(this), this.delay); // Recursion
};

module.exports = AsyncPoller;

});

require.register("./components-ixia/loading-state", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    $template = domify(require('./components-ixia/loading-state/template.js'));

function LoadingState($el) {
    this.$template = $template.cloneNode(true);
    this.set_el($el);
}

LoadingState.prototype.show = function (message) {
    var $message = this.$template.querySelector('h3'),
        prev = $.blockUI.defaults.css; // We need to reset the block UI's CSS

    $message.textContent = message;

    $.blockUI.defaults.css = {};
    $(this.$el).block({
        message: this.$template,
        width: '100%'
    });
    $.blockUI.defaults.css = prev;

    return this.$el;
};

LoadingState.prototype.hide = function () {
    $(this.$el).unblock();
};

LoadingState.prototype.set_el = function ($el) {
    this.$el = $el;
};


module.exports = LoadingState;
});

require.register("./components-ixia/loading-state/template.js", function (exports, module) {
module.exports = '<div id="lightbox-working">\n    <div class="working"><img src="static/images/spinner.gif" class="loading"/>\n        <div class="content"><h3></h3></div>\n    </div>\n</div>';
});

require.register("./components-ixia/network-settings-view", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    $template = domify(require('./components-ixia/network-settings-view/template.js')),
    events = require('component~event@0.1.4'),
    classes = require('component~classes@1.2.3'),
    validate_form = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2'),
    is_ip = require('johntron~is-ip-address@39a0715c025a0be4d5956e1b891682d6d0f18e18');

function NetworkSettings(model) {
    this.model = model;
    this.$el = $template.cloneNode(true);
    this.event_handlers = [];
    this.strings = {
        "Field is required": window.translate('Field is required'),
        "Field must be a number 1 to 4095": window.translate('Field must be a number 1 to 4095'),
        "Field must be an IPv4 address": window.translate("Field must be an IPv4 address"),
        "Field must be a number 0 to 32": window.translate("Field must be a number 0 to 32")
    };
}

NetworkSettings.prototype.set_model = function (model) {
    this.model = model;
};

NetworkSettings.prototype.render = function () {};

NetworkSettings.prototype.show = function () {
    classes(this.$el).remove('hidden');
};
NetworkSettings.prototype.hide = function () {
    classes(this.$el).add('hidden');
};

NetworkSettings.prototype.bind = function () {
    var $el = this.$el,
        model = this.model,
        $vlan = $el.querySelector('.vlan input'),
        $no_dhcp = $el.querySelector('.dhcp [value=false]'),
        $dhcp = $el.querySelector('.dhcp [value=true]'),
        $ip = $el.querySelector('.ip input'),
        $netmask = $el.querySelector('.netmask input'),
        $gateway = $el.querySelector('.gateway input');

    if (model) {
        this.event_handlers = [
            [$vlan, 'change', function (e) { model.vlan(e.target.value); }],
            [$no_dhcp, 'change', function (e) { var dhcp = !e.target.checked; model.dhcp(dhcp); }],
            [$dhcp, 'change', function (e) { var dhcp = e.target.checked; model.dhcp(dhcp); }],
            [$ip, 'change', function (e) { model.ip(e.target.value); }],
            [$netmask, 'change', function (e) { model.netmask(e.target.value); }],
            [$gateway, 'change', function (e) { model.gateway(e.target.value); }]
        ];

        // DOM -> Model
        this.event_handlers.forEach(function (handler) {
            events.bind(handler[0], handler[1], handler[2]);
        });

        // Model -> DOM
        $vlan.value = model.vlan();
        $no_dhcp.checked = !model.dhcp();
        $dhcp.checked = model.dhcp();
        $ip.value = model.ip();
        $netmask.value = model.netmask();
        $gateway.value = model.gateway();

        // Validation
        if (model.dhcp()) {
            this.bind_dhcp_validator();
        } else {
            this.bind_no_dhcp_validator();
        }
    }

    // DOM -> DOM
    this.toggle_static_fields($no_dhcp.checked);
    events.bind($no_dhcp, 'click', this.show_static_fields.bind(this));
    events.bind($dhcp, 'click', this.hide_static_fields.bind(this));

    // Change validator when change from no-DHCP to DHCP
    events.bind($no_dhcp, 'click', this.bind_no_dhcp_validator.bind(this));
    events.bind($dhcp, 'click', this.bind_dhcp_validator.bind(this));
};

function is_not_ipv6(val) {
    return -1 === val.indexOf(':');
}

function is_0_to_32(val) {
    return val >= 0 && val <= 32 && val.match(/\d+/);
}

function is_1_to_4095(val) {
    return val >= 1 && val <= 4095 && val.match(/\d+/);
}

NetworkSettings.prototype.bind_no_dhcp_validator = function () {
    this.validator = validate_form(this.$el)
        .use(is_ip)
        //.on('blur') - cannot bind onblur events, because switching from
        //              static to DHCP will still fire the validation on the
        //              static IP fields
        .field('vlan')
            .is(is_1_to_4095, this.strings["Field must be a number 1 to 4095"])

        .field('ip')
            .is('required', this.strings["Field is required"])
            .is('ip', this.strings["Field must be an IPv4 address"])
            .is(is_not_ipv6, this.strings["Field must be an IPv4 address"])

        .field('netmask')
            .is('required', this.strings["Field is required"])
            .is('ip', this.strings["Field must be an IPv4 address"])
            .is(is_not_ipv6, this.strings["Field must be an IPv4 address"])

        .field('gateway')
            .is('required', this.strings["Field is required"])
            .is('ip', this.strings["Field must be an IPv4 address"])
            .is(is_not_ipv6, this.strings["Field must be an IPv4 address"]);
};

NetworkSettings.prototype.bind_dhcp_validator = function () {
    this.validator = validate_form(this.$el)
        .field('vlan')
        .is(is_1_to_4095, this.strings["Field must be a number 1 to 4095"]);
};

NetworkSettings.prototype.unbind = function () {
    this.event_handlers.forEach(function (handler) {
        events.unbind(handler[0], handler[1], handler[2]);
    });
};

NetworkSettings.prototype.show_static_fields = function (e) {
    this.toggle_static_fields(true);
};

NetworkSettings.prototype.hide_static_fields = function (e) {
    this.toggle_static_fields(false);
};

NetworkSettings.prototype.toggle_static_fields = function (enabled) {
    var $static = this.$el.querySelectorAll('.static input');

    [].forEach.call($static, function ($el) {
        // Clear validation messages (for non-DHCP fields)
        if (!enabled) {
            window.util.clear_validation_messages($el);
        }

        $el.disabled = !enabled;
    });
};

NetworkSettings.prototype.validate = function (done) {
    done = done || function () {};

    this.validator.validate(function (err, valid) {
        if (err) {
            window.logger.error('Could not load Pulse', err);
            window.util.lightbox.openError(window.translate('Error'), window.translate('Unable to load Pulse'));
        }

        if (valid) {
            return done();
        }
    });
};

module.exports = NetworkSettings;
});

require.register("./components-ixia/network-settings-view/template.js", function (exports, module) {
module.exports = '<form action="">\n    <ul class="network-settings">\n        <li class="vlan">\n            <label>VLAN ID</label>\n            <input type="text" name="vlan" placeholder="1 to 4096"/>\n        </li>\n        <li class="dhcp">\n            <label>\n                No DHCP\n                <input type="radio" name="dhcp" value="false"/>\n            </label>\n\n            <label>\n                DHCP\n                <input type="radio" name="dhcp" value="true"/>\n            </label>\n        </li>\n        <li class="ip static">\n            <label>IP</label>\n            <input type="text" name="ip" placeholder="IPv4"/>\n        </li>\n        <li class="netmask static">\n            <label>Netmask</label>\n            <input type="text" name="netmask" placeholder="IPv4"/>\n        </li>\n        <li class="gateway static">\n            <label>Gateway</label>\n            <input type="text" name="gateway" placeholder="IPv4"/>\n        </li>\n    </ul>\n</form>';
});

require.register("./components-ixia/interface-model", function (exports, module) {
var model = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12'),
    defaults = require('segmentio~model-defaults@1.0.6');

var Interface = model('Interface')
    .use(defaults)
    .attr('physical_port')
    .attr('available', {"default": true}) // True if port can be re-allocated
    .attr('allocated_to')
    .attr('enabled', {"default": false});

Interface.primaryKey = "physical_port";

Interface.from_device_view_model = function (view_model) {
    var physical_port = view_model.toFlatObject();
    return new this({physical_port: physical_port});
};

module.exports = Interface;
});

require.register("./components-ixia/interface-selector", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    template = require('./components-ixia/interface-selector/templates/template.js'),
    interface_template = require('./components-ixia/interface-selector/templates/interface.js'),
    Interface = require('./components-ixia/interface-model'),
    emitter = require('component~emitter@1.0.1'),
    classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4');

/**
 * @param interfaces ObservableArray or Array of Interfaces
 * @param render_interface delegate function called when an interface needs rendering
 * @constructor
 */
function InterfaceSelector(interfaces, render_interface) {
    if (interfaces.subscribe) {
        // interfaces is observable
        // interfaces.subscribe(this.update_interfaces.bind(this)); // Causes ENT-3611
        interfaces = interfaces();
    }
    this.set_models(interfaces);
    this.render_interface = typeof render_interface === 'function' ? render_interface : function () {};
    this.$el = domify(template);
    this.$interfaces = [];
    this.click_handlers = [];
    this.change_handlers = [];
    this.strings = {
        "No interfaces": window.translate("No interfaces")
    };
}

emitter(InterfaceSelector.prototype);

InterfaceSelector.sort = function (interfaces) {
    var ret = [],
        offset;

    interfaces.map(function (iface) {
        offset = iface.physical_port() - 1;
        ret[offset] = iface;
    });

    return ret;
};

InterfaceSelector.prototype.set_models = function (models) {
    // Convert "view-models" to Models
    models = models.map(function (iface) {
        if (iface.toFlatObject) {
            iface = Interface.from_device_view_model(iface);
        }
        return iface;
    });

    this.models = InterfaceSelector.sort(models) || [];

};

InterfaceSelector.prototype.render = function () {
    var $interface;

    this.$el.innerHTML = '';

    if (!this.models.length) {
        this.$el.innerHTML = this.strings["No interfaces"];
    }

    this.models.map(function (model, i) {
        $interface = domify(interface_template);
        this.render_interface(model, $interface, i);
        this.$el.appendChild($interface);
        this.$interfaces[i] = $interface;
    }, this);

    this.bind();

    return this.$el;
};

InterfaceSelector.prototype.bind = function () {
    var $interfaces = this.$interfaces,
        $interface,
        models = this.models,
        model,
        handler,
        redraw = this.render_interface;

    // DOM -> Model
    $interfaces.forEach(function ($interface, index) {
        model = models[index];

        handler = this.select.bind(this, model, false);
        this.click_handlers[index] = handler;

        if (model.available()) {
            event.bind($interface, 'click', handler);
        }
    }, this);

    // Model -> DOM
    this.models.forEach(function (model, index) {
        $interface = $interfaces[index];

        handler = redraw.bind(this, model, $interface, index);
        this.change_handlers[index] = handler;

        model.on('change', handler);
    }, this);
};

InterfaceSelector.prototype.unbind = function () {
    var $interfaces = this.$interfaces,
        $interface,
        models = this.models,
        model,
        handler,
        redraw = this.render_interface;

    // DOM -> Model
    $interfaces.forEach(function ($interface, index) {
        model = models[index];

        handler = this.click_handlers[index];
        event.unbind($interface, 'click', handler);

        delete this.click_handlers[index];
    }, this);

    // Model -> DOM
    this.models.forEach(function (model, index) {
        $interface = $interfaces[index];

        handler = this.change_handlers[index];
        model.off('change', handler);

        delete this.change_handlers[index];
    }, this);
};

InterfaceSelector.prototype.select = function (selected, silent) {
    var $interfaces = this.$interfaces,
        classed,
        index = -1;

    if (!selected || undefined === selected.physical_port()) {
        return;
    }

    this.models.forEach(function (model, i) {
        if (selected.physical_port() === model.physical_port()) {
            index = i;
        }
    });

    $interfaces.forEach(function ($interface, i) {
        classed = classes($interface);

        if (i === index) {
            classed.add('selected');
        } else {
            classed.remove('selected');
        }
    });

    if (!silent) {
        this.emit('select', selected, $interfaces[index], index);
    }
};

InterfaceSelector.prototype.update_interfaces = function (interfaces) {
    this.set_models(interfaces);
    this.render();
};

module.exports = InterfaceSelector;

});

require.register("./components-ixia/interface-selector/templates/interface.js", function (exports, module) {
module.exports = '<div class="interface"></div>\n';
});

require.register("./components-ixia/interface-selector/templates/template.js", function (exports, module) {
module.exports = '<div class="interface-selector port-container"></div>\n';
});

require.register("./components-ixia/agenda", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    $template = domify(require('./components-ixia/agenda/templates/index.js')),
    $loading_more = domify(require('./components-ixia/agenda/templates/loading-more.js')),
    classes = require('component~classes@1.2.3'),
    Model = require('./components-ixia/agenda/models/agenda.js'),
    AsyncPoller = require('./components-ixia/async-poller'),
    LoadingState = require('./components-ixia/loading-state'),
    events = require('component~event@0.1.4'),
    lightbox = window.util.lightbox,
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a'),
    moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68'),
    AgendaEvent = require('./components-ixia/agenda/views/agenda-event.js'),
    AgendaDate = require('./components-ixia/agenda/views/agenda-date.js');

function AgendaViewModel(){
    this.$el = $template.cloneNode(true);
    this.loading_state = new LoadingState(this.$el);
    this.strings = {
        "Saving": window.translate("Saving")
    };
    this.date_list = new Array();
    this.click_handler = undefined;
    this.max_height = 420;

    //flags for insert empty empty today
    this.earlier_than_today = false;
    this.later_than_today = false;

    this.$loading_more_up = undefined;
    this.$loading_more_down = undefined;
}

AgendaViewModel.factory = function(click_handler){
    var agendavm = new AgendaViewModel(),
        handler = function(model){

            agendavm.render();
            agendavm.bind();
            util.lightbox.close();
        };

    util.lightbox.working(new LightboxWorkingViewModel(window.translate("Start"), window.translate("Loading Calendar Items...")));
    agendavm.set_model(Model.get(handler));

    if(click_handler){
        agendavm.click_handler = click_handler;
    }

    return agendavm;
}

AgendaViewModel.prototype.set_model = function (model) {
    this.model = model;
}

AgendaViewModel.prototype.render = function () {
    var self = this,
        focued_date = self.model.focused_datetime.format("YYYY-MM-DD"),
        today = moment().format("YYYY-MM-DD"),
        date_list = self.date_list;

    if(!self.model){
        //this.render_loading();
        return;
    };

    if(focued_date === today){
        self.earlier_than_today = true;
        self.later_than_today = true;
    }
    else if(focued_date < today){
        self.earlier_than_today = true;
    }
    else{
        self.later_than_today = true;
    }

    if(self.model.current_events && self.model.current_events.length > 0){
        self.model.current_events.forEach(function(agenda_event){
            var date_view = self.get_date_view(agenda_event,'down');
            date_view.append_event(AgendaEvent.factory(agenda_event,self.click_handler));
        });
    }

    //if init agenda is empty
    if(!(focued_date in date_list)){
        self.add_empty_date_view(focued_date,'down','');
    }

    if(!self.model.cached_events_down || self.model.cached_events_down.length === 0){
        self.later_than_today = true;
        if(self.earlier_than_today
            && self.later_than_today
            && !(today in self.date_list)){
            self.add_empty_date_view(today,'down','');
        }
    }

    self.adjust_scroll();
    self.$el.scrollTop = 1;
}

AgendaViewModel.prototype.add_empty_date_view = function (empty_date,direction,message) {
    var self = this,
        date_list = self.date_list;

    var view = new AgendaDate.factory(empty_date, self);
    date_list[empty_date] = view;

    if(direction === 'up'){
        var $date_el = view.render();
        self.$el.insertBefore($date_el,self.$el.firstChild);
        self.adjust_scroll($date_el.offsetHeight);
    }
    else{
        self.$el.appendChild(view.render());
    }
}

AgendaViewModel.prototype.adjust_scroll = function (new_el_offsetHeight) {
    var self = this,
        $el = self.$el;

    if($el.scrollHeight < self.max_height){
        $el.style.height = ($el.scrollHeight - 2) + 'px';
    }
    else{
        $el.style.height = self.max_height + 'px';
        if(new_el_offsetHeight){
            $el.scrollTop = $el.scrollTop + new_el_offsetHeight;
        }
    }
}

AgendaViewModel.prototype.get_date_view = function (agenda_event,direction) {
    var self = this,
        return_view = undefined,
        date_list = self.date_list,
        agenda_date = moment(agenda_event.datetime()).format("YYYY-MM-DD");

    if(!(agenda_date in date_list)){
        var focued_date = self.model.focused_datetime.format("YYYY-MM-DD"),
            today = moment().format("YYYY-MM-DD");
        if(!(focued_date in date_list)
            && agenda_date > focued_date){
            self.add_empty_date_view(focued_date,'down','');
        }

        if(agenda_date < today){
            self.earlier_than_today = true;
        }
        else{
            self.later_than_today = true;
        }

        if(self.earlier_than_today
            && self.later_than_today
            && !(today in date_list)
            && agenda_date !== today){
            self.add_empty_date_view(today,direction,'');
        }

        var date_view = new AgendaDate.factory(agenda_date, self);

        date_list[agenda_date] = date_view;

        if(direction === 'up'){
            var $date_el = date_view.render();
            self.$el.insertBefore($date_el,self.$el.firstChild);
            self.adjust_scroll($date_el.offsetHeight);
        }
        else{
            self.$el.appendChild(date_view.render());
        }

        return_view = date_view;
    }
    else{
        return_view = date_list[agenda_date];
    }

    return return_view;
}

AgendaViewModel.prototype.bind = function () {
    //scroll events
    var self = this,
        scroll_handler = function(){
            if(this.scrollHeight - this.scrollTop === this.clientHeight){
                self.append_events();
                //alert("top");
            }
            if(this.scrollTop === 0){
                self.prepend_events();
            }
        };

    self.$el.onscroll = scroll_handler;
}

AgendaViewModel.prototype.render_loading_more = function (direction) {
    var self = this;

    if(direction === 'up'){
        if(!self.$loading_more_up){
            self.$loading_more_up = $loading_more.cloneNode(true);
            self.$el.insertBefore(self.$loading_more_up,self.$el.firstChild);
            classes(self.$loading_more_up).add('up');
        }
    }
    else{
        if(!self.$loading_more_down){
            self.$loading_more_down = $loading_more.cloneNode(true);
            self.$el.appendChild(self.$loading_more_down);
            classes(self.$loading_more_down).add('down');
        }
    }
}

AgendaViewModel.prototype.remove_loading_more = function (direction) {
    var self = this;

    if(direction === 'up'){
        if(self.$loading_more_up){
            var handler_down = function() {
                self.$el.removeChild(self.$loading_more_up);
                self.$loading_more_up = undefined;
                self.prepend_events();
            }

            classes(self.$loading_more_up).add('disappear');
            setTimeout(handler_down,500);
        }
    }
    else{
        if(self.$loading_more_down){
            var handler_down = function() {
                self.$el.removeChild(self.$loading_more_down);
                self.$loading_more_down = undefined;
                self.append_events();
            }

            classes(self.$loading_more_down).add('disappear');
            setTimeout(handler_down,500);
        }
    }

}

AgendaViewModel.prototype.append_events = function () {
    var self = this,
        $el = self.$el;

    if(self.$loading_more_down){
        return;
    }

    if(self.model.cached_events_down && self.model.cached_events_down.length > 0){
        self.model.cached_events_down.forEach(function(agenda_event){
            var date_view = self.get_date_view(agenda_event,'down');
            date_view.append_event(AgendaEvent.factory(agenda_event,self.click_handler));
        });
        self.model.current_events = self.model.current_events.concat(self.model.cached_events_down);
        self.model.cached_events_down = undefined;
    }
    else if(!self.model.endbottom && $el.scrollHeight - $el.scrollTop === $el.clientHeight)
    {
        //$el.scrollTop = $el.scrollHeight - $el.clientHeight - 1;
        self.render_loading_more('down');
    }

    if(!self.model.endbottom && !self.model.loading_down){
        self.model.load_consecutive_events('down',self.remove_loading_more.bind(self));
    }
    else if(self.model.endbottom){
        var today = moment().format("YYYY-MM-DD");
        self.later_than_today = true;

        if(self.earlier_than_today
            && self.later_than_today
            && !(today in self.date_list)){
            self.add_empty_date_view(today,'down','');
        }
    }
}

AgendaViewModel.prototype.prepend_events = function () {
    var self = this,
        $el = self.$el;

    if(self.$loading_more_up){
        return;
    }

    if(self.model.cached_events_up && self.model.cached_events_up.length > 0){
        self.model.cached_events_up.reverse().forEach(function(agenda_event){
            var $event_el,
                date_view = self.get_date_view(agenda_event,'up');

            $event_el = date_view.prepend_event(AgendaEvent.factory(agenda_event,self.click_handler));

            self.adjust_scroll($event_el.offsetHeight);
        });
        self.model.current_events = self.model.cached_events_up.concat(self.model.current_events);
        self.model.cached_events_up = undefined;
    }
    else if(!self.model.endtop && $el.scrollTop === 0)
    {
        //$el.scrollTop = 1;
        self.render_loading_more('up');
    }

    if(!self.model.endtop && !self.model.loading_up){
        self.model.load_consecutive_events('up',self.remove_loading_more.bind(self));
    }
    else if(self.model.endtop){
        var today = moment().format("YYYY-MM-DD");
        self.earlier_than_today = true;

        if(self.earlier_than_today
            && self.later_than_today
            && !(today in self.date_list)){
            self.add_empty_date_view(today,'up','');
        }
    }
}

AgendaViewModel.prototype.reset = function (if_today) {
    var self = this,
        reload_handler = function () {
            self.clean();
            self.render();
            util.lightbox.close();
        };

    util.lightbox.working(new LightboxWorkingViewModel(window.translate("Start"), window.translate("Loading Calendar Items...")));
    if (if_today) {
        self.model.set_focused_date(moment().startOf('day'));
    }
    self.model.reload(reload_handler);
}

AgendaViewModel.prototype.clean = function () {
    var self = this;

    this.date_list = new Array();

    this.earlier_than_today = false;
    this.later_than_today = false;

    while (self.$el.firstChild) {
      self.$el.removeChild(self.$el.firstChild);
    }

    self.$el.style.height = '';
    self.$loading_more_down = undefined;
    self.$loading_more_up = undefined;

}

AgendaViewModel.prototype.set_search_key = function (search_key) {
    var self = this;
    if(self.model){
        self.model.search = search_key;
    }
}

AgendaViewModel.prototype.get_date = function (format_str) {
    format_str = format_str || 'LL';
    return this.model.focused_datetime.format(format_str);
}

AgendaViewModel.prototype.render_loading = function () {
    var message = 'Loading...';
    this.loading_state.set_el(this.$el);

    this.loading_state.show(message);

    return this.$el;
};


module.exports = AgendaViewModel;
});

require.register("./components-ixia/agenda/views/agenda-event.js", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    $template = domify(require('./components-ixia/agenda/templates/agenda-event.js')),
    classes = require('component~classes@1.2.3'),
    moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68'),
    events = require('component~event@0.1.4');

function AgendaEventViewModel(){
    this.$el = $template.cloneNode(true);
    this.strings = {
        "Saving": window.translate("Saving"),
        "Type": window.translate("Type")
    };
    this.event_handlers = [];
    this.click_handler = undefined;
}

AgendaEventViewModel.factory = function(model,click_handler){
    var view = new AgendaEventViewModel();

    view.model = model;
    //view.model.set_view(view);
    if(click_handler){
        view.click_handler = click_handler;
    }

    return view;
}

AgendaEventViewModel.prototype.bind = function () {
    var self = this,
        $el = self.$el,
        model = self.model,
        $name = $el.querySelector('.description .name'),
        $template_name = $el.querySelector('.test-template'),
        $status = $el.querySelector('.status'),
        $time = $el.querySelector('.time'),
        $duration = $el.querySelector('.duration');

    $name.textContent = model.name();
    if (model.test_config()) {
        $template_name.textContent = self.strings.Type + ': ' + model.test_config().template_name;
        $duration.textContent = model.test_config().duration + (model.test_config().duration === 1?' minute':' minutes');
    }
    classes($status).add(model.status() || 'scheduled');
    $time.textContent = moment(model.datetime()).format('LT');
    $el.setAttribute('event_id', 'AG' + moment(model.datetime()).format("YYYYMMDDHHmmss"));

    if(self.click_handler){
        events.bind($el, 'click', self.click_handler.bind(self));
    }

}

AgendaEventViewModel.prototype.render = function () {
    this.bind();
    return this.$el;
}

AgendaEventViewModel.prototype.destroy = function () {

}


module.exports = AgendaEventViewModel;
});

require.register("./components-ixia/agenda/views/agenda-date.js", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    $template = domify(require('./components-ixia/agenda/templates/agenda-date.js')),
    moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68'),
    classes = require('component~classes@1.2.3');

function AgendaDateModelView(){
    var self = this;
    self.$el = $template.cloneNode(true);
    self.agenda_date = undefined;
    self.events_count = 0;
    self.parent = undefined;
    self.strings = {
        "Today": window.translate("Today")
    };
}

AgendaDateModelView.factory = function(agenda_date, agenda){
    var view = new AgendaDateModelView();
    view.agenda_date = moment(agenda_date);

    if(agenda){
        view.parent = agenda;
    }

    return view;
}

AgendaDateModelView.prototype.render = function(){
    this.bind();
    return this.$el;
}

AgendaDateModelView.prototype.bind = function(){
    var self = this,
        $el = this.$el,
        $title = $el.querySelector('.title');


    if(moment().format("YYYY-MM-DD") === self.agenda_date.format("YYYY-MM-DD")){
        classes($el).add("today");
        $title.textContent = self.strings.Today;
    } else {
        $title.textContent = self.agenda_date.format('dddd, LL');
    }

    if(self.parent && self.parent.get_date("YYYY-MM-DD") === self.agenda_date.format("YYYY-MM-DD")){
        classes($el).add("focused");
    }
}

AgendaDateModelView.prototype.append_event = function(agenda_event_view){
    var self = this,
        $events = self.$el.querySelector('.events'),
        $agenda_event_el = agenda_event_view.render();

    $events.appendChild($agenda_event_el);
    self.events_count++;
    return $agenda_event_el;
}

AgendaDateModelView.prototype.prepend_event = function(agenda_event_view){
    var self = this,
        $events = self.$el.querySelector('.events'),
        $agenda_event_el = agenda_event_view.render();

    $events.insertBefore($agenda_event_el,$events.firstChild);
    self.events_count++;
    return $agenda_event_el;
}

module.exports = AgendaDateModelView;
});

require.register("./components-ixia/agenda/models/agenda.js", function (exports, module) {
var request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a'),
    AgendaEventModel = require('./components-ixia/agenda/models/agenda-event.js'),
    moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68'),
    tz = window.jstz.determine();

function AgendaModel(){
    var self = this;
    self.qty = 15;
    self.current_events = undefined;
    self.cached_events_up = undefined;
    self.cached_events_down = undefined;

    self.focused_datetime = moment().startOf('day');
    self.earliest_time = undefined;
    self.latest_time = undefined;
    self.endtop = false;
    self.endbottom = false;
    self.loading_up = false;
    self.loading_bottom = false;
    self.search = '';

}

AgendaModel.get = function(done){
    var model = new AgendaModel();

    model.load_event_by_datetime(done);
    return model;
}

AgendaModel.prototype.reload = function(done){
    var self = this;

    self.current_events = undefined;
    self.cached_events_up = undefined;
    self.cached_events_down = undefined;

    self.earliest_time = undefined;
    self.latest_time = undefined;
    self.endtop = false;
    self.endbottom = false;
    self.loading_up = false;
    self.loading_bottom = false;

    self.load_event_by_datetime(done);
}

AgendaModel.prototype.load_event_by_datetime = function(callback){
    callback = callback || function(){};
    var self = this;

    request
        .get('/ixia/agenda')
        .use(no_cache)
        .query('date_time=' + self.focused_datetime.format("YYYY-MM-DD HH:mm"))
        .query('qty=' + self.qty)
        .query('timezone=' + tz.name())
        .query('search=' + self.search)
        .set('Accept', 'application/json')
        .end(function(error, response){
            var data;

            if(error){
                return callback(null,error);
            };

            if( response.body && response.body.result === 'FAILURE' ){
                return callback(null,response.body.message);
            };

            data =  response.body;

            self.inflate_with_data(data);

            return callback(self);


        });


    return self;
}

AgendaModel.prototype.inflate_with_data = function(data) {
    var self = this;

    if(data.result && data.result.length > 0){
        self.current_events = data.result.map(function(event){
            return AgendaEventModel.factory(event);
        });
    }

    if(data.up && data.up.length > 0){
        self.cached_events_up = data.up.map(function(event){
            return AgendaEventModel.factory(event);
        });
    }

    if(data.down && data.down.length > 0){
        self.cached_events_down = data.down.map(function(event){
            return AgendaEventModel.factory(event);
        });
    }

    if(data.endtop){
       self.endtop = data.endtop;
    }

    if(data.endbottom){
        self.endbottom = data.endbottom;
    }

    if(data.earliest_time){
        self.earliest_time = moment(data.earliest_time);
    }

    if(data.latest_time){
        self.latest_time = moment(data.latest_time);
    }


    //self.earliest_time

}


AgendaModel.prototype.load_consecutive_events = function(direction, callback) {
    callback = callback || function(){};
    var self = this,
        date_time = undefined;

    if(direction === 'up'){
        self.loading_up = true;
        date_time = self.earliest_time;
    }
    else if(direction === 'down'){
        self.loading_down = true;
        date_time = self.latest_time;
    }

    request
        .get('/ixia/agenda/' + direction)
        .use(no_cache)
        .query('date_time=' + date_time.format("YYYY-MM-DD HH:mm"))
        .query('qty=' + self.qty)
        .query('timezone=' + tz.name())
        .query('search=' + self.search)
        .set('Accept', 'application/json')
        .end(function(error, response){
            var data;

            if(error){
                return callback(null,error);
            };

            if( response.body && response.body.result === 'FAILURE' ){
                return callback(null,response.body.message);
            };

            data =  response.body;

            self.inflate_with_data(data);

            //return callback(self);

            if(direction === 'up'){
                self.loading_up = false;
            }
            else if(direction === 'down'){
                self.loading_down = false;
            }
            callback(direction);
        });
}

AgendaModel.prototype.set_focused_date = function(datetime){
    var self = this;
    self.focused_datetime = datetime;
}

AgendaModel.prototype.shift_focused_date = function(days){
    var self = this;
    self.focused_datetime = self.focused_datetime.add('days', days);
}

module.exports = AgendaModel;
});

require.register("./components-ixia/agenda/models/agenda-event.js", function (exports, module) {
var model = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12'),
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026');

var AgendaEventModel = model('AgendaEventModel')
                    .attr('datetime')
                    .attr('name')
                    .attr('type')
                    .attr('duration')
                    .attr('event_info')
                    .attr('test_result_id')
                    .attr('status')
                    .attr('error_reason')
                    .attr('remote_devices')
                    .attr('test_config');

AgendaEventModel.factory = function(model){
    var model = new AgendaEventModel(model);

    return model;
}


AgendaEventModel.prototype.set_view = function(view){
    this.view = view;
}

AgendaEventModel.prototype.cancelTestEvent = function(done){
    var id = this.event_info().id;
    request
        .post('/ixia/schedule/test-events/' + id + '/cancel')
        .send('')
        .set('Accept', 'application/json')
        .end(function (err, res) {
            if (err || res.body.result === 'FAILURE') {
                window.logger.error(err || res.body);
                window.util.lightbox.error(window.translate("Canceling scheduled test"));
                return;
            }

            return done(res);
        });
}

module.exports = AgendaEventModel;
});

require.register("./components-ixia/agenda/templates/index.js", function (exports, module) {
module.exports = '<div class="agenda"></div>';
});

require.register("./components-ixia/agenda/templates/agenda-event.js", function (exports, module) {
module.exports = '<div class="agenda-event">\n    <div class="time"></div>\n    <div class="status"></div>\n    <div class="description">\n        <div class="name"></div>\n        <div class="test-template"></div>\n    </div>\n    <div class="duration"></div>\n    <div class="clear"></div>\n</div>';
});

require.register("./components-ixia/agenda/templates/agenda-date.js", function (exports, module) {
module.exports = '<div class="agenda-day">\n    <h2 class="title"></h2>\n    <div class="events"></div>\n</div>';
});

require.register("./components-ixia/agenda/templates/loading-more.js", function (exports, module) {
module.exports = '<div class="loading-more">Loading more ...</div>';
});

require.register("./components-ixia/bootstrap-timepicker", function (exports, module) {
require("./components-ixia/bootstrap-timepicker/js/bootstrap-timepicker.min.js");
});

require.register("./components-ixia/bootstrap-timepicker/js/bootstrap-timepicker.min.js", function (exports, module) {
//TODO: move arrow styles and button click code into configurable items, with defaults matching the existing code

/*!
* Timepicker Component for Twitter Bootstrap
*
* Copyright 2013 Joris de Wit
*
* Contributors https://github.com/jdewit/bootstrap-timepicker/graphs/contributors
*
* For the full copyright and license information, please view the LICENSE
* file that was distributed with this source code.
*/
(function($, window, document, undefined) {
  'use strict';

  // TIMEPICKER PUBLIC CLASS DEFINITION
  var Timepicker = function(element, options) {
    this.widget = '';
    this.$element = $(element);
    this.defaultTime = options.defaultTime;
    this.disableFocus = options.disableFocus;
    this.isOpen = options.isOpen;
    this.minuteStep = options.minuteStep;
    this.modalBackdrop = options.modalBackdrop;
    this.secondStep = options.secondStep;
    this.showInputs = options.showInputs;
    this.showMeridian = options.showMeridian;
    this.showSeconds = options.showSeconds;
    this.template = options.template;
    this.appendWidgetTo = options.appendWidgetTo;
    this.upArrowStyle = options.upArrowStyle;
    this.downArrowStyle = options.downArrowStyle;
    this.containerClass = options.containerClass;

    this._init();
  };

  Timepicker.prototype = {

    constructor: Timepicker,

    _init: function() {
      var self = this;

      if (this.$element.parent().hasClass('input-group')) {
        if (this.$element.parent('.input-group').find('.input-group-addon').length) {
          this.$element.parent('.input-group').find('.input-group-addon').on({
            'click.timepicker': $.proxy(this.showWidget, this)
          });
        } else {
          this.$element.closest(this.containerClass).find('.input-group-addon').on({
            'click.timepicker': $.proxy(this.showWidget, this)
          });
        }

        this.$element.on({
          'focus.timepicker': $.proxy(this.highlightUnit, this),
          'click.timepicker': $.proxy(this.highlightUnit, this),
          'keydown.timepicker': $.proxy(this.elementKeydown, this),
          'blur.timepicker': $.proxy(this.blurElement, this)
        });
      } else {
        if (this.template) {
          this.$element.on({
            'focus.timepicker': $.proxy(this.showWidget, this),
            'click.timepicker': $.proxy(this.showWidget, this),
            'blur.timepicker': $.proxy(this.blurElement, this)
          });
        } else {
          this.$element.on({
            'focus.timepicker': $.proxy(this.highlightUnit, this),
            'click.timepicker': $.proxy(this.highlightUnit, this),
            'keydown.timepicker': $.proxy(this.elementKeydown, this),
            'blur.timepicker': $.proxy(this.blurElement, this)
          });
        }
      }

      if (this.template !== false) {
        this.$widget = $(this.getTemplate()).prependTo(this.$element.parents(this.appendWidgetTo)).on('click', $.proxy(this.widgetClick, this));
      } else {
        this.$widget = false;
      }

      if (this.showInputs && this.$widget !== false) {
        this.$widget.find('input').each(function() {
          $(this).on({
            'click.timepicker': function() { $(this).select(); },
            'keydown.timepicker': $.proxy(self.widgetKeydown, self)
          });
        });
      }

      this.setDefaultTime(this.defaultTime);
    },

    blurElement: function() {
      this.highlightedUnit = undefined;
      this.updateFromElementVal();
    },

    decrementHour: function() {
      if (this.showMeridian) {
        if (this.hour === 1) {
          this.hour = 12;
        } else if (this.hour === 12) {
          this.hour--;

          return this.toggleMeridian();
        } else if (this.hour === 0) {
          this.hour = 11;

          return this.toggleMeridian();
        } else {
          this.hour--;
        }
      } else {
        if (this.hour === 0) {
          this.hour = 23;
        } else {
          this.hour--;
        }
      }
      this.update();
    },

    decrementMinute: function(step) {
      var newVal;

      if (step) {
        newVal = this.minute - step;
      } else {
        newVal = this.minute - this.minuteStep;
      }

      if (newVal < 0) {
        this.decrementHour();
        this.minute = newVal + 60;
      } else {
        this.minute = newVal;
      }
      this.update();
    },

    decrementSecond: function() {
      var newVal = this.second - this.secondStep;

      if (newVal < 0) {
        this.decrementMinute(true);
        this.second = newVal + 60;
      } else {
        this.second = newVal;
      }
      this.update();
    },

    elementKeydown: function(e) {
      switch (e.keyCode) {
      case 9: //tab
        this.updateFromElementVal();

        switch (this.highlightedUnit) {
        case 'hour':
          e.preventDefault();
          this.highlightNextUnit();
          break;
        case 'minute':
          if (this.showMeridian || this.showSeconds) {
            e.preventDefault();
            this.highlightNextUnit();
          }
          break;
        case 'second':
          if (this.showMeridian) {
            e.preventDefault();
            this.highlightNextUnit();
          }
          break;
        }
        break;
      case 27: // escape
        this.updateFromElementVal();
        break;
      case 37: // left arrow
        e.preventDefault();
        this.highlightPrevUnit();
        this.updateFromElementVal();
        break;
      case 38: // up arrow
        e.preventDefault();
        switch (this.highlightedUnit) {
        case 'hour':
          this.incrementHour();
          this.highlightHour();
          break;
        case 'minute':
          this.incrementMinute();
          this.highlightMinute();
          break;
        case 'second':
          this.incrementSecond();
          this.highlightSecond();
          break;
        case 'meridian':
          this.toggleMeridian();
          this.highlightMeridian();
          break;
        }
        break;
      case 39: // right arrow
        e.preventDefault();
        this.updateFromElementVal();
        this.highlightNextUnit();
        break;
      case 40: // down arrow
        e.preventDefault();
        switch (this.highlightedUnit) {
        case 'hour':
          this.decrementHour();
          this.highlightHour();
          break;
        case 'minute':
          this.decrementMinute();
          this.highlightMinute();
          break;
        case 'second':
          this.decrementSecond();
          this.highlightSecond();
          break;
        case 'meridian':
          this.toggleMeridian();
          this.highlightMeridian();
          break;
        }
        break;
      }
    },

    formatTime: function(hour, minute, second, meridian) {
      hour = hour < 10 ? '0' + hour : hour;
      minute = minute < 10 ? '0' + minute : minute;
      second = second < 10 ? '0' + second : second;

      return hour + ':' + minute + (this.showSeconds ? ':' + second : '') + (this.showMeridian ? ' ' + meridian : '');
    },

    getCursorPosition: function() {
      var input = this.$element.get(0);

      if ('selectionStart' in input) {// Standard-compliant browsers

        return input.selectionStart;
      } else if (document.selection) {// IE fix
        input.focus();
        var sel = document.selection.createRange(),
          selLen = document.selection.createRange().text.length;

        sel.moveStart('character', - input.value.length);

        return sel.text.length - selLen;
      }
    },

    getTemplate: function() {
      var template,
        hourTemplate,
        minuteTemplate,
        secondTemplate,
        meridianTemplate,
        templateContent;

      if (this.showInputs) {
        hourTemplate = '<input type="text" name="hour" class="bootstrap-timepicker-hour form-control" maxlength="2"/>';
        minuteTemplate = '<input type="text" name="minute" class="bootstrap-timepicker-minute form-control" maxlength="2"/>';
        secondTemplate = '<input type="text" name="second" class="bootstrap-timepicker-second form-control" maxlength="2"/>';
        meridianTemplate = '<input type="text" name="meridian" class="bootstrap-timepicker-meridian form-control" maxlength="2"/>';
      } else {
        hourTemplate = '<span class="bootstrap-timepicker-hour"></span>';
        minuteTemplate = '<span class="bootstrap-timepicker-minute"></span>';
        secondTemplate = '<span class="bootstrap-timepicker-second"></span>';
        meridianTemplate = '<span class="bootstrap-timepicker-meridian"></span>';
      }

      templateContent = '<table>'+
         '<tr>'+
           '<td><a href="#" data-action="incrementHour"><i class="' + this.upArrowStyle + '"></i></a></td>'+
           '<td class="separator">&nbsp;</td>'+
           '<td><a href="#" data-action="incrementMinute"><i class="' + this.upArrowStyle + '"></i></a></td>'+
           (this.showSeconds ?
             '<td class="separator">&nbsp;</td>'+
             '<td><a href="#" data-action="incrementSecond"><i class="' + this.upArrowStyle + '"></i></a></td>'
           : '') +
           (this.showMeridian ?
             '<td class="separator">&nbsp;</td>'+
             '<td class="meridian-column"><a href="#" data-action="toggleMeridian"><i class="' + this.upArrowStyle + '"></i></a></td>'
           : '') +
         '</tr>'+
         '<tr>'+
           '<td>'+ hourTemplate +'</td> '+
           '<td class="separator">:</td>'+
           '<td>'+ minuteTemplate +'</td> '+
           (this.showSeconds ?
            '<td class="separator">:</td>'+
            '<td>'+ secondTemplate +'</td>'
           : '') +
           (this.showMeridian ?
            '<td class="separator">&nbsp;</td>'+
            '<td>'+ meridianTemplate +'</td>'
           : '') +
         '</tr>'+
         '<tr>'+
           '<td><a href="#" data-action="decrementHour"><i class="' + this.downArrowStyle + '"></i></a></td>'+
           '<td class="separator"></td>'+
           '<td><a href="#" data-action="decrementMinute"><i class="' + this.downArrowStyle + '"></i></a></td>'+
           (this.showSeconds ?
            '<td class="separator">&nbsp;</td>'+
            '<td><a href="#" data-action="decrementSecond"><i class="' + this.downArrowStyle + '"></i></a></td>'
           : '') +
           (this.showMeridian ?
            '<td class="separator">&nbsp;</td>'+
            '<td><a href="#" data-action="toggleMeridian"><i class="' + this.downArrowStyle + '"></i></a></td>'
           : '') +
         '</tr>'+
       '</table>';

      switch(this.template) {
      case 'modal':
        template = '<div class="bootstrap-timepicker-widget modal hide fade in" data-backdrop="'+ (this.modalBackdrop ? 'true' : 'false') +'">'+
          '<div class="modal-header">'+
            '<a href="#" class="close" data-dismiss="modal">×</a>'+
            '<h3>Pick a Time</h3>'+
          '</div>'+
          '<div class="modal-content">'+
            templateContent +
          '</div>'+
          '<div class="modal-footer">'+
            '<a href="#" class="btn btn-primary" data-dismiss="modal">OK</a>'+
          '</div>'+
        '</div>';
        break;
      case 'dropdown':
        template = '<div class="bootstrap-timepicker-widget dropdown-menu">'+ templateContent +'</div>';
        break;
      }

      return template;
    },

    getTime: function() {
      return this.formatTime(this.hour, this.minute, this.second, this.meridian);
    },

    hideWidget: function() {
      if (this.isOpen === false) {
        return;
      }

      if (this.showInputs) {
        this.updateFromWidgetInputs();
      }

      this.$element.trigger({
        'type': 'hide.timepicker',
        'time': {
          'value': this.getTime(),
          'hours': this.hour,
          'minutes': this.minute,
          'seconds': this.second,
          'meridian': this.meridian
        }
      });

      if (this.template === 'modal' && this.$widget.modal) {
        this.$widget.modal('hide');
      } else {
        this.$widget.removeClass('open');
      }

      $(document).off('mousedown.timepicker');

      this.isOpen = false;
    },

    highlightUnit: function() {
      this.position = this.getCursorPosition();
      if (this.position >= 0 && this.position <= 2) {
        this.highlightHour();
      } else if (this.position >= 3 && this.position <= 5) {
        this.highlightMinute();
      } else if (this.position >= 6 && this.position <= 8) {
        if (this.showSeconds) {
          this.highlightSecond();
        } else {
          this.highlightMeridian();
        }
      } else if (this.position >= 9 && this.position <= 11) {
        this.highlightMeridian();
      }
    },

    highlightNextUnit: function() {
      switch (this.highlightedUnit) {
      case 'hour':
        this.highlightMinute();
        break;
      case 'minute':
        if (this.showSeconds) {
          this.highlightSecond();
        } else if (this.showMeridian){
          this.highlightMeridian();
        } else {
          this.highlightHour();
        }
        break;
      case 'second':
        if (this.showMeridian) {
          this.highlightMeridian();
        } else {
          this.highlightHour();
        }
        break;
      case 'meridian':
        this.highlightHour();
        break;
      }
    },

    highlightPrevUnit: function() {
      switch (this.highlightedUnit) {
      case 'hour':
        this.highlightMeridian();
        break;
      case 'minute':
        this.highlightHour();
        break;
      case 'second':
        this.highlightMinute();
        break;
      case 'meridian':
        if (this.showSeconds) {
          this.highlightSecond();
        } else {
          this.highlightMinute();
        }
        break;
      }
    },

    highlightHour: function() {
      var $element = this.$element.get(0);

      this.highlightedUnit = 'hour';

      if ($element.setSelectionRange) {
        setTimeout(function() {
          $element.setSelectionRange(0,2);
        }, 0);
      }
    },

    highlightMinute: function() {
      var $element = this.$element.get(0);
      this.highlightedUnit = 'minute';

      if ($element.setSelectionRange) {
        setTimeout(function() {
          $element.setSelectionRange(3,5);
        }, 0);
      }

    },

    highlightSecond: function() {
      var $element = this.$element.get(0);

      this.highlightedUnit = 'second';

      if ($element.setSelectionRange) {
        setTimeout(function() {
          $element.setSelectionRange(6,8);
        }, 0);
      }
    },

    highlightMeridian: function() {
      var $element = this.$element.get(0);
      this.highlightedUnit = 'meridian';

      if ($element.setSelectionRange) {
        if (this.showSeconds) {
          setTimeout(function() {
            $element.setSelectionRange(9,11);
          }, 0);
        } else {
          setTimeout(function() {
            $element.setSelectionRange(6,8);
          }, 0);
        }
      }
    },

    incrementHour: function() {
      if (this.showMeridian) {
        if (this.hour === 11) {
          this.hour++;
          return this.toggleMeridian();
        } else if (this.hour === 12) {
          this.hour = 0;
        }
      }
      if (this.hour === 23) {
        this.hour = 0;

        return;
      }
      this.hour++;
      this.update();
    },

    incrementMinute: function(step) {
      var newVal;

      if (step) {
        newVal = this.minute + step;
      } else {
        newVal = this.minute + this.minuteStep - (this.minute % this.minuteStep);
      }

      if (newVal > 59) {
        this.incrementHour();
        this.minute = newVal - 60;
      } else {
        this.minute = newVal;
      }
      this.update();
    },

    incrementSecond: function() {
      var newVal = this.second + this.secondStep - (this.second % this.secondStep);

      if (newVal > 59) {
        this.incrementMinute(true);
        this.second = newVal - 60;
      } else {
        this.second = newVal;
      }
      this.update();
    },

    remove: function() {
      $('document').off('.timepicker');
      if (this.$widget) {
        this.$widget.remove();
      }
      delete this.$element.data().timepicker;
    },

    setDefaultTime: function(defaultTime){
      if (!this.$element.val()) {
        if (defaultTime === 'current') {
          var dTime = new Date(),
            hours = dTime.getHours(),
            minutes = Math.floor(dTime.getMinutes() / this.minuteStep) * this.minuteStep,
            seconds = Math.floor(dTime.getSeconds() / this.secondStep) * this.secondStep,
            meridian = 'AM';

          if (this.showMeridian) {
            if (hours === 0) {
              hours = 12;
            } else if (hours >= 12) {
              if (hours > 12) {
                hours = hours - 12;
              }
              meridian = 'PM';
            } else {
              meridian = 'AM';
            }
          }

          this.hour = hours;
          this.minute = minutes;
          this.second = seconds;
          this.meridian = meridian;

          this.update();

        } else if (defaultTime === false) {
          this.hour = 0;
          this.minute = 0;
          this.second = 0;
          this.meridian = 'AM';
        } else {
          this.setTime(defaultTime);
        }
      } else {
        this.updateFromElementVal();
      }
    },

    setTime: function(time) {
      var arr,
        timeArray;

      if (this.showMeridian) {
        arr = time.split(' ');
        timeArray = arr[0].split(':');
        this.meridian = arr[1];
      } else {
        timeArray = time.split(':');
      }

      this.hour = parseInt(timeArray[0], 10);
      this.minute = parseInt(timeArray[1], 10);
      this.second = parseInt(timeArray[2], 10);

      if (isNaN(this.hour)) {
        this.hour = 0;
      }
      if (isNaN(this.minute)) {
        this.minute = 0;
      }

      if (this.showMeridian) {
        if (this.hour > 12) {
          this.hour = 12;
        } else if (this.hour < 1) {
          this.hour = 12;
        }

        if (this.meridian === 'am' || this.meridian === 'a') {
          this.meridian = 'AM';
        } else if (this.meridian === 'pm' || this.meridian === 'p') {
          this.meridian = 'PM';
        }

        if (this.meridian !== 'AM' && this.meridian !== 'PM') {
          this.meridian = 'AM';
        }
      } else {
        if (this.hour >= 24) {
          this.hour = 23;
        } else if (this.hour < 0) {
          this.hour = 0;
        }
      }

      if (this.minute < 0) {
        this.minute = 0;
      } else if (this.minute >= 60) {
        this.minute = 59;
      }

      if (this.showSeconds) {
        if (isNaN(this.second)) {
          this.second = 0;
        } else if (this.second < 0) {
          this.second = 0;
        } else if (this.second >= 60) {
          this.second = 59;
        }
      }

      this.update();
    },

    showWidget: function() {
      if (this.isOpen) {
        return;
      }

      if (this.$element.is(':disabled')) {
        return;
      }

      var self = this;
      $(document).on('mousedown.timepicker', function (e) {
        // Clicked outside the timepicker, hide it
        if ($(e.target).closest('.bootstrap-timepicker-widget').length === 0) {
          self.hideWidget();
        }
      });

      this.$element.trigger({
        'type': 'show.timepicker',
        'time': {
          'value': this.getTime(),
          'hours': this.hour,
          'minutes': this.minute,
          'seconds': this.second,
          'meridian': this.meridian
        }
      });

      if (this.disableFocus) {
        this.$element.blur();
      }

      this.updateFromElementVal();

      if (this.template === 'modal' && this.$widget.modal) {
        this.$widget.modal('show').on('hidden', $.proxy(this.hideWidget, this));
      } else {
        if (this.isOpen === false) {
          this.$widget.addClass('open');
        }
      }

      this.isOpen = true;
    },

    toggleMeridian: function() {
      this.meridian = this.meridian === 'AM' ? 'PM' : 'AM';
      this.update();
    },

    update: function() {
      this.$element.trigger({
        'type': 'changeTime.timepicker',
        'time': {
          'value': this.getTime(),
          'hours': this.hour,
          'minutes': this.minute,
          'seconds': this.second,
          'meridian': this.meridian
        }
      });

      this.updateElement();
      this.updateWidget();
    },

    updateElement: function() {
      this.$element.val(this.getTime()).change();
    },

    updateFromElementVal: function() {
      var val = this.$element.val();

      if (val) {
        this.setTime(val);
      }
    },

    updateWidget: function() {
      if (this.$widget === false) {
        return;
      }

      var hour = this.hour < 10 ? '0' + this.hour : this.hour,
          minute = this.minute < 10 ? '0' + this.minute : this.minute,
          second = this.second < 10 ? '0' + this.second : this.second;

      if (this.showInputs) {
        this.$widget.find('input.bootstrap-timepicker-hour').val(hour);
        this.$widget.find('input.bootstrap-timepicker-minute').val(minute);

        if (this.showSeconds) {
          this.$widget.find('input.bootstrap-timepicker-second').val(second);
        }
        if (this.showMeridian) {
          this.$widget.find('input.bootstrap-timepicker-meridian').val(this.meridian);
        }
      } else {
        this.$widget.find('span.bootstrap-timepicker-hour').text(hour);
        this.$widget.find('span.bootstrap-timepicker-minute').text(minute);

        if (this.showSeconds) {
          this.$widget.find('span.bootstrap-timepicker-second').text(second);
        }
        if (this.showMeridian) {
          this.$widget.find('span.bootstrap-timepicker-meridian').text(this.meridian);
        }
      }
    },

    updateFromWidgetInputs: function() {
      if (this.$widget === false) {
        return;
      }
      var time = $('input.bootstrap-timepicker-hour', this.$widget).val() + ':' +
        $('input.bootstrap-timepicker-minute', this.$widget).val() +
        (this.showSeconds ? ':' + $('input.bootstrap-timepicker-second', this.$widget).val() : '') +
        (this.showMeridian ? ' ' + $('input.bootstrap-timepicker-meridian', this.$widget).val() : '');

      this.setTime(time);
    },

    widgetClick: function(e) {
      e.stopPropagation();
      e.preventDefault();

      var action = $(e.target).closest('a').data('action');
      if (action) {
        this[action]();
      }
    },

    widgetKeydown: function(e) {
      var $input = $(e.target).closest('input'),
          name = $input.attr('name');

      switch (e.keyCode) {
      case 9: //tab
        if (this.showMeridian) {
          if (name === 'meridian') {
            return this.hideWidget();
          }
        } else {
          if (this.showSeconds) {
            if (name === 'second') {
              return this.hideWidget();
            }
          } else {
            if (name === 'minute') {
              return this.hideWidget();
            }
          }
        }

        this.updateFromWidgetInputs();
        break;
      case 27: // escape
        this.hideWidget();
        break;
      case 38: // up arrow
        e.preventDefault();
        switch (name) {
        case 'hour':
          this.incrementHour();
          break;
        case 'minute':
          this.incrementMinute();
          break;
        case 'second':
          this.incrementSecond();
          break;
        case 'meridian':
          this.toggleMeridian();
          break;
        }
        break;
      case 40: // down arrow
        e.preventDefault();
        switch (name) {
        case 'hour':
          this.decrementHour();
          break;
        case 'minute':
          this.decrementMinute();
          break;
        case 'second':
          this.decrementSecond();
          break;
        case 'meridian':
          this.toggleMeridian();
          break;
        }
        break;
      }
    }
  };


  //TIMEPICKER PLUGIN DEFINITION
  $.fn.timepicker = function(option) {
    var args = Array.apply(null, arguments);
    args.shift();
    return this.each(function() {
      var $this = $(this),
        data = $this.data('timepicker'),
        options = typeof option === 'object' && option;

      if (!data) {
        $this.data('timepicker', (data = new Timepicker(this, $.extend({}, $.fn.timepicker.defaults, options, $(this).data()))));
      }

      if (typeof option === 'string') {
        data[option].apply(data, args);
      }
    });
  };

  $.fn.timepicker.defaults = {
    defaultTime: 'current',
    disableFocus: false,
    isOpen: false,
    minuteStep: 15,
    modalBackdrop: false,
    secondStep: 15,
    showSeconds: false,
    showInputs: true,
    showMeridian: true,
    template: 'dropdown',
    appendWidgetTo: '.bootstrap-timepicker',
    upArrowStyle: 'glyphicon glyphicon-chevron-up',
    downArrowStyle: 'glyphicon glyphicon-chevron-down',
    containerClass: 'bootstrap-timepicker'
  };

  $.fn.timepicker.Constructor = Timepicker;

})(jQuery, window, document);
});

require.register("./components-ixia/scheduler/tz.js", function (exports, module) {
var jstz = window.jstz.determine()

module.exports = jstz

});

require.register("./components-ixia/scheduler/dhtmlxscheduler.js", function (exports, module) {
/*
This software is allowed to use under GPL or you need to obtain Commercial or Enterise License
to use it in non-GPL project. Please contact sales@dhtmlx.com for details
*/
if (!window.dhtmlx) {
    dhtmlx = function (obj) {
        for (var a in obj) dhtmlx[a] = obj[a];
        return dhtmlx; //simple singleton
    };
}
dhtmlx.extend_api = function (name, map, ext) {
    var t = window[name];
    if (!t) return; //component not defined
    window[name] = function (obj) {
        if (obj && typeof obj == "object" && !obj.tagName) {
            var that = t.apply(this, (map._init ? map._init(obj) : arguments));
            //global settings
            for (var a in dhtmlx)
                if (map[a]) this[map[a]](dhtmlx[a]);
                //local settings
            for (var a in obj) {
                if (map[a]) this[map[a]](obj[a]);
                else if (a.indexOf("on") == 0) {
                    this.attachEvent(a, obj[a]);
                }
            }
        } else
            var that = t.apply(this, arguments);
        if (map._patch) map._patch(this);
        return that || this;
    };
    window[name].prototype = t.prototype;
    if (ext)
        dhtmlXHeir(window[name].prototype, ext);
};

dhtmlxAjax = {
    get: function (url, callback) {
        var t = new dtmlXMLLoaderObject(true);
        t.async = (arguments.length < 3);
        t.waitCall = callback;
        t.loadXML(url)
        return t;
    },
    post: function (url, post, callback) {
        var t = new dtmlXMLLoaderObject(true);
        t.async = (arguments.length < 4);
        t.waitCall = callback;
        t.loadXML(url, true, post)
        return t;
    },
    getSync: function (url) {
        return this.get(url, null, true)
    },
    postSync: function (url, post) {
        return this.post(url, post, null, true);
    }
}

/**
 *     @desc: xmlLoader object
 *     @type: private
 *     @param: funcObject - xml parser function
 *     @param: object - jsControl object
 *     @param: async - sync/async mode (async by default)
 *     @param: rSeed - enable/disable random seed ( prevent IE caching)
 *     @topic: 0
 */
function dtmlXMLLoaderObject(funcObject, dhtmlObject, async, rSeed) {
    this.xmlDoc = "";

    if (typeof (async) != "undefined")
        this.async = async;
    else
        this.async = true;

    this.onloadAction = funcObject || null;
    this.mainObject = dhtmlObject || null;
    this.waitCall = null;
    this.rSeed = rSeed || false;
    return this;
};

dtmlXMLLoaderObject.count = 0;

/**
 *     @desc: xml loading handler
 *     @type: private
 *     @param: dtmlObject - xmlLoader object
 *     @topic: 0
 */
dtmlXMLLoaderObject.prototype.waitLoadFunction = function (dhtmlObject) {
    var once = true;
    this.check = function () {
        if ((dhtmlObject) && (dhtmlObject.onloadAction != null)) {
            if ((!dhtmlObject.xmlDoc.readyState) || (dhtmlObject.xmlDoc.readyState == 4)) {
                if (!once)
                    return;

                once = false; //IE 5 fix
                dtmlXMLLoaderObject.count++;
                if (typeof dhtmlObject.onloadAction == "function")
                    dhtmlObject.onloadAction(dhtmlObject.mainObject, null, null, null, dhtmlObject);

                if (dhtmlObject.waitCall) {
                    dhtmlObject.waitCall.call(this, dhtmlObject);
                    dhtmlObject.waitCall = null;
                }
            }
        }
    };
    return this.check;
};

/**
 *     @desc: return XML top node
 *     @param: tagName - top XML node tag name (not used in IE, required for Safari and Mozilla)
 *     @type: private
 *     @returns: top XML node
 *     @topic: 0
 */
dtmlXMLLoaderObject.prototype.getXMLTopNode = function (tagName, oldObj) {
    if (this.xmlDoc.responseXML) {
        var temp = this.xmlDoc.responseXML.getElementsByTagName(tagName);
        if (temp.length == 0 && tagName.indexOf(":") != -1)
            var temp = this.xmlDoc.responseXML.getElementsByTagName((tagName.split(":"))[1]);
        var z = temp[0];
    } else
        var z = this.xmlDoc.documentElement;

    if (z) {
        this._retry = false;
        return z;
    }

    if (!this._retry) {
        this._retry = true;
        var oldObj = this.xmlDoc;
        this.loadXMLString(this.xmlDoc.responseText.replace(/^[\s]+/, ""), true);
        return this.getXMLTopNode(tagName, oldObj);
    }

    dhtmlxError.throwError("LoadXML", "Incorrect XML", [
        (oldObj || this.xmlDoc),
        this.mainObject
    ]);

    return document.createElement("DIV");
};

/**
 *     @desc: load XML from string
 *     @type: private
 *     @param: xmlString - xml string
 *     @topic: 0
 */
dtmlXMLLoaderObject.prototype.loadXMLString = function (xmlString, silent) {

    if (!_isIE) {
        var parser = new DOMParser();
        this.xmlDoc = parser.parseFromString(xmlString, "text/xml");
    } else {
        this.xmlDoc = new ActiveXObject("Microsoft.XMLDOM");
        this.xmlDoc.async = this.async;
        this.xmlDoc.onreadystatechange = function () {};
        this.xmlDoc["loadXM" + "L"](xmlString);
    }

    if (silent)
        return;

    if (this.onloadAction)
        this.onloadAction(this.mainObject, null, null, null, this);

    if (this.waitCall) {
        this.waitCall();
        this.waitCall = null;
    }
}
/**
 *     @desc: load XML
 *     @type: private
 *     @param: filePath - xml file path
 *     @param: postMode - send POST request
 *     @param: postVars - list of vars for post request
 *     @topic: 0
 */
dtmlXMLLoaderObject.prototype.loadXML = function (filePath, postMode, postVars, rpc) {
    if (this.rSeed)
        filePath += ((filePath.indexOf("?") != -1) ? "&" : "?") + "a_dhx_rSeed=" + (new Date()).valueOf();
    this.filePath = filePath;

    if ((!_isIE) && (window.XMLHttpRequest))
        this.xmlDoc = new XMLHttpRequest();
    else {
        this.xmlDoc = new ActiveXObject("Microsoft.XMLHTTP");
    }

    if (this.async)
        this.xmlDoc.onreadystatechange = new this.waitLoadFunction(this);
    this.xmlDoc.open(postMode ? "POST" : "GET", filePath, this.async);

    if (rpc) {
        this.xmlDoc.setRequestHeader("User-Agent", "dhtmlxRPC v0.1 (" + navigator.userAgent + ")");
        this.xmlDoc.setRequestHeader("Content-type", "text/xml");
    } else if (postMode)
        this.xmlDoc.setRequestHeader('Content-type', 'application/x-www-form-urlencoded');

    this.xmlDoc.setRequestHeader("X-Requested-With", "XMLHttpRequest");
    this.xmlDoc.send(null || postVars);

    if (!this.async)
        (new this.waitLoadFunction(this))();
};
/**
 *     @desc: destructor, cleans used memory
 *     @type: private
 *     @topic: 0
 */
dtmlXMLLoaderObject.prototype.destructor = function () {
    this._filterXPath = null;
    this._getAllNamedChilds = null;
    this._retry = null;
    this.async = null;
    this.rSeed = null;
    this.filePath = null;
    this.onloadAction = null;
    this.mainObject = null;
    this.xmlDoc = null;
    this.doXPath = null;
    this.doXPathOpera = null;
    this.doXSLTransToObject = null;
    this.doXSLTransToString = null;
    this.loadXML = null;
    this.loadXMLString = null;
    // this.waitLoadFunction = null;
    this.doSerialization = null;
    this.xmlNodeToJSON = null;
    this.getXMLTopNode = null;
    this.setXSLParamValue = null;
    return null;
}

dtmlXMLLoaderObject.prototype.xmlNodeToJSON = function (node) {
    var t = {};
    for (var i = 0; i < node.attributes.length; i++)
        t[node.attributes[i].name] = node.attributes[i].value;
    t["_tagvalue"] = node.firstChild ? node.firstChild.nodeValue : "";
    for (var i = 0; i < node.childNodes.length; i++) {
        var name = node.childNodes[i].tagName;
        if (name) {
            if (!t[name]) t[name] = [];
            t[name].push(this.xmlNodeToJSON(node.childNodes[i]));
        }
    }
    return t;
}

/**
 *     @desc: Call wrapper
 *     @type: private
 *     @param: funcObject - action handler
 *     @param: dhtmlObject - user data
 *     @returns: function handler
 *     @topic: 0
 */
function callerFunction(funcObject, dhtmlObject) {
    this.handler = function (e) {
        if (!e)
            e = window.event;
        funcObject(e, dhtmlObject);
        return true;
    };
    return this.handler;
};

/**
 *     @desc: Calculate absolute position of html object
 *     @type: private
 *     @param: htmlObject - html object
 *     @topic: 0
 */
function getAbsoluteLeft(htmlObject) {
    return getOffset(htmlObject).left;
}
/**
 *     @desc: Calculate absolute position of html object
 *     @type: private
 *     @param: htmlObject - html object
 *     @topic: 0
 */
function getAbsoluteTop(htmlObject) {
    return getOffset(htmlObject).top;
}

function getOffsetSum(elem) {
    var top = 0,
        left = 0;
    while (elem) {
        top = top + parseInt(elem.offsetTop);
        left = left + parseInt(elem.offsetLeft);
        elem = elem.offsetParent;
    }
    return {
        top: top,
        left: left
    };
}

function getOffsetRect(elem) {
    var box = elem.getBoundingClientRect();
    var body = document.body;
    var docElem = document.documentElement;
    var scrollTop = window.pageYOffset || docElem.scrollTop || body.scrollTop;
    var scrollLeft = window.pageXOffset || docElem.scrollLeft || body.scrollLeft;
    var clientTop = docElem.clientTop || body.clientTop || 0;
    var clientLeft = docElem.clientLeft || body.clientLeft || 0;
    var top = box.top + scrollTop - clientTop;
    var left = box.left + scrollLeft - clientLeft;
    return {
        top: Math.round(top),
        left: Math.round(left)
    };
}

function getOffset(elem) {
    if (elem.getBoundingClientRect) {
        return getOffsetRect(elem);
    } else {
        return getOffsetSum(elem);
    }
}

/**
 *     @desc: Convert string to it boolean representation
 *     @type: private
 *     @param: inputString - string for covertion
 *     @topic: 0
 */
function convertStringToBoolean(inputString) {
    if (typeof (inputString) == "string")
        inputString = inputString.toLowerCase();

    switch (inputString) {
    case "1":
    case "true":
    case "yes":
    case "y":
    case 1:
    case true:
        return true;
        break;

    default:
        return false;
    }
}

/**
 *     @desc: find out what symbol to use as url param delimiters in further params
 *     @type: private
 *     @param: str - current url string
 *     @topic: 0
 */
function getUrlSymbol(str) {
    if (str.indexOf("?") != -1)
        return "&"
    else
        return "?"
}

function dhtmlDragAndDropObject() {
    if (window.dhtmlDragAndDrop)
        return window.dhtmlDragAndDrop;

    this.lastLanding = 0;
    this.dragNode = 0;
    this.dragStartNode = 0;
    this.dragStartObject = 0;
    this.tempDOMU = null;
    this.tempDOMM = null;
    this.waitDrag = 0;
    window.dhtmlDragAndDrop = this;

    return this;
};

dhtmlDragAndDropObject.prototype.removeDraggableItem = function (htmlNode) {
    htmlNode.onmousedown = null;
    htmlNode.dragStarter = null;
    htmlNode.dragLanding = null;
}
dhtmlDragAndDropObject.prototype.addDraggableItem = function (htmlNode, dhtmlObject) {
    htmlNode.onmousedown = this.preCreateDragCopy;
    htmlNode.dragStarter = dhtmlObject;
    this.addDragLanding(htmlNode, dhtmlObject);
}
dhtmlDragAndDropObject.prototype.addDragLanding = function (htmlNode, dhtmlObject) {
    htmlNode.dragLanding = dhtmlObject;
}
dhtmlDragAndDropObject.prototype.preCreateDragCopy = function (e) {
    if ((e || window.event) && (e || event).button == 2)
        return;

    if (window.dhtmlDragAndDrop.waitDrag) {
        window.dhtmlDragAndDrop.waitDrag = 0;
        document.body.onmouseup = window.dhtmlDragAndDrop.tempDOMU;
        document.body.onmousemove = window.dhtmlDragAndDrop.tempDOMM;
        return false;
    }

    if (window.dhtmlDragAndDrop.dragNode)
        window.dhtmlDragAndDrop.stopDrag(e);

    window.dhtmlDragAndDrop.waitDrag = 1;
    window.dhtmlDragAndDrop.tempDOMU = document.body.onmouseup;
    window.dhtmlDragAndDrop.tempDOMM = document.body.onmousemove;
    window.dhtmlDragAndDrop.dragStartNode = this;
    window.dhtmlDragAndDrop.dragStartObject = this.dragStarter;
    document.body.onmouseup = window.dhtmlDragAndDrop.preCreateDragCopy;
    document.body.onmousemove = window.dhtmlDragAndDrop.callDrag;
    window.dhtmlDragAndDrop.downtime = new Date().valueOf();


    if ((e) && (e.preventDefault)) {
        e.preventDefault();
        return false;
    }
    return false;
};
dhtmlDragAndDropObject.prototype.callDrag = function (e) {
    if (!e)
        e = window.event;
    dragger = window.dhtmlDragAndDrop;
    if ((new Date()).valueOf() - dragger.downtime < 100) return;

    //if ((e.button == 0)&&(_isIE))
    //  return dragger.stopDrag();

    if (!dragger.dragNode) {
        if (dragger.waitDrag) {
            dragger.dragNode = dragger.dragStartObject._createDragNode(dragger.dragStartNode, e);

            if (!dragger.dragNode)
                return dragger.stopDrag();

            dragger.dragNode.onselectstart = function () {
                return false;
            }
            dragger.gldragNode = dragger.dragNode;
            document.body.appendChild(dragger.dragNode);
            document.body.onmouseup = dragger.stopDrag;
            dragger.waitDrag = 0;
            dragger.dragNode.pWindow = window;
            dragger.initFrameRoute();
        } else return dragger.stopDrag(e, true);
    }

    if (dragger.dragNode.parentNode != window.document.body && dragger.gldragNode) {
        var grd = dragger.gldragNode;

        if (dragger.gldragNode.old)
            grd = dragger.gldragNode.old;

        //if (!document.all) dragger.calculateFramePosition();
        grd.parentNode.removeChild(grd);
        var oldBody = dragger.dragNode.pWindow;

        if (grd.pWindow && grd.pWindow.dhtmlDragAndDrop.lastLanding)
            grd.pWindow.dhtmlDragAndDrop.lastLanding.dragLanding._dragOut(grd.pWindow.dhtmlDragAndDrop.lastLanding);

        //    var oldp=dragger.dragNode.parentObject;
        if (_isIE) {
            var div = document.createElement("Div");
            div.innerHTML = dragger.dragNode.outerHTML;
            dragger.dragNode = div.childNodes[0];
        } else
            dragger.dragNode = dragger.dragNode.cloneNode(true);

        dragger.dragNode.pWindow = window;
        //    dragger.dragNode.parentObject=oldp;

        dragger.gldragNode.old = dragger.dragNode;
        document.body.appendChild(dragger.dragNode);
        oldBody.dhtmlDragAndDrop.dragNode = dragger.dragNode;
    }

    dragger.dragNode.style.left = e.clientX + 15 + (dragger.fx ? dragger.fx * (-1) : 0) + (document.body.scrollLeft || document.documentElement.scrollLeft) + "px";
    dragger.dragNode.style.top = e.clientY + 3 + (dragger.fy ? dragger.fy * (-1) : 0) + (document.body.scrollTop || document.documentElement.scrollTop) + "px";

    if (!e.srcElement)
        var z = e.target;
    else
        z = e.srcElement;
    dragger.checkLanding(z, e);
}

dhtmlDragAndDropObject.prototype.calculateFramePosition = function (n) {
    //this.fx = 0, this.fy = 0;
    if (window.name) {
        var el = parent.frames[window.name].frameElement.offsetParent;
        var fx = 0;
        var fy = 0;

        while (el) {
            fx += el.offsetLeft;
            fy += el.offsetTop;
            el = el.offsetParent;
        }

        if ((parent.dhtmlDragAndDrop)) {
            var ls = parent.dhtmlDragAndDrop.calculateFramePosition(1);
            fx += ls.split('_')[0] * 1;
            fy += ls.split('_')[1] * 1;
        }

        if (n)
            return fx + "_" + fy;
        else
            this.fx = fx;
        this.fy = fy;
    }
    return "0_0";
}
dhtmlDragAndDropObject.prototype.checkLanding = function (htmlObject, e) {
    if ((htmlObject) && (htmlObject.dragLanding)) {
        if (this.lastLanding)
            this.lastLanding.dragLanding._dragOut(this.lastLanding);
        this.lastLanding = htmlObject;
        this.lastLanding = this.lastLanding.dragLanding._dragIn(this.lastLanding, this.dragStartNode, e.clientX,
            e.clientY, e);
        this.lastLanding_scr = (_isIE ? e.srcElement : e.target);
    } else {
        if ((htmlObject) && (htmlObject.tagName != "BODY"))
            this.checkLanding(htmlObject.parentNode, e);
        else {
            if (this.lastLanding)
                this.lastLanding.dragLanding._dragOut(this.lastLanding, e.clientX, e.clientY, e);
            this.lastLanding = 0;

            if (this._onNotFound)
                this._onNotFound();
        }
    }
}
dhtmlDragAndDropObject.prototype.stopDrag = function (e, mode) {
    dragger = window.dhtmlDragAndDrop;

    if (!mode) {
        dragger.stopFrameRoute();
        var temp = dragger.lastLanding;
        dragger.lastLanding = null;

        if (temp)
            temp.dragLanding._drag(dragger.dragStartNode, dragger.dragStartObject, temp, (_isIE ? event.srcElement : e.target));
    }
    dragger.lastLanding = null;

    if ((dragger.dragNode) && (dragger.dragNode.parentNode == document.body))
        dragger.dragNode.parentNode.removeChild(dragger.dragNode);
    dragger.dragNode = 0;
    dragger.gldragNode = 0;
    dragger.fx = 0;
    dragger.fy = 0;
    dragger.dragStartNode = 0;
    dragger.dragStartObject = 0;
    document.body.onmouseup = dragger.tempDOMU;
    document.body.onmousemove = dragger.tempDOMM;
    dragger.tempDOMU = null;
    dragger.tempDOMM = null;
    dragger.waitDrag = 0;
}

dhtmlDragAndDropObject.prototype.stopFrameRoute = function (win) {
    if (win)
        window.dhtmlDragAndDrop.stopDrag(1, 1);

    for (var i = 0; i < window.frames.length; i++) {
        try {
            if ((window.frames[i] != win) && (window.frames[i].dhtmlDragAndDrop))
                window.frames[i].dhtmlDragAndDrop.stopFrameRoute(window);
        } catch (e) {}
    }

    try {
        if ((parent.dhtmlDragAndDrop) && (parent != window) && (parent != win))
            parent.dhtmlDragAndDrop.stopFrameRoute(window);
    } catch (e) {}
}
dhtmlDragAndDropObject.prototype.initFrameRoute = function (win, mode) {
    if (win) {
        window.dhtmlDragAndDrop.preCreateDragCopy();
        window.dhtmlDragAndDrop.dragStartNode = win.dhtmlDragAndDrop.dragStartNode;
        window.dhtmlDragAndDrop.dragStartObject = win.dhtmlDragAndDrop.dragStartObject;
        window.dhtmlDragAndDrop.dragNode = win.dhtmlDragAndDrop.dragNode;
        window.dhtmlDragAndDrop.gldragNode = win.dhtmlDragAndDrop.dragNode;
        window.document.body.onmouseup = window.dhtmlDragAndDrop.stopDrag;
        window.waitDrag = 0;

        if (((!_isIE) && (mode)) && ((!_isFF) || (_FFrv < 1.8)))
            window.dhtmlDragAndDrop.calculateFramePosition();
    }
    try {
        if ((parent.dhtmlDragAndDrop) && (parent != window) && (parent != win))
            parent.dhtmlDragAndDrop.initFrameRoute(window);
    } catch (e) {}

    for (var i = 0; i < window.frames.length; i++) {
        try {
            if ((window.frames[i] != win) && (window.frames[i].dhtmlDragAndDrop))
                window.frames[i].dhtmlDragAndDrop.initFrameRoute(window, ((!win || mode) ? 1 : 0));
        } catch (e) {}
    }
}

_isFF = false;
_isIE = false;
_isOpera = false;
_isKHTML = false;
_isMacOS = false;
_isChrome = false;
_FFrv = false;
_KHTMLrv = false;
_OperaRv = false;

if (navigator.userAgent.indexOf('Macintosh') != -1)
    _isMacOS = true;


if (navigator.userAgent.toLowerCase().indexOf('chrome') > -1)
    _isChrome = true;

if ((navigator.userAgent.indexOf('Safari') != -1) || (navigator.userAgent.indexOf('Konqueror') != -1)) {
    _KHTMLrv = parseFloat(navigator.userAgent.substr(navigator.userAgent.indexOf('Safari') + 7, 5));

    if (_KHTMLrv > 525) { //mimic FF behavior for Safari 3.1+
        _isFF = true;
        _FFrv = 1.9;
    } else
        _isKHTML = true;
} else if (navigator.userAgent.indexOf('Opera') != -1) {
    _isOpera = true;
    _OperaRv = parseFloat(navigator.userAgent.substr(navigator.userAgent.indexOf('Opera') + 6, 3));
} else if (navigator.appName.indexOf("Microsoft") != -1) {
    _isIE = true;
    if ((navigator.appVersion.indexOf("MSIE 8.0") != -1 || navigator.appVersion.indexOf("MSIE 9.0") != -1 || navigator.appVersion.indexOf("MSIE 10.0") != -1) && document.compatMode != "BackCompat") {
        _isIE = 8;
    }
} else {
    _isFF = true;
    _FFrv = parseFloat(navigator.userAgent.split("rv:")[1])
}


//multibrowser Xpath processor
dtmlXMLLoaderObject.prototype.doXPath = function (xpathExp, docObj, namespace, result_type) {
    if (_isKHTML || (!_isIE && !window.XPathResult))
        return this.doXPathOpera(xpathExp, docObj);

    if (_isIE) { //IE
        if (!docObj)
            if (!this.xmlDoc.nodeName)
                docObj = this.xmlDoc.responseXML
            else
                docObj = this.xmlDoc;

        if (!docObj)
            dhtmlxError.throwError("LoadXML", "Incorrect XML", [
                (docObj || this.xmlDoc),
                this.mainObject
            ]);

        if (namespace != null)
            docObj.setProperty("SelectionNamespaces", "xmlns:xsl='" + namespace + "'"); //

        if (result_type == 'single') {
            return docObj.selectSingleNode(xpathExp);
        } else {
            return docObj.selectNodes(xpathExp) || new Array(0);
        }
    } else { //Mozilla
        var nodeObj = docObj;

        if (!docObj) {
            if (!this.xmlDoc.nodeName) {
                docObj = this.xmlDoc.responseXML
            } else {
                docObj = this.xmlDoc;
            }
        }

        if (!docObj)
            dhtmlxError.throwError("LoadXML", "Incorrect XML", [
                (docObj || this.xmlDoc),
                this.mainObject
            ]);

        if (docObj.nodeName.indexOf("document") != -1) {
            nodeObj = docObj;
        } else {
            nodeObj = docObj;
            docObj = docObj.ownerDocument;
        }
        var retType = XPathResult.ANY_TYPE;

        if (result_type == 'single')
            retType = XPathResult.FIRST_ORDERED_NODE_TYPE
        var rowsCol = new Array();
        var col = docObj.evaluate(xpathExp, nodeObj, function (pref) {
            return namespace
        }, retType, null);

        if (retType == XPathResult.FIRST_ORDERED_NODE_TYPE) {
            return col.singleNodeValue;
        }
        var thisColMemb = col.iterateNext();

        while (thisColMemb) {
            rowsCol[rowsCol.length] = thisColMemb;
            thisColMemb = col.iterateNext();
        }
        return rowsCol;
    }
}

function _dhtmlxError(type, name, params) {
    if (!this.catches)
        this.catches = new Array();

    return this;
}

_dhtmlxError.prototype.catchError = function (type, func_name) {
    this.catches[type] = func_name;
}
_dhtmlxError.prototype.throwError = function (type, name, params) {
    if (this.catches[type])
        return this.catches[type](type, name, params);

    if (this.catches["ALL"])
        return this.catches["ALL"](type, name, params);

    alert("Error type: " + arguments[0] + "\nDescription: " + arguments[1]);
    return null;
}

window.dhtmlxError = new _dhtmlxError();


//opera fake, while 9.0 not released
//multibrowser Xpath processor
dtmlXMLLoaderObject.prototype.doXPathOpera = function (xpathExp, docObj) {
    //this is fake for Opera
    var z = xpathExp.replace(/[\/]+/gi, "/").split('/');
    var obj = null;
    var i = 1;

    if (!z.length)
        return [];

    if (z[0] == ".")
        obj = [docObj];
    else if (z[0] == "") {
        obj = (this.xmlDoc.responseXML || this.xmlDoc).getElementsByTagName(z[i].replace(/\[[^\]]*\]/g, ""));
        i++;
    } else
        return [];

    for (i; i < z.length; i++) obj = this._getAllNamedChilds(obj, z[i]);

    if (z[i - 1].indexOf("[") != -1)
        obj = this._filterXPath(obj, z[i - 1]);
    return obj;
}

dtmlXMLLoaderObject.prototype._filterXPath = function (a, b) {
    var c = new Array();
    var b = b.replace(/[^\[]*\[\@/g, "").replace(/[\[\]\@]*/g, "");

    for (var i = 0; i < a.length; i++)
        if (a[i].getAttribute(b))
            c[c.length] = a[i];

    return c;
}
dtmlXMLLoaderObject.prototype._getAllNamedChilds = function (a, b) {
    var c = new Array();

    if (_isKHTML)
        b = b.toUpperCase();

    for (var i = 0; i < a.length; i++)
        for (var j = 0; j < a[i].childNodes.length; j++) {
            if (_isKHTML) {
                if (a[i].childNodes[j].tagName && a[i].childNodes[j].tagName.toUpperCase() == b)
                    c[c.length] = a[i].childNodes[j];
            } else if (a[i].childNodes[j].tagName == b)
                c[c.length] = a[i].childNodes[j];
        }

    return c;
}

function dhtmlXHeir(a, b) {
    for (var c in b)
        if (typeof (b[c]) == "function")
            a[c] = b[c];
    return a;
}

function dhtmlxEvent(el, event, handler) {
    if (el.addEventListener)
        el.addEventListener(event, handler, false);

    else if (el.attachEvent)
        el.attachEvent("on" + event, handler);
}

//============= XSL Extension ===================================

dtmlXMLLoaderObject.prototype.xslDoc = null;
dtmlXMLLoaderObject.prototype.setXSLParamValue = function (paramName, paramValue, xslDoc) {
    if (!xslDoc)
        xslDoc = this.xslDoc

    if (xslDoc.responseXML)
        xslDoc = xslDoc.responseXML;
    var item =
        this.doXPath("/xsl:stylesheet/xsl:variable[@name='" + paramName + "']", xslDoc,
            "http:/\/www.w3.org/1999/XSL/Transform", "single");

    if (item != null)
        item.firstChild.nodeValue = paramValue
}
dtmlXMLLoaderObject.prototype.doXSLTransToObject = function (xslDoc, xmlDoc) {
    if (!xslDoc)
        xslDoc = this.xslDoc;

    if (xslDoc.responseXML)
        xslDoc = xslDoc.responseXML

    if (!xmlDoc)
        xmlDoc = this.xmlDoc;

    if (xmlDoc.responseXML)
        xmlDoc = xmlDoc.responseXML

    //MOzilla
    if (!_isIE) {
        if (!this.XSLProcessor) {
            this.XSLProcessor = new XSLTProcessor();
            this.XSLProcessor.importStylesheet(xslDoc);
        }
        var result = this.XSLProcessor.transformToDocument(xmlDoc);
    } else {
        var result = new ActiveXObject("Msxml2.DOMDocument.3.0");
        try {
            xmlDoc.transformNodeToObject(xslDoc, result);
        } catch (e) {
            result = xmlDoc.transformNode(xslDoc);
        }
    }
    return result;
}

dtmlXMLLoaderObject.prototype.doXSLTransToString = function (xslDoc, xmlDoc) {
    var res = this.doXSLTransToObject(xslDoc, xmlDoc);
    if (typeof (res) == "string")
        return res;
    return this.doSerialization(res);
}

dtmlXMLLoaderObject.prototype.doSerialization = function (xmlDoc) {
    if (!xmlDoc)
        xmlDoc = this.xmlDoc;
    if (xmlDoc.responseXML)
        xmlDoc = xmlDoc.responseXML
    if (!_isIE) {
        var xmlSerializer = new XMLSerializer();
        return xmlSerializer.serializeToString(xmlDoc);
    } else
        return xmlDoc.xml;
}

/**
 *   @desc:
 *   @type: private
 */
dhtmlxEventable = function (obj) {
    obj.attachEvent = function (name, catcher, callObj) {
        name = 'ev_' + name.toLowerCase();
        if (!this[name])
            this[name] = new this.eventCatcher(callObj || this);

        return (name + ':' + this[name].addEvent(catcher)); //return ID (event name & event ID)
    }
    obj.callEvent = function (name, arg0) {
        name = 'ev_' + name.toLowerCase();
        if (this[name])
            return this[name].apply(this, arg0);
        return true;
    }
    obj.checkEvent = function (name) {
        return ( !! this['ev_' + name.toLowerCase()])
    }
    obj.eventCatcher = function (obj) {
        var dhx_catch = [];
        var z = function () {
            var res = true;
            for (var i = 0; i < dhx_catch.length; i++) {
                if (dhx_catch[i] != null) {
                    var zr = dhx_catch[i].apply(obj, arguments);
                    res = res && zr;
                }
            }
            return res;
        }
        z.addEvent = function (ev) {
            if (typeof (ev) != "function")
                ev = eval(ev);
            if (ev)
                return dhx_catch.push(ev) - 1;
            return false;
        }
        z.removeEvent = function (id) {
            dhx_catch[id] = null;
        }
        return z;
    }
    obj.detachEvent = function (id) {
        if (id != false) {
            var list = id.split(':'); //get EventName and ID
            this[list[0]].removeEvent(list[1]); //remove event
        }
    }
    obj.detachAllEvents = function () {
        for (var name in this) {
            if (name.indexOf("ev_") == 0)
                delete this[name];
        }
    }
    obj = null;
};

if (!window.dhtmlx)
    window.dhtmlx = {};

(function () {
    var _dhx_msg_cfg = null;

    function callback(config, result) {
        var usercall = config.callback;
        modality(false);
        config.box.parentNode.removeChild(config.box);
        _dhx_msg_cfg = config.box = null;
        if (usercall)
            usercall(result);
    }

    function modal_key(e) {
        if (_dhx_msg_cfg) {
            e = e || event;
            var code = e.which || event.keyCode;
            if (dhtmlx.message.keyboard) {
                if (code == 13 || code == 32)
                    callback(_dhx_msg_cfg, true);
                if (code == 27)
                    callback(_dhx_msg_cfg, false);
            }
            if (e.preventDefault)
                e.preventDefault();
            return !(e.cancelBubble = true);
        }
    }
    if (document.attachEvent)
        document.attachEvent("onkeydown", modal_key);
    else
        document.addEventListener("keydown", modal_key, true);

    function modality(mode) {
        if (!modality.cover) {
            modality.cover = document.createElement("DIV");
            //necessary for IE only
            modality.cover.onkeydown = modal_key;
            modality.cover.className = "dhx_modal_cover";
            document.body.appendChild(modality.cover);
        }
        var height = document.body.scrollHeight;
        modality.cover.style.display = mode ? "inline-block" : "none";
    }

    function button(text, result) {
        var button_css = "dhtmlx_" + text.toLowerCase().replace(/ /g, "_") + "_button"; // dhtmlx_ok_button, dhtmlx_click_me_button
        return "<div class='dhtmlx_popup_button " + button_css + "' result='" + result + "' ><div>" + text + "</div></div>";
    }

    function info(text) {
        if (!t.area) {
            t.area = document.createElement("DIV");
            t.area.className = "dhtmlx_message_area";
            t.area.style[t.position] = "5px";
            document.body.appendChild(t.area);
        }

        t.hide(text.id);
        var message = document.createElement("DIV");
        message.innerHTML = "<div>" + text.text + "</div>";
        message.className = "dhtmlx-info dhtmlx-" + text.type;
        message.onclick = function () {
            t.hide(text.id);
            text = null;
        };

        if (t.position == "bottom" && t.area.firstChild)
            t.area.insertBefore(message, t.area.firstChild);
        else
            t.area.appendChild(message);

        if (text.expire > 0)
            t.timers[text.id] = window.setTimeout(function () {
                t.hide(text.id);
            }, text.expire);

        t.pull[text.id] = message;
        message = null;

        return text.id;
    }

    function _boxStructure(config, ok, cancel) {
        var box = document.createElement("DIV");
        box.className = " dhtmlx_modal_box dhtmlx-" + config.type;
        box.setAttribute("dhxbox", 1);

        var inner = '';

        if (config.width)
            box.style.width = config.width;
        if (config.height)
            box.style.height = config.height;
        if (config.title)
            inner += '<div class="dhtmlx_popup_title">' + config.title + '</div>';
        inner += '<div class="dhtmlx_popup_text"><span>' + (config.content ? '' : config.text) + '</span></div><div  class="dhtmlx_popup_controls">';
        if (ok)
            inner += button(config.ok || "OK", true);
        if (cancel)
            inner += button(config.cancel || "Cancel", false);
        if (config.buttons) {
            for (var i = 0; i < config.buttons.length; i++)
                inner += button(config.buttons[i], i);
        }
        inner += '</div>';
        box.innerHTML = inner;

        if (config.content) {
            var node = config.content;
            if (typeof node == "string")
                node = document.getElementById(node);
            if (node.style.display == 'none')
                node.style.display = "";
            box.childNodes[config.title ? 1 : 0].appendChild(node);
        }

        box.onclick = function (e) {
            e = e || event;
            var source = e.target || e.srcElement;
            if (!source.className) source = source.parentNode;
            if (source.className.split(" ")[0] == "dhtmlx_popup_button") {
                result = source.getAttribute("result");
                result = (result == "true") || (result == "false" ? false : result);
                callback(config, result);
            }
        };
        config.box = box;
        if (ok || cancel)
            _dhx_msg_cfg = config;

        return box;
    }

    function _createBox(config, ok, cancel) {
        var box = config.tagName ? config : _boxStructure(config, ok, cancel);

        if (!config.hidden)
            modality(true);
        document.body.appendChild(box);
        var x = Math.abs(Math.floor(((window.innerWidth || document.documentElement.offsetWidth) - box.offsetWidth) / 2));
        var y = Math.abs(Math.floor(((window.innerHeight || document.documentElement.offsetHeight) - box.offsetHeight) / 2));
        if (config.position == "top")
            box.style.top = "-3px";
        else
            box.style.top = y + 'px';
        box.style.left = x + 'px';
        //necessary for IE only
        box.onkeydown = modal_key;

        box.focus();
        if (config.hidden)
            dhtmlx.modalbox.hide(box);

        return box;
    }

    function alertPopup(config) {
        return _createBox(config, true, false);
    }

    function confirmPopup(config) {
        return _createBox(config, true, true);
    }

    function boxPopup(config) {
        return _createBox(config);
    }

    function box_params(text, type, callback) {
        if (typeof text != "object") {
            if (typeof type == "function") {
                callback = type;
                type = "";
            }
            text = {
                text: text,
                type: type,
                callback: callback
            };
        }
        return text;
    }

    function params(text, type, expire, id) {
        if (typeof text != "object")
            text = {
                text: text,
                type: type,
                expire: expire,
                id: id
            };
        text.id = text.id || t.uid();
        text.expire = text.expire || t.expire;
        return text;
    }
    dhtmlx.alert = function () {
        text = box_params.apply(this, arguments);
        text.type = text.type || "confirm";
        return alertPopup(text);
    };
    dhtmlx.confirm = function () {
        text = box_params.apply(this, arguments);
        text.type = text.type || "alert";
        return confirmPopup(text);
    };
    dhtmlx.modalbox = function () {
        text = box_params.apply(this, arguments);
        text.type = text.type || "alert";
        return boxPopup(text);
    };
    dhtmlx.modalbox.hide = function (node) {
        while (node && node.getAttribute && !node.getAttribute("dhxbox"))
            node = node.parentNode;
        if (node) {
            node.parentNode.removeChild(node);
            modality(false);
        }
    };
    var t = dhtmlx.message = function (text, type, expire, id) {
        text = params.apply(this, arguments);
        text.type = text.type || "info";

        var subtype = text.type.split("-")[0];
        switch (subtype) {
        case "alert":
            return alertPopup(text);
        case "confirm":
            return confirmPopup(text);
        case "modalbox":
            return boxPopup(text);
        default:
            return info(text);
            break;
        }
    };

    t.seed = (new Date()).valueOf();
    t.uid = function () {
        return t.seed++;
    };
    t.expire = 4000;
    t.keyboard = true;
    t.position = "top";
    t.pull = {};
    t.timers = {};

    t.hideAll = function () {
        for (var key in t.pull)
            t.hide(key);
    };
    t.hide = function (id) {
        var obj = t.pull[id];
        if (obj && obj.parentNode) {
            window.setTimeout(function () {
                obj.parentNode.removeChild(obj);
                obj = null;
            }, 2000);
            obj.className += " hidden";

            if (t.timers[id])
                window.clearTimeout(t.timers[id]);
            delete t.pull[id];
        }
    };
})();
/**
 *   @desc: constructor, data processor object
 * @param: serverProcessorURL - url used for update
 * @type: public
 */
function dataProcessor(serverProcessorURL) {
    this.serverProcessor = serverProcessorURL;
    this.action_param = "!nativeeditor_status";

    this.object = null;
    this.updatedRows = []; //ids of updated rows

    this.autoUpdate = true;
    this.updateMode = "cell";
    this._tMode = "GET";
    this.post_delim = "_";

    this._waitMode = 0;
    this._in_progress = {}; //?
    this._invalid = {};
    this.mandatoryFields = [];
    this.messages = [];

    this.styles = {
        updated: "font-weight:bold;",
        inserted: "font-weight:bold;",
        deleted: "text-decoration : line-through;",
        invalid: "background-color:FFE0E0;",
        invalid_cell: "border-bottom:2px solid red;",
        error: "color:red;",
        clear: "font-weight:normal;text-decoration:none;"
    };

    this.enableUTFencoding(true);
    dhtmlxEventable(this);

    return this;
}

dataProcessor.prototype = {
    /**
     *   @desc: select GET or POST transaction model
     * @param: mode - GET/POST
     * @param: total - true/false - send records row by row or all at once (for grid only)
     * @type: public
     */
    setTransactionMode: function (mode, total) {
        this._tMode = mode;
        this._tSend = total;
    },
    escape: function (data) {
        if (this._utf)
            return encodeURIComponent(data);
        else
            return escape(data);
    },
    /**
     *   @desc: allows to set escaping mode
     * @param: true - utf based escaping, simple - use current page encoding
     * @type: public
     */
    enableUTFencoding: function (mode) {
        this._utf = convertStringToBoolean(mode);
    },
    /**
     *   @desc: allows to define, which column may trigger update
     * @param: val - array or list of true/false values
     * @type: public
     */
    setDataColumns: function (val) {
        this._columns = (typeof val == "string") ? val.split(",") : val;
    },
    /**
     *   @desc: get state of updating
     * @returns:   true - all in sync with server, false - some items not updated yet.
     * @type: public
     */
    getSyncState: function () {
        return !this.updatedRows.length;
    },
    /**
     *   @desc: enable/disable named field for data syncing, will use column ids for grid
     * @param:   mode - true/false
     * @type: public
     */
    enableDataNames: function (mode) {
        this._endnm = convertStringToBoolean(mode);
    },
    /**
     *   @desc: enable/disable mode , when only changed fields and row id send to the server side, instead of all fields in default mode
     * @param:   mode - true/false
     * @type: public
     */
    enablePartialDataSend: function (mode) {
        this._changed = convertStringToBoolean(mode);
    },
    /**
     *   @desc: set if rows should be send to server automaticaly
     * @param: mode - "row" - based on row selection changed, "cell" - based on cell editing finished, "off" - manual data sending
     * @type: public
     */
    setUpdateMode: function (mode, dnd) {
        this.autoUpdate = (mode == "cell");
        this.updateMode = mode;
        this.dnd = dnd;
    },
    ignore: function (code, master) {
        this._silent_mode = true;
        code.call(master || window);
        this._silent_mode = false;
    },
    /**
     *   @desc: mark row as updated/normal. check mandatory fields,initiate autoupdate (if turned on)
     * @param: rowId - id of row to set update-status for
     * @param: state - true for "updated", false for "not updated"
     * @param: mode - update mode name
     * @type: public
     */
    setUpdated: function (rowId, state, mode) {
        if (this._silent_mode) return;
        var ind = this.findRow(rowId);

        mode = mode || "updated";
        var existing = this.obj.getUserData(rowId, this.action_param);
        if (existing && mode == "updated") mode = existing;
        if (state) {
            this.set_invalid(rowId, false); //clear previous error flag
            this.updatedRows[ind] = rowId;
            this.obj.setUserData(rowId, this.action_param, mode);
            if (this._in_progress[rowId])
                this._in_progress[rowId] = "wait";
        } else {
            if (!this.is_invalid(rowId)) {
                this.updatedRows.splice(ind, 1);
                this.obj.setUserData(rowId, this.action_param, "");
            }
        }

        //clear changed flag
        if (!state)
            this._clearUpdateFlag(rowId);

        this.markRow(rowId, state, mode);
        if (state && this.autoUpdate) this.sendData(rowId);
    },
    _clearUpdateFlag: function (id) {},
    markRow: function (id, state, mode) {
        var str = "";
        var invalid = this.is_invalid(id);
        if (invalid) {
            str = this.styles[invalid];
            state = true;
        }
        if (this.callEvent("onRowMark", [id, state, mode, invalid])) {
            //default logic
            str = this.styles[state ? mode : "clear"] + str;

            this.obj[this._methods[0]](id, str);

            if (invalid && invalid.details) {
                str += this.styles[invalid + "_cell"];
                for (var i = 0; i < invalid.details.length; i++)
                    if (invalid.details[i])
                        this.obj[this._methods[1]](id, i, str);
            }
        }
    },
    getState: function (id) {
        return this.obj.getUserData(id, this.action_param);
    },
    is_invalid: function (id) {
        return this._invalid[id];
    },
    set_invalid: function (id, mode, details) {
        if (details) mode = {
            value: mode,
            details: details,
            toString: function () {
                return this.value.toString();
            }
        };
        this._invalid[id] = mode;
    },
    /**
     *   @desc: check mandatory fields and varify values of cells, initiate update (if specified)
     * @param: rowId - id of row to set update-status for
     * @type: public
     */
    checkBeforeUpdate: function (rowId) {
        return true;
    },
    /**
     *   @desc: send row(s) values to server
     * @param: rowId - id of row which data to send. If not specified, then all "updated" rows will be send
     * @type: public
     */
    sendData: function (rowId) {
        if (this._waitMode && (this.obj.mytype == "tree" || this.obj._h2)) return;
        if (this.obj.editStop) this.obj.editStop();


        if (typeof rowId == "undefined" || this._tSend) return this.sendAllData();
        if (this._in_progress[rowId]) return false;

        this.messages = [];
        if (!this.checkBeforeUpdate(rowId) && this.callEvent("onValidatationError", [rowId, this.messages])) return false;
        this._beforeSendData(this._getRowData(rowId), rowId);
    },
    _beforeSendData: function (data, rowId) {
        if (!this.callEvent("onBeforeUpdate", [rowId, this.getState(rowId), data])) return false;
        this._sendData(data, rowId);
    },
    serialize: function (data, id) {
        if (typeof data == "string")
            return data;
        if (typeof id != "undefined")
            return this.serialize_one(data, "");
        else {
            var stack = [];
            var keys = [];
            for (var key in data)
                if (data.hasOwnProperty(key)) {
                    stack.push(this.serialize_one(data[key], key + this.post_delim));
                    keys.push(key);
                }
            stack.push("ids=" + this.escape(keys.join(",")));
            if (dhtmlx.security_key)
                stack.push("dhx_security=" + dhtmlx.security_key);
            return stack.join("&");
        }
    },
    serialize_one: function (data, pref) {
        if (typeof data == "string")
            return data;
        var stack = [];
        for (var key in data)
            if (data.hasOwnProperty(key))
                stack.push(this.escape((pref || "") + key) + "=" + this.escape(data[key]));
        return stack.join("&");
    },
    _sendData: function (a1, rowId) {
        if (!a1) return; //nothing to send
        if (!this.callEvent("onBeforeDataSending", rowId ? [rowId, this.getState(rowId), a1] : [null, null, a1])) return false;

        if (rowId)
            this._in_progress[rowId] = (new Date()).valueOf();
        var a2 = new dtmlXMLLoaderObject(this.afterUpdate, this, true);

        var a3 = this.serverProcessor + (this._user ? (getUrlSymbol(this.serverProcessor) + ["dhx_user=" + this._user, "dhx_version=" + this.obj.getUserData(0, "version")].join("&")) : "");

        if (this._tMode != "POST")
            a2.loadXML(a3 + ((a3.indexOf("?") != -1) ? "&" : "?") + this.serialize(a1, rowId));
        else
            a2.loadXML(a3, true, this.serialize(a1, rowId));

        this._waitMode++;
    },
    sendAllData: function () {
        if (!this.updatedRows.length) return;

        this.messages = [];
        var valid = true;
        for (var i = 0; i < this.updatedRows.length; i++)
            valid &= this.checkBeforeUpdate(this.updatedRows[i]);
        if (!valid && !this.callEvent("onValidatationError", ["", this.messages])) return false;

        if (this._tSend)
            this._sendData(this._getAllData());
        else
            for (var i = 0; i < this.updatedRows.length; i++)
                if (!this._in_progress[this.updatedRows[i]]) {
                    if (this.is_invalid(this.updatedRows[i])) continue;
                    this._beforeSendData(this._getRowData(this.updatedRows[i]), this.updatedRows[i]);
                    if (this._waitMode && (this.obj.mytype == "tree" || this.obj._h2)) return; //block send all for tree
                }
    },




    _getAllData: function (rowId) {
        var out = {};
        var has_one = false;
        for (var i = 0; i < this.updatedRows.length; i++) {
            var id = this.updatedRows[i];
            if (this._in_progress[id] || this.is_invalid(id)) continue;
            if (!this.callEvent("onBeforeUpdate", [id, this.getState(id)])) continue;
            out[id] = this._getRowData(id, id + this.post_delim);
            has_one = true;
            this._in_progress[id] = (new Date()).valueOf();
        }
        return has_one ? out : null;
    },


    /**
     *   @desc: specify column which value should be varified before sending to server
     * @param: ind - column index (0 based)
     * @param: verifFunction - function (object) which should verify cell value (if not specified, then value will be compared to empty string). Two arguments will be passed into it: value and column name
     * @type: public
     */
    setVerificator: function (ind, verifFunction) {
        this.mandatoryFields[ind] = verifFunction || (function (value) {
            return (value != "");
        });
    },
    /**
     *   @desc: remove column from list of those which should be verified
     * @param: ind - column Index (0 based)
     * @type: public
     */
    clearVerificator: function (ind) {
        this.mandatoryFields[ind] = false;
    },




    findRow: function (pattern) {
        var i = 0;
        for (i = 0; i < this.updatedRows.length; i++)
            if (pattern == this.updatedRows[i]) break;
        return i;
    },




    /**
     *   @desc: define custom actions
     * @param: name - name of action, same as value of action attribute
     * @param: handler - custom function, which receives a XMl response content for action
     * @type: private
     */
    defineAction: function (name, handler) {
        if (!this._uActions) this._uActions = [];
        this._uActions[name] = handler;
    },




    /**
     *     @desc: used in combination with setOnBeforeUpdateHandler to create custom client-server transport system
     *     @param: sid - id of item before update
     *     @param: tid - id of item after up0ate
     *     @param: action - action name
     *     @type: public
     *     @topic: 0
     */
    afterUpdateCallback: function (sid, tid, action, btag) {
        var marker = sid;
        var correct = (action != "error" && action != "invalid");
        if (!correct) this.set_invalid(sid, action);
        if ((this._uActions) && (this._uActions[action]) && (!this._uActions[action](btag)))
            return (delete this._in_progress[marker]);

        if (this._in_progress[marker] != "wait")
            this.setUpdated(sid, false);

        var soid = sid;

        switch (action) {
        case "update":
        case "updated":
        case "inserted":
        case "insert":
            if (tid != sid) {
                this.obj[this._methods[2]](sid, tid);
                sid = tid;
            }
            break;
        case "delete":
        case "deleted":
            this.obj.setUserData(sid, this.action_param, "true_deleted");
            this.obj[this._methods[3]](sid);
            delete this._in_progress[marker];
            return this.callEvent("onAfterUpdate", [sid, action, tid, btag]);
            break;
        }

        if (this._in_progress[marker] != "wait") {
            if (correct) this.obj.setUserData(sid, this.action_param, '');
            delete this._in_progress[marker];
        } else {
            delete this._in_progress[marker];
            this.setUpdated(tid, true, this.obj.getUserData(sid, this.action_param));
        }

        this.callEvent("onAfterUpdate", [sid, action, tid, btag]);
    },

    /**
     *   @desc: response from server
     * @param: xml - XMLLoader object with response XML
     * @type: private
     */
    afterUpdate: function (that, b, c, d, xml) {
        xml.getXMLTopNode("data"); //fix incorrect content type in IE
        if (!xml.xmlDoc.responseXML) return;
        var atag = xml.doXPath("//data/action");
        for (var i = 0; i < atag.length; i++) {
            var btag = atag[i];
            var action = btag.getAttribute("type");
            var sid = btag.getAttribute("sid");
            var tid = btag.getAttribute("tid");

            that.afterUpdateCallback(sid, tid, action, btag);
        }
        that.finalizeUpdate();
    },
    finalizeUpdate: function () {
        if (this._waitMode) this._waitMode--;

        if ((this.obj.mytype == "tree" || this.obj._h2) && this.updatedRows.length)
            this.sendData();
        this.callEvent("onAfterUpdateFinish", []);
        if (!this.updatedRows.length)
            this.callEvent("onFullSync", []);
    },




    /**
     *   @desc: initializes data-processor
     * @param: anObj - dhtmlxGrid object to attach this data-processor to
     * @type: public
     */
    init: function (anObj) {
        this.obj = anObj;
        if (this.obj._dp_init)
            this.obj._dp_init(this);
    },


    setOnAfterUpdate: function (ev) {
        this.attachEvent("onAfterUpdate", ev);
    },
    enableDebug: function (mode) {},
    setOnBeforeUpdateHandler: function (func) {
        this.attachEvent("onBeforeDataSending", func);
    },



    /*! starts autoupdate mode
    @param interval
      time interval for sending update requests
  */
    setAutoUpdate: function (interval, user) {
        interval = interval || 2000;

        this._user = user || (new Date()).valueOf();
        this._need_update = false;
        this._loader = null;
        this._update_busy = false;

        this.attachEvent("onAfterUpdate", function (sid, action, tid, xml_node) {
            this.afterAutoUpdate(sid, action, tid, xml_node);
        });
        this.attachEvent("onFullSync", function () {
            this.fullSync();
        });

        var self = this;
        window.setInterval(function () {
            self.loadUpdate();
        }, interval);
    },


    /*! process updating request answer
    if status == collision version is depricated
    set flag for autoupdating immidiatly
  */
    afterAutoUpdate: function (sid, action, tid, xml_node) {
        if (action == 'collision') {
            this._need_update = true;
            return false;
        } else {
            return true;
        }
    },


    /*! callback function for onFillSync event
    call update function if it's need
  */
    fullSync: function () {
        if (this._need_update == true) {
            this._need_update = false;
            this.loadUpdate();
        }
        return true;
    },


    /*! sends query to the server and call callback function
     */
    getUpdates: function (url, callback) {
        if (this._update_busy)
            return false;
        else
            this._update_busy = true;

        this._loader = this._loader || new dtmlXMLLoaderObject(true);

        this._loader.async = true;
        this._loader.waitCall = callback;
        this._loader.loadXML(url);
    },


    /*! returns xml node value
    @param node
      xml node
  */
    _v: function (node) {
        if (node.firstChild) return node.firstChild.nodeValue;
        return "";
    },


    /*! returns values array of xml nodes array
    @param arr
      array of xml nodes
  */
    _a: function (arr) {
        var res = [];
        for (var i = 0; i < arr.length; i++) {
            res[i] = this._v(arr[i]);
        };
        return res;
    },


    /*! loads updates and processes them
     */
    loadUpdate: function () {
        var self = this;
        var version = this.obj.getUserData(0, "version");
        var url = this.serverProcessor + getUrlSymbol(this.serverProcessor) + ["dhx_user=" + this._user, "dhx_version=" + version].join("&");
        url = url.replace("editing=true&", "");
        this.getUpdates(url, function () {
            var vers = self._loader.doXPath("//userdata");
            self.obj.setUserData(0, "version", self._v(vers[0]));

            var upds = self._loader.doXPath("//update");
            if (upds.length) {
                self._silent_mode = true;

                for (var i = 0; i < upds.length; i++) {
                    var status = upds[i].getAttribute('status');
                    var id = upds[i].getAttribute('id');
                    var parent = upds[i].getAttribute('parent');
                    switch (status) {
                    case 'inserted':
                        self.callEvent("insertCallback", [upds[i], id, parent]);
                        break;
                    case 'updated':
                        self.callEvent("updateCallback", [upds[i], id, parent]);
                        break;
                    case 'deleted':
                        self.callEvent("deleteCallback", [upds[i], id, parent]);
                        break;
                    }
                }

                self._silent_mode = false;
            }

            self._update_busy = false;
            self = null;
        });
    }

};

//(c)dhtmlx ltd. www.dhtmlx.com
/*
  dhx_sort[index]=direction
  dhx_filter[index]=mask
*/
if (window.dhtmlXGridObject) {
    dhtmlXGridObject.prototype._init_point_connector = dhtmlXGridObject.prototype._init_point;
    dhtmlXGridObject.prototype._init_point = function () {
        var clear_url = function (url) {
            url = url.replace(/(\?|\&)connector[^\f]*/g, "");
            return url + (url.indexOf("?") != -1 ? "&" : "?") + "connector=true" + (this.hdr.rows.length > 0 ? "&dhx_no_header=1" : "");
        };
        var combine_urls = function (url) {
            return clear_url.call(this, url) + (this._connector_sorting || "") + (this._connector_filter || "");
        };
        var sorting_url = function (url, ind, dir) {
            this._connector_sorting = "&dhx_sort[" + ind + "]=" + dir;
            return combine_urls.call(this, url);
        };
        var filtering_url = function (url, inds, vals) {
            for (var i = 0; i < inds.length; i++)
                inds[i] = "dhx_filter[" + inds[i] + "]=" + encodeURIComponent(vals[i]);
            this._connector_filter = "&" + inds.join("&");
            return combine_urls.call(this, url);
        };
        this.attachEvent("onCollectValues", function (ind) {
            if (this._con_f_used[ind]) {
                if (typeof (this._con_f_used[ind]) == "object")
                    return this._con_f_used[ind];
                else
                    return false;
            }
            return true;
        });
        this.attachEvent("onDynXLS", function () {
            this.xmlFileUrl = combine_urls.call(this, this.xmlFileUrl);
            return true;
        });
        this.attachEvent("onBeforeSorting", function (ind, type, dir) {
            if (type == "connector") {
                var self = this;
                this.clearAndLoad(sorting_url.call(this, this.xmlFileUrl, ind, dir), function () {
                    self.setSortImgState(true, ind, dir);
                });
                return false;
            }
            return true;
        });
        this.attachEvent("onFilterStart", function (a, b) {
            if (this._con_f_used.length) {
                this.clearAndLoad(filtering_url.call(this, this.xmlFileUrl, a, b));
                return false;
            }
            return true;
        });
        this.attachEvent("onXLE", function (a, b, c, xml) {
            if (!xml) return;
        });

        if (this._init_point_connector) this._init_point_connector();
    };
    dhtmlXGridObject.prototype._con_f_used = [];
    dhtmlXGridObject.prototype._in_header_connector_text_filter = function (t, i) {
        if (!this._con_f_used[i])
            this._con_f_used[i] = 1;
        return this._in_header_text_filter(t, i);
    };
    dhtmlXGridObject.prototype._in_header_connector_select_filter = function (t, i) {
        if (!this._con_f_used[i])
            this._con_f_used[i] = 2;
        return this._in_header_select_filter(t, i);
    };
    dhtmlXGridObject.prototype.load_connector = dhtmlXGridObject.prototype.load;
    dhtmlXGridObject.prototype.load = function (url, call, type) {
        if (!this._colls_loaded && this.cellType) {
            var ar = [];
            for (var i = 0; i < this.cellType.length; i++)
                if (this.cellType[i].indexOf("co") == 0 || this._con_f_used[i] == 2) ar.push(i);
            if (ar.length)
                arguments[0] += (arguments[0].indexOf("?") != -1 ? "&" : "?") + "connector=true&dhx_colls=" + ar.join(",");
        }
        return this.load_connector.apply(this, arguments);
    };
    dhtmlXGridObject.prototype._parseHead_connector = dhtmlXGridObject.prototype._parseHead;
    dhtmlXGridObject.prototype._parseHead = function (url, call, type) {
        this._parseHead_connector.apply(this, arguments);
        if (!this._colls_loaded) {
            var cols = this.xmlLoader.doXPath("./coll_options", arguments[0]);
            for (var i = 0; i < cols.length; i++) {
                var f = cols[i].getAttribute("for");
                var v = [];
                var combo = null;
                if (this.cellType[f] == "combo")
                    combo = this.getColumnCombo(f);
                if (this.cellType[f].indexOf("co") == 0)
                    combo = this.getCombo(f);

                var os = this.xmlLoader.doXPath("./item", cols[i]);
                for (var j = 0; j < os.length; j++) {
                    var val = os[j].getAttribute("value");

                    if (combo) {
                        var lab = os[j].getAttribute("label") || val;

                        if (combo.addOption)
                            combo.addOption([
                                [val, lab]
                            ]);
                        else
                            combo.put(val, lab);

                        v[v.length] = lab;
                    } else
                        v[v.length] = val;
                }
                if (this._con_f_used[f * 1])
                    this._con_f_used[f * 1] = v;
            }
            this._colls_loaded = true;
        }
    };
}

if (window.dataProcessor) {
    dataProcessor.prototype.init_original = dataProcessor.prototype.init;
    dataProcessor.prototype.init = function (obj) {
        this.init_original(obj);
        obj._dataprocessor = this;

        this.setTransactionMode("POST", true);
        this.serverProcessor += (this.serverProcessor.indexOf("?") != -1 ? "&" : "?") + "editing=true";
    };
}
dhtmlxError.catchError("LoadXML", function (a, b, c) {
    if (c[0].status != 0) {
        alert(c[0].responseText);
    }
});

window.dhtmlXScheduler = window.scheduler = {
    version: "4.0.1"
};
dhtmlxEventable(scheduler);

scheduler.init = function (id, date, mode) {
    date = date || (scheduler._currentDate());
    mode = mode || "week";

    //hook for terrace skin
    if (this._skin_init)
        scheduler._skin_init();

    scheduler.date.init();

    this._obj = (typeof id == "string") ? document.getElementById(id) : id;
    this._els = [];
    this._scroll = true;
    this._quirks = (_isIE && document.compatMode == "BackCompat");
    this._quirks7 = (_isIE && navigator.appVersion.indexOf("MSIE 8") == -1);

    this.get_elements();
    this.init_templates();
    this.set_actions();

    (function () {
        var oldSize = getWindowSize();
        dhtmlxEvent(window, "resize", function () {
            var newSize = getWindowSize();

            // ie7-8 triggers "resize" when window's elements are resized, it messes container-autoresize extension
            // check if it's actually resized
            if (!equals(oldSize, newSize)) {
                window.clearTimeout(scheduler._resize_timer);
                scheduler._resize_timer = window.setTimeout(function () {
                    if (scheduler.callEvent("onSchedulerResize", [])) {
                        scheduler.update_view();
                        scheduler.callEvent("onAfterSchedulerResize", []);
                    }
                }, 100);
            }
            oldSize = newSize;

        });

        function getWindowSize() {
            return {
                w: window.innerWidth || document.documentElement.clientWidth,
                h: window.innerHeight || document.documentElement.clientHeight
            };
        }

        function equals(a, b) {
            return a.w == b.w && a.h == b.h;
        }
    })();
    this._init_touch_events();
    this.set_sizes();
    scheduler.callEvent('onSchedulerReady', []);
    this.setCurrentView(date, mode);
};

scheduler.xy = {
    min_event_height: 40,
    scale_width: 50,
    scroll_width: 18,
    scale_height: 20,
    month_scale_height: 20,
    menu_width: 25,
    margin_top: 0,
    margin_left: 0,
    editor_width: 140
};
scheduler.keys = {
    edit_save: 13,
    edit_cancel: 27
};
scheduler.set_sizes = function () {
    var w = this._x = this._obj.clientWidth - this.xy.margin_left;
    var h = this._y = this._obj.clientHeight - this.xy.margin_top;

    //not-table mode always has scroll - need to be fixed in future
    var scale_x = this._table_view ? 0 : (this.xy.scale_width + this.xy.scroll_width);
    var scale_s = this._table_view ? -1 : this.xy.scale_width;

    this.set_xy(this._els["dhx_cal_navline"][0], w, this.xy.nav_height, 0, 0);
    this.set_xy(this._els["dhx_cal_header"][0], w - scale_x, this.xy.scale_height, scale_s, this.xy.nav_height + (this._quirks ? -1 : 1));
    //to support alter-skin, we need a way to alter height directly from css
    var actual_height = this._els["dhx_cal_navline"][0].offsetHeight;
    if (actual_height > 0) this.xy.nav_height = actual_height;

    var data_y = this.xy.scale_height + this.xy.nav_height + (this._quirks ? -2 : 0);
    this.set_xy(this._els["dhx_cal_data"][0], w, h - (data_y + 2), 0, data_y + 2);
};
scheduler.set_xy = function (node, w, h, x, y) {
    node.style.width = Math.max(0, w) + "px";
    node.style.height = Math.max(0, h) + "px";
    if (arguments.length > 3) {
        node.style.left = x + "px";
        node.style.top = y + "px";
    }
};
scheduler.get_elements = function () {
    //get all child elements as named hash
    var els = this._obj.getElementsByTagName("DIV");
    for (var i = 0; i < els.length; i++) {
        var name = els[i].className;
        if (name) name = name.split(" ")[0];
        if (!this._els[name]) this._els[name] = [];
        this._els[name].push(els[i]);

        //check if name need to be changed
        var t = scheduler.locale.labels[els[i].getAttribute("name") || name];
        if (t) els[i].innerHTML = t;
    }
};
scheduler.set_actions = function () {
    for (var a in this._els)
        if (this._click[a])
            for (var i = 0; i < this._els[a].length; i++)
                this._els[a][i].onclick = scheduler._click[a];
    this._obj.onselectstart = function (e) {
        return false;
    };
    //disable resize event
//    this._obj.onmousemove = function (e) {
//        if (!scheduler._temp_touch_block)
//            scheduler._on_mouse_move(e || event);
//    };
//    this._obj.onmousedown = function (e) {
//        if (!scheduler._ignore_next_click)
//            scheduler._on_mouse_down(e || event);
//    };
//    this._obj.onmouseup = function (e) {
//        if (!scheduler._ignore_next_click)
//            scheduler._on_mouse_up(e || event);
//    };
    this._obj.ondblclick = function (e) {
        scheduler._on_dbl_click(e || event);
    };
    this._obj.oncontextmenu = function (e) {
        var ev = e || event;
        var src = ev.target || ev.srcElement;
        var returnValue = scheduler.callEvent("onContextMenu", [scheduler._locate_event(src), ev]);
        return returnValue;
    };
};
scheduler.select = function (id) {
    if (this._select_id == id) return;
    this.editStop(false);
    this.unselect();
    this._select_id = id;
    this.updateEvent(id);
};
scheduler.unselect = function (id) {
    if (id && id != this._select_id) return;
    var t = this._select_id;
    this._select_id = null;
    if (t) this.updateEvent(t);
};
scheduler.getState = function () {
    return {
        mode: this._mode,
        date: this._date,
        min_date: this._min_date,
        max_date: this._max_date,
        editor_id: this._edit_id,
        lightbox_id: this._lightbox_id,
        new_event: this._new_event,
        select_id: this._select_id,
        expanded: this.expanded,
        drag_id: this._drag_id,
        drag_mode: this._drag_mode
    };
};
scheduler._click = {
    dhx_cal_data: function (e) {
        //in case of touch disable click processing
        if (scheduler._ignore_next_click) {
            if (e.preventDefault)
                e.preventDefault();
            e.cancelBubble = true;
            return scheduler._ignore_next_click = false;
        }

        var trg = e ? e.target : event.srcElement;
        var id = scheduler._locate_event(trg);

        e = e || event;

        if (!id) {
            scheduler.callEvent("onEmptyClick", [scheduler.getActionData(e).date, e]);
        } else {
            if (!scheduler.callEvent("onClick", [id, e]) || scheduler.config.readonly) return;
        }

        if (id && scheduler.config.select) {

            scheduler.select(id);
            var mask = trg.className;
            if (mask.indexOf("_icon") != -1)
                scheduler._click.buttons[mask.split(" ")[1].replace("icon_", "")](id);
        } else
            scheduler._close_not_saved();
    },
    dhx_cal_prev_button: function () {
        scheduler._click.dhx_cal_next_button(0, -1);
    },
    dhx_cal_next_button: function (dummy, step) {
        scheduler.setCurrentView(scheduler.date.add( //next line changes scheduler._date , but seems it has not side-effects
            scheduler.date[scheduler._mode + "_start"](scheduler._date), (step || 1), scheduler._mode));
    },
    dhx_cal_today_button: function () {
        if (scheduler.callEvent("onBeforeTodayDisplayed", [])) {
            scheduler.setCurrentView(scheduler._currentDate());
        }
    },
    dhx_cal_tab: function () {
        var name = this.getAttribute("name");
        var mode = name.substring(0, name.search("_tab"));
        scheduler.setCurrentView(scheduler._date, mode);
    },
    buttons: {
        "delete": function (id) {
            var c = scheduler.locale.labels.confirm_deleting;
            scheduler._dhtmlx_confirm(c, scheduler.locale.labels.title_confirm_deleting, function () {
                scheduler.deleteEvent(id)
            });
        },
        edit: function (id) {
            scheduler.edit(id);
        },
        save: function (id) {
            scheduler.editStop(true);
        },
        details: function (id) {
            scheduler.showLightbox(id);
        },
        cancel: function (id) {
            scheduler.editStop(false);
        }
    }
};
scheduler._dhtmlx_confirm = function (message, title, callback) {
    if (!message)
        return callback();
    var opts = {
        text: message
    };
    if (title)
        opts.title = title;
    if (callback) {
        opts.callback = function (result) {
            if (result)
                callback();
        };
    }
    dhtmlx.confirm(opts);
};
scheduler.addEventNow = function (start, end, e) {
    var base = {};
    if (start && start.constructor.toString().match(/object/i) !== null) {
        base = start;
        start = null;
    }

    var d = (this.config.event_duration || this.config.time_step) * 60000;
    if (!start) start = base.start_date || Math.round((scheduler._currentDate()).valueOf() / d) * d;
    var start_date = new Date(start);
    if (!end) {
        var start_hour = this.config.first_hour;
        if (start_hour > start_date.getHours()) {
            start_date.setHours(start_hour);
            start = start_date.valueOf();
        }
        end = start.valueOf() + d;
    }
    var end_date = new Date(end);

    // scheduler.addEventNow(new Date(), new Date()) + collision though get_visible events defect (such event was not retrieved)
    if (start_date.valueOf() == end_date.valueOf())
        end_date.setTime(end_date.valueOf() + d);

    base.start_date = base.start_date || start_date;
    base.end_date = base.end_date || end_date;
    base.text = base.text || this.locale.labels.new_event;
    base.id = this._drag_id = this.uid();
    this._drag_mode = "new-size";

    this._loading = true;
    this.addEvent(base);
    this.callEvent("onEventCreated", [this._drag_id, e]);
    this._loading = false;

    this._drag_event = {}; //dummy , to trigger correct event updating logic
    this._on_mouse_up(e);
};
scheduler._on_dbl_click = function (e, src) {
    src = src || (e.target || e.srcElement);
    if (this.config.readonly || !src.className) return;
    var name = src.className.split(" ")[0];
    switch (name) {
    case "dhx_scale_holder":
    case "dhx_scale_holder_now":
    case "dhx_month_body":
    case "dhx_wa_day_data":
    case "dhx_marked_timespan":
        if (!scheduler.config.dblclick_create) break;
        this.addEventNow(this.getActionData(e).date, null, e);
        break;
    case "dhx_cal_event":
    case "dhx_wa_ev_body":
    case "dhx_agenda_line":
    case "dhx_grid_event":
    case "dhx_cal_event_line":
    case "dhx_cal_event_clear":
        var id = this._locate_event(src);
        if (!this.callEvent("onDblClick", [id, e])) return;
        if (this.config.details_on_dblclick || this._table_view || !this.getEvent(id)._timed || !this.config.select){
            if (this._table_view)//disable db click on a scheduled event
                return;
            this.showLightbox(id);
        }
        else
            this.edit(id);
        break;
    case "dhx_time_block":
    case "dhx_cal_container":
        return;
        break;
    default:
        var t = this["dblclick_" + name];
        if (t) {
            t.call(this, e);
        } else {
            if (src.parentNode && src != this)
                return scheduler._on_dbl_click(e, src.parentNode);
        }
        break;
    }
};

scheduler._mouse_coords = function (ev) {
    var pos;
    var b = document.body;
    var d = document.documentElement;
    if (!_isIE && (ev.pageX || ev.pageY))
        pos = {
            x: ev.pageX,
            y: ev.pageY
        };
    else pos = {
        x: ev.clientX + (b.scrollLeft || d.scrollLeft || 0) - b.clientLeft,
        y: ev.clientY + (b.scrollTop || d.scrollTop || 0) - b.clientTop
    };

    //apply layout
    pos.x -= getAbsoluteLeft(this._obj) + (this._table_view ? 0 : this.xy.scale_width);
    pos.y -= getAbsoluteTop(this._obj) + this.xy.nav_height + (this._dy_shift || 0) + this.xy.scale_height - this._els["dhx_cal_data"][0].scrollTop;
    pos.ev = ev;

    var handler = this["mouse_" + this._mode];
    if (handler)
        return handler.call(this, pos);

    if (this._cols) {
        var column = pos.x / this._cols[0];
        if (this._ignores)
            for (var i = 0; i <= column; i++)
                if (this._ignores[i])
                    column++;
    }

    //transform to date
    if (!this._table_view) {
        //"get position" can be invoked before columns are loaded into the units view(e.g. by onMouseMove handler in key_nav.js)
        if (!this._cols) return pos;
        pos.x = Math.min(this._cols.length - 1, Math.max(0, Math.ceil(column) - 1));

        pos.y = Math.max(0, Math.ceil(pos.y * 60 / (this.config.time_step * this.config.hour_size_px)) - 1) + this.config.first_hour * (60 / this.config.time_step);
    } else {
        if (!this._cols || !this._colsS) // agenda/map views
            return pos;
        var dy = 0;
        for (dy = 1; dy < this._colsS.heights.length; dy++)
            if (this._colsS.heights[dy] > pos.y) break;

        pos.y = Math.ceil((Math.max(0, column) + Math.max(0, dy - 1) * 7) * 24 * 60 / this.config.time_step);

        if (scheduler._drag_mode || this._mode == "month")
            pos.y = (Math.max(0, Math.ceil(column) - 1) + Math.max(0, dy - 1) * 7) * 24 * 60 / this.config.time_step;

        //we care about ignored days only during event moving in month view
        if (this._drag_mode == "move") {
            if (scheduler._ignores_detected && scheduler.config.preserve_length) {
                pos._ignores = true;
                //get real lengtn of event
                if (!this._drag_event._event_length)
                    this._drag_event._event_length = this._get_real_event_length(this._drag_event.start_date, this._drag_event.end_date, {
                        x_step: 1,
                        x_unit: "day"
                    });
            }
        }

        pos.x = 0;
    }
    return pos;
};
scheduler._close_not_saved = function () {
    if (new Date().valueOf() - (scheduler._new_event || 0) > 500 && scheduler._edit_id) {
        var c = scheduler.locale.labels.confirm_closing;

        scheduler._dhtmlx_confirm(c, scheduler.locale.labels.title_confirm_closing, function () {
            scheduler.editStop(scheduler.config.positive_closing);
        });
    }
};
scheduler._correct_shift = function (start, back) {
    return start -= ((new Date(scheduler._min_date)).getTimezoneOffset() - (new Date(start)).getTimezoneOffset()) * 60000 * (back ? -1 : 1);
};
scheduler._on_mouse_move = function (e) {
    if (this._drag_mode) {
        var pos = this._mouse_coords(e);
        if (!this._drag_pos || pos.force_redraw || this._drag_pos.x != pos.x || this._drag_pos.y != pos.y) {
            var start, end;
            if (this._edit_id != this._drag_id)
                this._close_not_saved();

            this._drag_pos = pos;

            if (this._drag_mode == "create") {
                this._close_not_saved();
                this._loading = true; //will be ignored by dataprocessor

                start = this._get_date_from_pos(pos).valueOf();

                if (!this._drag_start) {
                    var res = this.callEvent("onBeforeEventCreated", [e, this._drag_id]);
                    if (!res)
                        return;


                    this._drag_start = start;
                    return;
                }

                end = start;
                if (end == this._drag_start) {}

                var start_date = new Date(this._drag_start);
                var end_date = new Date(end);
                if ((this._mode == "day" || this._mode == "week") && (start_date.getHours() == end_date.getHours() && start_date.getMinutes() == end_date.getMinutes())) {
                    end_date = new Date(this._drag_start + 1000);
                }


                this._drag_id = this.uid();
                this.addEvent(start_date, end_date, this.locale.labels.new_event, this._drag_id, pos.fields);

                this.callEvent("onEventCreated", [this._drag_id, e]);
                this._loading = false;
                this._drag_mode = "new-size";

            }

            var ev = this.getEvent(this._drag_id);

            if (this._drag_mode == "move") {
                start = this._min_date.valueOf() + (pos.y * this.config.time_step + pos.x * 24 * 60 - (scheduler._move_pos_shift || 0)) * 60000;
                if (!pos.custom && this._table_view) start += this.date.time_part(ev.start_date) * 1000;
                start = this._correct_shift(start);

                if (pos._ignores && this.config.preserve_length && this._table_view) {
                    if (this.matrix)
                        var obj = this.matrix[this._mode];
                    obj = obj || {
                        x_step: 1,
                        x_unit: "day"
                    };
                    end = start * 1 + this._get_fictional_event_length(start, this._drag_event._event_length, obj);
                } else
                    end = ev.end_date.valueOf() - (ev.start_date.valueOf() - start);
            } else { // resize
                start = ev.start_date.valueOf();
                end = ev.end_date.valueOf();
                if (this._table_view) {
                    var resize_date = this._min_date.valueOf() + pos.y * this.config.time_step * 60000 + (pos.custom ? 0 : 24 * 60 * 60000);
                    if (this._mode == "month")
                        resize_date = this._correct_shift(resize_date, false);

                    if (pos.resize_from_start)
                        start = resize_date;
                    else
                        end = resize_date;
                } else {
                    end = this.date.date_part(new Date(ev.end_date)).valueOf() + pos.y * this.config.time_step * 60000;
                    this._els["dhx_cal_data"][0].style.cursor = "s-resize";
                    if (this._mode == "week" || this._mode == "day")
                        end = this._correct_shift(end);
                }
                if (this._drag_mode == "new-size") {
                    if (end <= this._drag_start) {
                        var shift = pos.shift || ((this._table_view && !pos.custom) ? 24 * 60 * 60000 : 0);
                        start = end - (pos.shift ? 0 : shift);
                        end = this._drag_start + (shift || (this.config.time_step * 60000));
                    } else {
                        start = this._drag_start;
                    }
                } else {
                    if (end <= start)
                        end = start + this.config.time_step * 60000;
                }
            }
            var new_end = new Date(end - 1);
            var new_start = new Date(start);
            //prevent out-of-borders situation for day|week view
            if (this._table_view || (new_end.getDate() == new_start.getDate() && new_end.getHours() < this.config.last_hour) || scheduler._allow_dnd) {
                ev.start_date = new_start;
                ev.end_date = new Date(end);
                if (this.config.update_render) {
                    //fix for repaint after dnd and scroll issue, #231
                    var sx = scheduler._els["dhx_cal_data"][0].scrollTop;
                    this.update_view();
                    scheduler._els["dhx_cal_data"][0].scrollTop = sx;
                } else
                    this.updateEvent(this._drag_id);
            }
            if (this._table_view) {
                this.for_rendered(this._drag_id, function (r) {
                    r.className += " dhx_in_move";
                });
            }
        }
    } else {
        if (scheduler.checkEvent("onMouseMove")) {
            var id = this._locate_event(e.target || e.srcElement);
            this.callEvent("onMouseMove", [id, e]);
        }
    }
};
scheduler._on_mouse_down = function (e, src) {
    // on Mac we do not get onmouseup event when clicking right mouse button leaving us in dnd state
    // let's ignore right mouse button then
    if (e.button == 2)
        return;

    if (this.config.readonly || this._drag_mode) return;
    src = src || (e.target || e.srcElement);
    var classname = src.className && src.className.split(" ")[0];

    switch (classname) {
    case "dhx_cal_event_line":
    case "dhx_cal_event_clear":
        if (this._table_view)
            this._drag_mode = "move"; //item in table mode
        break;
    case "dhx_event_move":
    case "dhx_wa_ev_body":
        this._drag_mode = "move";
        break;
    case "dhx_event_resize":
        this._drag_mode = "resize";
        break;
    case "dhx_scale_holder":
    case "dhx_scale_holder_now":
    case "dhx_month_body":
    case "dhx_matrix_cell":
    case "dhx_marked_timespan":
        this._drag_mode = "create";
        this.unselect(this._select_id);
        break;
    case "":
        if (src.parentNode)
            return scheduler._on_mouse_down(e, src.parentNode);
    default:
        if (scheduler.checkEvent("onMouseDown") && scheduler.callEvent("onMouseDown", [classname])) {
            if (src.parentNode && src != this) {
                return scheduler._on_mouse_down(e, src.parentNode);
            }
        }
        this._drag_mode = null;
        this._drag_id = null;
        break;
    }
    if (this._drag_mode) {
        var id = this._locate_event(src);
        if (!this.config["drag_" + this._drag_mode] || !this.callEvent("onBeforeDrag", [id, this._drag_mode, e]))
            this._drag_mode = this._drag_id = 0;
        else {
            this._drag_id = id;
            this._drag_event = scheduler._lame_clone(this.getEvent(this._drag_id) || {});
        }
    }
    this._drag_start = null;
};
scheduler._on_mouse_up = function (e) {
    if (e && e.button == 2 && scheduler.config.touch) return;
    if (this._drag_mode && this._drag_id) {
        this._els["dhx_cal_data"][0].style.cursor = "default";
        //drop
        var ev = this.getEvent(this._drag_id);
        if (this._drag_event._dhx_changed || !this._drag_event.start_date || ev.start_date.valueOf() != this._drag_event.start_date.valueOf() || ev.end_date.valueOf() != this._drag_event.end_date.valueOf()) {
            var is_new = (this._drag_mode == "new-size");
            if (!this.callEvent("onBeforeEventChanged", [ev, e, is_new, this._drag_event])) {
                if (is_new)
                    this.deleteEvent(ev.id, true);
                else {
                    this._drag_event._dhx_changed = false;
                    scheduler._lame_copy(ev, this._drag_event);
                    this.updateEvent(ev.id);
                }
            } else {
                var drag_id = this._drag_id;
                this._drag_id = this._drag_mode = null;
                if (is_new && this.config.edit_on_create) {
                    this.unselect();
                    this._new_event = new Date(); //timestamp of creation
                    //if selection disabled - force lightbox usage
                    if (this._table_view || this.config.details_on_create || !this.config.select) {
                        return this.showLightbox(drag_id);
                    }
                    this._drag_pos = true; //set flag to trigger full redraw
                    this._select_id = this._edit_id = drag_id;
                } else {
                    if (!this._new_event)
                        this.callEvent(is_new ? "onEventAdded" : "onEventChanged", [drag_id, this.getEvent(drag_id)]);
                }
            }
        }
        if (this._drag_pos) this.render_view_data(); //redraw even if there is no real changes - necessary for correct positioning item after drag
    }
    this._drag_id = null;
    this._drag_mode = null;
    this._drag_pos = null;
};
scheduler.update_view = function () {
    this._reset_scale();
    if (this._load_mode && this._load()) return this._render_wait = true;
    this.render_view_data();
};

scheduler.isViewExists = function (mode) {
    return !!(scheduler[mode + "_view"] ||
        (scheduler.date[mode + "_start"] && scheduler.templates[mode + "_date"] && scheduler.templates[mode + "_scale_date"]));
};

scheduler.updateView = function (date, mode) {
    date = date || this._date;
    mode = mode || this._mode;
    var dhx_cal_data = 'dhx_cal_data';

    if (!this._mode)
        this._obj.className += " dhx_scheduler_" + mode;
    else {
        this._obj.className = this._obj.className.replace("dhx_scheduler_" + this._mode, "dhx_scheduler_" + mode);
    }

    var prev_scroll = (this._mode == mode && this.config.preserve_scroll) ? this._els[dhx_cal_data][0].scrollTop : false; // saving current scroll

    //hide old custom view
    if (this[this._mode + "_view"] && mode && this._mode != mode)
        this[this._mode + "_view"](false);

    this._close_not_saved();

    var dhx_multi_day = 'dhx_multi_day';
    if (this._els[dhx_multi_day]) {
        this._els[dhx_multi_day][0].parentNode.removeChild(this._els[dhx_multi_day][0]);
        this._els[dhx_multi_day] = null;
    }

    this._mode = mode;
    this._date = date;
    this._table_view = (this._mode == "month");

    var tabs = this._els["dhx_cal_tab"];
    if (tabs) { //calendar can work without view tabs
        for (var i = 0; i < tabs.length; i++) {
            var name = tabs[i].className;
            name = name.replace(/ active/g, "");
            if (tabs[i].getAttribute("name") == this._mode + "_tab")
                name = name + " active";
            tabs[i].className = name;
        }
    }
    //show new view
    var view = this[this._mode + "_view"];
    view ? view(true) : this.update_view();

    if (typeof prev_scroll == "number") // if we are updating or working with the same view scrollTop should be saved
        this._els[dhx_cal_data][0].scrollTop = prev_scroll; // restoring original scroll
};
scheduler.setCurrentView = function (date, mode) {
    if (!this.callEvent("onBeforeViewChange", [this._mode, this._date, mode || this._mode, date || this._date])) return;
    this.updateView(date, mode);
    this.callEvent("onViewChange", [this._mode, this._date]);
};
scheduler._render_x_header = function (i, left, d, h) {
    //header scale  
    var head = document.createElement("DIV");
    head.className = "dhx_scale_bar";

    if (this.templates[this._mode + "_scalex_class"]) {
        //'_scalex_class' - timeline already have similar template, use the same name
        head.className += ' ' + this.templates[this._mode + "_scalex_class"](d);
    }

    var width = this._cols[i] - 1;

    if (this._mode == "month" && i === 0 && this.config.left_border) {
        head.className += " dhx_scale_bar_border";
        left = left + 1;
    }
    this.set_xy(head, width, this.xy.scale_height - 2, left, 0); //-1 for border
    head.innerHTML = this.templates[this._mode + "_scale_date"](d, this._mode); //TODO - move in separate method
    h.appendChild(head);
};
scheduler._reset_scale = function () {
    //current mode doesn't support scales
    //we mustn't call reset_scale for such modes, so it just to be sure
    if (!this.templates[this._mode + "_date"]) return;

    var h = this._els["dhx_cal_header"][0];
    var b = this._els["dhx_cal_data"][0];
    var c = this.config;

    h.innerHTML = "";
    b.scrollTop = 0; //fix flickering in FF
    b.innerHTML = "";

    var str = ((c.readonly || (!c.drag_resize)) ? " dhx_resize_denied" : "") + ((c.readonly || (!c.drag_move)) ? " dhx_move_denied" : "");
    if (str) b.className = "dhx_cal_data" + str;

    this._scales = {};
    this._cols = []; //store for data section
    this._colsS = {
        height: 0
    };
    this._dy_shift = 0;

    this.set_sizes();
    var summ = parseInt(h.style.width, 10); //border delta
    var left = 0;

    var d, dd, sd, today;
    dd = this.date[this._mode + "_start"](new Date(this._date.valueOf()));
    d = sd = this._table_view ? scheduler.date.week_start(dd) : dd;
    today = this.date.date_part(scheduler._currentDate());

    //reset date in header
    var ed = scheduler.date.add(dd, 1, this._mode);
    var count = 7;

    if (!this._table_view) {
        var count_n = this.date["get_" + this._mode + "_end"];
        if (count_n) ed = count_n(dd);
        count = Math.round((ed.valueOf() - dd.valueOf()) / (1000 * 60 * 60 * 24));
    }

    this._min_date = d;
    this._els["dhx_cal_date"][0].innerHTML = this.templates[this._mode + "_date"](dd, ed, this._mode);


    this._process_ignores(sd, count, "day", 1);
    var realcount = count - this._ignores_detected;

    for (var i = 0; i < count; i++) {
        if (this._ignores[i]) {
            this._cols[i] = 0;
            realcount++;
        } else {
            this._cols[i] = Math.floor(summ / (realcount - i));
            this._render_x_header(i, left, d, h);
        }
        if (!this._table_view) {
            var scales = document.createElement("DIV");
            var cls = "dhx_scale_holder";
            if (d.valueOf() == today.valueOf()) cls = "dhx_scale_holder_now";
            scales.className = cls + " " + this.templates.week_date_class(d, today);
            this.set_xy(scales, this._cols[i] - 1, c.hour_size_px * (c.last_hour - c.first_hour), left + this.xy.scale_width + 1, 0); //-1 for border
            b.appendChild(scales);
            this.callEvent("onScaleAdd", [scales, d]);
        }

        d = this.date.add(d, 1, "day");
        summ -= this._cols[i];
        left += this._cols[i];
        this._colsS[i] = (this._cols[i - 1] || 0) + (this._colsS[i - 1] || (this._table_view ? 0 : this.xy.scale_width + 2));
        this._colsS['col_length'] = count + 1;
    }

    this._max_date = d;
    this._colsS[count] = this._cols[count - 1] + this._colsS[count - 1];

    if (this._table_view) // month view
        this._reset_month_scale(b, dd, sd);
    else {
        this._reset_hours_scale(b, dd, sd);
        if (c.multi_day) {
            var dhx_multi_day = 'dhx_multi_day';

            if (this._els[dhx_multi_day]) {
                this._els[dhx_multi_day][0].parentNode.removeChild(this._els[dhx_multi_day][0]);
                this._els[dhx_multi_day] = null;
            }

            var navline = this._els["dhx_cal_navline"][0];
            var top = navline.offsetHeight + this._els["dhx_cal_header"][0].offsetHeight + 1;

            var c1 = document.createElement("DIV");
            c1.className = dhx_multi_day;
            c1.style.visibility = "hidden";
            this.set_xy(c1, this._colsS[this._colsS.col_length - 1] + this.xy.scroll_width, 0, 0, top); // 2 extra borders, dhx_header has -1 bottom margin
            b.parentNode.insertBefore(c1, b);

            var c2 = c1.cloneNode(true);
            c2.className = dhx_multi_day + "_icon";
            c2.style.visibility = "hidden";
            this.set_xy(c2, this.xy.scale_width, 0, 0, top); // dhx_header has -1 bottom margin

            c1.appendChild(c2);
            this._els[dhx_multi_day] = [c1, c2];
            this._els[dhx_multi_day][0].onclick = this._click.dhx_cal_data;
        }
    }
};
scheduler._reset_hours_scale = function (b, dd, sd) {
    var c = document.createElement("DIV");
    c.className = "dhx_scale_holder";

    var date = new Date(1980, 1, 1, this.config.first_hour, 0, 0);
    for (var i = this.config.first_hour * 1; i < this.config.last_hour; i++) {
        var cc = document.createElement("DIV");
        cc.className = "dhx_scale_hour";
        cc.style.height = this.config.hour_size_px - (this._quirks ? 0 : 1) + "px";
        var width = this.xy.scale_width;
        if (this.config.left_border) {
            width = width - 1;
            cc.className += " dhx_scale_hour_border";
        }
        cc.style.width = width + "px";
        cc.innerHTML = scheduler.templates.hour_scale(date);

        c.appendChild(cc);
        date = this.date.add(date, 1, "hour");
    }
    b.appendChild(c);
    if (this.config.scroll_hour)
        b.scrollTop = this.config.hour_size_px * (this.config.scroll_hour - this.config.first_hour);
};

scheduler._currentDate = function () {
    if (scheduler.config.now_date) {
        return new Date(scheduler.config.now_date);
    }
    return new Date();
};

scheduler._process_ignores = function (sd, n, mode, step, preserve) {
    this._ignores = [];
    this._ignores_detected = 0;
    var ignore = scheduler["ignore_" + this._mode];

    if (ignore) {
        var ign_date = new Date(sd);
        for (var i = 0; i < n; i++) {
            if (ignore(ign_date)) {
                this._ignores_detected += 1;
                this._ignores[i] = true;
                if (preserve)
                    n++;
            }
            ign_date = scheduler.date.add(ign_date, step, mode);
        }
    }
};

scheduler._reset_month_scale = function (b, dd, sd) {
    var ed = scheduler.date.add(dd, 1, "month");

    //trim time part for comparation reasons
    var cd = scheduler._currentDate();
    this.date.date_part(cd);
    this.date.date_part(sd);

    var rows = Math.ceil(Math.round((ed.valueOf() - sd.valueOf()) / (60 * 60 * 24 * 1000)) / 7);
    var tdcss = [];
    var height = (Math.floor(b.clientHeight / rows) - 22);

    this._colsS.height = height + 22;



    var h = this._colsS.heights = [];
    for (var i = 0; i <= 7; i++) {
        var cell_width = ((this._cols[i] || 0) - 1);
        if (i === 0 && this.config.left_border) {
            cell_width = cell_width - 1;
        }
        tdcss[i] = " style='height:" + height + "px; width:" + cell_width + "px;' ";
    }



    var cellheight = 0;
    this._min_date = sd;
    var html = "<table cellpadding='0' cellspacing='0'>";
    var rendered_dates = [];
    for (var i = 0; i < rows; i++) {
        html += "<tr>";

        for (var j = 0; j < 7; j++) {
            html += "<td";

            var cls = "";
            if (sd < dd)
                cls = 'dhx_before';
            else if (sd >= ed)
                cls = 'dhx_after';
            else if (sd.valueOf() == cd.valueOf())
                cls = 'dhx_now';
            html += " class='" + cls + " " + this.templates.month_date_class(sd, cd) + "' >";
            var body_class = "dhx_month_body";
            var head_class = "dhx_month_head";
            if (j === 0 && this.config.left_border) {
                body_class += " dhx_month_body_border";
                head_class += " dhx_month_head_border";
            }
            if (!this._ignores_detected || !this._ignores[j]) {
                html += "<div class='" + head_class + "'>" + this.templates.month_day(sd) + "</div>";
                html += "<div class='" + body_class + "' " + tdcss[j] + "></div></td>";
            } else {
                html += "<div></div><div></div>";
            }
            rendered_dates.push(sd);
            sd = this.date.add(sd, 1, "day");
        }
        html += "</tr>";
        h[i] = cellheight;
        cellheight += this._colsS.height;
    }
    html += "</table>";
    this._max_date = sd;

    b.innerHTML = html;

    this._scales = {};
    var divs = b.getElementsByTagName('div');
    for (var i = 0; i < rendered_dates.length; i++) { // [header, body, header, body, ...]
        var div = divs[(i * 2) + 1];
        var date = rendered_dates[i];
        this._scales[+date] = div;
    }
    for (var i = 0; i < rendered_dates.length; i++) {
        var date = rendered_dates[i];
        this.callEvent("onScaleAdd", [this._scales[+date], date]);
    }

    return sd;
};
scheduler.getLabel = function (property, key) {
    var sections = this.config.lightbox.sections;
    for (var i = 0; i < sections.length; i++) {
        if (sections[i].map_to == property) {
            var options = sections[i].options;
            for (var j = 0; j < options.length; j++) {
                if (options[j].key == key) {
                    return options[j].label;
                }
            }
        }
    }
    return "";
};
scheduler.updateCollection = function (list_name, collection) {
    var list = scheduler.serverList(list_name);
    if (!list) return false;
    list.splice(0, list.length);
    list.push.apply(list, collection || []);
    scheduler.callEvent("onOptionsLoad", []);
    scheduler.resetLightbox();
    return true;
};
scheduler._lame_clone = function (object, cache) {
    var i, t, result; // iterator, types array, result

    cache = cache || [];

    for (i = 0; i < cache.length; i += 2)
        if (object === cache[i])
            return cache[i + 1];

    if (object && typeof object == "object") {
        result = {};
        t = [Array, Date, Number, String, Boolean];
        for (i = 0; i < t.length; i++) {
            if (object instanceof t[i])
                result = i ? new t[i](object) : new t[i](); // first one is array
        }
        cache.push(object, result);
        for (i in object) {
            if (Object.prototype.hasOwnProperty.apply(object, [i]))
                result[i] = scheduler._lame_clone(object[i], cache)
        }
    }
    return result || object;
};
scheduler._lame_copy = function (target, source) {
    for (var key in source) {
        if (source.hasOwnProperty(key)) {
            target[key] = source[key];
        }
    }
    return target;
};
scheduler._get_date_from_pos = function (pos) {
    var start = this._min_date.valueOf() + (pos.y * this.config.time_step + (this._table_view ? 0 : pos.x) * 24 * 60) * 60000;
    return new Date(this._correct_shift(start));
};
// n_ev - native event
scheduler.getActionData = function (n_ev) {
    var pos = this._mouse_coords(n_ev);
    return {
        date: this._get_date_from_pos(pos),
        section: pos.section
    };
};
scheduler._focus = function (node, select) {
    if (node && node.focus) {
        if (this.config.touch) {
            window.setTimeout(function () {
                node.focus();
            }, 100);
        } else {
            if (select && node.select) node.select();
            node.focus();
        }
    }
}

//non-linear scales
scheduler._get_real_event_length = function (sd, fd, obj) {
    var ev_length = fd - sd;
    var hours = (obj._start_correction + obj._end_correction) || 0;
    var ignore = this["ignore_" + this._mode];

    var start_slot = 0;
    if (obj.render) {
        start_slot = this._get_date_index(obj, sd);
        var end_slot = this._get_date_index(obj, fd);
    } else {
        var end_slot = Math.round(ev_length / 60 / 60 / 1000 / 24);
    }

    while (start_slot < end_slot) {
        var check = scheduler.date.add(fd, -obj.x_step, obj.x_unit);
        if (ignore && ignore(fd))
            ev_length -= (fd - check);
        else
            ev_length -= hours;

        fd = check;
        end_slot--;
    }
    return ev_length;
};
scheduler._get_fictional_event_length = function (end_date, ev_length, obj, back) {
    var sd = new Date(end_date);
    var dir = back ? -1 : 1;

    //get difference caused by first|last hour
    if (obj._start_correction || obj._end_correction) {
        if (back)
            var today = (sd.getHours() * 60 + sd.getMinutes()) - (obj.first_hour || 0) * 60;
        else
            var today = (obj.last_hour || 0) * 60 - (sd.getHours() * 60 + sd.getMinutes());
        var per_day = (obj.last_hour - obj.first_hour) * 60;
        var days = Math.ceil((ev_length / (60 * 1000) - today) / per_day);
        ev_length += days * (24 * 60 - per_day) * 60 * 1000;
    }

    var fd = new Date(end_date * 1 + ev_length * dir);
    var ignore = this["ignore_" + this._mode];

    var start_slot = 0;
    if (obj.render) {
        start_slot = this._get_date_index(obj, sd);
        var end_slot = this._get_date_index(obj, fd);
    } else {
        var end_slot = Math.round(ev_length / 60 / 60 / 1000 / 24);
    }

    while (start_slot * dir <= end_slot * dir) {
        var check = scheduler.date.add(sd, obj.x_step * dir, obj.x_unit);
        if (ignore && ignore(sd)) {
            ev_length += (check - sd) * dir;
            end_slot += dir;
        }

        sd = check;
        start_slot += dir;
    }

    return ev_length;
};

scheduler.date = {
    init: function () {
        var s = scheduler.locale.date.month_short;
        var t = scheduler.locale.date.month_short_hash = {};
        for (var i = 0; i < s.length; i++)
            t[s[i]] = i;

        var s = scheduler.locale.date.month_full;
        var t = scheduler.locale.date.month_full_hash = {};
        for (var i = 0; i < s.length; i++)
            t[s[i]] = i;
    },
    date_part: function (date) {
        date.setHours(0);
        date.setMinutes(0);
        date.setSeconds(0);
        date.setMilliseconds(0);
        if (date.getHours() != 0)
            date.setTime(date.getTime() + 60 * 60 * 1000 * (24 - date.getHours()));
        return date;
    },
    time_part: function (date) {
        return (date.valueOf() / 1000 - date.getTimezoneOffset() * 60) % 86400;
    },
    week_start: function (date) {
        var shift = date.getDay();
        if (scheduler.config.start_on_monday) {
            if (shift === 0) shift = 6;
            else shift--;
        }
        return this.date_part(this.add(date, -1 * shift, "day"));
    },
    month_start: function (date) {
        date.setDate(1);
        return this.date_part(date);
    },
    year_start: function (date) {
        date.setMonth(0);
        return this.month_start(date);
    },
    day_start: function (date) {
        return this.date_part(date);
    },
    add: function (date, inc, mode) {
        var ndate = new Date(date.valueOf());
        switch (mode) {
        case "week":
            inc *= 7;
        case "day":
            ndate.setDate(ndate.getDate() + inc);
            if (!date.getHours() && ndate.getHours()) //shift to yesterday
                ndate.setTime(ndate.getTime() + 60 * 60 * 1000 * (24 - ndate.getHours()));
            break;
        case "month":
            ndate.setMonth(ndate.getMonth() + inc);
            break;
        case "year":
            ndate.setYear(ndate.getFullYear() + inc);
            break;
        case "hour":
            ndate.setHours(ndate.getHours() + inc);
            break;
        case "minute":
            ndate.setMinutes(ndate.getMinutes() + inc);
            break;
        default:
            return scheduler.date["add_" + mode](date, inc, mode);
        }
        return ndate;
    },
    to_fixed: function (num) {
        if (num < 10) return "0" + num;
        return num;
    },
    copy: function (date) {
        return new Date(date.valueOf());
    },
    date_to_str: function (format, utc) {
        format = format.replace(/%[a-zA-Z]/g, function (a) {
            switch (a) {
            case "%d":
                return "\"+scheduler.date.to_fixed(date.getDate())+\"";
            case "%m":
                return "\"+scheduler.date.to_fixed((date.getMonth()+1))+\"";
            case "%j":
                return "\"+date.getDate()+\"";
            case "%n":
                return "\"+(date.getMonth()+1)+\"";
            case "%y":
                return "\"+scheduler.date.to_fixed(date.getFullYear()%100)+\"";
            case "%Y":
                return "\"+date.getFullYear()+\"";
            case "%D":
                return "\"+scheduler.locale.date.day_short[date.getDay()]+\"";
            case "%l":
                return "\"+scheduler.locale.date.day_full[date.getDay()]+\"";
            case "%M":
                return "\"+scheduler.locale.date.month_short[date.getMonth()]+\"";
            case "%F":
                return "\"+scheduler.locale.date.month_full[date.getMonth()]+\"";
            case "%h":
                return "\"+scheduler.date.to_fixed((date.getHours()+11)%12+1)+\"";
            case "%g":
                return "\"+((date.getHours()+11)%12+1)+\"";
            case "%G":
                return "\"+date.getHours()+\"";
            case "%H":
                return "\"+scheduler.date.to_fixed(date.getHours())+\"";
            case "%i":
                return "\"+scheduler.date.to_fixed(date.getMinutes())+\"";
            case "%a":
                return "\"+(date.getHours()>11?\"pm\":\"am\")+\"";
            case "%A":
                return "\"+(date.getHours()>11?\"PM\":\"AM\")+\"";
            case "%s":
                return "\"+scheduler.date.to_fixed(date.getSeconds())+\"";
            case "%W":
                return "\"+scheduler.date.to_fixed(scheduler.date.getISOWeek(date))+\"";
            default:
                return a;
            }
        });
        if (utc) format = format.replace(/date\.get/g, "date.getUTC");
        return new Function("date", "return \"" + format + "\";");
    },
    str_to_date: function (format, utc) {
        var splt = "var temp=date.match(/[a-zA-Z]+|[0-9]+/g);";
        var mask = format.match(/%[a-zA-Z]/g);
        for (var i = 0; i < mask.length; i++) {
            switch (mask[i]) {
            case "%j":
            case "%d":
                splt += "set[2]=temp[" + i + "]||1;";
                break;
            case "%n":
            case "%m":
                splt += "set[1]=(temp[" + i + "]||1)-1;";
                break;
            case "%y":
                splt += "set[0]=temp[" + i + "]*1+(temp[" + i + "]>50?1900:2000);";
                break;
            case "%g":
            case "%G":
            case "%h":
            case "%H":
                splt += "set[3]=temp[" + i + "]||0;";
                break;
            case "%i":
                splt += "set[4]=temp[" + i + "]||0;";
                break;
            case "%Y":
                splt += "set[0]=temp[" + i + "]||0;";
                break;
            case "%a":
            case "%A":
                splt += "set[3]=set[3]%12+((temp[" + i + "]||'').toLowerCase()=='am'?0:12);";
                break;
            case "%s":
                splt += "set[5]=temp[" + i + "]||0;";
                break;
            case "%M":
                splt += "set[1]=scheduler.locale.date.month_short_hash[temp[" + i + "]]||0;";
                break;
            case "%F":
                splt += "set[1]=scheduler.locale.date.month_full_hash[temp[" + i + "]]||0;";
                break;
            default:
                break;
            }
        }
        var code = "set[0],set[1],set[2],set[3],set[4],set[5]";
        if (utc) code = " Date.UTC(" + code + ")";
        return new Function("date", "var set=[0,0,1,0,0,0]; " + splt + " return new Date(" + code + ");");
    },
    getISOWeek: function (ndate) {
        if (!ndate) return false;
        var nday = ndate.getDay();
        if (nday === 0) {
            nday = 7;
        }
        var first_thursday = new Date(ndate.valueOf());
        first_thursday.setDate(ndate.getDate() + (4 - nday));
        var year_number = first_thursday.getFullYear(); // year of the first Thursday
        var ordinal_date = Math.round((first_thursday.getTime() - new Date(year_number, 0, 1).getTime()) / 86400000); //ordinal date of the first Thursday - 1 (so not really ordinal date)
        var week_number = 1 + Math.floor(ordinal_date / 7);
        return week_number;
    },
    getUTCISOWeek: function (ndate) {
        return this.getISOWeek(this.convert_to_utc(ndate));
    },
    convert_to_utc: function (date) {
        return new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(), date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
    }
};
scheduler.locale = {
    date: {
        month_full: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
        month_short: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
        day_full: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
        day_short: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]
    },
    labels: {
        dhx_cal_today_button: "Today",
        day_tab: "Day",
        week_tab: "Week",
        month_tab: "Month",
        new_event: "New event",
        icon_save: "Save",
        icon_cancel: "Cancel",
        icon_details: "Details",
        icon_edit: "Edit",
        icon_delete: "Delete",
        confirm_closing: "", //Your changes will be lost, are your sure ?
        confirm_deleting: "Event will be deleted permanently, are you sure?",
        section_description: "Description",
        section_time: "Time period",
        full_day: "Full day",

        /*recurring events*/
        confirm_recurring: "Do you want to edit the whole set of repeated events?",
        section_recurring: "Repeat event",
        button_recurring: "Disabled",
        button_recurring_open: "Enabled",
        button_edit_series: "Edit series",
        button_edit_occurrence: "Edit occurrence",

        /*agenda view extension*/
        agenda_tab: "Agenda",
        date: "Date",
        description: "Description",

        /*year view extension*/
        year_tab: "Year",

        /* week agenda extension */
        week_agenda_tab: "Agenda",

        /*grid view extension*/
        grid_tab: "Grid",
        drag_to_create: "Drag to create",
        drag_to_move: "Drag to move"
    }
};


/*
%e  Day of the month without leading zeros (01..31)
%d  Day of the month, 2 digits with leading zeros (01..31)
%j  Day of the year, 3 digits with leading zeros (001..366)
%a  A textual representation of a day, two letters
%W  A full textual representation of the day of the week

%c  Numeric representation of a month, without leading zeros (0..12)
%m  Numeric representation of a month, with leading zeros (00..12)
%b  A short textual representation of a month, three letters (Jan..Dec)
%M  A full textual representation of a month, such as January or March (January..December)

%y  A two digit representation of a year (93..03)
%Y  A full numeric representation of a year, 4 digits (1993..03)
*/

scheduler.config = {
    default_date: "%j %M %Y",
    month_date: "%F %Y",
    load_date: "%Y-%m-%d",
    week_date: "%l",
    day_date: "%D, %F %j",
    hour_date: "%H:%i",
    month_day: "%d",
    xml_date: "%m/%d/%Y %H:%i",
    api_date: "%d-%m-%Y %H:%i",
    preserve_length: true,
    time_step: 5,

    start_on_monday: 1,
    first_hour: 0,
    last_hour: 24,
    readonly: false,
    drag_resize: 1,
    drag_move: 1,
    drag_create: 1,
    dblclick_create: 1,
    edit_on_create: 1,
    details_on_create: 0,

    cascade_event_display: false,
    cascade_event_count: 4,
    cascade_event_margin: 30,

    multi_day: true,
    multi_day_height_limit: 0,

    drag_lightbox: true,
    preserve_scroll: true,
    select: true,

    server_utc: false,
    touch: true,
    touch_tip: true,
    touch_drag: 500,
    quick_info_detached: true,

    positive_closing: false,

    icons_edit: ["icon_save", "icon_cancel"],
    icons_select: ["icon_details", "icon_edit", "icon_delete"],
    buttons_left: ["dhx_save_btn", "dhx_cancel_btn"],
    buttons_right: ["dhx_delete_btn"],
    lightbox: {
        sections: [{
            name: "description",
            height: 200,
            map_to: "text",
            type: "textarea",
            focus: true
        }, {
            name: "time",
            height: 72,
            type: "time",
            map_to: "auto"
        }]
    },
    highlight_displayed_event: true,
    left_border: false
};
scheduler.templates = {};
scheduler.init_templates = function () {
    var labels = scheduler.locale.labels;
    labels.dhx_save_btn = labels.icon_save;
    labels.dhx_cancel_btn = labels.icon_cancel;
    labels.dhx_delete_btn = labels.icon_delete;


    var d = scheduler.date.date_to_str;
    var c = scheduler.config;
    var f = function (a, b) {
        for (var c in b)
            if (!a[c]) a[c] = b[c];
    };
    f(scheduler.templates, {
        day_date: d(c.default_date),
        month_date: d(c.month_date),
        week_date: function (d1, d2) {
            return scheduler.templates.day_date(d1) + " &ndash; " + scheduler.templates.day_date(scheduler.date.add(d2, -1, "day"));
        },
        day_scale_date: d(c.default_date),
        month_scale_date: d(c.week_date),
        week_scale_date: d(c.day_date),
        hour_scale: d(c.hour_date),
        time_picker: d(c.hour_date),
        event_date: d(c.hour_date),
        month_day: d(c.month_day),
        xml_date: scheduler.date.str_to_date(c.xml_date, c.server_utc),
        load_format: d(c.load_date, c.server_utc),
        xml_format: d(c.xml_date, c.server_utc),
        api_date: scheduler.date.str_to_date(c.api_date),
        event_header: function (start, end, ev) {
            return scheduler.templates.event_date(start) + " - " + scheduler.templates.event_date(end);
        },
        event_text: function (start, end, ev) {
            return ev.text;
        },
        event_class: function (start, end, ev) {
            return "";
        },
        month_date_class: function (d) {
            return "";
        },
        week_date_class: function (d) {
            return "";
        },
        event_bar_date: function (start, end, ev) {
            return scheduler.templates.event_date(start) + " ";
        },
        event_bar_text: function (start, end, ev) {
            return ev.text;
        },
        month_events_link: function (date, count) {
            return "<a title='Click to view all "+ count + " events'>View all of " + count + " events</a>";
        }
    });
    this.callEvent("onTemplatesReady", []);
};



scheduler.uid = function () {
    if (!this._seed) this._seed = (new Date).valueOf();
    return this._seed++;
};
scheduler._events = {};
scheduler.clearAll = function () {
    this._events = {};
    this._loaded = {};
    this.clear_view();
    this.callEvent("onClearAll", []);
};
scheduler.addEvent = function (start_date, end_date, text, id, extra_data) {
    if (!arguments.length)
        return this.addEventNow();
    var ev = start_date;
    if (arguments.length != 1) {
        ev = extra_data || {};
        ev.start_date = start_date;
        ev.end_date = end_date;
        ev.text = text;
        ev.id = id;
    }
    ev.id = ev.id || scheduler.uid();
    ev.text = ev.text || "";

    if (typeof ev.start_date == "string") ev.start_date = this.templates.api_date(ev.start_date);
    if (typeof ev.end_date == "string") ev.end_date = this.templates.api_date(ev.end_date);

    var d = (this.config.event_duration || this.config.time_step) * 60000;
    if (ev.start_date.valueOf() == ev.end_date.valueOf())
        ev.end_date.setTime(ev.end_date.valueOf() + d);

    ev._timed = this.isOneDayEvent(ev);

    var is_new = !this._events[ev.id];
    this._events[ev.id] = ev;
    this.event_updated(ev);
    if (!this._loading)
        this.callEvent(is_new ? "onEventAdded" : "onEventChanged", [ev.id, ev]);
    return ev.id;
};
scheduler.deleteEvent = function (id, silent) {
    var ev = this._events[id];
    if (!silent && (!this.callEvent("onBeforeEventDelete", [id, ev]) || !this.callEvent("onConfirmedBeforeEventDelete", [id, ev])))
        return;
    if (ev) {
        delete this._events[id];
        this.unselect(id);
        this.event_updated(ev);
    }

    this.callEvent("onEventDeleted", [id, ev]);
};
scheduler.getEvent = function (id) {
    return this._events[id];
};
scheduler.setEvent = function (id, hash) {
    if (!hash.id)
        hash.id = id;

    this._events[id] = hash;
};
scheduler.for_rendered = function (id, method) {
    for (var i = this._rendered.length - 1; i >= 0; i--)
        if (this._rendered[i].getAttribute("event_id") == id)
            method(this._rendered[i], i);
};
scheduler.changeEventId = function (id, new_id) {
    if (id == new_id) return;
    var ev = this._events[id];
    if (ev) {
        ev.id = new_id;
        this._events[new_id] = ev;
        delete this._events[id];
    }
    this.for_rendered(id, function (r) {
        r.setAttribute("event_id", new_id);
    });
    if (this._select_id == id) this._select_id = new_id;
    if (this._edit_id == id) this._edit_id = new_id;
    //if (this._drag_id==id) this._drag_id=new_id;
    this.callEvent("onEventIdChange", [id, new_id]);
};

(function () {
    var attrs = ["text", "Text", "start_date", "StartDate", "end_date", "EndDate"];
    var create_getter = function (name) {
        return function (id) {
            return (scheduler.getEvent(id))[name];
        };
    };
    var create_setter = function (name) {
        return function (id, value) {
            var ev = scheduler.getEvent(id);
            ev[name] = value;
            ev._changed = true;
            ev._timed = this.isOneDayEvent(ev);
            scheduler.event_updated(ev, true);
        };
    };
    for (var i = 0; i < attrs.length; i += 2) {
        scheduler["getEvent" + attrs[i + 1]] = create_getter(attrs[i]);
        scheduler["setEvent" + attrs[i + 1]] = create_setter(attrs[i]);
    }
})();

scheduler.event_updated = function (ev, force) {
    if (this.is_visible_events(ev))
        this.render_view_data();
    else
        this.clear_event(ev.id);
};
scheduler.is_visible_events = function (ev) {
    return (ev.start_date < this._max_date && this._min_date < ev.end_date);
};
scheduler.isOneDayEvent = function (ev) {
    var delta = ev.end_date.getDate() - ev.start_date.getDate();

    if (!delta)
        return ev.start_date.getMonth() == ev.end_date.getMonth() && ev.start_date.getFullYear() == ev.end_date.getFullYear();
    else {
        if (delta < 0) delta = Math.ceil((ev.end_date.valueOf() - ev.start_date.valueOf()) / (24 * 60 * 60 * 1000));
        return (delta == 1 && !ev.end_date.getHours() && !ev.end_date.getMinutes() && (ev.start_date.getHours() || ev.start_date.getMinutes()));
    }

};
scheduler.get_visible_events = function (only_timed) {
    //not the best strategy for sure
    var stack = [];

    for (var id in this._events)
        if (this.is_visible_events(this._events[id]))
            if (!only_timed || this._events[id]._timed)
                if (this.filter_event(id, this._events[id]))
                    stack.push(this._events[id]);

    return stack;
};
scheduler.filter_event = function (id, ev) {
    var filter = this["filter_" + this._mode];
    return (filter) ? filter(id, ev) : true;
};
scheduler._is_main_area_event = function (ev) {
    return !!ev._timed;
};
scheduler.render_view_data = function (evs, hold) {
    if (!evs) {
        if (this._not_render) {
            this._render_wait = true;
            return;
        }
        this._render_wait = false;

        this.clear_view();
        evs = this.get_visible_events(!(this._table_view || this.config.multi_day));
    }
    for (var i = 0, len = evs.length; i < len; i++) {
        this._recalculate_timed(evs[i]);
    }

    //do not need to use multiday block , so hard code it, may switch back in the future
    if (false && this.config.multi_day && !this._table_view) {

        var tvs = [];
        var tvd = [];
        for (var i = 0; i < evs.length; i++) {
            if (this._is_main_area_event(evs[i]))
                tvs.push(evs[i]);
            else
                tvd.push(evs[i]);
        }

        // multiday events
        this._rendered_location = this._els['dhx_multi_day'][0];
        this._table_view = true;
        this.render_data(tvd, hold);
        this._table_view = false;

        // normal events
        this._rendered_location = this._els['dhx_cal_data'][0];
        this._table_view = false;
        this.render_data(tvs, hold);

    } else {
        this._rendered_location = this._els['dhx_cal_data'][0];
        this.render_data(evs, hold);
    }
};


scheduler._view_month_day = function (e) {
    var date = scheduler.getActionData(e).date;
    if (!scheduler.callEvent("onViewMoreClick", [date]))
        return;
    scheduler.setCurrentView(date, "day");
};

scheduler._render_month_link = function (ev) {
    var parent = this._rendered_location;
    var toRender = this._lame_clone(ev);

    //render links in each cell of multiday events
    for (var d = ev._sday; d < ev._eday; d++) {

        toRender._sday = d;
        toRender._eday = d + 1;

        var date = scheduler.date;
        var curr = scheduler._min_date;
        curr = date.add(curr, toRender._sweek, "week");
        curr = date.add(curr, toRender._sday, "day");
        var count = scheduler.getEvents(curr, date.add(curr, 1, "day")).length;

        var pos = this._get_event_bar_pos(toRender);
        var widt = (pos.x2 - pos.x);

        var el = document.createElement("div");
        el.onclick = function (e) {
            scheduler._view_month_day(e || event);
        };
        el.className = "dhx_month_link";
        el.style.top = pos.y + "px";
        el.style.left = pos.x + "px";
        el.style.width = widt + "px";
        el.innerHTML = scheduler.templates.month_events_link(curr, count);
        this._rendered.push(el);

        parent.appendChild(el);
    }
};

scheduler._recalculate_timed = function (id) {
    if (!id) return;
    if (typeof (id) != "object")
        var ev = this._events[id];
    else
        var ev = id;
    if (!ev) return;
    ev._timed = scheduler.isOneDayEvent(ev);
};
scheduler.attachEvent("onEventChanged", scheduler._recalculate_timed);
scheduler.attachEvent("onEventAdded", scheduler._recalculate_timed);

scheduler.render_data = function (evs, hold) {
    evs = this._pre_render_events(evs, hold);

    for (var i = 0; i < evs.length; i++){
        if (this._table_view) {
            if (scheduler._mode != 'month') {
                this.render_event_bar(evs[i]); //may be multiday section on other views
            } else {
                var max_evs = scheduler.config.max_month_events;
                if (max_evs !== max_evs * 1 || evs[i]._sorder < max_evs) {
                    //of max number events per month cell is set and event can be rendered
                    this.render_event_bar(evs[i]);
                } else if (max_evs !== undefined && evs[i]._sorder == max_evs) {
                    //render 'view more' links
                    scheduler._render_month_link(evs[i]);
                } else {
                    //do not render events with ordinal number > maximum events per cell
                }
            }
        } else
            this.render_event(evs[i]);
    }
};
scheduler._pre_render_events = function (evs, hold) {
    var hb = this.xy.bar_height;
    var h_old = this._colsS.heights;
    var h = this._colsS.heights = [0, 0, 0, 0, 0, 0, 0];
    var data = this._els["dhx_cal_data"][0];

    if (!this._table_view)
        evs = this._pre_render_events_line(evs, hold); //ignore long events for now
    else
        evs = this._pre_render_events_table(evs, hold);

    if (this._table_view) {
        if (hold)
            this._colsS.heights = h_old;
        else {
            var evl = data.firstChild;
            if (evl.rows) {
                for (var i = 0; i < evl.rows.length; i++) {
                    h[i]++;
                    if ((h[i]) * hb > this._colsS.height - 22) { // 22 - height of cell's header
                        //we have overflow, update heights
                        var cells = evl.rows[i].cells;

                        var cHeight = this._colsS.height - 22;
                        if (this.config.max_month_events * 1 !== this.config.max_month_events || h[i] <= this.config.max_month_events) {
                            cHeight = h[i] * hb;
                        } else if ((this.config.max_month_events + 1) * hb > this._colsS.height - 22) {
                            cHeight = (this.config.max_month_events + 1) * hb;
                        }

                        for (var j = 0; j < cells.length; j++) {
                            cells[j].childNodes[1].style.height = cHeight + "px";
                        }
                        h[i] = (h[i - 1] || 0) + cells[0].offsetHeight;
                    }
                    h[i] = (h[i - 1] || 0) + evl.rows[i].cells[0].offsetHeight;
                }
                h.unshift(0);
                if (evl.parentNode.offsetHeight < evl.parentNode.scrollHeight && !evl._h_fix && scheduler.xy.scroll_width) {
                    //we have v-scroll, decrease last day cell
                    for (var i = 0; i < evl.rows.length; i++) {
                        //get last visible cell
                        var last = 6;
                        while (this._ignores[last]) last--;

                        var cell = evl.rows[i].cells[last].childNodes[0];
                        var w = cell.offsetWidth - scheduler.xy.scroll_width + "px";
                        cell.style.width = w;
                        cell.nextSibling.style.width = w;
                    }
                    evl._h_fix = true;
                }
            } else {
                if (!evs.length && this._els["dhx_multi_day"][0].style.visibility == "visible")
                    h[0] = -1;
                if (evs.length || h[0] == -1) {
                    //shift days to have space for multiday events
                    var childs = evl.parentNode.childNodes;

                    // +1 so multiday events would have 2px from top and 2px from bottom by default
                    var full_multi_day_height = (h[0] + 1) * hb + 1;

                    var used_multi_day_height = full_multi_day_height;
                    var used_multi_day_height_css = full_multi_day_height + "px";
                    if (this.config.multi_day_height_limit) {
                        used_multi_day_height = Math.min(full_multi_day_height, this.config.multi_day_height_limit);
                        used_multi_day_height_css = used_multi_day_height + "px";
                    }

                    data.style.top = (this._els["dhx_cal_navline"][0].offsetHeight + this._els["dhx_cal_header"][0].offsetHeight + used_multi_day_height) + 'px';
                    data.style.height = (this._obj.offsetHeight - parseInt(data.style.top, 10) - (this.xy.margin_top || 0)) + 'px';

                    var multi_day_section = this._els["dhx_multi_day"][0];
                    multi_day_section.style.height = used_multi_day_height_css;
                    multi_day_section.style.visibility = (h[0] == -1 ? "hidden" : "visible");

                    // icon
                    var multi_day_icon = this._els["dhx_multi_day"][1];
                    multi_day_icon.style.height = used_multi_day_height_css;
                    multi_day_icon.style.visibility = (h[0] == -1 ? "hidden" : "visible");
                    multi_day_icon.className = h[0] ? "dhx_multi_day_icon" : "dhx_multi_day_icon_small";
                    this._dy_shift = (h[0] + 1) * hb;
                    h[0] = 0;

                    if (used_multi_day_height != full_multi_day_height) {
                        data.style.top = (parseInt(data.style.top) + 2) + "px";

                        multi_day_section.style.overflowY = "auto";
                        multi_day_section.style.width = (parseInt(multi_day_section.style.width) - 2) + "px";

                        multi_day_icon.style.position = "fixed";
                        multi_day_icon.style.top = "";
                        multi_day_icon.style.left = "";
                    }
                }
            }
        }
    }

    return evs;
};
scheduler._get_event_sday = function (ev) {
    return Math.floor((ev.start_date.valueOf() - this._min_date.valueOf()) / (24 * 60 * 60 * 1000));
};
scheduler._get_event_mapped_end_date = function (ev) {
    var end_date = ev.end_date;
    if (this.config.separate_short_events) {
        var ev_duration = (ev.end_date - ev.start_date) / 60000; // minutes
        if (ev_duration < this._min_mapped_duration) {
            end_date = this.date.add(end_date, this._min_mapped_duration - ev_duration, "minute");
        }
    }
    return end_date;
};
scheduler._pre_render_events_line = function (evs, hold) {
    evs.sort(function (a, b) {
        if (a.start_date.valueOf() == b.start_date.valueOf())
            return a.id > b.id ? 1 : -1;
        return a.start_date > b.start_date ? 1 : -1;
    });
    var days = []; //events by weeks
    var evs_originals = [];

    this._min_mapped_duration = Math.ceil(this.xy.min_event_height * 60 / this.config.hour_size_px); // values could change along the way

    for (var i = 0; i < evs.length; i++) {
        var ev = evs[i];

        //check date overflow
        var sd = ev.start_date;
        var ed = ev.end_date;
        //check scale overflow
        var sh = sd.getHours();
        var eh = ed.getHours();

        ev._sday = this._get_event_sday(ev); // sday based on event start_date
        if (this._ignores[ev._sday]) {
            //ignore event
            evs.splice(i, 1);
            i--;
            continue;
        }

        if (!days[ev._sday]) days[ev._sday] = [];

        if (!hold) {
            ev._inner = false;

            var stack = days[ev._sday];

            while (stack.length) {
                var t_ev = stack[stack.length - 1];
                var t_end_date = this._get_event_mapped_end_date(t_ev);
                if (t_end_date.valueOf() <= ev.start_date.valueOf()) {
                    stack.splice(stack.length - 1, 1);
                } else {
                    break;
                }
            }

            var sorderSet = false;
            for (var j = 0; j < stack.length; j++) {
                var t_ev = stack[j];
                var t_end_date = this._get_event_mapped_end_date(t_ev);
                if (t_end_date.valueOf() <= ev.start_date.valueOf()) {
                    sorderSet = true;
                    ev._sorder = t_ev._sorder;
                    stack.splice(j, 1);
                    ev._inner = true;
                    break;
                }
            }

            if (stack.length)
                stack[stack.length - 1]._inner = true;

            if (!sorderSet) {
                if (stack.length) {
                    if (stack.length <= stack[stack.length - 1]._sorder) {
                        if (!stack[stack.length - 1]._sorder)
                            ev._sorder = 0;
                        else
                            for (j = 0; j < stack.length; j++) {
                                var _is_sorder = false;
                                for (var k = 0; k < stack.length; k++) {
                                    if (stack[k]._sorder == j) {
                                        _is_sorder = true;
                                        break;
                                    }
                                }
                                if (!_is_sorder) {
                                    ev._sorder = j;
                                    break;
                                }
                            }
                        ev._inner = true;
                    } else {
                        var _max_sorder = stack[0]._sorder;
                        for (j = 1; j < stack.length; j++) {
                            if (stack[j]._sorder > _max_sorder)
                                _max_sorder = stack[j]._sorder;
                        }
                        ev._sorder = _max_sorder + 1;
                        ev._inner = false;
                    }

                } else
                    ev._sorder = 0;
            }

            stack.push(ev);

            if (stack.length > (stack.max_count || 0)) {
                stack.max_count = stack.length;
                ev._count = stack.length;
            } else {
                ev._count = (ev._count) ? ev._count : 1;
            }
        }

        if (sh < this.config.first_hour || eh >= this.config.last_hour) {
            // Need to create copy of event as we will be changing it's start/end date
            // e.g. first_hour = 11 and event.start_date hours = 9. Need to preserve that info
            evs_originals.push(ev);
            evs[i] = ev = this._copy_event(ev);

            if (sh < this.config.first_hour) {
                ev.start_date.setHours(this.config.first_hour);
                ev.start_date.setMinutes(0);
            }
            if (eh >= this.config.last_hour) {
                ev.end_date.setMinutes(0);
                ev.end_date.setHours(this.config.last_hour);
            }

            if (ev.start_date > ev.end_date || sh == this.config.last_hour) {
                evs.splice(i, 1);
                i--;
                continue;
            }
        }
    }
    if (!hold) {
        for (var i = 0; i < evs.length; i++) {
            evs[i]._count = days[evs[i]._sday].max_count;
        }
        for (var i = 0; i < evs_originals.length; i++)
            evs_originals[i]._count = days[evs_originals[i]._sday].max_count;
    }

    return evs;
};
scheduler._time_order = function (evs) {
    evs.sort(function (a, b) {
        if (a.start_date.valueOf() == b.start_date.valueOf()) {
            if (a._timed && !b._timed) return 1;
            if (!a._timed && b._timed) return -1;
            return a.id > b.id ? 1 : -1;
        }
        return a.start_date > b.start_date ? 1 : -1;
    });
};
scheduler._pre_render_events_table = function (evs, hold) { // max - max height of week slot
    this._time_order(evs);
    var out = [];
    var weeks = [
        [],
        [],
        [],
        [],
        [],
        [],
        []
    ]; //events by weeks
    var max = this._colsS.heights;
    var start_date;
    var cols = this._cols.length;
    var chunks_info = {};

    for (var i = 0; i < evs.length; i++) {
        var ev = evs[i];
        var id = ev.id;
        if (!chunks_info[id]) {
            chunks_info[id] = {
                first_chunk: true,
                last_chunk: true
            };
        }
        var chunk_info = chunks_info[id];
        var sd = (start_date || ev.start_date);
        var ed = ev.end_date;
        //trim events which are crossing through current view
        if (sd < this._min_date) {
            chunk_info.first_chunk = false;
            sd = this._min_date;
        }
        if (ed > this._max_date) {
            chunk_info.last_chunk = false;
            ed = this._max_date;
        }

        var locate_s = this.locate_holder_day(sd, false, ev);
        ev._sday = locate_s % cols;

        //skip single day events for ignored dates
        if (this._ignores[ev._sday] && ev._timed) continue;

        var locate_e = this.locate_holder_day(ed, true, ev) || cols;
        ev._eday = (locate_e % cols) || cols; //cols used to fill full week, when event end on monday
        ev._length = locate_e - locate_s;

        //3600000 - compensate 1 hour during winter|summer time shift
        ev._sweek = Math.floor((this._correct_shift(sd.valueOf(), 1) - this._min_date.valueOf()) / (60 * 60 * 1000 * 24 * cols));

        //current slot
        var stack = weeks[ev._sweek];
        //check order position
        var stack_line;

        for (stack_line = 0; stack_line < stack.length; stack_line++)
            if (stack[stack_line]._eday <= ev._sday)
                break;

        if (!ev._sorder || !hold) {
            ev._sorder = stack_line;
        }

        if (ev._sday + ev._length <= cols) {
            start_date = null;
            out.push(ev);
            stack[stack_line] = ev;
            //get max height of slot
            max[ev._sweek] = stack.length - 1;
            ev._first_chunk = chunk_info.first_chunk;
            ev._last_chunk = chunk_info.last_chunk;
        } else { // split long event in chunks
            var copy = this._copy_event(ev);
            copy.id = ev.id;
            copy._length = cols - ev._sday;
            copy._eday = cols;
            copy._sday = ev._sday;
            copy._sweek = ev._sweek;
            copy._sorder = ev._sorder;
            copy.end_date = this.date.add(sd, copy._length, "day");
            copy._first_chunk = chunk_info.first_chunk;
            if (chunk_info.first_chunk) {
                chunk_info.first_chunk = false;
            }

            out.push(copy);
            stack[stack_line] = copy;
            start_date = copy.end_date;
            //get max height of slot
            max[ev._sweek] = stack.length - 1;
            i--;
            continue; //repeat same step
        }
    }
    return out;
};
scheduler._copy_dummy = function () {
    var a = new Date(this.start_date);
    var b = new Date(this.end_date);
    this.start_date = a;
    this.end_date = b;
};
scheduler._copy_event = function (ev) {
    this._copy_dummy.prototype = ev;
    return new this._copy_dummy();
    //return {start_date:ev.start_date, end_date:ev.end_date, text:ev.text, id:ev.id}
};
scheduler._rendered = [];
scheduler.clear_view = function () {
    for (var i = 0; i < this._rendered.length; i++) {
        var obj = this._rendered[i];
        if (obj.parentNode) obj.parentNode.removeChild(obj);
    }
    this._rendered = [];
};
scheduler.updateEvent = function (id) {
    var ev = this.getEvent(id);
    this.clear_event(id);

    if (ev && this.is_visible_events(ev) && this.filter_event(id, ev) && (this._table_view || this.config.multi_day || ev._timed)) {
        if (this.config.update_render)
            this.render_view_data();
        else
            this.render_view_data([ev], true);
    }
};
scheduler.clear_event = function (id) {
    this.for_rendered(id, function (node, i) {
        if (node.parentNode)
            node.parentNode.removeChild(node);
        scheduler._rendered.splice(i, 1);
    });
};
scheduler.render_event = function (ev) {
    var menu = scheduler.xy.menu_width;
    var menu_offset = (this.config.use_select_menu_space) ? 0 : menu;
    if (ev._sday < 0) return; //can occur in case of recurring event during time shift

    var parent = scheduler.locate_holder(ev._sday);
    if (!parent) return; //attempt to render non-visible event

    var sm = ev.start_date.getHours() * 60 + ev.start_date.getMinutes();
    var em = (ev.end_date.getHours() * 60 + ev.end_date.getMinutes()) || (scheduler.config.last_hour * 60);
    var ev_count = ev._count || 1;
    var ev_sorder = ev._sorder || 0;
    var top = (Math.round((sm * 60 * 1000 - this.config.first_hour * 60 * 60 * 1000) * this.config.hour_size_px / (60 * 60 * 1000))) % (this.config.hour_size_px * 24); //42px/hour
    var height = Math.max(scheduler.xy.min_event_height, (em - sm) * this.config.hour_size_px / 60); //42px/hour
    var width = Math.floor((parent.clientWidth - menu_offset) / ev_count);
    var left = ev_sorder * width;
    if (!ev._inner) width = width * (ev_count - ev_sorder);
    if (this.config.cascade_event_display) {
        var limit = this.config.cascade_event_count;
        var margin = this.config.cascade_event_margin;
        left = ev_sorder % limit * margin;
        var right = (ev._inner) ? (ev_count - ev_sorder - 1) % limit * margin / 2 : 0;
        width = Math.floor(parent.clientWidth - menu_offset - left - right);
    }

    var d = this._render_v_bar(ev.id, menu_offset + left, top, width, height, ev._text_style, scheduler.templates.event_header(ev.start_date, ev.end_date, ev), scheduler.templates.event_text(ev.start_date, ev.end_date, ev));

    this._rendered.push(d);
    parent.appendChild(d);

    left = left + parseInt(parent.style.left, 10) + menu_offset;

    if (this._edit_id == ev.id) {

        d.style.zIndex = 1; //fix overlapping issue
        width = Math.max(width - 4, scheduler.xy.editor_width);
        d = document.createElement("DIV");
        d.setAttribute("event_id", ev.id);
        this.set_xy(d, width, height - 20, left, top + 14);
        d.className = "dhx_cal_editor";

        var d2 = document.createElement("DIV");
        this.set_xy(d2, width - 6, height - 26);
        d2.style.cssText += ";margin:2px 2px 2px 2px;overflow:hidden;";

        d.appendChild(d2);
        this._els["dhx_cal_data"][0].appendChild(d);
        this._rendered.push(d);

        d2.innerHTML = "<textarea class='dhx_cal_editor'>" + ev.text + "</textarea>";
        if (this._quirks7) d2.firstChild.style.height = height - 12 + "px"; //IEFIX
        this._editor = d2.firstChild;
        this._editor.onkeydown = function (e) {
            if ((e || event).shiftKey) return true;
            var code = (e || event).keyCode;
            if (code == scheduler.keys.edit_save) scheduler.editStop(true);
            if (code == scheduler.keys.edit_cancel) scheduler.editStop(false);
        };
        this._editor.onselectstart = function (e) {
            return (e || event).cancelBubble = true;
        };
        scheduler._focus(d2.firstChild, true);
        //IE and opera can add x-scroll during focusing
        this._els["dhx_cal_data"][0].scrollLeft = 0;
    }
    if (this.xy.menu_width !== 0 && this._select_id == ev.id) {
        if (this.config.cascade_event_display && this._drag_mode)
            d.style.zIndex = 1; //fix overlapping issue for cascade view in case of dnd of selected event
        var icons = this.config["icons_" + ((this._edit_id == ev.id) ? "edit" : "select")];
        var icons_str = "";
        var bg_color = (ev.color ? ("background-color: " + ev.color + ";") : "");
        var color = (ev.textColor ? ("color: " + ev.textColor + ";") : "");
        for (var i = 0; i < icons.length; i++)
            icons_str += "<div class='dhx_menu_icon " + icons[i] + "' style='" + bg_color + "" + color + "' title='" + this.locale.labels[icons[i]] + "'></div>";
        var obj = this._render_v_bar(ev.id, left - menu + 1, top, menu, icons.length * 20 + 26 - 2, "", "<div style='" + bg_color + "" + color + "' class='dhx_menu_head'></div>", icons_str, true);
        obj.style.left = left - menu + 1;
        this._els["dhx_cal_data"][0].appendChild(obj);
        this._rendered.push(obj);
    }
};
scheduler._render_v_bar = function (id, x, y, w, h, style, contentA, contentB, bottom) {
    var d = document.createElement("DIV");
    var ev = this.getEvent(id);

    var cs = (bottom) ? "dhx_cal_event dhx_cal_select_menu" : "dhx_cal_event";

    var cse = scheduler.templates.event_class(ev.start_date, ev.end_date, ev);
    if (cse) cs = cs + " " + cse;

    var bg_color = (ev.color ? ("background:" + ev.color + ";") : "");
    var color = (ev.textColor ? ("color:" + ev.textColor + ";") : "");

    var html = '<div event_id="' + id + '" class="' + cs + '" style="position:absolute; top:' + y + 'px; left:' + x + 'px; width:' + (w - 4) + 'px; height:' + h + 'px;' + (style || "") + '"></div>';
    d.innerHTML = html;

    var container = d.cloneNode(true).firstChild;

    if (!bottom && scheduler.renderEvent(container, ev)) {
        return container;
    } else {
        container = d.firstChild;

        var inner_html = '<div class="dhx_event_move dhx_header" style=" width:' + (w - 6) + 'px;' + bg_color + '" >&nbsp;</div>';
        inner_html += '<div class="dhx_event_move dhx_title" style="' + bg_color + '' + color + '">' + contentA + '</div>';
        inner_html += '<div class="dhx_body" style=" width:' + (w - (this._quirks ? 4 : 14)) + 'px; height:' + (h - (this._quirks ? 20 : 30) + 1) + 'px;' + bg_color + '' + color + '">' + contentB + '</div>'; // +2 css specific, moved from render_event

        var footer_class = "dhx_event_resize dhx_footer";
        if (bottom)
            footer_class = "dhx_resize_denied " + footer_class;

        inner_html += '<div class="' + footer_class + '" style=" width:' + (w - 8) + 'px;' + (bottom ? ' margin-top:-1px;' : '') + '' + bg_color + '' + color + '" ></div>';

        container.innerHTML = inner_html;
    }

    return container;
};
scheduler.renderEvent = function () {
    return false;
},
scheduler.locate_holder = function (day) {
    if (this._mode == "day") return this._els["dhx_cal_data"][0].firstChild; //dirty
    return this._els["dhx_cal_data"][0].childNodes[day];
};
scheduler.locate_holder_day = function (date, past) {
    var day = Math.floor((this._correct_shift(date, 1) - this._min_date) / (60 * 60 * 24 * 1000));
    //when locating end data of event , we need to use next day if time part was defined
    if (past && this.date.time_part(date)) day++;
    return day;
};



scheduler._get_dnd_order = function (order, ev_height, max_height) {
    if (!this._drag_event)
        return order;
    if (!this._drag_event._orig_sorder)
        this._drag_event._orig_sorder = order;
    else
        order = this._drag_event._orig_sorder;

    var evTop = ev_height * order;
    while ((evTop + ev_height) > max_height) {
        order--;
        evTop -= ev_height;
    }
    return order;
};
//scheduler._get_event_bar_pos = function(sday, eday, week, drag){
scheduler._get_event_bar_pos = function (ev) {
    var x = this._colsS[ev._sday];
    var x2 = this._colsS[ev._eday];
    if (x2 == x) x2 = this._colsS[ev._eday + 1];
    var hb = this.xy.bar_height;

    var order = ev._sorder;
    if (ev.id == this._drag_id) {
        var cellHeight = this._colsS.heights[ev._sweek + 1] - this._colsS.heights[ev._sweek] - 22; //22 for month head height
        order = scheduler._get_dnd_order(order, hb, cellHeight);
    }
    var y_event_offset = order * hb;
    var y = this._colsS.heights[ev._sweek] + (this._colsS.height ? (this.xy.month_scale_height + 2) : 2) + y_event_offset;
    return {
        x: x,
        x2: x2,
        y: y
    };
};

scheduler.render_event_bar = function (ev) {
    var parent = this._rendered_location;
    var pos = this._get_event_bar_pos(ev);

    var y = pos.y;
    var x = pos.x;
    var x2 = pos.x2;

    //events in ignored dates

    if (!x2) return;


    var d = document.createElement("DIV");
    var cs = "dhx_cal_event_clear";
    //do not need dhx_cal_event_line, comment for future using
//    if (!ev._timed) {
//        cs = "dhx_cal_event_line";
//        if (ev.hasOwnProperty("_first_chunk") && ev._first_chunk)
//            cs += " dhx_cal_event_line_start";
//        if (ev.hasOwnProperty("_last_chunk") && ev._last_chunk)
//            cs += " dhx_cal_event_line_end";
//    }

    var cse = scheduler.templates.event_class(ev.start_date, ev.end_date, ev);
    if (cse) cs = cs + " " + cse;

    var bg_color = (ev.color ? ("background:" + ev.color + ";") : "");
    var color = (ev.textColor ? ("color:" + ev.textColor + ";") : "");

    var html = '<div event_id="' + ev.id + '" class="' + cs + '" style="position:absolute; top:' + y + 'px; left:' + x + 'px; width:' + (x2 - x - 15) + 'px;' + color + '' + bg_color + '' + (ev._text_style || "") + '">';

    ev = scheduler.getEvent(ev.id); // ev at this point could be a part of a larged event
//    if (ev._timed)
    html += scheduler.templates.event_bar_date(ev.start_date, ev.end_date, ev);
    html += scheduler.templates.event_bar_text(ev.start_date, ev.end_date, ev) + '</div>';
    html += '</div>';

    d.innerHTML = html;

    this._rendered.push(d.firstChild);
    parent.appendChild(d.firstChild);
};

scheduler._locate_event = function (node) {
    var id = null;
    while (node && !id && node.getAttribute) {
        id = node.getAttribute("event_id");
        node = node.parentNode;
    }
    return id;
};

scheduler.edit = function (id) {
    if (this._edit_id == id) return;
    this.editStop(false, id);
    this._edit_id = id;
    this.updateEvent(id);
};
scheduler.editStop = function (mode, id) {
    if (id && this._edit_id == id) return;
    var ev = this.getEvent(this._edit_id);
    if (ev) {
        if (mode) ev.text = this._editor.value;
        this._edit_id = null;
        this._editor = null;
        this.updateEvent(ev.id);
        this._edit_stop_event(ev, mode);
    }
};
scheduler._edit_stop_event = function (ev, mode) {
    if (this._new_event) {
        if (!mode) {
            if (ev) // in case of custom lightbox user can already delete event
                this.deleteEvent(ev.id, true);
        } else {
            this.callEvent("onEventAdded", [ev.id, ev]);
        }
        this._new_event = null;
    } else {
        if (mode) {
            this.callEvent("onEventChanged", [ev.id, ev]);
        }
    }
};

scheduler.getEvents = function (from, to) {
    var result = [];
    for (var a in this._events) {
        var ev = this._events[a];
        if (ev && ((!from && !to) || (ev.start_date < to && ev.end_date > from)))
            result.push(ev);
    }
    return result;
};
scheduler.getRenderedEvent = function (id) {
    if (!id)
        return;
    var rendered_events = scheduler._rendered;
    for (var i = 0; i < rendered_events.length; i++) {
        var rendered_event = rendered_events[i];
        if (rendered_event.getAttribute("event_id") == id) {
            return rendered_event;
        }
    }
    return null;
};
scheduler.showEvent = function (id, mode) {
    var ev = (typeof id == "number" || typeof id == "string") ? scheduler.getEvent(id) : id;
    mode = mode || scheduler._mode;

    if (!ev || (this.checkEvent("onBeforeEventDisplay") && !this.callEvent("onBeforeEventDisplay", [ev, mode])))
        return;

    var scroll_hour = scheduler.config.scroll_hour;
    scheduler.config.scroll_hour = ev.start_date.getHours();
    var preserve_scroll = scheduler.config.preserve_scroll;
    scheduler.config.preserve_scroll = false;

    var original_color = ev.color;
    var original_text_color = ev.textColor;
    if (scheduler.config.highlight_displayed_event) {
        ev.color = scheduler.config.displayed_event_color;
        ev.textColor = scheduler.config.displayed_event_text_color;
    }

    scheduler.setCurrentView(new Date(ev.start_date), mode);

    ev.color = original_color;
    ev.textColor = original_text_color;
    scheduler.config.scroll_hour = scroll_hour;
    scheduler.config.preserve_scroll = preserve_scroll;

    if (scheduler.matrix && scheduler.matrix[mode]) {
        scheduler._els.dhx_cal_data[0].scrollTop = getAbsoluteTop(scheduler.getRenderedEvent(ev.id)) - getAbsoluteTop(scheduler._els.dhx_cal_data[0]) - 20;
    }

    scheduler.callEvent("onAfterEventDisplay", [ev, mode]);
};

scheduler._loaded = {};
scheduler._load = function (url, from) {
    url = url || this._load_url;

    if (!url) {
        //if scheduler.setLoadMode is called before scheduler.init, initial rendering will invoke data loading while url is undefined
        return;
    }

    url += (url.indexOf("?") == -1 ? "?" : "&") + "timeshift=" + (new Date()).getTimezoneOffset();
    if (this.config.prevent_cache) url += "&uid=" + this.uid();
    var to;
    from = from || this._date;

    if (this._load_mode) {
        var lf = this.templates.load_format;

        from = this.date[this._load_mode + "_start"](new Date(from.valueOf()));
        while (from > this._min_date) from = this.date.add(from, -1, this._load_mode);
        to = from;

        var cache_line = true;
        while (to < this._max_date) {
            to = this.date.add(to, 1, this._load_mode);
            if (this._loaded[lf(from)] && cache_line)
                from = this.date.add(from, 1, this._load_mode);
            else cache_line = false;
        }

        var temp_to = to;
        do {
            to = temp_to;
            temp_to = this.date.add(to, -1, this._load_mode);
        } while (temp_to > from && this._loaded[lf(temp_to)]);

        if (to <= from)
            return false; //already loaded
        dhtmlxAjax.get(url + "&from=" + lf(from) + "&to=" + lf(to), function (l) {
            scheduler.on_load(l);
        });
        while (from < to) {
            this._loaded[lf(from)] = true;
            from = this.date.add(from, 1, this._load_mode);
        }
    } else
        dhtmlxAjax.get(url, function (l) {
            scheduler.on_load(l);
        });
    this.callEvent("onXLS", []);
    return true;
};
scheduler.on_load = function (loader) {
    var evs;
    if (this._process && this._process != "xml") {
        evs = this[this._process].parse(loader.xmlDoc.responseText);
    } else {
        evs = this._magic_parser(loader);
    }

    scheduler._process_loading(evs);

    this.callEvent("onXLE", []);
};
scheduler._process_loading = function (evs) {
    this._loading = true;
    this._not_render = true;
    for (var i = 0; i < evs.length; i++) {
        if (!this.callEvent("onEventLoading", [evs[i]])) continue;
        this.addEvent(evs[i]);
    }
    this._not_render = false;
    if (this._render_wait) this.render_view_data();

    this._loading = false;
    if (this._after_call) this._after_call();
    this._after_call = null;
};
scheduler._init_event = function (event) {
    event.text = (event.text || event._tagvalue) || "";
    event.start_date = scheduler._init_date(event.start_date);
    event.end_date = scheduler._init_date(event.end_date);
};

scheduler._init_date = function (date) {
    if (!date)
        return null;
    if (typeof date == "string")
        return scheduler.templates.xml_date(date);
    else return new Date(date);
};

scheduler.json = {};
scheduler.json.parse = function (data) {
    if (typeof data == "string") {
        scheduler._temp = eval("(" + data + ")");
        data = (scheduler._temp) ? scheduler._temp.data || scheduler._temp.d || scheduler._temp : [];
    }

    if (data.dhx_security)
        dhtmlx.security_key = data.dhx_security;

    var collections = (scheduler._temp && scheduler._temp.collections) ? scheduler._temp.collections : {};
    var collections_loaded = false;
    for (var key in collections) {
        if (collections.hasOwnProperty(key)) {
            collections_loaded = true;
            var collection = collections[key];
            var arr = scheduler.serverList[key];
            if (!arr) continue;
            arr.splice(0, arr.length); //clear old options
            for (var j = 0; j < collection.length; j++) {
                var option = collection[j];
                var obj = {
                    key: option.value,
                    label: option.label
                }; // resulting option object
                for (var option_key in option) {
                    if (option.hasOwnProperty(option_key)) {
                        if (option_key == "value" || option_key == "label")
                            continue;
                        obj[option_key] = option[option_key]; // obj['value'] = option['value']
                    }
                }
                arr.push(obj);
            }
        }
    }
    if (collections_loaded)
        scheduler.callEvent("onOptionsLoad", []);

    var evs = [];
    for (var i = 0; i < data.length; i++) {
        var event = data[i];
        scheduler._init_event(event);
        evs.push(event);
    }
    return evs;
};
scheduler.parse = function (data, type) {
    this._process = type;
    this.on_load({
        xmlDoc: {
            responseText: data
        }
    });
};
scheduler.load = function (url, call) {
    if (typeof call == "string") {
        this._process = call;
        call = arguments[2];
    }

    this._load_url = url;
    this._after_call = call;
    this._load(url, this._date);
};
//possible values - day,week,month,year,all
scheduler.setLoadMode = function (mode) {
    if (mode == "all") mode = "";
    this._load_mode = mode;
};

scheduler.serverList = function (name, array) {
    if (array) {
        return this.serverList[name] = array.slice(0);
    }
    return this.serverList[name] = (this.serverList[name] || []);
};
scheduler._userdata = {};
scheduler._magic_parser = function (loader) {
    var xml;
    if (!loader.getXMLTopNode) { //from a string
        var xml_string = loader.xmlDoc.responseText;
        loader = new dtmlXMLLoaderObject(function () {});
        loader.loadXMLString(xml_string);
    }

    xml = loader.getXMLTopNode("data");
    if (xml.tagName != "data") return []; //not an xml
    var skey = xml.getAttribute("dhx_security");
    if (skey)
        dhtmlx.security_key = skey;

    var opts = loader.doXPath("//coll_options");
    for (var i = 0; i < opts.length; i++) {
        var bind = opts[i].getAttribute("for");
        var arr = this.serverList[bind];
        if (!arr) continue;
        arr.splice(0, arr.length); //clear old options
        var itms = loader.doXPath(".//item", opts[i]);
        for (var j = 0; j < itms.length; j++) {
            var itm = itms[j];
            var attrs = itm.attributes;
            var obj = {
                key: itms[j].getAttribute("value"),
                label: itms[j].getAttribute("label")
            };
            for (var k = 0; k < attrs.length; k++) {
                var attr = attrs[k];
                if (attr.nodeName == "value" || attr.nodeName == "label")
                    continue;
                obj[attr.nodeName] = attr.nodeValue;
            }
            arr.push(obj);
        }
    }
    if (opts.length)
        scheduler.callEvent("onOptionsLoad", []);

    var ud = loader.doXPath("//userdata");
    for (var i = 0; i < ud.length; i++) {
        var udx = this._xmlNodeToJSON(ud[i]);
        this._userdata[udx.name] = udx.text;
    }

    var evs = [];
    xml = loader.doXPath("//event");

    for (var i = 0; i < xml.length; i++) {
        var ev = evs[i] = this._xmlNodeToJSON(xml[i]);
        scheduler._init_event(ev);
    }
    return evs;
};
scheduler._xmlNodeToJSON = function (node) {
    var t = {};
    for (var i = 0; i < node.attributes.length; i++)
        t[node.attributes[i].name] = node.attributes[i].value;

    for (var i = 0; i < node.childNodes.length; i++) {
        var child = node.childNodes[i];
        if (child.nodeType == 1)
            t[child.tagName] = child.firstChild ? child.firstChild.nodeValue : "";
    }

    if (!t.text) t.text = node.firstChild ? node.firstChild.nodeValue : "";

    return t;
};
scheduler.attachEvent("onXLS", function () {
    if (this.config.show_loading === true) {
        var t;
        t = this.config.show_loading = document.createElement("DIV");
        t.className = 'dhx_loading';
        t.style.left = Math.round((this._x - 128) / 2) + "px";
        t.style.top = Math.round((this._y - 15) / 2) + "px";
        this._obj.appendChild(t);
    }
});
scheduler.attachEvent("onXLE", function () {
    var t = this.config.show_loading;
    if (t && typeof t == "object") {
        this._obj.removeChild(t);
        this.config.show_loading = true;
    }
});

/*
This software is allowed to use under GPL or you need to obtain Commercial or Enterise License
to use it in not GPL project. Please contact sales@dhtmlx.com for details
*/
scheduler.ical = {
    parse: function (str) {
        var data = str.match(RegExp(this.c_start + "[^\f]*" + this.c_end, ""));
        if (!data.length) return;

        //unfolding 
        data[0] = data[0].replace(/[\r\n]+(?=[a-z \t])/g, " ");
        //drop property
        data[0] = data[0].replace(/\;[^:\r\n]*:/g, ":");


        var incoming = [];
        var match;
        var event_r = RegExp("(?:" + this.e_start + ")([^\f]*?)(?:" + this.e_end + ")", "g");
        while (match = event_r.exec(data)) {
            var e = {};
            var param;
            var param_r = /[^\r\n]+[\r\n]+/g;
            while (param = param_r.exec(match[1]))
                this.parse_param(param.toString(), e);
            if (e.uid && !e.id) e.id = e.uid; //fallback to UID, when ID is not defined
            incoming.push(e);
        }
        return incoming;
    },
    parse_param: function (str, obj) {
        var d = str.indexOf(":");
        if (d == -1) return;

        var name = str.substr(0, d).toLowerCase();
        var value = str.substr(d + 1).replace(/\\\,/g, ",").replace(/[\r\n]+$/, "");
        if (name == "summary")
            name = "text";
        else if (name == "dtstart") {
            name = "start_date";
            value = this.parse_date(value, 0, 0);
        } else if (name == "dtend") {
            name = "end_date";
            value = this.parse_date(value, 0, 0);
        }
        obj[name] = value;
    },
    parse_date: function (value, dh, dm) {
        var t = value.split("T");
        if (t[1]) {
            dh = t[1].substr(0, 2);
            dm = t[1].substr(2, 2);
        }
        var dy = t[0].substr(0, 4);
        var dn = parseInt(t[0].substr(4, 2), 10) - 1;
        var dd = t[0].substr(6, 2);
        if (scheduler.config.server_utc && !t[1]) { // if no hours/minutes were specified == full day event
            return new Date(Date.UTC(dy, dn, dd, dh, dm));
        }
        return new Date(dy, dn, dd, dh, dm);
    },
    c_start: "BEGIN:VCALENDAR",
    e_start: "BEGIN:VEVENT",
    e_end: "END:VEVENT",
    c_end: "END:VCALENDAR"
};
scheduler._lightbox_controls = {};
scheduler.formSection = function (name) {
    var config = this.config.lightbox.sections;
    var i = 0;
    for (i; i < config.length; i++)
        if (config[i].name == name)
            break;
    var section = config[i];
    if (!scheduler._lightbox)
        scheduler.getLightbox();
    var header = document.getElementById(section.id);
    var node = header.nextSibling;

    var result = {
        section: section,
        header: header,
        node: node,
        getValue: function (ev) {
            return scheduler.form_blocks[section.type].get_value(node, (ev || {}), section);
        },
        setValue: function (value, ev) {
            return scheduler.form_blocks[section.type].set_value(node, value, (ev || {}), section);
        }
    };

    var handler = scheduler._lightbox_controls["get_" + section.type + "_control"];
    return handler ? handler(result) : result;
};
scheduler._lightbox_controls.get_template_control = function (result) {
    result.control = result.node;
    return result;
};
scheduler._lightbox_controls.get_select_control = function (result) {
    result.control = result.node.getElementsByTagName('select')[0];
    return result;
};
scheduler._lightbox_controls.get_textarea_control = function (result) {
    result.control = result.node.getElementsByTagName('textarea')[0];
    return result;
};
scheduler._lightbox_controls.get_time_control = function (result) {
    result.control = result.node.getElementsByTagName('select'); // array
    return result;
};
scheduler.form_blocks = {
    template: {
        render: function (sns) {
            var height = (sns.height || "30") + "px";
            return "<div class='dhx_cal_ltext dhx_cal_template' style='height:" + height + ";'></div>";
        },
        set_value: function (node, value, ev, config) {
            node.innerHTML = value || "";
        },
        get_value: function (node, ev, config) {
            return node.innerHTML || "";
        },
        focus: function (node) {}
    },
    textarea: {
        render: function (sns) {
            var height = (sns.height || "130") + "px";
            return "<div class='dhx_cal_ltext' style='height:" + height + ";'><textarea></textarea></div>";
        },
        set_value: function (node, value, ev) {
            node.firstChild.value = value || "";
        },
        get_value: function (node, ev) {
            return node.firstChild.value;
        },
        focus: function (node) {
            var a = node.firstChild;
            scheduler._focus(a, true)
        }
    },
    select: {
        render: function (sns) {
            var height = (sns.height || "23") + "px";
            var html = "<div class='dhx_cal_ltext' style='height:" + height + ";'><select style='width:100%;'>";
            for (var i = 0; i < sns.options.length; i++)
                html += "<option value='" + sns.options[i].key + "'>" + sns.options[i].label + "</option>";
            html += "</select></div>";
            return html;
        },
        set_value: function (node, value, ev, sns) {
            var select = node.firstChild;
            if (!select._dhx_onchange && sns.onchange) {
                select.onchange = sns.onchange;
                select._dhx_onchange = true;
            }
            if (typeof value == "undefined")
                value = (select.options[0] || {}).value;
            select.value = value || "";
        },
        get_value: function (node, ev) {
            return node.firstChild.value;
        },
        focus: function (node) {
            var a = node.firstChild;
            scheduler._focus(a, true);
        }
    },
    time: {
        render: function (sns) {
            if (!sns.time_format) {
                // default order
                sns.time_format = ["%H:%i", "%d", "%m", "%Y"];
            }
            // map: default order => real one
            sns._time_format_order = {};
            var time_format = sns.time_format;

            var cfg = scheduler.config;
            var dt = this.date.date_part(scheduler._currentDate());
            var last = 24 * 60,
                first = 0;
            if (scheduler.config.limit_time_select) {
                last = 60 * cfg.last_hour + 1;
                first = 60 * cfg.first_hour;
                dt.setHours(cfg.first_hour);
            }
            var html = "";

            for (var p = 0; p < time_format.length; p++) {
                var time_option = time_format[p];

                // adding spaces between selects
                if (p > 0) {
                    html += " ";
                }

                switch (time_option) {
                case "%Y":
                    sns._time_format_order[3] = p;
                    //year
                    html += "<select>";
                    var year = dt.getFullYear() - 5; //maybe take from config?
                    for (var i = 0; i < 10; i++)
                        html += "<option value='" + (year + i) + "'>" + (year + i) + "</option>";
                    html += "</select> ";
                    break;
                case "%m":
                    sns._time_format_order[2] = p;
                    //month
                    html += "<select>";
                    for (var i = 0; i < 12; i++)
                        html += "<option value='" + i + "'>" + this.locale.date.month_full[i] + "</option>";
                    html += "</select>";
                    break;
                case "%d":
                    sns._time_format_order[1] = p;
                    //days
                    html += "<select>";
                    for (var i = 1; i < 32; i++)
                        html += "<option value='" + i + "'>" + i + "</option>";
                    html += "</select>";
                    break;
                case "%H:%i":
                    sns._time_format_order[0] = p;
                    //hours
                    html += "<select>";
                    var i = first;
                    var tdate = dt.getDate();
                    sns._time_values = [];

                    while (i < last) {
                        var time = this.templates.time_picker(dt);
                        html += "<option value='" + i + "'>" + time + "</option>";
                        sns._time_values.push(i);
                        dt.setTime(dt.valueOf() + this.config.time_step * 60 * 1000);
                        var diff = (dt.getDate() != tdate) ? 1 : 0; // moved or not to the next day
                        i = diff * 24 * 60 + dt.getHours() * 60 + dt.getMinutes();
                    }
                    html += "</select>";
                    break;
                }
            }

            return "<div style='height:30px;padding-top:0px;font-size:inherit;' class='dhx_section_time'>" + html + "<span style='font-weight:normal; font-size:10pt;'> &nbsp;&ndash;&nbsp; </span>" + html + "</div>";
        },
        set_value: function (node, value, ev, config) {
            var cfg = scheduler.config;
            var s = node.getElementsByTagName("select");
            var map = config._time_format_order;

            if (cfg.full_day) {
                if (!node._full_day) {
                    var html = "<label class='dhx_fullday'><input type='checkbox' name='full_day' value='true'> " + scheduler.locale.labels.full_day + "&nbsp;</label></input>";
                    if (!scheduler.config.wide_form)
                        html = node.previousSibling.innerHTML + html;
                    node.previousSibling.innerHTML = html;
                    node._full_day = true;
                }
                var input = node.previousSibling.getElementsByTagName("input")[0];
                input.checked = (scheduler.date.time_part(ev.start_date) === 0 && scheduler.date.time_part(ev.end_date) === 0);

                s[map[0]].disabled = input.checked;
                s[map[0] + s.length / 2].disabled = input.checked;

                input.onclick = function () {
                    if (input.checked) {
                        var obj = {};
                        scheduler.form_blocks.time.get_value(node, obj, config);

                        var start_date = scheduler.date.date_part(obj.start_date);
                        var end_date = scheduler.date.date_part(obj.end_date);

                        if (+end_date == +start_date || (+end_date >= +start_date && (ev.end_date.getHours() != 0 || ev.end_date.getMinutes() != 0)))
                            end_date = scheduler.date.add(end_date, 1, "day");
                    }

                    s[map[0]].disabled = input.checked;
                    s[map[0] + s.length / 2].disabled = input.checked;

                    _fill_lightbox_select(s, 0, start_date || ev.start_date);
                    _fill_lightbox_select(s, 4, end_date || ev.end_date);
                };
            }

            if (cfg.auto_end_date && cfg.event_duration) {
                function _update_lightbox_select() {
                    var start_date = new Date(s[map[3]].value, s[map[2]].value, s[map[1]].value, 0, s[map[0]].value);
                    var end_date = new Date(start_date.getTime() + (scheduler.config.event_duration * 60 * 1000));
                    _fill_lightbox_select(s, 4, end_date);
                }
                for (var i = 0; i < 4; i++) {
                    s[i].onchange = _update_lightbox_select;
                }
            }

            function _fill_lightbox_select(s, i, d) {
                var time_values = config._time_values;
                var direct_value = d.getHours() * 60 + d.getMinutes();
                var fixed_value = direct_value;
                var value_found = false;
                for (var k = 0; k < time_values.length; k++) {
                    var t_v = time_values[k];
                    if (t_v === direct_value) {
                        value_found = true;
                        break;
                    }
                    if (t_v < direct_value)
                        fixed_value = t_v;
                }

                s[i + map[0]].value = (value_found) ? direct_value : fixed_value;
                if (!(value_found || fixed_value)) {
                    s[i + map[0]].selectedIndex = -1; //show empty select in FF
                }
                s[i + map[1]].value = d.getDate();
                s[i + map[2]].value = d.getMonth();
                s[i + map[3]].value = d.getFullYear();
            }

            _fill_lightbox_select(s, 0, ev.start_date);
            _fill_lightbox_select(s, 4, ev.end_date);
        },
        get_value: function (node, ev, config) {
            s = node.getElementsByTagName("select");
            var map = config._time_format_order;

            ev.start_date = new Date(s[map[3]].value, s[map[2]].value, s[map[1]].value, 0, s[map[0]].value);
            ev.end_date = new Date(s[map[3] + 4].value, s[map[2] + 4].value, s[map[1] + 4].value, 0, s[map[0] + 4].value);

            if (ev.end_date <= ev.start_date)
                ev.end_date = scheduler.date.add(ev.start_date, scheduler.config.time_step, "minute");
            return {
                start_date: new Date(ev.start_date),
                end_date: new Date(ev.end_date)
            };
        },
        focus: function (node) {
            scheduler._focus(node.getElementsByTagName("select")[0]);
        }
    }
};
scheduler.showCover = function (box) {
    if (box) {
        box.style.display = "block";

        var scroll_top = window.pageYOffset || document.body.scrollTop || document.documentElement.scrollTop;
        var scroll_left = window.pageXOffset || document.body.scrollLeft || document.documentElement.scrollLeft;

        var view_height = window.innerHeight || document.documentElement.clientHeight;

        if (scroll_top) // if vertical scroll on window
            box.style.top = Math.round(scroll_top + Math.max((view_height - box.offsetHeight) / 2, 0)) + "px";
        else // vertical scroll on body
            box.style.top = Math.round(Math.max(((view_height - box.offsetHeight) / 2), 0) + 9) + "px"; // +9 for compatibility with auto tests

        // not quite accurate but used for compatibility reasons
        if (document.documentElement.scrollWidth > document.body.offsetWidth) // if horizontal scroll on the window
            box.style.left = Math.round(scroll_left + (document.body.offsetWidth - box.offsetWidth) / 2) + "px";
        else // horizontal scroll on the body
            box.style.left = Math.round((document.body.offsetWidth - box.offsetWidth) / 2) + "px";
    }
    this.show_cover();
};
scheduler.showLightbox = function (id) {
    if (!id) return;
    if (!this.callEvent("onBeforeLightbox", [id])) {
        if (this._new_event)
            this._new_event = null;
        return;
    }
    var box = this.getLightbox();
    this.showCover(box);
    this._fill_lightbox(id, box);
    this.callEvent("onLightbox", [id]);
};
scheduler._fill_lightbox = function (id, box) {
    var ev = this.getEvent(id);
    var s = box.getElementsByTagName("span");
    if (scheduler.templates.lightbox_header) {
        s[1].innerHTML = "";
        s[2].innerHTML = scheduler.templates.lightbox_header(ev.start_date, ev.end_date, ev);
    } else {
        s[1].innerHTML = this.templates.event_header(ev.start_date, ev.end_date, ev);
        s[2].innerHTML = (this.templates.event_bar_text(ev.start_date, ev.end_date, ev) || "").substr(0, 70); //IE6 fix
    }

    var sns = this.config.lightbox.sections;
    for (var i = 0; i < sns.length; i++) {
        var current_sns = sns[i];
        var node = document.getElementById(current_sns.id).nextSibling;
        var block = this.form_blocks[current_sns.type];
        var value = (ev[current_sns.map_to] !== undefined) ? ev[current_sns.map_to] : current_sns.default_value;
        block.set_value.call(this, node, value, ev, current_sns);
        if (sns[i].focus)
            block.focus.call(this, node);
    }

    scheduler._lightbox_id = id;
};
scheduler._lightbox_out = function (ev) {
    var sns = this.config.lightbox.sections;
    for (var i = 0; i < sns.length; i++) {
        var node = document.getElementById(sns[i].id);
        node = (node ? node.nextSibling : node);
        var block = this.form_blocks[sns[i].type];
        var res = block.get_value.call(this, node, ev, sns[i]);
        if (sns[i].map_to != "auto")
            ev[sns[i].map_to] = res;
    }
    return ev;
};
scheduler._empty_lightbox = function (data) {
    var id = scheduler._lightbox_id;
    var ev = this.getEvent(id);
    var box = this.getLightbox();

    this._lame_copy(ev, data);

    this.setEvent(ev.id, ev);
    this._edit_stop_event(ev, true);
    this.render_view_data();
};
scheduler.hide_lightbox = function (id) {
    this.hideCover(this.getLightbox());
    this._lightbox_id = null;
    this.callEvent("onAfterLightbox", []);
};
scheduler.hideCover = function (box) {
    if (box) box.style.display = "none";
    this.hide_cover();
};
scheduler.hide_cover = function () {
    if (this._cover)
        this._cover.parentNode.removeChild(this._cover);
    this._cover = null;
};
scheduler.show_cover = function () {
    this._cover = document.createElement("DIV");
    this._cover.className = "dhx_cal_cover";
    var _document_height = ((document.height !== undefined) ? document.height : document.body.offsetHeight);
    var _scroll_height = ((document.documentElement) ? document.documentElement.scrollHeight : 0);
    this._cover.style.height = Math.max(_document_height, _scroll_height) + 'px';
    document.body.appendChild(this._cover);
};
scheduler.save_lightbox = function () {
    var data = this._lightbox_out({}, this._lame_copy(this.getEvent(this._lightbox_id)));
    if (this.checkEvent("onEventSave") && !this.callEvent("onEventSave", [this._lightbox_id, data, this._new_event]))
        return;
    this._empty_lightbox(data);
    this.hide_lightbox();
};
scheduler.startLightbox = function (id, box) {
    this._lightbox_id = id;
    this._custom_lightbox = true;

    this._temp_lightbox = this._lightbox;
    this._lightbox = box;
    this.showCover(box);
};
scheduler.endLightbox = function (mode, box) {
    this._edit_stop_event(scheduler.getEvent(this._lightbox_id), mode);
    if (mode)
        scheduler.render_view_data();
    this.hideCover(box);

    if (this._custom_lightbox) {
        this._lightbox = this._temp_lightbox;
        this._custom_lightbox = false;
    }
    this._temp_lightbox = this._lightbox_id = null; // in case of custom lightbox user only calls endLightbox so we need to reset _lightbox_id
};
scheduler.resetLightbox = function () {
    if (scheduler._lightbox && !scheduler._custom_lightbox)
        scheduler._lightbox.parentNode.removeChild(scheduler._lightbox);
    scheduler._lightbox = null;
};
scheduler.cancel_lightbox = function () {
    this.callEvent("onEventCancel", [this._lightbox_id, this._new_event]);
    this.endLightbox(false);
    this.hide_lightbox();
};
scheduler._init_lightbox_events = function () {
    this.getLightbox().onclick = function (e) {
        var src = e ? e.target : event.srcElement;
        if (!src.className) src = src.previousSibling;
        if (src && src.className)
            switch (src.className) {
            case "dhx_save_btn":
                scheduler.save_lightbox();
                break;
            case "dhx_delete_btn":
                var c = scheduler.locale.labels.confirm_deleting;

                scheduler._dhtmlx_confirm(c, scheduler.locale.labels.title_confirm_deleting, function () {
                    scheduler.deleteEvent(scheduler._lightbox_id);
                    scheduler._new_event = null; //clear flag, if it was unsaved event
                    scheduler.hide_lightbox();
                });

                break;
            case "dhx_cancel_btn":
                scheduler.cancel_lightbox();
                break;

            default:
                if (src.getAttribute("dhx_button")) {
                    scheduler.callEvent("onLightboxButton", [src.className, src, e]);
                } else {
                    var index, block, sec;
                    if (src.className.indexOf("dhx_custom_button") != -1) {
                        if (src.className.indexOf("dhx_custom_button_") != -1) {
                            index = src.parentNode.getAttribute("index");
                            sec = src.parentNode.parentNode;
                        } else {
                            index = src.getAttribute("index");
                            sec = src.parentNode;
                            src = src.firstChild;
                        }
                    }
                    if (index) {
                        block = scheduler.form_blocks[scheduler.config.lightbox.sections[index].type];
                        block.button_click(index, src, sec, sec.nextSibling);
                    }
                }
                break;
            }
    };
    this.getLightbox().onkeydown = function (e) {
        switch ((e || event).keyCode) {
        case scheduler.keys.edit_save:
            if ((e || event).shiftKey) return;
            scheduler.save_lightbox();
            break;
        case scheduler.keys.edit_cancel:
            scheduler.cancel_lightbox();
            break;
        default:
            break;
        }
    };
};
scheduler.setLightboxSize = function () {
    var d = this._lightbox;
    if (!d) return;

    var con = d.childNodes[1];
    con.style.height = "0px";
    con.style.height = con.scrollHeight + "px";
    d.style.height = con.scrollHeight + scheduler.xy.lightbox_additional_height + "px";
    con.style.height = con.scrollHeight + "px"; //it is incredible , how ugly IE can be
};

scheduler._init_dnd_events = function () {
    dhtmlxEvent(document.body, "mousemove", scheduler._move_while_dnd);
    dhtmlxEvent(document.body, "mouseup", scheduler._finish_dnd);
    scheduler._init_dnd_events = function () {};
};
scheduler._move_while_dnd = function (e) {
    if (scheduler._dnd_start_lb) {
        if (!document.dhx_unselectable) {
            document.body.className += " dhx_unselectable";
            document.dhx_unselectable = true;
        }
        var lb = scheduler.getLightbox();
        var now = (e && e.target) ? [e.pageX, e.pageY] : [event.clientX, event.clientY];
        lb.style.top = scheduler._lb_start[1] + now[1] - scheduler._dnd_start_lb[1] + "px";
        lb.style.left = scheduler._lb_start[0] + now[0] - scheduler._dnd_start_lb[0] + "px";
    }
};
scheduler._ready_to_dnd = function (e) {
    var lb = scheduler.getLightbox();
    scheduler._lb_start = [parseInt(lb.style.left, 10), parseInt(lb.style.top, 10)];
    scheduler._dnd_start_lb = (e && e.target) ? [e.pageX, e.pageY] : [event.clientX, event.clientY];
};
scheduler._finish_dnd = function () {
    if (scheduler._lb_start) {
        scheduler._lb_start = scheduler._dnd_start_lb = false;
        document.body.className = document.body.className.replace(" dhx_unselectable", "");
        document.dhx_unselectable = false;
    }
};
scheduler.getLightbox = function () { //scheduler.config.wide_form=true;
    if (!this._lightbox) {
        var d = document.createElement("DIV");
        d.className = "dhx_cal_light";
        if (scheduler.config.wide_form)
            d.className += " dhx_cal_light_wide";
        if (scheduler.form_blocks.recurring)
            d.className += " dhx_cal_light_rec";

        if (/msie|MSIE 6/.test(navigator.userAgent))
            d.className += " dhx_ie6";
        d.style.visibility = "hidden";
        var html = this._lightbox_template;

        var buttons = this.config.buttons_left;
        for (var i = 0; i < buttons.length; i++)
            html += "<div class='dhx_btn_set dhx_left_btn_set " + buttons[i] + "_set'><div dhx_button='1' class='" + buttons[i] + "'></div><div>" + scheduler.locale.labels[buttons[i]] + "</div></div>";

        buttons = this.config.buttons_right;
        for (var i = 0; i < buttons.length; i++)
            html += "<div class='dhx_btn_set dhx_right_btn_set " + buttons[i] + "_set' style='float:right;'><div dhx_button='1' class='" + buttons[i] + "'></div><div>" + scheduler.locale.labels[buttons[i]] + "</div></div>";

        html += "</div>";
        d.innerHTML = html;
        if (scheduler.config.drag_lightbox) {
            d.firstChild.onmousedown = scheduler._ready_to_dnd;
            d.firstChild.onselectstart = function () {
                return false;
            };
            d.firstChild.style.cursor = "pointer";
            scheduler._init_dnd_events();

        }
        document.body.insertBefore(d, document.body.firstChild);
        this._lightbox = d;

        var sns = this.config.lightbox.sections;
        html = "";
        for (var i = 0; i < sns.length; i++) {
            var block = this.form_blocks[sns[i].type];
            if (!block) continue; //ignore incorrect blocks
            sns[i].id = "area_" + this.uid();
            var button = "";
            if (sns[i].button) {
                button = "<div class='dhx_custom_button' index='" + i + "'><div class='dhx_custom_button_" + sns[i].button + "'></div><div>" + this.locale.labels["button_" + sns[i].button] + "</div></div>";
            }

            if (this.config.wide_form) {
                html += "<div class='dhx_wrap_section'>";
            }
            html += "<div id='" + sns[i].id + "' class='dhx_cal_lsection'>" + button + this.locale.labels["section_" + sns[i].name] + "</div>" + block.render.call(this, sns[i]);
            html += "</div>"
        }

        var ds = d.getElementsByTagName("div");
        for (var i = 0; i < ds.length; i++) {
            var t_ds = ds[i];
            if (t_ds.className == "dhx_cal_larea") {
                t_ds.innerHTML = html;
                break;
            }
        }

        //sizes
        this.setLightboxSize();

        this._init_lightbox_events(this);
        d.style.display = "none";
        d.style.visibility = "visible";
    }
    return this._lightbox;
};
scheduler._lightbox_template = "<div class='dhx_cal_ltitle'><span class='dhx_mark'>&nbsp;</span><span class='dhx_time'></span><span class='dhx_title'></span></div><div class='dhx_cal_larea'></div>";

scheduler._init_touch_events = function () {
    if (this.config.touch != "force")
        this.config.touch = this.config.touch && ((navigator.userAgent.indexOf("Mobile") != -1) || (navigator.userAgent.indexOf("iPad") != -1) || (navigator.userAgent.indexOf("Android") != -1) || (navigator.userAgent.indexOf("Touch") != -1));

    if (this.config.touch) {
        this.xy.scroll_width = 0;
        if (window.navigator.msPointerEnabled) {
            this._touch_events(["MSPointerMove", "MSPointerDown", "MSPointerUp"], function (ev) {
                if (ev.pointerType == ev.MSPOINTER_TYPE_MOUSE) return null;
                return ev;
            }, function (ev) {
                return (!ev || ev.pointerType == ev.MSPOINTER_TYPE_MOUSE);
            });
        } else
            this._touch_events(["touchmove", "touchstart", "touchend"], function (ev) {
                if (ev.touches && ev.touches.length > 1) return null;
                if (ev.touches[0])
                    return {
                        target: ev.target,
                        pageX: ev.touches[0].pageX,
                        pageY: ev.touches[0].pageY
                    };
                else
                    return ev;
            }, function () {
                return false;
            });
    }
};

scheduler._touch_events = function (names, accessor, ignore) {
    //webkit on android need to be handled separately
    var a_webkit = (navigator.userAgent.indexOf("Android") != -1) && (navigator.userAgent.indexOf("WebKit") != -1);
    var source, tracker, timer, drag_mode, scroll_mode, action_mode;
    var dblclicktime = 0;

    function check_direction_swipe(s_ev, e_ev, step) {
        if (!s_ev || !e_ev) return;

        var dy = Math.abs(s_ev.pageY - e_ev.pageY);
        var dx = Math.abs(s_ev.pageX - e_ev.pageX);
        if (dx > step && (!dy || (dx / dy > 3))) {
            if (s_ev.pageX > e_ev.pageX)
                scheduler._click.dhx_cal_next_button();
            else
                scheduler._click.dhx_cal_prev_button();
        }
    };
    dhtmlxEvent(document.body, names[0], function (e) {
        if (ignore(e)) return;

        if (drag_mode) {
            scheduler._on_mouse_move(accessor(e));
            scheduler._update_global_tip();
            if (e.preventDefault)
                e.preventDefault();
            e.cancelBubble = true;
            return false;
        }

        if (tracker && a_webkit) {
            check_direction_swipe(tracker, accessor(e), 0);
        }

        tracker = accessor(e);
        //ignore common and scrolling moves
        if (!action_mode) return;

        //multitouch    
        if (!tracker) {
            scroll_mode = true;
            return;
        }

        //target changed - probably in scroll mode

        if (source.target != tracker.target || (Math.abs(source.pageX - tracker.pageX) > 5) || (Math.abs(source.pageY - tracker.pageY) > 5)) {
            scroll_mode = true;
            clearTimeout(timer);
        }

    });

    dhtmlxEvent(this._els["dhx_cal_data"][0], "scroll", drag_cancel);
    dhtmlxEvent(this._els["dhx_cal_data"][0], "touchcancel", drag_cancel);
    dhtmlxEvent(this._els["dhx_cal_data"][0], "contextmenu", function (e) {
        if (action_mode) {
            if (e && e.preventDefault)
                e.preventDefault();
            (e || event).cancelBubble = true;
            return false;
        }
    });
    dhtmlxEvent(this._els["dhx_cal_data"][0], names[1], function (e) {
        if (ignore(e)) return;

        drag_mode = scroll_mode = tracker = false;
        action_mode = true;
        scheduler._temp_touch_block = true;

        var fake_event = tracker = accessor(e);
        if (!fake_event) {
            scroll_mode = true;
            return;
        }

        //dbl click
        var now = new Date();

        if (!scroll_mode && !drag_mode && now - dblclicktime < 250) {
            scheduler._click.dhx_cal_data(fake_event);
            window.setTimeout(function () {
                scheduler._on_dbl_click(fake_event);
            }, 50);

            if (e.preventDefault)
                e.preventDefault();
            e.cancelBubble = true;
            scheduler._block_next_stop = true;
            return false;
        }
        dblclicktime = now;

        //drag

        if (scroll_mode || drag_mode || !scheduler.config.touch_drag)
            return;

        //there is no target
        timer = setTimeout(function () {

            drag_mode = true;
            var target = source.target;
            if (target && target.className && target.className.indexOf("dhx_body") != -1)
                target = target.previousSibling;

            scheduler._on_mouse_down(source, target);
            if (scheduler._drag_mode && scheduler._drag_mode != "create") {
                var pos = -1;
                scheduler.for_rendered(scheduler._drag_id, function (node, i) {
                    pos = node.getBoundingClientRect().top;
                    node.style.display = 'none';
                    scheduler._rendered.splice(i, 1);
                });
                if (pos >= 0) {
                    var step = scheduler.config.time_step;
                    scheduler._move_pos_shift = step * Math.round((fake_event.pageY - pos) * 60 / (scheduler.config.hour_size_px * step));
                }
            }

            if (scheduler.config.touch_tip)
                scheduler._show_global_tip();
            scheduler._on_mouse_move(source);
        }, scheduler.config.touch_drag);

        source = fake_event;
    });

    function drag_cancel(e) {
        scheduler._hide_global_tip();
        if (drag_mode) {
            scheduler._on_mouse_up(accessor(e || event));
            scheduler._temp_touch_block = false;
        }
        scheduler._drag_id = null;
        scheduler._drag_mode = null;
        scheduler._drag_pos = null;

        clearTimeout(timer);
        drag_mode = action_mode = false;
        scroll_mode = true;
    }
    dhtmlxEvent(this._els["dhx_cal_data"][0], names[2], function (e) {
        if (ignore(e)) return;

        if (!drag_mode)
            check_direction_swipe(source, tracker, 200);

        if (drag_mode)
            scheduler._ignore_next_click = true;

        drag_cancel(e);
        if (scheduler._block_next_stop) {
            scheduler._block_next_stop = false;
            if (e.preventDefault)
                e.preventDefault();
            e.cancelBubble = true;
            return false;
        }
    });

    dhtmlxEvent(document.body, names[2], drag_cancel);
};

scheduler._show_global_tip = function () {
    scheduler._hide_global_tip();

    var toptip = scheduler._global_tip = document.createElement("DIV");
    toptip.className = 'dhx_global_tip';

    scheduler._update_global_tip(1);

    document.body.appendChild(toptip);
};
scheduler._update_global_tip = function (init) {
    var toptip = scheduler._global_tip;
    if (toptip) {
        var time = "";
        if (scheduler._drag_id && !init) {
            var ev = scheduler.getEvent(scheduler._drag_id);
            if (ev)
                time = "<div>" + (ev._timed ? scheduler.templates.event_header(ev.start_date, ev.end_date, ev) : scheduler.templates.day_date(ev.start_date, ev.end_date, ev)) + "</div>";
        }

        if (scheduler._drag_mode == "create" || scheduler._drag_mode == "new-size")
            toptip.innerHTML = (scheduler.locale.drag_to_create || "Drag to create") + time;
        else
            toptip.innerHTML = (scheduler.locale.drag_to_move || "Drag to move") + time;
    }
};
scheduler._hide_global_tip = function () {
    var toptip = scheduler._global_tip;
    if (toptip && toptip.parentNode) {
        toptip.parentNode.removeChild(toptip);
        scheduler._global_tip = 0;
    }
};

scheduler._dp_init = function (dp) {
    dp._methods = ["_set_event_text_style", "", "changeEventId", "deleteEvent"];

    this.attachEvent("onEventAdded", function (id) {
        if (!this._loading && this._validId(id))
            dp.setUpdated(id, true, "inserted");
    });
    this.attachEvent("onConfirmedBeforeEventDelete", function (id) {
        if (!this._validId(id)) return;
        var z = dp.getState(id);

        if (z == "inserted" || this._new_event) {
            dp.setUpdated(id, false);
            return true;
        }
        if (z == "deleted") return false;
        if (z == "true_deleted") return true;

        dp.setUpdated(id, true, "deleted");
        return false;
    });
    this.attachEvent("onEventChanged", function (id) {
        if (!this._loading && this._validId(id))
            dp.setUpdated(id, true, "updated");
    });

    dp._getRowData = function (id, pref) {
        var ev = this.obj.getEvent(id);
        var data = {};

        for (var a in ev) {
            if (a.indexOf("_") == 0) continue;
            if (ev[a] && ev[a].getUTCFullYear) //not very good, but will work
                data[a] = this.obj.templates.xml_format(ev[a]);
            else
                data[a] = ev[a];
        }

        return data;
    };
    dp._clearUpdateFlag = function () {};

    dp.attachEvent("insertCallback", scheduler._update_callback);
    dp.attachEvent("updateCallback", scheduler._update_callback);
    dp.attachEvent("deleteCallback", function (upd, id) {
        this.obj.setUserData(id, this.action_param, "true_deleted");
        this.obj.deleteEvent(id);
    });

};

scheduler._validId = function (id) {
    return true;
};

scheduler.setUserData = function (id, name, value) {
    if (id)
        this.getEvent(id)[name] = value;
    else
        this._userdata[name] = value;
};
scheduler.getUserData = function (id, name) {
    return id ? this.getEvent(id)[name] : this._userdata[name];
};
scheduler._set_event_text_style = function (id, style) {
    this.for_rendered(id, function (r) {
        r.style.cssText += ";" + style;
    });
    var ev = this.getEvent(id);
    ev["_text_style"] = style;
    this.event_updated(ev);
};

scheduler._update_callback = function (upd, id) {
    var data = scheduler._xmlNodeToJSON(upd.firstChild);
    data.text = data.text || data._tagvalue;
    data.start_date = scheduler.templates.xml_date(data.start_date);
    data.end_date = scheduler.templates.xml_date(data.end_date);

    scheduler.addEvent(data);
};
scheduler._skin_settings = {
    fix_tab_position: [1, 0],
    use_select_menu_space: [1, 0],
    wide_form: [1, 0],

    hour_size_px: [44, 42],
    displayed_event_color: ["#ff4a4a", "ffc5ab"],
    displayed_event_text_color: ["#ffef80", "7e2727"]
};

scheduler._skin_xy = {
    lightbox_additional_height: [90, 50],
    nav_height: [39, 22],
    bar_height: [24, 20]
};

scheduler._configure = function (col, data, skin) {
    for (var key in data)
        if (typeof col[key] == "undefined")
            col[key] = data[key][skin];
};
scheduler._skin_init = function () {
    if (!scheduler.skin) {
        var links = document.getElementsByTagName("link");
        for (var i = 0; i < links.length; i++) {
            var res = links[i].href.match("dhtmlxscheduler_([a-z]+).css");
            if (res) {
                scheduler.skin = res[1];
                break;
            }
        }
    }



    var set = 0;
    if (scheduler.skin && scheduler.skin != "terrace") set = 1;

    //apply skin related settings
    this._configure(scheduler.config, scheduler._skin_settings, set);
    this._configure(scheduler.xy, scheduler._skin_xy, set);

    //classic skin need not any further customization
    if (set) return;


    var minic = scheduler.config.minicalendar;
    if (minic) minic.padding = 14;

    //  scheduler.templates.event_bar_date = function(start,end,ev) {
    //    return "• <b>"+scheduler.templates.event_date(start)+"</b> ";
    //  };

    //scheduler._lightbox_template="<div class='dhx_cal_ltitle'><span class='dhx_mark'>&nbsp;</span><span class='dhx_time'></span><span class='dhx_title'></span><div class='dhx_close_icon'></div></div><div class='dhx_cal_larea'></div>";
    scheduler.attachEvent("onTemplatesReady", function () {

        var date_to_str = scheduler.date.date_to_str("%d");
        var old_month_day = scheduler.templates.month_day;
        scheduler.templates.month_day = function (date) {
            if (this._mode == "month") {
                var label = date_to_str(date);
                if (date.getDate() == 1) {
                    label = scheduler.locale.date.month_full[date.getMonth()] + " " + label;
                }
                if (+date == +scheduler.date.date_part(new Date)) {
                    label = scheduler.locale.labels.dhx_cal_today_button + " " + label;
                }
                return label;
            } else {
                return old_month_day.call(this, date);
            }
        };

        if (scheduler.config.fix_tab_position) {
            var navline_divs = scheduler._els["dhx_cal_navline"][0].getElementsByTagName('div');
            var tabs = [];
            var last = 211;
            for (var i = 0; i < navline_divs.length; i++) {
                var div = navline_divs[i];
                var name = div.getAttribute("name");
                if (name) { // mode tab
                    div.style.right = "auto";
                    switch (name) {
                    case "day_tab":
                        div.className += " dhx_cal_tab_first";
                        break;
                    case "week_tab":
                        break;
                    case "month_tab":
                        div.className += " dhx_cal_tab_last";
                        break;
                    default:
                        div.className += " dhx_cal_tab_standalone";
                        last = last + 14 + div.offsetWidth;
                        break;
                    }
                }

            }
        }
    });
    scheduler._skin_init = function () {};
};


if (window.jQuery) {

    (function ($) {

        var methods = [];
        $.fn.dhx_scheduler = function (config) {
            if (typeof (config) === 'string') {
                if (methods[config]) {
                    return methods[config].apply(this, []);
                } else {
                    $.error('Method ' + config + ' does not exist on jQuery.dhx_scheduler');
                }
            } else {
                var views = [];
                this.each(function () {
                    if (this && this.getAttribute) {
                        if (!this.getAttribute("dhxscheduler")) {
                            for (var key in config)
                                if (key != "data")
                                    scheduler.config[key] = config[key];

                            if (!this.getElementsByTagName("div").length) {
                                this.innerHTML = '<div class="dhx_cal_navline"><div class="dhx_cal_prev_button">&nbsp;</div><div class="dhx_cal_next_button">&nbsp;</div><div class="dhx_cal_today_button"></div><div class="dhx_cal_date"></div><div class="dhx_cal_tab" name="day_tab" style="right:204px;"></div><div class="dhx_cal_tab" name="week_tab" style="right:140px;"></div><div class="dhx_cal_tab" name="month_tab" style="right:76px;"></div></div><div class="dhx_cal_header"></div><div class="dhx_cal_data"></div>';
                                this.className += " dhx_cal_container";
                            }
                            scheduler.init(this, scheduler.config.date, scheduler.config.mode);
                            if (config.data)
                                scheduler.parse(config.data);

                            views.push(scheduler);
                        }
                    }
                });

                if (views.length === 1) return views[0];
                return views;
            }
        };




    })(jQuery);

}

module.exports = scheduler
});

require.register("./components-ixia/scheduler/dhtmlxscheduler_container_autoresize.js", function (exports, module) {
/*
This software is allowed to use under GPL or you need to obtain Commercial or Enterise License
to use it in non-GPL project. Please contact sales@dhtmlx.com for details
*/
(function () {
    scheduler.config.container_autoresize = !0;
    scheduler.config.month_day_min_height = 90;
    var p = scheduler._pre_render_events;
    scheduler._pre_render_events = function (e, c) {
        if (!scheduler.config.container_autoresize) return p.apply(this, arguments);
        var g = this.xy.bar_height,
            l = this._colsS.heights,
            a = this._colsS.heights = [0, 0, 0, 0, 0, 0, 0],
            b = this._els.dhx_cal_data[0],
            e = this._table_view ? this._pre_render_events_table(e, c) : this._pre_render_events_line(e, c);
        if (this._table_view) if (c) this._colsS.heights = l;
        else {
            var f = b.firstChild;
            if (f.rows) {
                for (var d = 0; d < f.rows.length; d++) {
                    a[d]++;
                    if (a[d] * g > this._colsS.height - 22) {
                        var h = f.rows[d].cells,
                            j = this._colsS.height - 22;
                        this.config.max_month_events * 1 !== this.config.max_month_events || a[d] <= this.config.max_month_events ? j = a[d] * g : (this.config.max_month_events + 1) * g > this._colsS.height - 22 && (j = (this.config.max_month_events + 1) * g);
                        for (var i = 0; i < h.length; i++) h[i].childNodes[1].style.height = j + "px";
                        a[d] = (a[d - 1] || 0) + h[0].offsetHeight;
                    }
                    a[d] = (a[d - 1] || 0) + f.rows[d].cells[0].offsetHeight;
                }
                a.unshift(0);
            } else if (!e.length && this._els.dhx_multi_day[0].style.visibility == "visible" && (a[0] = -1), e.length || a[0] == -1) {
                var n = f.parentNode.childNodes,
                    m = (a[0] + 1) * g + 1 + "px";
                b.style.top = this._els.dhx_cal_navline[0].offsetHeight + this._els.dhx_cal_header[0].offsetHeight + parseInt(m, 10) + "px";
                b.style.height = this._obj.offsetHeight - parseInt(b.style.top, 10) - (this.xy.margin_top || 0) + "px";
                var k = this._els.dhx_multi_day[0];
                k.style.height = m;
                k.style.visibility = a[0] == -1 ? "hidden" : "visible";
                k = this._els.dhx_multi_day[1];
                k.style.height = m;
                k.style.visibility = a[0] == -1 ? "hidden" : "visible";
                k.className = a[0] ? "dhx_multi_day_icon" : "dhx_multi_day_icon_small";
                this._dy_shift = (a[0] + 1) * g;
                a[0] = 0;
            }
        }
        return e;
    };
    var n = ["dhx_cal_navline", "dhx_cal_header", "dhx_multi_day", "dhx_cal_data"],
        classes =  require('component~classes@1.2.3'),
        $calender = undefined,
        o = function (e) {
            for (var c = 0, g = 0; g < n.length; g++) {
                var l = n[g],
                    a = scheduler._els[l] ? scheduler._els[l][0] : null,
                    b = 0;
                switch (l) {
                case "dhx_cal_navline":
                case "dhx_cal_header":
                    b = parseInt(a.style.height, 10);
                    break;
                case "dhx_multi_day":
                    b = a ? a.offsetHeight : 0;
                    b == 1 && (b = 0);
                    break;
                case "dhx_cal_data":
                    var b = Math.max(a.offsetHeight - 1, a.scrollHeight),
                        f = scheduler.getState().mode;
                    if (f == "month") {
                        if (scheduler.config.month_day_min_height && !e) var d = a.getElementsByTagName("tr").length,
                            b = d * scheduler.config.month_day_min_height;
                        if (e) a.style.height = b + "px";
                    }
                    if (scheduler.matrix && scheduler.matrix[f]) if (e) b += 2, a.style.height = b + "px";
                    else for (var b = 2, h = scheduler.matrix[f], j = h.y_unit, i = 0; i < j.length; i++) b += !j[i].children ? h.dy : h.folder_dy || h.dy;
                    if (f == "day" || f == "week") b += 2;
                }
                c += b;
            }
            scheduler._obj.style.height = c + "px";
            e || scheduler.updateView();
        },
        c = function () {
            $calender = $calender || document.querySelector(".calendar-body");
            if($calender && classes($calender).has('hidden')){
                return;
            }
            var c = scheduler.getState().mode;
            o();
            (scheduler.matrix && scheduler.matrix[c] || c == "month") && window.setTimeout(function () {
                o(!0)
            }, 1);
        };
    scheduler.attachEvent("onViewChange", c);
    scheduler.attachEvent("onXLE", c);
    scheduler.attachEvent("onEventChanged", c);
    scheduler.attachEvent("onEventCreated", c);
    scheduler.attachEvent("onEventAdded", c);
    scheduler.attachEvent("onEventDeleted", c);
    scheduler.attachEvent("onAfterSchedulerResize", c);
    scheduler.attachEvent("onClearAll", c);
})();
});

require.register("./components-ixia/scheduler", function (exports, module) {
var template = require('./components-ixia/scheduler/templates/index.js'),
    moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68'),
    domify = require('component~domify@1.3.1'),
    _      = require('jashkenas~underscore@1.8.2'),
    dhtmlxScheduler = require('./components-ixia/scheduler/dhtmlxscheduler.js'),
    autoresize = require('./components-ixia/scheduler/dhtmlxscheduler_container_autoresize.js'),
    event = require('component~event@0.1.4'),
    TestEvent = require('./components-ixia/scheduler/test-event.js'),
    CalendarItem = require('./components-ixia/scheduler/calendar-item.js'),
    EventList = require('./components-ixia/scheduler/event-list.js'),
    TestViewModel = require('./components-ixia/test-view-model'),
    TestViewModelDelegate = require('./components-ixia/scheduler/delegates/test-view-model.js'),
    instance,
    AgendaViewModel = require('./components-ixia/agenda'),
    classes = require('component~classes@1.2.3'),
    showEventBalloon = require('./components-ixia/scheduler/balloon.js');

var $ = window.jQuery,
    translate = window.translate,
    ko = window.ko;

function Scheduler(rootVm) {
    var self = this,
        TestViewModel = window.TestViewModel,
        delegate = new TestViewModelDelegate(self);

    self.rootVm = rootVm;
    self.schedulerTest = new TestViewModel(rootVm, delegate);
    self.rendered = false;
    self.$el = domify(template);

    self.calendarItems = ko.observableArray();
    self.unfilteredCalendarItems = ko.observableArray();
    self.updatedItem = new Array();
    self.devices = ko.computed(function() {
        return self.calculateDevicesList(self.unfilteredCalendarItems());
    });

    self.searchText = ko.observable("");
    self.checkedDevices = ko.observableArray([]);

    self.eventList = new EventList();
//    self.rootVm.testResultsHistoryHandlers.push(self);
    self.agenda = undefined;

    self.formats = {
        ldml: {
            date: "YYYY-MM-DD",
            time: "hh:mm"
        },
        strftime: {
            date: "%Y-%m-%d",
            time: "%h:%i"
        }
    };

    self.strings = {
        "Deleting a repeating event will delete all events in the series": window.translate("Deleting a repeating event will delete all events in the series"),
        "Editing a repeating event will update all events in the series": window.translate("Editing a repeating event will update all events in the series")
    };
}

Scheduler.create = function(rootVm) {
    if (!instance) {
        instance = new Scheduler(rootVm);
    }

    return instance;
}

Scheduler.prototype.render = function() {
    try {
        var self = this;

        if (self.rendered) {
            // If user click the 'calendar' tab, we need to check whether we have new history results need to add into Calendar cache
            if (self.updatedItem.length) {
                self.unfilteredCalendarItems(self.unfilteredCalendarItems().concat(self.updatedItem));
                self.calendarItems(self.calendarItems().concat(self.updatedItem));
                self.updatedItem = new Array();
            }

            self.reloadCalendar();

            return;
        }

        self.updatedItem = new Array();
        self.schedulingCalendarVisible = ko.observable(true);
        self.schedulingTestVisible = ko.computed(function () { return !self.schedulingCalendarVisible(); })

        document.querySelector('#main > .calendar').appendChild(self.$el);


        //self.eventList.render(self.calendarItems);

        self.initAgenda();

        self.$el.querySelector('.calendar-agenda-container').appendChild(self.agenda.$el);

        self.initCalendar();

        self.initBindings();

        self.init_render_adjust();

        self.rendered = true;
    } catch(e) { window.logger.error(e + ' stack: ' + e.stack); }
}

Scheduler.prototype.init_render_adjust = function() {
    var self = this,
        $el = self.$el,
        $agenda_button = $el.querySelector(".tab_agenda"),
        $calender_view_buttons = $el.querySelectorAll(".dhx_cal_tab"),
        $calender_date = $el.querySelector(".dhx_cal_date");

    classes($agenda_button).add('active');

    [].forEach.call($calender_view_buttons, function($buttons){
        if(classes($buttons).has('active')){
            classes($buttons).remove('active');
        }
    });

    $calender_date.textContent = self.agenda.get_date();
}

Scheduler.prototype.initAgenda = function() {
    var self = this,
        click_handler = function() {
            var event_self = this,
                $el = this.$el,
                model = this.model,
                devices = model.remote_devices() || [];

            if(devices && devices.length === 0){
                devices.unshift({
                    id: -1,
                    name: translate("Local chassis"),
                    host: null
                });
            }

            switch (model.type()) {
                // XXX DRY this two calls
                case "scheduled_test":
                    showEventBalloon(
                        $el,
                        model.name(),
                        moment(model.datetime()).format("LT"),
                        'scheduled',
                        undefined,
                        devices,

                        translate("Delete"),
                        function () {
                            var cancel_handler = function(){
                                model.cancelTestEvent(function() {
                                    self.agenda.reset(false);
                                })
                            };

                            if(model.event_info() && model.event_info().type === 'RECURRING'){
                                util.lightbox.confirmation_dialog(event_self,self.strings["Deleting a repeating event will delete all events in the series"],cancel_handler);
                            }
                            else{
                                cancel_handler();
                            }
                        },

                        translate("Edit"),
                        function () {
                            var edit_handler = function(){
                                var test = new TestTemplateViewModel(self.rootVm);
                                test.inflate(model.test_config());
                                self.schedulerTest.loadTest(test, new TestEvent(model.event_info()));
                            };

                            if(model.event_info() && model.event_info().type === 'RECURRING'){
                                util.lightbox.confirmation_dialog(event_self,self.strings["Editing a repeating event will update all events in the series"],edit_handler);
                            }
                            else{
                                edit_handler();
                            }
                        }
                    );
                    break;
                case "executed_test":
                    showEventBalloon(
                        $el,
                        model.name(),
                        moment(model.datetime()).format("LT"),
                        model.status(),
                        model.error_reason(),
                        devices,

                        undefined,
                        undefined,

                        translate("View results"),
                        function () {
                            self.openTestResultsPage(model.test_result_id());
                        }
                    );
                    break;

                case "remotely_scheduled_test":
                    showEventBalloon(
                        $el,
                        model.name(),
                        moment(model.datetime()).format("LT"),
                        window.translate('scheduled remotely (read-only)'),
                        model.error_reason(),
                        devices,

                        undefined,
                        undefined,

                        undefined,
                        undefined
                    );
                    break;
            }
        }

    self.agenda = AgendaViewModel.factory(click_handler);
    self.initAgendaBindings();
}

Scheduler.prototype.initCalendar = function() {
    var self = this,
        formats = self.formats.strftime;

    dhtmlxScheduler.config.readonly = true;
    dhtmlxScheduler.config.api_date = formats.date + ' ' + formats.time;
    dhtmlxScheduler.config.xml_date = formats.date + ' ' + formats.time;
    dhtmlxScheduler.config.drag_move = false;
    dhtmlxScheduler.config.drag_resize= false;
    dhtmlxScheduler.config.dblclick_create = false;
    dhtmlxScheduler.config.details_on_dblclick = false;
    dhtmlxScheduler.config.max_month_events = 3;
    dhtmlxScheduler.config.fix_tab_position = false;
    dhtmlxScheduler.config.separate_short_events = true;
    dhtmlxScheduler.xy.bar_height = 47;
    dhtmlxScheduler.xy.scale_width = 60;
    dhtmlxScheduler.xy.min_event_height = 34;
    dhtmlxScheduler.xy.scroll_width = 0;

    dhtmlxScheduler.renderEvent = function(container, event) {
        var event_bar_date = dhtmlxScheduler.templates.event_bar_date(event.start_date, event.end_date, event),
            event_bar_text = dhtmlxScheduler.templates.event_bar_text(event.start_date, event.end_date, event);

        container.innerHTML = event_bar_date + event_bar_text;
        return true;
    };

    dhtmlxScheduler.templates.event_class = function(start, end, calendarItem) {
        return calendarItem.status;
    };

    dhtmlxScheduler.templates.event_bar_icon = function(start, end, calendarItem) {
        var status = calendarItem.status;

        return status === undefined || status === 'pass' ? '' : '<span class="status-icon"></span>';
    };

    dhtmlxScheduler.templates.event_bar_date = function(start, end, calendarItem) {
        var html = dhtmlxScheduler.templates.event_bar_icon(start, end, calendarItem);

        html += ' <b>' + moment(start).format('LT') + '</b>';

        return html;
    };

    dhtmlxScheduler.templates.event_bar_text = function(start, end, calendarItem) {
        // XXX refactor to template!
        var result = "";
        //comment KO way because it conflict with calendar autosize
//        result += '<span class="calendar-item-devices event-devices" data-item-id=' + calendarItem.id + ' data-bind="foreach: devices">';
//        result += '  <span class="icon" data-bind="style: {backgroundColor: color, borderColor: color}"></span>';
//        result += '</span>';
//        result += '<div class="testName"><span title="'+ calendarItem.text+'">' + calendarItem.text + '</span></div>';

        result += '<span class="calendar-item-devices event-devices">';
        calendarItem.devices.forEach(function(device){
            var color = device.color;
            result += '  <span class="icon" style="background-color: '+ color+'; border-color:'+ color+';"></span>';
        });
        result += '</span>';
        result += '<div class="testName"><span title="'+ calendarItem.text+'">' + calendarItem.text + '</span></div>';
        return result;
    }

    dhtmlxScheduler.init('scheduler_here', new Date(), "day");

    self.calendarItems.subscribe(function(newVal) {
        dhtmlxScheduler.clearAll();
        dhtmlxScheduler.parse(newVal, "json");
//        self.bindCalendarDevicesKOHAndlers();
    })

    dhtmlxScheduler.attachEvent("onViewChange", Scheduler.prototype.reloadCalendarItems.bind(this));

    //this.reloadCalendarItems();
}

//Scheduler.prototype.bindCalendarDevicesKOHAndlers = function() {
//    var events = document.querySelectorAll('#scheduler_here .calendar-item-devices'),
//        self = this;
//    _.each(events, function(event) {
//        var itemId = event.dataset.itemId,
//            item = _.find(self.calendarItems(), function(item) { return item.id == itemId });
//        ko.applyBindings(item, event);
//    })
//}

Scheduler.prototype.calculateDevicesList = function(items) {
    // method semantics: items.map(&:devices).flatten.uniq
    // XXX refactor to underscore

    var resultMap = {},
        result = [];

    for (var i = 0, len = items.length; i < len; ++i) {
        var devices = items[i].devices;
        for (var j = 0, len2 = devices.length; j < len2; ++j) {
            resultMap[devices[j].id] = devices[j];
        }
    }

    for(var o in resultMap) {
        result.push(resultMap[o]);
    }

    return result;
}

Scheduler.prototype.reloadCalendarItems = function() {
    var self = this;

    var state = dhtmlxScheduler.getState();
    util.lightbox.working(new LightboxWorkingViewModel(window.translate("Start"), window.translate("Loading Calendar Items...")));
    CalendarItem.loadByRange(state.min_date, state.max_date, function(calendarItems) {
        var items = self.prepareItems(calendarItems);
        self.unfilteredCalendarItems(items);
        self.calendarItems(items);
        util.lightbox.close();
    })
}

Scheduler.prototype.updateCache = function(data) {
    var self = this;
    var tmpCalendarItems = self.calendarItems();
    // Make sure no expired tests existed in Calendar cache
    for (var i = 0; i < tmpCalendarItems.length; i++) {
        var currDate = new Date();
        if (tmpCalendarItems[i].start_date < currDate) {
            if (tmpCalendarItems[i].test_result_id == undefined) {
                self.calendarItems.remove(tmpCalendarItems[i]);
            }
        }
    }

    for (var i = 0; i < data.length; i++) {
        var updateData = data[i];
        for (var j = 0; j < self.calendarItems().length; j++) {
            if (data[i].result_id <= self.calendarItems()[j].test_result_id) {
                updateData = undefined;
                break;
            }
        }
        if (updateData) {
            self.updateCalendarItemByResultId(updateData.result_id);
        }
    }
}

Scheduler.prototype.updateCalendarItemByResultId = function(result_id) {
    var self = this;

    var state = dhtmlxScheduler.getState();
    util.lightbox.working(new LightboxWorkingViewModel(window.translate("Start"), window.translate("Loading Calendar Items...")));
    CalendarItem.loadByResultId(result_id, function(calendarItems) {
        var items = self.prepareItems(calendarItems);
        self.updatedItem = self.updatedItem.concat(items);
        // If current tab is 'calendar', we need to refresh the calendar cache automatically
        if (self.rootVm.selectedTab() == 'calendar') {
            self.unfilteredCalendarItems(self.unfilteredCalendarItems().concat(self.updatedItem));
            self.calendarItems(self.calendarItems().concat(self.updatedItem));
            self.updatedItem = new Array();
        }
        util.lightbox.close();
    })
}

Scheduler.prototype.prepareItems = function(items) {
    var result = [];
    for (var i = 0; i < items.length; i++) {
        result.push(items[i].viewModel(this.checkedDevices, this));
    }

    return result;
}

Scheduler.prototype.reloadCalendar = function() {
    var self = this,
        $el = self.$el,
        $agenda = $el.querySelector(".calendar-agenda-container"),
        $calender = $el.querySelector(".calendar-body");

    if(classes($calender).has('hidden')){
        self.agenda.reset(false);
    }
    else{
        self.reloadCalendarItems();
    }
}

Scheduler.prototype.initAgendaBindings = function() {
    var self = this,
        $el = self.$el,
        $agenda = $el.querySelector(".calendar-agenda-container"),
        $scheduler_here = $el.querySelector("#scheduler_here"),
        $calender = $el.querySelector(".calendar-body"),
        $agenda_button = $el.querySelector(".tab_agenda"),
        $today_button = $el.querySelector(".dhx_cal_today_button"),
        $prev_button = $el.querySelector(".dhx_cal_prev_button"),
        $next_button = $el.querySelector(".dhx_cal_next_button"),
        $calender_view_buttons = $el.querySelectorAll(".dhx_cal_tab"),
        $calender_date = $el.querySelector(".dhx_cal_date"),
        $calender_search = $el.querySelector(".scheduler-search input.shaded");

    var reset_search = function(){
            $calender_search.value = '';
            self.agenda.set_search_key('');
        },
        //agenda date -> calendar date
        sync_date_to_calendar = function(){
            if(window.scheduler && window.scheduler._date){
                window.scheduler._date = new Date(self.agenda.get_date()); //new Date(self.focused_datetime.format('YYYY-MM-DD'));
            }
        },
        //calendar date -> agenda date
        sync_date_from_calendar = function(){
            if(window.scheduler && window.scheduler._date){
                self.agenda.model.set_focused_date(moment(window.scheduler._date).startOf('day'));
            }
        },
        calender_views_handler = function(e){
            reset_search();
            if(classes($calender).has('hidden')){
                classes($calender).remove('hidden');
                classes($agenda).add('hidden');
                classes($agenda_button).remove('active');
            }
        },
        agenda_view_handler = function(e){
            reset_search();
            if(classes($agenda).has('hidden')){
                classes($agenda).remove('hidden');
                classes($agenda_button).add('active');
                classes($calender).add('hidden');
                $scheduler_here.removeAttribute("style");

            }
            [].forEach.call($calender_view_buttons, function($buttons){
                if(classes($buttons).has('active')){
                    classes($buttons).remove('active');
                }
            });
            sync_date_from_calendar();
            self.agenda.reset(false);
            $calender_date.textContent = self.agenda.get_date();
            self.unfilteredCalendarItems([]);
        },
        today_handler = function(e){
            if(classes($calender).has('hidden')){
                if (e && e.stopPropagation) {
                    e.stopImmediatePropagation();
                }
                self.agenda.reset(true);
                $calender_date.textContent = self.agenda.get_date();
                sync_date_to_calendar();
            }
        },
        prev_handler = function(e){
            if(classes($calender).has('hidden')){
                if (e && e.stopPropagation) {
                    e.stopImmediatePropagation();
                }
                self.agenda.model.shift_focused_date(-1);
                self.agenda.reset(false);
                $calender_date.textContent = self.agenda.get_date();
                sync_date_to_calendar();
            }
        },
        next_handler = function(e){
            if(classes($calender).has('hidden')){
                if (e && e.stopPropagation) {
                    e.stopImmediatePropagation();
                }
                self.agenda.model.shift_focused_date(1);
                self.agenda.reset(false);
                $calender_date.textContent = self.agenda.get_date();
                sync_date_to_calendar();
            }
        };

    var done_typing_interval = 1000,
        done_typing = function(){
            self.agenda.reset(false);
        },
        typing_timer,
        search_keyup_handler = function(e){
            if(classes($calender).has('hidden')){
                if (e && e.stopPropagation) {
                    e.stopImmediatePropagation();
                }
                clearTimeout(typing_timer);
                typing_timer = setTimeout(done_typing, done_typing_interval);
                self.agenda.set_search_key($calender_search.value);
            }
        };

    event.bind($today_button, 'click', today_handler);
    event.bind($prev_button, 'click', prev_handler);
    event.bind($next_button, 'click', next_handler);
    event.bind($agenda_button, 'click', agenda_view_handler);
    [].forEach.call($calender_view_buttons, function($buttons){
        event.bind($buttons, 'click', calender_views_handler);
    });

//    event.bind($calender_search, 'input', search_keyup_handler);
    $($calender_search).on('input', search_keyup_handler)

    classes($calender).add('hidden');
}

Scheduler.prototype.initBindings = function() {
    var self = this,
        scheduleButton = document.querySelector(".scheduler-test-button");


    event.bind(scheduleButton, "click", function() {
        self.schedulerTest.openTestCreationLightbox();
    })

    self.devices.subscribe(function(devices) {
        var ids = _.map(devices, function(device) { return device.id });
        self.checkedDevices(ids);
    })


    dhtmlxScheduler.attachEvent("onClick", function(id, e) {
        var calendarEvent = dhtmlxScheduler.getEvent(id);
        CalendarItem.itemOnClickHandler(e, calendarEvent, self);
    })

    self.searchText.subscribe(function(newVal) {
        self.filterItems();
    })

    ko.applyBindings(self, self.$el);
}


Scheduler.prototype.openTestResultsPage = function(test_result_id) {
    var self = this;
    var matchedResults = ko.utils.arrayFirst(self.rootVm.testResultsHistory(), function (item) {
        return item.result_id() === test_result_id;
    });

    if (matchedResults === null) {
        // Keep the context to use it later (In callback function)
        var context = self;
        self.rootVm.getResultHistory({"result_id" : test_result_id}, function(){
            matchedResults = ko.utils.arrayFirst(context.rootVm.testResultsHistory(), function (item) {
                return item.result_id() === test_result_id;
            });

            if (matchedResults !== null) {
                context.rootVm.loadRecentTest(matchedResults)
            }
        });
    } else {
        self.rootVm.loadRecentTest(matchedResults);
    }
}

Scheduler.prototype.filterItems = function() {
    var items = this.unfilteredCalendarItems(),
        filteredItems = this.filterRemoteBoxes(this.filterSearch(items));

    this.calendarItems(filteredItems);
}

Scheduler.prototype.filterSearch = function(items) {
    var result = [],
        searchText = this.searchText();

    for (var i = 0,len = items.length; i < len; ++i) {
        if (items[i].name.toLowerCase().indexOf(searchText.toLowerCase()) != -1) {
            result.push(items[i]);
        }
    }

    return result;
}

Scheduler.prototype.filterRemoteBoxes = function(items) {
    var result = [],
        checkedBoxes = this.checkedDevices();

    for (var i = 0,len = items.length; i < len; ++i) {
        if (items[i].hasAnyDevice(checkedBoxes)) {
            result.push(items[i]);
        }
    }

    return result;
}

Scheduler.prototype.toggleBoxChecker = function(device) {
    if (this.checkedDevices().indexOf(device.id) == -1){
        this.checkedDevices.push(device.id);
    } else {
        this.checkedDevices.remove(device.id);
    }
    this.filterItems();
}


module.exports = Scheduler;

});

require.register("./components-ixia/scheduler/test-event.js", function (exports, module) {
/*global ko:true, ValidationResultsViewModel:true, LightboxWorkingViewModel:true */

var model = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12'),
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a'),
    moment = require('johntron~moment-timezone@0f4b9df99d9f6212c2036f5ae6f74b240f289381'),
    tz = require('./components-ixia/scheduler/tz.js'),
    repeater_types_map = {
        "DAILY": "day(s)",
        "WEEKLY": "week(s)",
        "MONTHLY": "month(s)"
    },
    AsyncPoller = require('./components-ixia/async-poller');

var handled_failure_reasons = [
    'event_is_in_past',
    'conflicts_found',
    'conflicts_with_remote_events_found'
];

/**
 * Returns a user-friendly error message for a given error reason - add more!
 *
 * @param reason One of TestEvent.failure_handlers
 * @param details
 * @returns {string}
 */
function get_friendly_error(reason, details) {
    var map = {
        'event_is_in_past': function (details) {
            return window.translate('calendar.schedule_in_past', {
                datetime: moment(details.server_time).format('LLL')
            });
        },

        'conflicts_found': function (details) {
            return window.translate('calendar.schedule_conflicts', {
                name: details[0].name,
                datetime: moment.tz(details[0].datetime, 'UTC').tz(tz.name()).format('LLL')
            });
        },

        'conflicts_with_remote_events_found': function (details) {
            return window.translate('calendar.conflicts_with_remote_events', {
                chassis: details.device.name,
                test: details.conflicts[0].name,
                datetime: moment.tz(details.conflicts[0].datetime, 'UTC').tz(tz.name()).format('LLL')
            });
        }
    };

    if (map[reason] === undefined) {
        return reason;
    }

    return map[reason](details);
}

/**
 * Factory for creating callbacks to use during reservation, validation,
 * and persistence phases. Updates lightbox with user-friendly messages.
 *
 * @param lightbox_title
 * @param success
 * @param error
 * @returns {function} Callback
 */
function handler_factory(lightbox_title, success, error) {
    success = success || function () {};
    error = error || function () {};

    return function handle_response(err, res) {
        var failure_message,
            lightbox_vm;

        if (res.body.result === 'FAILURE' && handled_failure_reasons.indexOf(res.body.reason) !== -1) {
            // Failed, but we can handle it

            failure_message = get_friendly_error(res.body.reason, res.body.details);

            lightbox_vm = new ValidationResultsViewModel();
            lightbox_vm.addCheckResults(lightbox_title, false, failure_message);

            window.util.lightbox.open({
                url : 'html/lightbox_tmpl',
                selector : '#lightbox-run-test-validation-template',
                cancelSelector: '.cancel-button',
                isModal : false,
                onOpenComplete: function show_invalid() {
                    var $lb = document.querySelector('#lightbox-run-test-validation');
                    ko.applyBindings(lightbox_vm, $lb);
                    error(res);
                }
            });
            return;
        }

        if (res.body.result === 'FAILURE' || err) {
            // Unknown/exceptional error
            var e = res.body || err;
            window.logger.error(e);
            window.util.lightbox.error(lightbox_title);
            return error(e);
        }

        if (res.body.is_ready === false && res.body.is_valid && res.body.messages.length) {
            // Still validating, update the lightbox
            var message = res.body.messages[0];

            lightbox_vm = new LightboxWorkingViewModel(lightbox_title, message.header, null, message.content);
            window.util.lightbox.working(lightbox_vm);
            return success(res);
        }

        if (res.body.is_ready === false && res.body.is_valid === false) {
            // Failed validation, surface error to user

            var messages = res.body.messages || [];

            lightbox_vm = new ValidationResultsViewModel();

            // Add failure messages to validation lightbox
            messages.forEach(function (message) {
                // Make message human-friendly if possible
                var friendly_message = get_friendly_error(message.content);

                lightbox_vm.addCheckResults(message.header, false, friendly_message);
            });

            window.util.lightbox.open({
                url : 'html/lightbox_tmpl',
                selector : '#lightbox-run-test-validation-template',
                cancelSelector: '.cancel-button',
                isModal : false,
                onOpenComplete: function show_invalid() {
                    var $lb = document.querySelector('#lightbox-run-test-validation');
                    ko.applyBindings(lightbox_vm, $lb);
                    error(res);
                }
            });
            return;
        }

        return success(res);
    };
}

var TestEvent = model('TestEvent')
    .attr('id')
    .attr('type')
    .attr('name')
    .attr('duration')
    .attr('timezone')
    .attr('details');

TestEvent.createOrUpdateTestEvent = function (testConfig, eventConfig, callback) {
    var reserve_and_begin_validation,
        poll_for_validation,
        persist = eventConfig.id ? TestEvent.update : TestEvent.create;

    // Chain the phases
    persist = persist.bind(this, testConfig, eventConfig, callback);
    poll_for_validation = TestEvent.poll_for_validation.bind(this, persist);
    reserve_and_begin_validation = TestEvent.reserve_and_begin_validation.bind(this, testConfig, eventConfig, poll_for_validation);

    // Begin the process
    reserve_and_begin_validation();
};

TestEvent.cancelTestEvent = function (id, callback) {
    request
        .post('/ixia/schedule/test-events/' + id + '/cancel')
        .use(no_cache)
        .send('')
        .set('Accept', 'application/json')
        .end(function (err, res) {
            if (err || res.body.result === 'FAILURE') {
                window.logger.error(err || res.body);
                window.util.lightbox.error(window.translate("Canceling scheduled test"));
                return;
            }

            return callback(res);
        });
};

/**
 * Performs server-side validation
 */
TestEvent.reserve_and_begin_validation = function (test_config, event_config, success) {
    var status = window.translate('Validating schedule'),
        lb = new LightboxWorkingViewModel('working', status),
        url = '/sp/ixiahedule/pending-events',
        data = {
            'test_config': test_config,
            'event_config': event_config
        };

    window.util.lightbox.working(lb);

    if (event_config.id) {
        data.event_id = event_config.id;
    }

    request.post(url)
        .use(no_cache)
        .send(JSON.stringify(data))
        .set('Accept', 'application/json')
        .end(handler_factory(status, success));
};

TestEvent.poll_for_validation = function (success) {
    var status = window.translate('Validating Test Configuration...'),
        lb = new LightboxWorkingViewModel('working', status),
        again, // Set in poll()
        handle_success = function (response) {
            var is_running = !response.body.is_ready && response.body.is_valid;

            if (is_running) {
                // Continue polling
                return again();
            }

            // Validation completed
            poller.stop();

            if (response.body.is_ready) {
                success();
            }
        },
        handle_failure = function () {
            poller.stop();
        },
        handle_response = handler_factory(status, handle_success, handle_failure),
        poll = function (next) {
            again = next;

            request.get('/spire/ixiastestready')
                .use(no_cache)
                .set('Accept', 'application/json')
                .end(handle_response);
        },
        poller = new AsyncPoller(poll, 500);

    window.util.lightbox.working(lb);

    // Start polling
    poller.poll();
};

TestEvent.create = function (test_config, event_config, success) {
    var status = window.translate('Saving scheduled test'),
        lb = new LightboxWorkingViewModel('working', status),
        url = '/spirent//ixia/test-events',
        data = {
            'test_config': test_config,
            'event_config': event_config
        };

    window.util.lightbox.working(lb);

    request.post(url)
        .use(no_cache)
        .send(JSON.stringify(data))
        .set('Accept', 'application/json')
        .end(handler_factory(status, success));
};

TestEvent.update = function (test_config, event_config, success) {
    var status = window.translate('Updating scheduled test'),
        lb = new LightboxWorkingViewModel('working', status),
        url = '/spirent/schedule/test-events/' + event_config.id,
        data = {
            'test_config': test_config,
            'event_config': event_config
        };

    window.util.lightbox.working(lb);

    request.put(url)
        .use(no_cache)
        .send(JSON.stringify(data))
        .set('Accept', 'application/json')
        .end(handler_factory(status, success));
};

TestEvent.emptyEvent = function(){
    return {
        type: 'SINGLE',
        details: { fire_datetime: moment().utc().add(5, 'minutes').format("YYYY-MM-DD HH:mm") },
        timezone: tz.name()
    }
};

var WEEKDAYS = ['MONDAY', 'TUESDAY', 'WEDNESDAY', 'THURSDAY', 'FRIDAY', 'SATURDAY', 'SUNDAY'];

TestEvent.fromViewModel = function(vm) {
    var result = {
            "name": vm.testEventName(),
            "duration": vm.duration(),
            "timezone": tz.name()
        };

    if (vm.eventId) {
        result.id = vm.eventId;
    }

    if (vm.schedulerRepeat() == false) {
        result.type = "SINGLE";
        result.details = {
                "fire_datetime": vm.selectedScheduleDate() + ' ' + vm.selectedScheduleTime()
            };
    } else {
        result.type = "RECURRING";
        result.details = {
                "repetition_type": vm.repeatType(),
                "interval": parseInt(vm.repeatInterval()),
                "fire_time": vm.selectedScheduleTime(),
                "start_date": vm.selectedScheduleDate()
            };
        switch (vm.repeatEndsOnType()) {
            case "NEVER":
                break;
            case "COUNT":
                result.details.count = parseInt(vm.repeatCount());
                break;
            case "ON":
                result.details.end_date = vm.repeatUntil();
                break;
        }

        switch (vm.repeatType()) {
            case "WEEKLY":
                result.details.days_of_week = vm.selectedWeekdays();
                break;
            case "MONTHLY":
                var date = moment(vm.selectedScheduleDate()),
                    dayOfMonth = date.date(),
                    dayOfWeek = date.day();

                switch (vm.selectedMonthlyRepeatByType()) {
                    case "NTH_DAY":
                        result.details.special_day_of_month = "NTH_DAY";
                        result.details.position_in_month = dayOfMonth;
                        break;
                    case "NTH_WEEKDAY":
                        result.details.special_day_of_month = "NTH_" + vm.selectedScheduleWeekday();
                        result.details.position_in_month = Math.floor(dayOfMonth / 7) + 1; // n-th week in month
                        break;
                }
                break;
        }
    }

    return new this(result);
}

TestEvent.initTestEventFields = function(base) {
    base.eventId = undefined;
    base.atTimeTranslation = translate("at");
    base.forTimeTranslation = translate("for");
    base.scheduleAtestToRunOnTranslation = translate("Run on");
    base.neverTranslation = translate("Repeat forever");
    base.afterTranslation = translate("Stop after");
    base.occurencesTranslation = translate("test(s)");
    base.onTranslation = translate("Stop on");

    base.duration = ko.computed(function() { return base.vmConfiguration.duration() });
    base.durationTranslation = ko.computed(function() { return base.vmConfiguration.duration() + ' ' + translate('min(s)'); });

    base.testEventName = ko.observable(base.vmConfiguration.name());
    base.testEventName.subscribe(function(newVal) {
        if (newVal !== undefined && base.vmConfiguration.name() != newVal) {
            base.vmConfiguration.name(newVal);
        }
    });
    base.availableScheduleTimes = TestEvent.generateAvailableScheduleTimes();
    base.availableRepeaterDisplayTypes = ko.observable([
        {
            value: 'DAILY',
            label: translate(repeater_types_map.DAILY)
        },
        {
            value: 'WEEKLY',
            label: translate(repeater_types_map.WEEKLY)
        },
        {
            value: 'MONTHLY',
            label: translate(repeater_types_map.MONTHLY)
        }
    ]);
    base.availableRepeatIntervals = ko.observable(['1','2','3','4','5','6']);
    base.repeatWeekdays = ko.observable(WEEKDAYS);


    // real data, same fields as in refillTestEventFields
    base.selectedScheduleDate = ko.observable(moment().format("YYYY-MM-DD"));
    base.selectedScheduleWeekday = ko.computed(function() { // this one is not real data, calculation dependencies put it here
        var weekDay = moment(base.selectedScheduleDate()).day();
        if (weekDay == 0)
            weekDay = 7 ;// js sunday is 0
        return WEEKDAYS[weekDay - 1];
    })
    base.selectedScheduleMeridian = ko.observable(moment().add(1, 'hours').format("hh:00 a"));
    base.selectedScheduleTime = ko.computed(function() {
        return moment(base.selectedScheduleMeridian(), "hh:mm a").format("HH:mm");
    });
    base.selectedScheduleTimezone = ko.observable(tz.name());
    base.schedulerRepeat = ko.observable(false);
    base.repeatType = ko.observable(base.availableRepeaterDisplayTypes()[0].value);
    base.repeatTypeTranslation = ko.computed(function () {
        return repeater_types_map[base.repeatType()];
    });
    base.repeatInterval = ko.observable('1');
    base.selectedWeekdays = ko.observableArray([base.selectedScheduleWeekday()]);
    base.selectedMonthlyRepeatByType = ko.observable("");
    base.repeatEndsOnType = ko.observable("ON");
    base.repeatUntil = ko.observable(moment(base.selectedScheduleDate()).add('months', 3).format("YYYY-MM-DD")); // default value: 3 month from today
    base.repeatCount = ko.observable('1');
    // end real data, everything below immediately depends on above


    base.repeaterTitle = ko.computed(function() {
        var result = [translate('every'), base.repeatInterval(), base.repeatTypeTranslation()].join(' ');

        if (base.repeatEndsOnType() == "COUNT") {
            result += ', ' + base.repeatCount() + ' ' + translate("time(s)");
        }

        if (base.repeatEndsOnType() == "ON") {
            result += " " + translate("until") + " " + base.repeatUntil();
        }
        return result + ".";
    })

    base.timezone = ko.computed(function() {
        var tz = base.selectedScheduleTimezone();

        tz = tz.replace('_', ' ');

        return '(' + tz + ')';
    });

}

// XXX ugly, but looks like no way to reapply whole sub-view-model in KO? elaborate and refactor.
TestEvent.prototype.refillTestEventFields = function(base) {
    var local_timezone = tz.name(),
        fire_datetime = moment.tz(this.fire_Datetime(), 'UTC').tz(local_timezone);

    base.eventId = this.get('id') || undefined;
    base.testEventName(this.get('name'));
    base.selectedScheduleDate(fire_datetime.format('YYYY-MM-DD'));
    base.selectedScheduleMeridian(fire_datetime.format('hh:mm a'));
    base.selectedScheduleTimezone(local_timezone);
    base.schedulerRepeat(this.isRecurring());

    // XXX values duplicate with initTestEventFields, find a way to DRY
    base.repeatType(base.availableRepeaterDisplayTypes()[0].value);
    base.repeatInterval('1');
    base.selectedWeekdays([base.selectedScheduleWeekday()]);
    base.selectedMonthlyRepeatByType("");
    base.repeatEndsOnType("ON");
    base.repeatUntil(moment(base.selectedScheduleDate()).add('months', 3).format("YYYY-MM-DD")); // default value: 3 month from today
    base.repeatCount('1');

    // now rewrite fields with real values only
    if (this.isRecurring()) {
        base.repeatInterval(this.get('details').interval.toString());
        base.repeatType(this.get('details').repetition_type);
        switch (base.repeatType()) {
            case "WEEKLY":
                base.selectedWeekdays(this.get('details').days_of_week);
                break;
            case "MONTHLY":
                if (this.get('details').special_day_of_month == 'NTH_DAY') {
                    base.selectedMonthlyRepeatByType('NTH_DAY');
                } else {
                    base.selectedMonthlyRepeatByType('NTH_WEEKDAY');
                }
                break;
        }
        if (this.get('details').count) {
            base.repeatEndsOnType('COUNT');
            base.repeatCount(this.get('details').count);
        } else if (this.get('details').end_date) {
            // ... repeatEndsOnType is already set to ON
            base.repeatUntil(this.get('details').end_date);
        } else {
            base.repeatEndsOnType("NEVER");
        }
    }
}

TestEvent.prototype.fire_Datetime = function() {
    if (this.isRecurring()) {
        return this.get('details').start_date + ' ' + this.get('details').fire_time;
    } else {
        return this.get('details').fire_datetime;
    }
}

TestEvent.prototype.fireDate = function() {
    if (this.isRecurring()) {
        return this.get('details').start_date;
    } else {
        return this.get('details').fire_datetime.split(' ')[0];
    }
}

TestEvent.prototype.fireTime = function() {
    if (this.isRecurring()) {
        return this.get('details').fire_time;
    } else {
        return this.get('details').fire_datetime.split(' ')[1];
    }
}

TestEvent.prototype.isRecurring = function() {
    return this.get('type') == 'RECURRING';
}

TestEvent.generateAvailableScheduleTimes = function() {
    var times = [];

    for (var i = 0; i <= 23; ++i) {
        times.push("" + i + ":" + "00");
        times.push("" + i + ":" + "30");
    }

    return times;
}

module.exports = TestEvent;


});

require.register("./components-ixia/scheduler/calendar-item.js", function (exports, module) {
var model = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12'),
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a'),
    moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68'),
    _ = require('jashkenas~underscore@1.8.2');

var showEventBalloon = require('./components-ixia/scheduler/balloon.js'),
    TestEvent = require('./components-ixia/scheduler/test-event.js'),
    tz = require('./components-ixia/scheduler/tz.js');

var translate = window.translate,
    ko = window.ko;

var CalendarItem = model('CalendarItem')
                    .attr('name')
                    .attr('type')
                    .attr('duration')
                    .attr('event_info')
                    .attr('test_result_id')
                    .attr('status')
                    .attr('error_reason')
                    .attr('remote_devices')
                    .attr('test_config');


CalendarItem.loadByRange = function(startDate, endDate, callback) {
    var self = this;

    request
        .get('/ixia/schedule/calendar-items')
        .use(no_cache)
        .query('start_date=' + moment(startDate).format("YYYY-MM-DD"))
        .query('end_date=' + moment(endDate).format("YYYY-MM-DD"))
        .query('timezone=' + tz.name())
        .set('Accept', 'application/json')
        .end(function(err, res) {
            var wrappedItems = _.map(res.body.result, function(item) {
                return new self(item);
            });
            callback(wrappedItems);
        })
}

CalendarItem.loadByResultId = function(result_id, callback) {
    var self = this;

    request
        .get('/ixia/schedule/calendar-items')
        .use(no_cache)
        .query('result_id=' + result_id)
        .query('timezone=' + tz.name())
        .set('Accept', 'application/json')
        .end(function(err, res) {
            var wrappedItems = _.map(res.body.result, function(item) {
                return new self(item);
            });
            callback(wrappedItems);
        });
}

CalendarItem.prototype.viewModel = function(checkedDevices, scheduler) {
    var self = this;
    return self.extendWithCalendarFields({
        date: moment(self.get('datetime')).format("YYYY-MM-DD"),
        time: moment(self.get('datetime')).format("HH:mm"),
        duration: self.get('duration') + translate("scheduler.eventlist.message.min"),
        devices: self.prepareDevices(checkedDevices),
        event_info: self.get('event_info'),
        test_config: self.get('test_config'),
        name: self.get('name'),
        status: self.get('status') || 'scheduled',
        error_reason: self.get('error_reason'),
        onClick: function(clickedItem, domEvent) {
            CalendarItem.itemOnClickHandler(domEvent, clickedItem, scheduler);
        },
        hasAnyDevice: function(deviceIds) {
            // NOTE: THIS here, not SELF
            // XXX refactor to underscore
            for (var i=0, len=this.devices.length; i < len; ++i) {
                for (var j=0, len2=deviceIds.length; j < len2; ++j) {
                    if (this.devices[i].id == deviceIds[j]) {
                        return true;
                    }
                }
            }
            return false;
        }

    });
}

/**
 * @param domEvent
 * @param calendarEvent CalendarItem
 * @param scheduler Scheduler
 */
CalendarItem.itemOnClickHandler = function(domEvent, calendarEvent, scheduler) {
    switch (calendarEvent.type) {
        // XXX DRY this two calls
        case "scheduled_test":
            showEventBalloon(
                domEvent.target || domEvent.srcElement,
                calendarEvent.text,
                moment(calendarEvent.start_date).format("LT"),
                calendarEvent.status,
                undefined,
                calendarEvent.devices,

                translate("Delete"),
                function () {
                    TestEvent.cancelTestEvent(calendarEvent.event_id, function() {
                        scheduler.reloadCalendarItems();
                    })
                },

                translate("Edit"),
                function () {
                    var test = new TestTemplateViewModel(scheduler.rootVm);
                    test.inflate(calendarEvent.test_config);
                    scheduler.schedulerTest.loadTest(test, new TestEvent(calendarEvent.event_info));
                }
            );
            break;
        case "executed_test":
            showEventBalloon(
                domEvent.target || domEvent.srcElement,
                calendarEvent.text,
                moment(calendarEvent.start_date).format("LT"),
                calendarEvent.status,
                calendarEvent.error_reason,
                calendarEvent.devices,

                undefined,
                undefined,

                translate("View results"),
                function () {
                    scheduler.openTestResultsPage(calendarEvent.test_result_id);
                }
            );
            break;
    }
}

CalendarItem.prototype.extendWithCalendarFields = function(result) {
    result.type = this.get('type');
    result.text = this.get('name');
    result.start_date = this.get('datetime');
    result.end_date = moment(this.get('datetime')).add("m", this.get('duration')).format("YYYY-MM-DD HH:mm");

    if (this.get('event_info')) {
        result.event_id = this.get('event_info').id;
    }

    if (this.get('test_result_id')) {
        result.test_result_id = this.get('test_result_id');
    }

    return result;
}

//function localDevice() {
//    return {
//        id: -1,
//        name: translate("Local chassis"),
//        host: null
//    };
//}

CalendarItem.prototype.prepareDevices = function(checkedDevices) {
    var devices = [],
        self = this;

    if(self.remote_devices()){
        devices = self.remote_devices();
    }

//    if (this.get('event_info') && this.get('event_info').remote_devices) {
//        devices.concat(this.get('event_info').remote_devices);
//    }
//
//    devices.unshift(localDevice());

    return _.map(devices, function(device) {
        var deviceViewModel = self.createDeviceViewModel(device);
        deviceViewModel.boxCheckerColor = ko.computed(function() {
            if (checkedDevices().indexOf(device.id) == -1) {
                return "transparent";
            } else {
                return CalendarItem.getDeviceColor(device.id);
            }
        });
        return deviceViewModel;
    })
}

// XXX think of a better way to map ids to color
// XXX look here: http://stackoverflow.com/questions/470690/how-to-automatically-generate-n-distinct-colors
var deviceIdToColorMapping = ["#009900", "#96cfde", "#cb96de", "#990000", "#000099", "#999900", "#990099", "#009999"];

CalendarItem.getDeviceColor = function(deviceId) {
    return deviceIdToColorMapping[deviceId-1] || "#ffffff";
}

CalendarItem.prototype.createDeviceViewModel = function(device) {
    var self = this;
    return {
        id: device.id,
        name: device.name,
        color: CalendarItem.getDeviceColor(device.id)
    };
}

module.exports = CalendarItem;

});

require.register("./components-ixia/scheduler/balloon.js", function (exports, module) {
var template = require("./components-ixia/scheduler/templates/balloon.js"),
    domify = require("component~domify@1.3.1")

var $ = window.jQuery,
    _ko = window.ko,
    _translate = window.translate

var _balloon = null,
    _binding = null,
    _leftLabel = null,
    _leftButtonClick = null,
    _rightLabel = null,
    _rightButtonClick = null,

showEventBalloon = function (element, title, datetime, status, error_reason, devices, leftLabel, leftButtonClick, rightLabel, rightButtonClick) {
    element = $(element);
    element = element.attr('event_id') ? element : element.parents('[event_id]');

    var id = element.attr('event_id');

    if (_balloon == null) {
        initializeBalloon()
    }

    adjustData(title, datetime, status, error_reason, devices)
    adjustListeners(leftLabel, leftButtonClick, rightLabel, rightButtonClick)

    _balloon.show()
    adjustPosition(id)
    adjustPosition(id)
    $(window).on('resize', adjustPosition.bind(this, id, _balloon));
}

function initializeBalloon() {
    _balloon = $(domify(template)).appendTo("body")

    _binding = {
        leftButtonVisisble: ko.observable(false),
        rightButtonVisisble: ko.observable(false),

        labelDevices: _translate("Devices"),
        leftLabel: ko.observable(""),
        rightLabel: ko.observable(""),

        title: _ko.observable(""),
        datetime: _ko.observable(""),
        status: _ko.observable(""),
        error_reason: _ko.observable(""),
        devices: _ko.observable(""),

        onClose: function () {
            _balloon.hide()
        },
        leftButtonClick: function () {
            _balloon.hide()
            _leftButtonClick()
        },
        rightButtonClick: function () {
            _balloon.hide()
            _rightButtonClick()
        }
    };

    _binding.status_message = _ko.computed(function() {
        var status = _binding.status();

        if (!status) {
            return '';
        }

        status = status.charAt(0).toUpperCase() + status.slice(1);

        if (status === 'Error') {
            return 'Error: ' + _binding.error_reason();
        }

        return status;
    });

    _ko.applyBindings(_binding, _balloon[0])
}

function adjustPosition(id, balloon) {
    var element = $('[event_id=' + id + ']');
    balloon = balloon || _balloon;

    var elTopY = element.offset().top
//    if (totalHeight(_balloon) < elTopY) {
        balloon.css("top", elTopY - totalHeight(_balloon))
//    } else {
//        _balloon.css("top", elTopY + element.height() +
//            marginToInt(_balloon.css("margin-top")))
//    }

    var elCenterX = element.offset().left + totalWidth(element) / 2
    var balloonWidth = totalWidth(balloon)
    if (balloonWidth / 2 > elCenterX) {
        balloon.css("left", 0)
    } else if (balloonWidth / 2 > $(window).width() - elCenterX) {
        balloon.css("left", $(window).width() - balloonWidth)
    } else {
        balloon.css("left", elCenterX - balloonWidth / 2)
    }
}

function adjustData(title, datetime, status, error_reason, devices) {
    var devicesNames = []
    for (var i=0, len=devices.length; i<len; ++i) { devicesNames.push(devices[i].name) }

    _binding.title(title)
    _binding.datetime(datetime)
    _binding.status(status);
    _binding.error_reason(error_reason);
    _binding.devices(devicesNames.join(", "))
}

function adjustListeners(leftLabel, leftButtonClick, rightLabel, rightButtonClick) {
    _binding.leftLabel(leftLabel)
    _binding.rightLabel(rightLabel)

    _leftButtonClick = leftButtonClick
    _rightButtonClick = rightButtonClick

    _binding.leftButtonVisisble(!!_leftButtonClick)
    _binding.rightButtonVisisble(!!_rightButtonClick)
}

function totalHeight(el) {
    return el.outerHeight() + marginToInt(el.css("margin-top")) +
        marginToInt(el.css("margin-bottom"))
}

function totalWidth(el) {
    return el.width() + marginToInt(el.css("margin-left")) +
        marginToInt(el.css("margin-right"))
}

function marginToInt(margin) {
    return parseInt(margin.replace("px", ""))
}

module.exports = showEventBalloon

});

require.register("./components-ixia/scheduler/event-list.js", function (exports, module) {
var template = require("./components-ixia/scheduler/templates/event-list.js"),
    domify = require("component~domify@1.3.1")

var document = window.document,
    ko = window.ko


var _created = false

function EventList() {
    if (_created) {
        throw "Event list can be initialized only once"
    }
    _created = true

    this.listViewVisible = ko.observable(false)
}

EventList.prototype.render = function(items) {
    var calHeader = document.querySelector('.dhx_cal_header'),
        eventListContainer = document.querySelector("#event-list-container")

    eventListContainer.style.top = calHeader.style.top
    eventListContainer.style.left = calHeader.style.left
    eventListContainer.appendChild(domify(template))

    ko.applyBindings({ items: items }, eventListContainer)
}

module.exports = EventList

});

require.register("./components-ixia/scheduler/templates/index.js", function (exports, module) {
module.exports = '<div>\n    <div data-bind="if: schedulingTestVisible" class="test">\n        <div class="scheduler-configure">\n            <div class="container"></div>\n        </div>\n        <div data-bind="template: { name: schedulerTest.testTemplateName(), data: schedulerTest, afterRender: schedulerTest.afterRender }"></div>\n    </div>\n\n    <div data-bind="visible: schedulingCalendarVisible" class="scheduler container">\n        <a class="scheduler-test-button gray-button" href="javascript:void(0);">Schedule\n            a Test</a>\n\n        <div class="scheduler-search box">\n            <input type="text"\n                   data-bind="value: searchText, valueUpdate: \'input\'" class="shaded search" placeholder="Search">\n            <img class="search" src="images/magnify-gray.png" alt="search" title="search">\n            <!--<a class="scheduler-search-button button dark"-->\n               <!--data-bind="click: filterItems">Search</a>-->\n        </div>\n        <div class="calendar-sidebar">\n            <div data-bind="foreach: devices" class="devices">\n                <a data-bind="click: $parent.toggleBoxChecker.bind($parent)">\n                    <span data-bind="style: {border: \'2px solid \' + color}" class="device-toggle">\n                        <span class="device-icon" data-bind="style: {backgroundColor: boxCheckerColor}"></span>\n                    </span>\n                    <span class="device-name" data-bind="text: name"></span>\n                </a>\n            </div>\n        </div>\n        <div class="scheduler-container">\n            <div id="scheduler_here" class="dhx_cal_container">\n                <div class="dhx_cal_navline">\n                    <div class="dhx_cal_today_button"></div>\n                    <div class="dhx_cal_prev_button"><div class="icon"></div></div>\n                    <div class="dhx_cal_next_button"><div class="icon"></div></div>\n                    <div class="dhx_cal_date"></div>\n                    <div class="tab_agenda">Agenda</div>\n                    <div class="dhx_cal_tab day" name="day_tab"></div>\n                    <div class="dhx_cal_tab week" name="week_tab"></div>\n                    <div class="dhx_cal_tab month" name="month_tab"></div>\n                    <!--<span id="as-list-checkbox-container">-->\n                        <!--<input type="checkbox" id="as-list-checkbox"-->\n                             <!--data-bind="checked: eventList.listViewVisible">-->\n                        <!--<label for="as-list-checkbox">As List</label>-->\n                    <!--</span>-->\n                </div>\n                <div class="calendar-body" data-bind="visible: !eventList.listViewVisible()">\n                    <div class="header-wrapper"><div class="dhx_cal_header"></div></div>\n                    <div class="dhx_cal_data"></div>\n                </div>\n                <div data-bind="visible: eventList.listViewVisible">\n                    <div id="event-list-container"></div>\n                </div>\n            </div>\n            <div class="calendar-agenda-container"></div>\n        </div>\n    </div>\n    <br/>\n    <br/>\n</div>';
});

require.register("./components-ixia/scheduler/templates/balloon.js", function (exports, module) {
module.exports = '<div class="event-balloon">\n    <a href="#" class="close-btn" data-bind="click: onClose"></a>\n    <h3 class="title" data-bind="text: title"></span>\n    </h3>\n    <div class="datetime" data-bind="text: datetime"></div>\n    <div class="status" data-bind="if: status, text: status_message, attr: {class: \'status \' + status()}"></div>\n    <div class="devices">\n        <label data-bind="text: labelDevices"></label>\n        <span data-bind="text: devices"></span>\n    </div>\n    <div class="actions">\n        <div data-bind="visible: leftButtonVisisble">\n            <a href="#" class="button dark delete-btn"\n               data-bind="text: leftLabel, click: leftButtonClick"></a>\n       </div>\n        <div data-bind="visible: rightButtonVisisble">\n            <a href="#" class="button dark edit-btn"\n               data-bind="text: rightLabel, click: rightButtonClick"></a>\n        </div>\n    </div>\n    <div class="tail-shaddow"></div>\n    <div class="tail"></div>\n</div>\n';
});

require.register("./components-ixia/scheduler/templates/event-list.js", function (exports, module) {
module.exports = '<div class="event-list" data-bind="foreach: items">\n    <div class="item" data-bind="click: onClick">\n        <div class="cell date" data-bind="text: date"></div>\n        <div class="cell time" data-bind="text: time"></div>\n        <div class="cell duration" data-bind="text: duration"></div>\n        <div class="cell event-devices" data-bind="foreach: devices">\n            <div class="icon" data-bind="style: {\'background-color\': color}, attr: {title: name}"></div>\n        </div>\n        <div class="cell name" data-bind="text: name"></div>\n        <div class="cell status" data-bind="text: status"></div>\n        <div class="clear"></div>\n    </div>\n    <div class="clear"></div>\n</div>\n';
});

require.register("./components-ixia/scheduler/templates/traffic-player-header.js", function (exports, module) {
module.exports = '<div class="header scheduler">\n    <div class="actions">\n        <h2 data-bind="text: vmConfiguration.name().substring(0,60)"></h2>\n        <h3 data-bind="text: vmConfiguration.categories()[0].name"></h3>\n\n        <div class="buttons">\n            <a href="javascript:void(0);" class="button dark save" data-bind="click: openSaveModal, clickBubble: false">\n                <span data-bind="text: strings.save">SAVE</span>\n            </a>\n            <a href="javascript:void(0);" class="button dark close" data-bind="click: closeTestEditor, clickBubble: false, text: strings.close">CLOSE</a>\n        </div>\n    </div>\n    <div class="body">\n\n        <div class="clear"></div>\n        <ul class="scheduler-fields">\n            <li class="test-name row">\n                <label>Scheduled test name</label>\n                <input type="text" class="dark-inverted-text-box" data-bind="value: testEventName"/>\n            </li>\n            <li class="calendar row">\n                <span data-bind="text: scheduleAtestToRunOnTranslation"></span>\n                <input class="date dark-inverted-text-box no-clear-button" type="text" data-bind="schedulerDatePicker: selectedScheduleDate, value: selectedScheduleDate"/>\n\n                <span class="at" data-bind="text: atTimeTranslation"></span>\n                <input id="timepicker1" type="text" class="input-small time" data-bind="value: selectedScheduleMeridian" placeholder="--:-- --">\n                <!--<input type="time" class="time" data-bind="value: selectedScheduleTime" />-->\n                <!--<span class="time light-select2" data-bind="attr: {\'data-value\': selectedScheduleTime }">-->\n                    <!--<select data-bind="options: availableScheduleTimes, value: selectedScheduleTime"></select>-->\n                <!--</span>-->\n                <!--<span class="timezone" data-bind="text: timezone"></span>-->\n\n                <!-- ko ifnot: indefinite -->\n                <span class="for" data-bind="text: forTimeTranslation"></span>\n\n                <!-- ko if: static_duration -->\n                <span data-bind="text: durationText()"></span>\n                <!-- /ko -->\n\n                <!-- ko ifnot: static_duration -->\n                <span class="duration light-select2" data-bind="attr: {\'data-value\': durationTranslation}">\n                    <select data-bind="options: availableDurations, optionsText: \'text\', optionsValue: \'value\', value: vmConfiguration.duration, disable: vmResults.status() == \'running\', css: { \'disabled\': vmResults.status() == \'running\' }"></select>\n                </span>\n                <!-- /ko -->\n                <!-- /ko -->\n            </li>\n            <li class="repeat row">\n                <ul>\n                    <li class="row">\n                        <input type="checkbox" data-bind="checked: schedulerRepeat" id="repeat-toggle">\n                        <label for="repeat-toggle">Repeat <span data-bind="if: schedulerRepeat"><span data-bind="text: repeaterTitle"></span></span></label>\n                    </li>\n                    <li class="row" data-bind="css: { hidden : !schedulerRepeat() }">\n                        <label>Repeat every</label>\n                        <span class="repeat-interval light-select2" data-bind="attr: {\'data-value\': repeatInterval }">\n                            <select data-bind="options: availableRepeatIntervals, value: repeatInterval"></select>\n                        </span>\n                        <span class="repeat-type light-select2" data-bind="attr: {\'data-value\': repeatTypeTranslation }">\n                            <select data-bind="options: availableRepeaterDisplayTypes, optionsValue: \'value\', optionsText: \'label\', value: repeatType"></select>\n                        </span>\n                    </li>\n                    <li class="row" data-bind="css: { hidden : !schedulerRepeat() || repeatType() != \'WEEKLY\'}">\n                        <div>Repeat on:</div>\n                        <div class="days-of-week">\n                            <ul data-bind="foreach: repeatWeekdays">\n                                <li style="display:inline;">\n                                    <label>\n                                        <input type="checkbox" name="selected-weekdays" data-bind="attr: { value: $data }, checked: $parent.selectedWeekdays" />\n                                        <span data-bind="text: $data"></span>\n                                    </label>\n                                </li>\n                            </ul>\n                        </div>\n                    </li>\n                    <li class="row" data-bind="css: { hidden : !schedulerRepeat() || repeatType() != \'MONTHLY\'}">\n                        <div>Repeat by:</div>\n                        <div class="repeat-by">\n                            <input type="radio" name="repeat-by-type" value="NTH_DAY" data-bind="checked: selectedMonthlyRepeatByType"> day of the month\n                            <input type="radio" name="repeat-by-type" value="NTH_WEEKDAY" data-bind="checked: selectedMonthlyRepeatByType"> day of the week\n                        </div>\n                    </li>\n                    <li class="ends row" data-bind="visible: schedulerRepeat">\n                        <input type="radio" value="NEVER" id="repeat-forever" data-bind="checked: repeatEndsOnType">\n                        <label for="repeat-forever" data-bind="text: neverTranslation">Run indefinitely</label>\n\n                        <input type="radio" value="COUNT" id="repeat-for" data-bind="checked: repeatEndsOnType">\n                        <label for="repeat-for" data-bind="text: afterTranslation">Stop after</label>\n                        <input type="text" class="dark-inverted-text-box repeat-count" data-bind="value: repeatCount">\n                        <label for="repeat-for" data-bind="text: occurencesTranslation">tests</label>\n\n                        <input type="radio" value="ON" id="repeat-until" data-bind="checked: repeatEndsOnType">\n                        <label for="repeat-until" data-bind="text: onTranslation">Stop on</label>\n                        <input class="date dark-inverted-text-box no-clear-button" type="text" data-bind="schedulerDatePicker: repeatUntil, value: repeatUntil"/>\n                    </li>\n                </ul>\n            </li>\n        </ul>\n    </div>\n</div>';
});

require.register("./components-ixia/scheduler/delegates/test-view-model.js", function (exports, module) {
/**
 * Implements the delegated behavior of the traffic player
 * when loaded from the Calendar or a scheduled test.
 * See parent, TestViewModel.
 */

var domify = require('component~domify@1.3.1'),
    template = domify(require('./components-ixia/scheduler/templates/traffic-player-header.js')),
    ko = window.ko,
    TestEvent = require('./components-ixia/scheduler/test-event.js'),
    tz = require('./components-ixia/scheduler/tz.js'),
    util = require('./components-ixia/utility-functions'),
    validate = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2'),
    classes = require('component~classes@1.2.3'),
    moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68'),
    event = require('component~event@0.1.4');

require('./components-ixia/bootstrap-timepicker'); //bootstrap-timepicker

function SchedulerHeaderDelegate(calendar) {
    this.calendar = calendar;
    this.parent = undefined;
    this.$el = undefined;
    this.validator = undefined;
    this.update_validator = undefined;
    this.strings = {
        'Field is required': window.translate('Field is required'),
        "Must be a date in format YYYY-MM-DD": window.translate("Must be a date in format YYYY-MM-DD"),
        "Select at least one day of the week": window.translate("Select at least one day of the week"),
        "Choose one": window.translate("Choose one"),
        "Please enter a number of 1 or more": window.translate("Please enter a number of 1 or more"),
        "Invalid schedule for test": window.translate("Invalid schedule for test"),
        "Test Configuration Error": window.translate("Test Configuration Error"),
        "Maximum 128 characters.": window.translate("Maximum 128 characters")
    };
}

SchedulerHeaderDelegate.prototype.setParent = function (parent) {

    TestEvent.initTestEventFields(parent);
    parent.testTemplateName = ko.observable('placeholder-template');
    this.parent = parent;
};

SchedulerHeaderDelegate.prototype.canRenderTab = function (tab_name) {
    return 'calendar' === tab_name;
};

SchedulerHeaderDelegate.prototype.render = function () {
    this.$el = template.cloneNode(true);

    ko.applyBindings(this.parent, this.$el);

    this.bind();

    $(this.$el).find("#timepicker1").timepicker({minuteStep: 1,
                template: false,
                showMeridian: true,
                defaultTime: false});

    return this.$el;
};

SchedulerHeaderDelegate.prototype.bind = function () {
    var self = this,
        $repeat = this.$el.querySelector('#repeat-toggle'),
        $repeat_type = this.$el.querySelector('.repeat-type select'),
        $repeatEndsOnTypes = this.$el.querySelectorAll('.ends [type="radio"]');

    self.bindValidator();
    event.bind($repeat, 'click', self.bindValidator.bind(self));
    event.bind($repeat_type, 'change', self.bindValidator.bind(self));
    [].forEach.call($repeatEndsOnTypes, function($el){
        event.bind($el, 'click', self.bindValidator.bind(self));
    });


};

SchedulerHeaderDelegate.prototype.openTestCreationLightbox = function() {
    var tmp = new TestEvent(TestEvent.emptyEvent()),
        complete = function(){
            var lightboxViewModel = new LightboxViewModel(this.parent);
            ko.applyBindings(lightboxViewModel, document.getElementById("lightbox"));
        }.bind(this);

    tmp.refillTestEventFields(this.parent);

    this.parent.ensureUnreservedOrFail(function() {
        util.lightbox.open({
            url: "html/lightbox_tmpl",
            selector: "#lightbox-create-test-tmpl",
            cancelSelector: ".cancel-button",
            onOpenComplete: complete
        });
    });
}

SchedulerHeaderDelegate.prototype.loadTest = function(testConfiguration, testEvent) {
    var calendar = this.calendar,
        parent = this.parent;

    if (testEvent) {
        testEvent.refillTestEventFields(parent);
    } else {
        if (parent.testEventName() === undefined) {
            parent.testEventName(testConfiguration.name());
        }
    }

    // XXX code mostly COPIED from test-view-model and ixia-view-model, DRY!
    parent.ensureUnreservedOrFail(function() {
        parent.hasResults(false);
        parent.vmResults.percentComplete(null);
        parent.vmDocumentation.loadTest(testConfiguration);
        parent.vmConfiguration.loadTest(testConfiguration, function() {
            parent.selectTab('configuration');
            if ($('#test-template').length == 0) {
                util.getTemplate('html/test_tmpl', '#test-template', function(template) {
                    parent.testTemplateName('test-template');
                    calendar.schedulingCalendarVisible(false);
                })
            } else {
                parent.testTemplateName('test-template');
                calendar.schedulingCalendarVisible(false);
            }
        });
    });
}

SchedulerHeaderDelegate.prototype.openSaveModal = SchedulerHeaderDelegate.prototype.save = function() {
    var base = this.parent,
        result = new ValidationResultsViewModel(base.vmConfiguration),
        result = base.delegate.validate(result);
    if(!result.is_valid){
        return;
    }

    var saveHandler = this.saveHandler.bind(this),
        valid = function () {
            var event_config = TestEvent.fromViewModel(base).toJSON();

            TestEvent.createOrUpdateTestEvent(
                base.vmConfiguration.toFlatObject(),
                event_config,
                saveHandler
            );
        },
        invalid = function (result) {
            window.logger.error('Scheduler validation failed', result);
        },
        reserve_handler = function(data,error){
            if(error){
                util.lightbox.openError(window.translate('Error'), window.translate('Unable to get reservation status.'));
                window.logger.error(error);
                return;
            }


            var reserved_info = data.reserved_remotely;
            if(reserved_info.reserved === false){
                util.lightbox.working(new LightboxWorkingViewModel(translate("Start"), translate("Validating Test...")));

                try {
                    base.validate(valid, invalid);
                } catch(e) {
                    window.logger.error(e + e.stack);
                }
            }
            else if(reserved_info.is_reserved_by_me === true){
                self.lightboxText = translate('A test is already running.  Please wait for the current test to complete before loading a new test.');
                util.lightbox.open({
                    url : 'html/lightbox_tmpl',
                    selector : '#lightbox-message-template',
                    cancelSelector: '.ok-button',
                    onOpenComplete: function(){
                        ko.applyBindings(self, document.getElementById('lightbox-message'));
                    }
                });
            } else {
                self.lightboxText = translate('This Axon chassis is currently reserved.<br/><br/>' +
                    'User: {user}<br/>From: {from}<br/>Since: {since}<br/><br/>' +
                    'Please wait for the chassis to become available before loading a test.<br><br>', {
                    user: reserved_info.reserved_by,
                    from: reserved_info.reserved_addr,
                    since: reserved_info.reserved_since
                });
                util.lightbox.open({
                    url : 'html/lightbox_tmpl',
                    selector : '#lightbox-reserved-template',
                    cancelSelector: '.ok-button',
                    onOpenComplete: function(){
                        ko.applyBindings(self, document.getElementById('lightbox-message'));
                    }
                });
            }
        };

    util.get_chassis_reservationa_status(reserve_handler);
};

SchedulerHeaderDelegate.prototype.closeTestEditor = function() {
    this.calendar.schedulingCalendarVisible(true);
    this.reset_Template();
};

function get_form_value(default_getter, $el) {
    var $group;

    if (classes($el).has('days-of-week')) {
        $group = $el.querySelectorAll('[type=checkbox]');
        return [].filter.call($group, function ($item) {
            return $item.checked;
        }).map(function ($item) {
            return $item.value;
        }).join(',');
    }

    if (classes($el).has('repeat-by')) {
        $group = $el.querySelectorAll('[type=radio]');
        return [].filter.call($group, function ($item) {
            return $item.checked;
        }).map(function ($item) {
            return $item.value;
        }).join('');
    }

    return default_getter($el);
}

function mark_invalid ($el, message) {
    var $old = $el.parentNode.querySelectorAll('label.validator-message'),
        $message = document.createElement('label');

    // Remove old validation messages
    [].forEach.call($old, function ($el) {
        $el.parentNode.removeChild($el);
    });
    classes($el).remove('invalid');

    // Add new message
    classes($message).add('validator-message');
    $message.innerHTML = message;
    $el.parentNode.appendChild($message);
    classes($el).add('invalid');
}

SchedulerHeaderDelegate.prototype.bindValidator = function () {
    if(!this.$el){
       return;
    }
    window.util.clear_all_validation_messages(this.$el);

    var self = this,
        default_getter,
        $name = this.$el.querySelector('.test-name input'),
        $date = this.$el.querySelector('input.date'),
        $time = this.$el.querySelector('.time'),
        $days,
        $end_count,
        $end_on,
        $repeat_by;

    this.validator = validate(this.$el);

    default_getter = this.validator.adapter.value.bind(this.validator.adapter);

    this.validator
        .on('blur')
        .value(get_form_value.bind(this, default_getter))
        .invalid(mark_invalid);

    this.validator.field($name)
        .is('required', this.strings['Field is required'])
        .is('maximum', 128, this.strings['Maximum 128 characters.']);

    this.validator.field($date)
        .is('required', this.strings['Field is required'])
        .is(function (value) {
            return moment(value, 'YYYY-MM-DD').isValid();
        }, this.strings['Must be a date in format YYYY-MM-DD']);

    this.validator.field($time)
        .is('required', this.strings['Field is required']);

    if(this.parent.schedulerRepeat()) {
        switch (this.parent.repeatType()) {
            case 'DAILY':
                break;
            case 'WEEKLY':
                // Ensure at least one day is selected
                $days = this.$el.querySelector('.days-of-week');
                this.validator.field($days)
                    .is('required', this.strings["Select at least one day of the week"]);
                break;
            case 'MONTHLY':
                // Ensure user has chosen "day of month" or "day of week"
                $repeat_by = this.$el.querySelector('.repeat-by');
                this.validator.field($repeat_by)
                    .is('required', this.strings["Choose one"]);
                break;
        }

        switch (this.parent.repeatEndsOnType()) {
            case 'COUNT':
                // Ensure user has entered # of tests to end at
                $end_count = this.$el.querySelector('.repeat-count');
                this.validator.field($end_count)
                    .is('required', this.strings["Field is required"])
                    .is(/^[1-9]+[0-9]*$/, this.strings["Please enter a number of 1 or more"]);
                break;
            case 'ON':
                // Ensure user has selected a date to end on
                $end_on = this.$el.querySelector('.ends .date');
                this.validator.field($end_on)
                    .is('required', this.strings['Field is required'])
                    .is(function (value) {
                        return moment(value, 'YYYY-MM-DD').isValid();
                    }, this.strings['Must be a date in format YYYY-MM-DD']);
                break;
        }
    }
};

SchedulerHeaderDelegate.prototype.validate = function (result) {
    var strError = this.strings["Test Configuration Error"],
        invalid_message = this.strings["Invalid schedule for test"];

    this.validator.validate(function (err, valid, message) {
        if (!valid) {
            result.addCheckResults(strError, false, invalid_message);
            result.is_valid = false;
        }
    });
    return result;
};

SchedulerHeaderDelegate.prototype.saveHandler = function (response) {
    var base = this.parent;

    if ('SUCCESS' !== response.body.result) {
        this.parseValidationFailureResults(response.body);
        return; // Short-circuit
    }

    util.lightbox.close();
    base.vmConfiguration.id(response.body.test_id);
    base.vmConfiguration.isDirty = false;
    this.calendar.reloadCalendar();
    this.calendar.schedulingCalendarVisible(true);
    this.reset_Template();
};

SchedulerHeaderDelegate.prototype.afterRender = function () {
    if(this.$el){
        return;
    }

    var self = this,
        selected_tab = self.parent.rootVm.selectedTab(),
        $parent = document.querySelector('#main > .' + selected_tab),
        $header,
        $cont;


    self.render();

    // Remove existing HTML from .test-controller
    $header = $parent.querySelector('.test-controller');
    while ($header.firstChild) {
        $header.removeChild($header.firstChild);
    }

    $cont = $parent.querySelector('.scheduler-configure .container');

    // Append new header delegate view
    $cont.appendChild(self.$el);
}

SchedulerHeaderDelegate.prototype.reset_Template = function () {
    if(this.$el && this.$el.parentNode){
        this.$el.parentNode.removeChild(this.$el)
    }
    this.$el = undefined;
}

SchedulerHeaderDelegate.prototype.parseValidationFailureResults = function (results) {
    var base = this.parent,
        message,
        conflict,
        begin,
        end;

    if (results.reason && 'conflicts_found' === results.reason) {
        results.is_valid = false;
        results.is_ready = false;
        conflict = results.conflicts[0].event_info;
        begin = moment(conflict.datetime);
        end = begin.clone().add({minutes: conflict.duration});
        message = translate('Schedule conflicts with "{name}" at {begin} to {end}.', {
            name: conflict.name,
            begin: begin.format('LLL'),
            end: end.format('LLL')
        });
        results.messages = results.messages || [];
        results.messages.push({
            header: 'Failed',
            content: [message],
            is_error: true
        });
    }

    base.vmConfiguration.parseValidationResults(results);
};

module.exports = SchedulerHeaderDelegate;
});

require.register("./components-ixia/batch-operator", function (exports, module) {
var emitter = require('component~emitter@1.0.1'),
    domify = require('component~domify@1.3.1'),
    classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4'),
    template = domify(require('./components-ixia/batch-operator/template.js'));

function BatchOperator() {
    this.$el = undefined;
    this._items = {};
    this.selected = {};
    this.$operations = {};
}

emitter(BatchOperator.prototype);

BatchOperator.prototype.isSelected = function (key) {
    return this.selected.hasOwnProperty(key);
};

function operation(key, callback, e) {
    if (e && e.preventDefault) {
        e.preventDefault();
    }

    this.emit(key);
    callback(this.selected);
}

/**
 * Adds an item to the list of batch operations that can be performed on
 * selected items.
 *
 * @param key value to emit when this operation is triggered
 * @param label What the user sees
 * @param callback function fired when operation is triggered; optional
 */
BatchOperator.prototype.addOperation = function (key, label, callback) {
    callback = callback || function () {};

    var $el = document.createElement('a');
    $el.href = '#';

    $el.innerHTML = label;
    event.bind($el, 'click', operation.bind(this, key, callback));

    this.$operations[key] = $el;
};

/**
 * Gets or sets the items to be emitted when select-all is triggered
 *
 * @param items collection to set
 */
BatchOperator.prototype.items = function (items) {
    if (arguments.length) {
        this._items = items || {};
    }

    return this._items;
};

BatchOperator.prototype.render = function () {
    var $el = template.cloneNode(true),
        $actions = $el.querySelector('.actions');

    this.$el = $el;

    Object.keys(this.$operations).forEach(function (key) {
        var $operation = document.createElement('li');
        classes($operation).add('operation');
        $operation.appendChild(this.$operations[key]);
        $actions.appendChild($operation);
    }, this);

    this.bind();

    return this.$el;
};

/**
 * Depending on what's selected, renders "select all" or "unselect" and
 * available operations
 */
BatchOperator.prototype.update = function () {
    var $actions = this.$el.querySelector('.actions'),
        $all = classes($actions.querySelector('.select-all')),
        $none = classes($actions.querySelector('.select-none')),
        $operations = $actions.querySelectorAll('.operation');

    if (Object.keys(this.selected).length) {
        $all.add('hidden');
        $none.remove('hidden');
        [].forEach.call($operations, function ($operation) {
            classes($operation).remove('hidden');
        });
    } else {
        $all.remove('hidden');
        $none.add('hidden');
        [].forEach.call($operations, function ($operation) {
            classes($operation).add('hidden');
        });
    }
};

/**
 * @param silent boolean false to emit a 'change' event; defaults to false
 */
BatchOperator.prototype.select_all = function (silent) {
    this.selected = this._items;
    if (!silent) {
        this.emit('change', this.selected);
    }
    this.update();
};

/**
 * @param silent boolean false to emit a 'change' event; defaults to false
 */
BatchOperator.prototype.select_none = function (silent) {
    this.selected = {};
    if (!silent) {
        this.emit('change', this.selected);
    }
    this.update();
};

function click_all(e) {
    e.preventDefault();
    this.select_all();
}

function click_none(e) {
    e.preventDefault();
    this.select_none();
}

BatchOperator.prototype.bind = function () {
    var $actions = this.$el.querySelector('.actions'),
        $all = $actions.querySelector('.select-all'),
        $none = $actions.querySelector('.select-none');

    event.bind($all, 'click', click_all.bind(this));
    event.bind($none, 'click', click_none.bind(this));
};

/**
 * Adds value to selection
 *
 * @param key scalar or collection of key-value pairs
 * @param value associated with key; unnecessary if key is a collection
 */
BatchOperator.prototype.select = function (key, value) {
    var i;

    if (key instanceof Array || key instanceof Object) {
        // Key is a collection (of key-value pairs)
        for (i in key) {
            if (key.hasOwnProperty(i)) {
                this.select(i, key[i]); // Recursion
            }
        }
        return; // Short-circuit
    }

    this.selected[key] = value;
    this.update();
};

/**
 * Removes value from selection. Fails silently
 *
 * @param key scalar or collection
 */
BatchOperator.prototype.unselect = function (key) {
    var index;

    if (key instanceof Array || key instanceof Object) {
        // Key is a collection (of keys)
        for (index in key) {
            if (key.hasOwnProperty(index)) {
                this.unselect(index); // Recursion
            }
        }
        return; // Short-circuit
    }

    if (this.selected.hasOwnProperty(key)) {
        delete this.selected[key];
    }

    this.update();
};

/**
 * If selected contains value, remove it; otherwise, add it. Fails silently
 *
 * @param key scalar or collection
 * @param value associated with key; unnecessary if key is a collection
 */
BatchOperator.prototype.toggle = function (key, value) {
    var index;

    if (key instanceof Array || key instanceof Object) {
        // Key is a collection (of key-value-pairs)
        for (index in key) {
            if (key.hasOwnProperty(index)) {
                this.toggle(index, key[index]); // Recursion
            }
        }
        return; // Short-circuit
    }

    if (this.selected.hasOwnProperty(key)) {
        this.unselect(key);
    } else {
        this.select(key, value);
    }
};

module.exports = BatchOperator;

});

require.register("./components-ixia/batch-operator/template.js", function (exports, module) {
module.exports = '<div class="batch-operator">\n    <ul class="actions">\n        <li class="select-all">\n            <a href="#">Select all</a>\n        </li><li class="select-none">\n            <a href="#">Unselect</a>\n        </li>\n    </ul>\n</div>\n';
});

require.register("./components-ixia/paginator", function (exports, module) {
var emitter = require('component~emitter@1.0.1'),
    domify = require('component~domify@1.3.1'),
    classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4'),
    template = domify(require('./components-ixia/paginator/template.js')),
    previous_pages = 2,
    pages_visible = 5;

function Paginator() {
    this.$el = undefined;
    this.page = 1;
    this.num_pages = undefined;
}

emitter(Paginator.prototype);

Paginator.prototype.pages = function (pages) {
    if (arguments.length) {
        this.num_pages = Math.max(1, pages); // Ensure >= 1

        // Ensure this.page is withing this.num_pages (in case a page was removed)
        this.page = Math.min(this.page, this.num_pages);
    }

    return this.num_pages;
};

Paginator.prototype.render = function () {
    var $el = this.$el || template.cloneNode(true),
        page = this.page,
        $prev_ellipses = $el.querySelector('.ellipses.prev'),
        $next_ellipses = $el.querySelector('.ellipses.next'),
        // Always show 5 pages, even if the current page is near the end
        at_end = this.num_pages - pages_visible + 1 < page - previous_pages,
        first = at_end ? Math.max(1, this.num_pages - pages_visible + 1) : Math.max(1, page - previous_pages),
        last = Math.min(this.num_pages, first + pages_visible - 1),
        i,
        $pages = $el.querySelector('.pages'),
        $page,
        $page_link;

    this.$el = $el;

    // Ellipses before page links
    if (first === 1) {
        classes($prev_ellipses).add('hidden');
    } else {
        classes($prev_ellipses).remove('hidden');
    }

    // Remove existing page links
    while ($pages.firstChild) {
        $pages.removeChild($pages.firstChild);
    }

    // Insert page links for current pages
    for (i = first; i <= last; i += 1) {
        $page = document.createElement('li');
        $page_link = document.createElement('a');
        $page_link.innerHTML = String(i);
        if (i === page) {
            classes($page).add('current');
        }
        event.bind($page_link, 'click', this.goto.bind(this, i));

        $page.appendChild($page_link);
        $pages.appendChild($page);
    }

    // Ellipses after page links
    if (last === this.num_pages) {
        classes($next_ellipses).add('hidden');
    } else {
        classes($next_ellipses).remove('hidden');
    }

    return $el;
};

Paginator.prototype.next = function () {
    this.page += 1;
    this.goto(this.page);
};

/**
 * @param page 1-indexed
 * @param e "click" event from DOM (when .goto() is bound to an element)
 */
Paginator.prototype.goto = function (page, e) {
    if (e && e.preventDefault) {
        e.preventDefault();
    }

    this.page = page;
    this.render();
    this.emit("change", this.page, this);
};

module.exports = Paginator;
});

require.register("./components-ixia/paginator/template.js", function (exports, module) {
module.exports = '<div class="paginator">\n    <div class="ellipses prev">&hellip;</div>\n    <ul class="pages"></ul>\n    <div class="ellipses next">&hellip;</div>\n</div>';
});

require.register("./components-ixia/traffic-recorder", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    template = domify(require('./components-ixia/traffic-recorder/templates/index.js')),
    Collection = require('./components-ixia/traffic-recorder/models/recorder-collection.js'),
    Model = require('./components-ixia/traffic-recorder/models/recorder.js'),
    View = require('./components-ixia/traffic-recorder/views/recorder.js'),
    classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4');

function TrafficRecorder(recorders, ports_observable) {
    this.models = recorders || new Collection();
    this.$el = template;
    this.views = [];
    this.ports_observable = ports_observable;
}

TrafficRecorder.factory = function (ports_observable) {
    var recorders = Collection.get(),
        recorder = new TrafficRecorder(recorders, ports_observable);

    recorder.render();
    return recorder;
};

TrafficRecorder.prototype.render = function () {
    var add = this.add.bind(this);

    this.models.forEach(add);

    this.bind();

    return this.$el;
};

TrafficRecorder.prototype.show = function () {
    var classed = classes(this.$el);
    classed.remove('hidden');
};

TrafficRecorder.prototype.hide = function () {
    var classed = classes(this.$el);
    classed.add('hidden');
};


TrafficRecorder.prototype.add = function (model) {
    var view = new View(model, this.ports_observable),
        $recorders = this.$el.querySelector('.recorders');

    this.views.push(view);
    view.render();
    $recorders.appendChild(view.$el);
};

TrafficRecorder.prototype.remove = function (model) {
    var $recorders = this.$el.querySelector('.recorders'),
        views = this.views;

    views.forEach(function (view, i) {
        if (view.model.id() === model.id()) {
            $recorders.removeChild(view.$el);
            views.splice(i, 1);
        }
    });
};

TrafficRecorder.prototype.bind = function () {
    var remove = this.remove.bind(this),
        add = this.add.bind(this),
        $add = this.$el.querySelector('.add'),
        models = this.models,
        add_clicked = function () {
            var model = new Model();
            models.push(model);
        };

    // DOM -> data
    event.bind($add, 'click', add_clicked);

    // Data -> DOM
    models.on('added', add);
    models.on('removed', remove);
    models.on('reset', function (collection) {
        if (!collection.length) {
            var model = new Model();
            collection.push(model, true);
        }
        collection.forEach(add);
    });

};

module.exports = TrafficRecorder;
});

require.register("./components-ixia/traffic-recorder/views/recorder.js", function (exports, module) {
var emitter = require('component~emitter@1.0.1'),
    event = require('component~event@0.1.4'),
    classes = require('component~classes@1.2.3'),
    InterfaceSelector = require('./components-ixia/interface-selector'),
    FilterChooser = require('./components-ixia/capture-filter-chooser'),
    ViewDelegate = require('./components-ixia/traffic-recorder/views/delegates/recorder-view.js'),
    EditDelegate = require('./components-ixia/traffic-recorder/views/delegates/recorder-edit.js'),
    HistoryDelegate = require('./components-ixia/traffic-recorder/views/delegates/recorder-history.js');

function render_interface(selected_models, model, $interface) {
    var classed = classes($interface);

    classed.add('available');

    classed.remove('selected');
    selected_models.forEach(function (selected) {
        if (model.physical_port() === selected.physical_port()) {
            classed.add('selected');
        }
    });
}

function Recorder(model, ports_observable) {
    this.model = model;
    this.interface_selector = new InterfaceSelector(ports_observable, render_interface.bind(this, model.interfaces())); // Maybe we should pass InterfaceSelector into the constructor to avoid cross-cutting?
    this.filter_chooser = new FilterChooser(model.filter());
    this.edit_delegate = new EditDelegate(this);
    this.view_delegate = new ViewDelegate(this);
    this.history_delegate = new HistoryDelegate(this);
}

emitter(Recorder.prototype);

Recorder.prototype.render = function () {
    var model = this.model;

    if (model.isNew()) {
        this.edit();
    } else {
        this.view();
    }

    this.bind();

    return this.$el;
};

Recorder.prototype.bind = function () {
    var view = this.view.bind(this),
        destroy = this.destroy.bind(this);

    // Model -> DOM
    this.model.on('change filter', this.filter_chooser.set.bind(this.filter_chooser));
    this.model.on('save', view);
    this.model.on('destroy', destroy);

    // View -> model
    this.filter_chooser.on('select', this.model.filter.bind(this.model));
    this.interface_selector.on('select', this.model.interface.bind(this.model));
    this.view_delegate.on('destroy', this.model.destroy.bind(this.model));

    // View -> view
    this.filter_chooser.on('select', this.filter_chooser.hide.bind(this.filter_chooser));
    this.edit_delegate.on('done', this.save.bind(this));
    this.edit_delegate.on('destroy', destroy); // Only unsaved captures can be edited, so don't need to worry about destroying the model
    this.view_delegate.on('history', this.history.bind(this));
    this.history_delegate.on('done', view);

    // Debugging
//    this.model.on('change', console.log.bind(console, 'changed: '));
};

Recorder.prototype.edit = function (e) {
    if (e && e.preventDefault) {
        e.preventDefault();
    }

    var $el = this.edit_delegate.render();
    this.replace_in_parent($el);
    this.$el = $el;
    return this.$el;
};

Recorder.prototype.view = function (e) {
    if (e && e.preventDefault) {
        e.preventDefault();
    }

    var $el = this.view_delegate.render();
    this.replace_in_parent($el);
    this.$el = $el;
    return this.$el;
};

Recorder.prototype.history = function (e) {
    if (e && e.preventDefault) {
        e.preventDefault();
    }

    var $el = this.history_delegate.render();
    this.replace_in_parent($el);
    this.$el = $el;
    return this.$el;
};

Recorder.prototype.save = function (e) {
    if (e && e.preventDefault) {
        e.preventDefault();
    }

    this.model.save();
};

Recorder.prototype.destroy = function (e) {
    if (e && e.preventDefault) {
        e.preventDefault();
    }

    if (this.$el.parentNode) {
        this.$el.parentNode.removeChild(this.$el);
    }
};

Recorder.prototype.replace_in_parent = function ($new) {
    // If this.$el has been inserted into the DOM, simply assigning a new
    // value to this.$el will not update the DOM.

    if (this.$el && this.$el.parentNode) {
        this.$el.parentNode.replaceChild($new, this.$el);
    }
};

module.exports = Recorder;
});

require.register("./components-ixia/traffic-recorder/views/capture.js", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4'),
    moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68'),
    strings = {
        "seconds": window.translate("seconds"),
        "bytes": window.translate("bytes"),
        "packets": window.translate("packets")
    };

function CaptureView(model) {
    this.model = model;
    this.$el = undefined;
}

CaptureView.factory = function (model, template) {
    var view = new this(model);
    view.$el = template.cloneNode(true);

    return view;
};

CaptureView.prototype.render = function () {
    var model = this.model,
        $el = this.$el,
        $title = $el.querySelector('.title'),
        $started = $el.querySelector('.started'),
        $duration = $el.querySelector('.duration'),
        $size = $el.querySelector('.size'),
        $packets = $el.querySelector('.packets'),
        $download = $el.querySelector('.download a'),
        $none = $el.querySelector('.none');

    this.$el = $el;

    if (!model) {
        classes($started).add('hidden');
        classes($duration).add('hidden');
        classes($size).add('hidden');
        classes($packets).add('hidden');
        classes($download).add('hidden');
        classes($none).remove('hidden');
        return $el;
    }

    if ($title) {
        // Only used in capture history
        $title.innerHTML = model.title();
    }
    $started.innerHTML = moment(model.started()).fromNow();
    $duration.innerHTML = model.time_in_secs() + ' ' + strings.seconds;
    $size.innerHTML = model.size_in_bytes() + ' ' + strings.bytes;
    $packets.innerHTML = model.packet_count() + ' ' + strings.packets;
    classes($started).remove('hidden');
    classes($duration).remove('hidden');
    classes($size).remove('hidden');
    classes($packets).remove('hidden');
    classes($none).add('hidden');

    if ('COMPLETED' === model.status() && model.download_uri()) {
        $download.href = model.download_uri();
        classes($download).remove('hidden');
    } else {
        $download.href = '#';
        classes($download).add('hidden');
    }

    return $el;
};

CaptureView.prototype.bind = function () {
    this.model.on('change status', this.render.bind(this));
};

module.exports = CaptureView;
});

require.register("./components-ixia/traffic-recorder/views/capture-progress.js", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    template = domify(require('./components-ixia/traffic-recorder/templates/capture-progress.js')),
    recorder_to_capture_progress_map = {
        'stop_at_bytes': 'size_in_bytes',
        'packet_count': 'packet_count',
        'time_in_secs': 'time_in_secs'
    },
    progress_attrs = Object.keys(recorder_to_capture_progress_map);

function get_progress(current, limits) {
    var progress = {},
        val;

    // Calculate progress for each limit/attribute
    Object.keys(limits).forEach(function (attr) {
        val = current[attr];

        if (!limits[attr] || undefined === val || isNaN(current[attr]) || isNaN(limits[attr])) {
            // Prevent divide-by-zero and non-numeric results
            progress[attr] = 1;
            return;
        }

        val = Number(val / limits[attr]);

        // Ensure progress is never more than 1 (100%)
        val = Math.min(val, 1);

        progress[attr] = val;
    });

    return progress;
}

function CaptureProgress(limits, capture) {
    this.limits = limits;
    this.model = capture;
    this.$el = template.cloneNode(true);
}

CaptureProgress.get_limits_from_recorder = function (recorder) {
    var limits = {},
        val;

    progress_attrs.forEach(function (attr) {
        val = recorder[attr]();

        if (val !== undefined) {
            limits[attr] = val;
        }
    });

    return limits;
};

CaptureProgress.get_current_from_capture = function (capture) {
    var progress = {},
        capture_attr;

    progress_attrs.forEach(function (attr) {
        capture_attr = recorder_to_capture_progress_map[attr];
        progress[attr] = capture[capture_attr]();
    });

    return progress;
};

CaptureProgress.prototype.set_capture = function (capture) {
    if (this.capture && this.capture.id() === capture.id()) {
        return; // Short-circuit
    }

    if (this.model) {
        this.unbind();
    }

    this.model = capture;

    if (capture) {
        this.bind();
    }
};

CaptureProgress.prototype.render = function () {
    if (!this.model) {
        return; // short-circuit
    }

    var current = CaptureProgress.get_current_from_capture(this.model),
        progress = get_progress(current, this.limits);

    // Convert progress obj to an array of values
    progress = Object.keys(progress).map(function (key) {
        return progress[key];
    });

    // Get the value for the attribute with the most progress, because the first
    // attribute to reach the stop criteria will cause the capture to stop
    progress = Math.max.apply(null, progress);

    this.$el.querySelector('.bar').style.width = (progress * 100) + '%';
};

CaptureProgress.prototype.bind = function () {
    this.model.on('change', this.render.bind(this));
};

CaptureProgress.prototype.unbind = function () {
    if (this.model) {
        this.model.off('change', this.render.bind(this));
    }
    this.$el.querySelector('.bar').style.width = 0;
};

module.exports = CaptureProgress;

});

require.register("./components-ixia/traffic-recorder/views/delegates/recorder-view.js", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    template = domify(require('./components-ixia/traffic-recorder/templates/recorder-view.js')),
    classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4'),
    emitter = require('component~emitter@1.0.1'),
    CaptureView = require('./components-ixia/traffic-recorder/views/capture.js'),
    last_capture_template = domify(require('./components-ixia/traffic-recorder/templates/last-capture.js')),
    CaptureProgress = require('./components-ixia/traffic-recorder/views/capture-progress.js'),
    strings = {
        "seconds": window.translate("seconds"),
        "bytes": window.translate("bytes"),
        "packets": window.translate("packets"),
        "Record": window.translate("Record"),
        "Stop": window.translate("Stop")
    };

function RecorderViewDelegate(recorder) {
    this.parent = recorder;
    this.model = this.parent.model;
    this.$el = undefined;
    this.progress = undefined;
}

emitter(RecorderViewDelegate.prototype);

RecorderViewDelegate.prototype.render = function () {
    var $el = template.cloneNode(true),
        parent = this.parent,
        model = this.model,
        $title = $el.querySelector('.title'),
        $selector = $el.querySelector('.selector'),
        interface_selector = parent.interface_selector,
        selected_interface = model.interfaces()[0],
        $filter = $el.querySelector('.filter'),
        $truncate_packets = $el.querySelector('.truncate-packets'),
        $stop_criteria = $el.querySelector('.stop-criteria'),
        stop_criteria = [],
        render_text = function ($el, value, string) {
            if (undefined === value || '' === value) {
                classes($el).add('hidden');
                $el.querySelector('span').innerHTML = '-';
            } else {
                classes($el).remove('hidden');
                $el.querySelector('span').innerHTML = string;
            }
        },
        $progress = $el.querySelector('.progress');

    this.$el = $el;

    $title.innerHTML = model.title();

    while ($selector.firstChild) {
        $selector.removeChild($selector.firstChild);
    }
    $selector.appendChild(interface_selector.render());
    interface_selector.select(selected_interface, true);
    interface_selector.unbind();

    render_text($truncate_packets, model.max_packet_length_in_bytes(), model.max_packet_length_in_bytes() + ' ' + strings.bytes);

    render_text($filter, model.filter(), model.filter());

    if (undefined !== model.time_in_secs()) {
        stop_criteria.push(model.time_in_secs() + ' ' + strings.seconds);
    }
    if (undefined !== model.stop_at_bytes()) {
        stop_criteria.push(model.stop_at_bytes() + ' ' + strings.bytes);
    }
    if (undefined !== model.packet_count()) {
        stop_criteria.push(model.packet_count() + ' ' + strings.packets);
    }
    stop_criteria = stop_criteria.length > 0 ? stop_criteria : undefined;
    render_text($stop_criteria, stop_criteria, stop_criteria.join(', '));

    this.progress = new CaptureProgress(CaptureProgress.get_limits_from_recorder(this.model));
    this.progress.render();
    while ($progress.firstChild) {
        $progress.removeChild($progress.firstChild);
    }
    $progress.appendChild(this.progress.$el);

    this.set_state(this.model.state());

    if (this.model.last_capture()) {
        this.render_last_capture();
    }

    this.bind();

    return $el;
};

RecorderViewDelegate.prototype.bind = function () {
    var model = this.model,
        $el = this.$el,
        $delete = $el.querySelector('.delete'),
        destroy = this.destroy.bind(this),
        $history = $el.querySelector('.history'),
        history = this.emit.bind(this, "history"),
        $toggle = $el.querySelector('.toggle'),
        transition = this.transition.bind(this),
        toggle = function (e) {
            e.preventDefault();
            model.toggle_state();
            transition();
        },
        poll_until_done = function (capture) {
            capture.on('change', this.render_last_capture.bind(this));
            capture.poll();
        },
        last_capture = model.last_capture();

    // Model -> DOM
    model.on('change state', this.set_state.bind(this));
    model.captures().on('added', poll_until_done.bind(this));
    if (last_capture && last_capture.status() !== 'COMPLETED') {
        poll_until_done.call(this, last_capture);
    }

    // DOM -> Model
    event.bind($delete, 'click', destroy);
    event.bind($history, 'click', history);
    event.bind($toggle, 'click', toggle);
};

RecorderViewDelegate.prototype.destroy = function (e) {
    if (e && e.preventDefault) {
        e.preventDefault();
    }

    if (this.model.isNew()) {
        this.parent.destroy();
    } else {
        this.model.destroy();
    }

    this.emit("destroy");
};

RecorderViewDelegate.prototype.set_state = function (state, prev) {
    if (prev === state) {
        // State didn't change
        return; // Short-circuit
    }

    if ('STARTED' === state) {
        this.start();
    } else if ('STOPPED' === state) {
        this.stop();
    } else {
        // Starting or stopping
        this.transition();
    }
};

RecorderViewDelegate.prototype.transition = function () {
    var $progress = this.$el.querySelector('.progress'),
        $toggle = this.$el.querySelector('.toggle');

    // Action buttons
    this.hide_actions();

    // Progress bar
    classes($progress).add('hidden');
    this.progress.unbind();

    // Start/stop button
    classes($toggle).add('loading');
    $toggle.disabled = true;
};

RecorderViewDelegate.prototype.start = function () {
    var last_capture = this.model.last_capture(),
        $progress = this.$el.querySelector('.progress'),
        $toggle = this.$el.querySelector('.toggle'),
        toggle_classed = classes($toggle);

    // Action buttons
    this.hide_actions();

    // Progress bar
    classes($progress).remove('hidden');
    this.progress.set_capture(last_capture);

    // Stop button
    toggle_classed.add('stop');
    toggle_classed.remove('start');
    toggle_classed.remove('loading');
    $toggle.disabled = false;
    $toggle.querySelector('span').innerHTML = strings.Stop;
};

RecorderViewDelegate.prototype.stop = function () {
    var $progress = this.$el.querySelector('.progress'),
        $toggle = this.$el.querySelector('.toggle'),
        toggle_classed = classes($toggle);

    // Action buttons
    this.show_actions();

    // Progress bar
    classes($progress).add('hidden');
    this.progress.unbind();

    // Start button
    toggle_classed.add('start');
    toggle_classed.remove('stop');
    toggle_classed.remove('loading');
    $toggle.disabled = false;
    $toggle.querySelector('span').innerHTML = strings.Record;
};

RecorderViewDelegate.prototype.render_last_capture = function () {
    var model = this.model.last_capture(),
        view = CaptureView.factory(model, last_capture_template),
        $capture = this.$el.querySelector('.last-capture');

    view.render();
    while ($capture.firstChild) {
        $capture.removeChild($capture.firstChild);
    }
    $capture.appendChild(view.$el);
};

RecorderViewDelegate.prototype.show_actions = function () {
    this.toggle_actions(true);
};

RecorderViewDelegate.prototype.hide_actions = function () {
    this.toggle_actions(false);
};

RecorderViewDelegate.prototype.toggle_actions = function (visible) {
    var $actions = this.$el.querySelectorAll('.action a'),
        method = visible ? 'remove' : 'add';

    [].forEach.call($actions, function ($action) {
        classes($action)[method]('hidden');
    });
};

module.exports = RecorderViewDelegate;
});

require.register("./components-ixia/traffic-recorder/views/delegates/recorder-edit.js", function (exports, module) {
var classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4'),
    domify = require('component~domify@1.3.1'),
    template = domify(require('./components-ixia/traffic-recorder/templates/recorder-edit.js')),
    emitter = require('component~emitter@1.0.1'),
    validate = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2'),
    strings = {
        'Field is required': window.translate('Field is required'),
        'Must be a positive integer': window.translate('Must be a positive integer'),
        'Must select an interface': window.translate('Must select an interface'),
        'Cannot capture more than 10GB (10,737,418,240 bytes)': window.translate('Cannot capture more than 10GB (10,737,418,240 bytes)')
    };

function render_invalid($el, err) {
    var $error = document.createElement('label'),
        $messages = $el.parentNode.querySelectorAll('.validator-message');

    // Remove old messages
    [].forEach.call($messages, function ($el) {
        $el.parentNode.removeChild($el);
    });

    // Insert new error
    $error.innerHTML = err;
    classes($error).add('validator-message');
    $el.parentNode.appendChild($error);

    classes($el).add('invalid');
}

function add_optional_integer_validation(validator, $parent) {
    var field = validator.field($parent.querySelector('[type=text]'))
        .is(/^[1-9]\d*$/, strings['Must be a positive integer']);

    if ($parent.querySelector('[type=checkbox]').checked) {
        field.is('required');
    }
}


function RecorderEditDelegate(recorder) {
    this.parent = recorder;
    this.$el = template.cloneNode(true);
    this.handlers = {
        'click .save': this.onsave.bind(this)
    };
}

emitter(RecorderEditDelegate.prototype);

RecorderEditDelegate.prototype.render = function () {
    var $el = this.$el,
        parent = this.parent,
        model = parent.model,
        $title = $el.querySelector('.title'),
        $selector = $el.querySelector('.selector'),
        interface_selector = parent.interface_selector,
        filter_chooser = parent.filter_chooser,
        $truncate_packets = $el.querySelector('.truncate-packets'),
        $filter = $el.querySelector('.filter'),
        $filter_input = $filter.querySelector('input'),
        $time_in_secs = $el.querySelector('.time-in-secs'),
        $stop_at_bytes = $el.querySelector('.stop-at-bytes'),
        $packet_count = $el.querySelector('.packet-count'),
        set_combo = function ($wrapper, val) {
            var $checkbox = $wrapper.querySelector('input[type=checkbox]'),
                $input = $wrapper.querySelector('input[type=text]');

            val = val === undefined ? '' : String(val).trim();
            $checkbox.checked = val.length;
            $input.disabled = !$checkbox.checked;
            $input.value = val || '';
        };

    this.$el = $el;

    // Title
    $title.value = model.title();

    // Interfaces
    $selector.appendChild(interface_selector.$el);
    interface_selector.render();

    // Stop criteria
    set_combo($time_in_secs, model.time_in_secs());
    set_combo($stop_at_bytes, model.stop_at_bytes());
    set_combo($packet_count, model.packet_count());

    // Filter
    $filter_input.value = model.filter();
    $el.appendChild(filter_chooser.render());
    filter_chooser.hide();

    // Truncate packets
    set_combo($truncate_packets, model.max_packet_length_in_bytes());

    this.bind();

    return $el;
};

RecorderEditDelegate.prototype.bind = function () {
    var $el = this.$el,
        parent = this.parent,
        model = parent.model,
        $title = $el.querySelector('.title'),
        interface_selector = parent.interface_selector,
        filter_chooser = parent.filter_chooser,
        $truncate_packets = $el.querySelector('.truncate-packets'),
        $filter = $el.querySelector('.filter'),
        $filter_input = $filter.querySelector('input'),
        $show_chooser = $filter.querySelector('.show'),
        $time_in_secs = $el.querySelector('.time-in-secs'),
        $stop_at_bytes = $el.querySelector('.stop-at-bytes'),
        $packet_count = $el.querySelector('.packet-count'),
        bind_text = function ($text, setter) {
            event.bind($text, 'change', function () {
                setter($text.value);
            });
        },
        bind_combo = function ($wrapper, setter) {
            var $checkbox = $wrapper.querySelector('[type=checkbox]'),
                $input = $wrapper.querySelector('input[type=text]'),
                val;

            event.bind($checkbox, 'change', function check() {
                $input.disabled = !$checkbox.checked;
                val = $checkbox.checked ? (+$input.value.trim() || undefined) : undefined;
                setter(val);
            });

            event.bind($input, 'change', function update() {
                val = $checkbox.checked ? (+$input.value.trim() || undefined) : undefined;
                setter(val);
            });
        },
        $delete = this.$el.querySelector('.delete'),
        destroy = function (e) {
            if (e && e.preventDefault) {
                e.preventDefault();
            }

            if (model.isNew()) {
                parent.destroy();
            } else {
                model.destroy();
            }
        },
        bind_validator = this.bind_validator.bind(this);

    interface_selector.bind();

    // Model -> DOM
    model.on('change filter', function (filter) { $filter_input.value = filter; });

    // DOM -> model
    bind_text($title, model.title.bind(model));
    event.bind($show_chooser, 'click', filter_chooser.show.bind(filter_chooser));
    bind_combo($time_in_secs, model.time_in_secs.bind(model));
    bind_combo($stop_at_bytes, model.stop_at_bytes.bind(model));
    bind_combo($packet_count, model.packet_count.bind(model));
    bind_text($filter_input, model.filter.bind(model));
    bind_combo($truncate_packets, model.max_packet_length_in_bytes.bind(model));
    event.bind($delete, 'click', this.emit.bind(this, "destroy"));

    // Validator should rebind when checkboxes change (because fields become required)
    event.bind($time_in_secs.querySelector('[type=checkbox]'), 'change', bind_validator);
    //event.bind($stop_at_bytes.querySelector('[type=checkbox]'), 'change', bind_validator); // Field is required to prevent filling storage
    event.bind($packet_count.querySelector('[type=checkbox]'), 'change', bind_validator);
    event.bind($truncate_packets.querySelector('[type=checkbox]'), 'change', bind_validator);

    // Bind validator to blur events and save button
    bind_validator();
};

RecorderEditDelegate.prototype.bind_validator = function () {
    var get_form_value = this.get_form_value.bind(this),
        interface_selector = this.parent.interface_selector,
        $title = this.$el.querySelector('.title'),
        $truncate_packets = this.$el.querySelector('.truncate-packets'),
        $time_in_secs = this.$el.querySelector('.time-in-secs'),
        $stop_at_bytes = this.$el.querySelector('.stop-at-bytes'),
        $packet_count = this.$el.querySelector('.packet-count'),
        $save = this.$el.querySelector('.save'),
        default_getter;

    this.validator = validate(this.$el);

    default_getter = this.validator.adapter.value.bind(this.validator.adapter);

    this.validator
        .value(get_form_value.bind(this, default_getter))
        .invalid(render_invalid)
        .on('blur')

        //title
        .field($title)
        .is('required', strings['Field is required'])

        // Port selector
        .field(interface_selector.$el)
        .is(function (val) {
            return val.length;
        }, strings['Must select an interface'])

        // Stop after X bytes
        .field($stop_at_bytes.querySelector('[type=text]'))
        .is('required', strings['Field is required'])
        .is(/^[1-9]\d*$/, strings['Must be a positive integer'])
        .is(function less_than_10gb(val) {
            return val <= 10737418240;
        }, strings['Cannot capture more than 10GB (10,737,418,240 bytes)']);

    // Stop after X seconds
    add_optional_integer_validation(this.validator, $time_in_secs);

    // Stop after X packets
    add_optional_integer_validation(this.validator, $packet_count);

    // Truncate at X packets
    add_optional_integer_validation(this.validator, $truncate_packets);

    event.bind($save, 'click', this.handlers['click .save']);
};

RecorderEditDelegate.prototype.onsave = function (e) {
    if (e && e.preventDefault) {
        e.preventDefault();
    }

    var save = this.parent.save.bind(this.parent);

    this.validator.validate(function (unused, is_valid) {
        if (is_valid) {
            save();
        }
    });
};

RecorderEditDelegate.prototype.get_form_value = function (default_getter, $el) {
    if (this.parent.interface_selector.$el === $el) {
        return this.parent.model.interfaces();
    }

    if ($el.disabled) {
        return '';
    }

    return default_getter($el);
};

module.exports = RecorderEditDelegate;
});

require.register("./components-ixia/traffic-recorder/views/delegates/recorder-history.js", function (exports, module) {
var BatchOperator = require('./components-ixia/batch-operator'),
    Paginator = require('./components-ixia/paginator'),
    domify = require('component~domify@1.3.1'),
    template = domify(require('./components-ixia/traffic-recorder/templates/recorder-history.js')),
    classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4'),
    emitter = require('component~emitter@1.0.1'),
    moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68'),
    CaptureCollection = require('./components-ixia/traffic-recorder/models/capture-collection.js'),
    CaptureView = require('./components-ixia/traffic-recorder/views/capture.js'),
    historical_capture_template = domify(require('./components-ixia/traffic-recorder/templates/historical-capture.js')),
    strings = {
        "seconds": window.translate("seconds"),
        "bytes": window.translate("bytes"),
        "packets": window.translate("packets"),
        "Record": window.translate("Record"),
        "Stop": window.translate("Stop")
    };

function RecorderHistoryDelegate(recorder) {
    this.parent = recorder;
    this.model = this.parent.model;
    this.$el = template.cloneNode(true);
    this.batch_operator = new BatchOperator();
    this.paginator = new Paginator();
    this.captures_per_page = 5;
    this.handlers = {
        'selection changed': []
    };

    this.batch_operator.addOperation('delete', 'Delete', this.delete.bind(this));
}

emitter(RecorderHistoryDelegate.prototype);

RecorderHistoryDelegate.prototype.render = function () {
    var $el = this.$el,
        $title = $el.querySelector('.title'),
        $loading = $el.querySelector('.loading'),
        $error = $el.querySelector('.error'),
        $batch_operator = $el.querySelector('.capture-batch-operator');

    this.$el = $el;

    $title.innerHTML = this.model.title();

    classes($loading).remove('hidden');
    classes($error).add('hidden');

    this.batch_operator.render();

    // Paginator rendered in .reset()

    this.bind();

    return $el;
};

function done_loading_captures(res) {
    var $loading = this.$el.querySelector('.loading'),
        $error = this.$el.querySelector('.error');

    classes($loading).add('hidden');

    if (res instanceof Error) {
        classes($error).remove('hidden');
    } else {
        classes($error).add('hidden');
    }
}

function get_captures(recorder_id) {
    this.captures = CaptureCollection.all(done_loading_captures.bind(this), recorder_id);
    this.model.captures(this.captures);
}

function page_changed(page) {
    this.batch_operator.select_none(true);
    this.render_page(page);
}

RecorderHistoryDelegate.prototype.bind = function () {
    var recorder_id = this.model.id(),
        $error = this.$el.querySelector('.error'),
        $done = this.$el.querySelector('.done');

    // Model -> view
    get_captures.call(this, recorder_id);
    this.captures.on('added', this.reset.bind(this));
    this.captures.on('removed', this.reset.bind(this));
    this.captures.on('reset', this.reset.bind(this));

    // View -> view
    this.paginator.on('change', page_changed.bind(this));
    this.batch_operator.on('change', this.render_page.bind(this, null));

    // DOM -> Model
    event.bind($error.querySelector('a'), 'click', get_captures.bind(this, recorder_id));
    event.bind($done, 'click', this.emit.bind(this, "done"));
};

RecorderHistoryDelegate.prototype.reset = function (collection, items) {
    var pages = Math.ceil(this.captures.count() / this.captures_per_page);

    if (pages !== this.paginator.pages()) {
        this.paginator.pages(pages);
    }

    this.batch_operator.update();
    this.paginator.render();
    this.render_page(this.paginator.page);
};

function selection_changed(id, capture, $operator) {
    this.batch_operator.toggle(id, capture);
    while ($operator.firstChild) {
        $operator.removeChild($operator.firstChild);
    }
    $operator.appendChild(this.batch_operator.$el);
}

/**
 * Re-renders list of captures
 *
 * @param page 1-indexed (typically from a paginator)
 */
RecorderHistoryDelegate.prototype.render_page = function (page) {
    page = page || this.paginator.page;
    page = Math.min(page, this.paginator.pages());

    var index = page - 1,
        begin = index * this.captures_per_page,
        end = begin + this.captures_per_page,
        captures = this.captures.slice(begin, end),
        items = {}, // key-value pairs for batch operator
        $loading = this.$el.querySelector('.loading'),
        $captures = this.$el.querySelector('.captures'),
        $batch_operator = this.$el.querySelector('.capture-batch-operator'),
        $paginator = this.$el.querySelector('.capture-paginator');

    classes($loading).add('hidden');

    // Clear any existing captures from the list
    while ($captures.firstChild) {
        $captures.removeChild($captures.firstChild);
    }

    // Insert captures for this page and build key-value pairs for batch operator
    this.handlers['selection changed'] = [];
    captures.map(function (capture) {
        var view = CaptureView.factory(capture, historical_capture_template),
            id = capture.id(),
            $checkbox;

        this.handlers['selection changed'][id] = selection_changed.bind(this, id, capture, $batch_operator);

        view.render();
        $checkbox = view.$el.querySelector('[type=checkbox]');
        $checkbox.checked = this.batch_operator.isSelected(id);
        event.bind($checkbox, 'change', this.handlers['selection changed'][id]);
        $captures.appendChild(view.$el);

        // Create key-value pair for batch operator
        items[id] = capture;
    }, this);

    this.batch_operator.items(items);

    while ($batch_operator.firstChild) {
        $batch_operator.removeChild($batch_operator.firstChild);
    }
    if(captures.length > 0){
        $batch_operator.appendChild(this.batch_operator.$el);
    }

    while ($paginator.firstChild) {
        $paginator.removeChild($paginator.firstChild);
    }
    $paginator.appendChild(this.paginator.$el);

    if (1 === this.paginator.pages()) {
        classes($paginator).add('hidden');
    } else {
        classes($paginator).remove('hidden');
    }
};

function handle_response(capture, error, response) {
    if (error || response.status !== 200) {
        window.logger.error('Could not delete capture ' + capture.id());
        return;
    }

    // Remove capture from collection
    this.captures.remove(capture);

    this.render_page(this.paginator.page);
}

RecorderHistoryDelegate.prototype.delete = function (captures) {
    Object.keys(captures).forEach(function (key) {
        var capture = captures[key];
        capture.destroy(handle_response.bind(this, capture));
    }, this);

    this.batch_operator.select_none(true);
};

module.exports = RecorderHistoryDelegate;
});

require.register("./components-ixia/traffic-recorder/models/recorder.js", function (exports, module) {
var model = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12'),
    defaults = require('segmentio~model-defaults@1.0.6'),
    Interface = require('./components-ixia/interface-model'),
    Capture = require('./components-ixia/traffic-recorder/models/capture.js'),
    CaptureCollection = require('./components-ixia/traffic-recorder/models/capture-collection.js'),
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a'),
    strings = {
        'New recorder': window.translate('New recorder')
    },
    capture_status_map = {
        "COMPLETED": "STOPPED",
        "STOPPED": "STOPPED",
        "RUNNING": "STARTED",
        "STARTED": "STARTED",
        "INITIALIZING": "INITIALIZING"
    };

var Recorder = model('Recorder')
    .use(defaults)
    .route('/spirent/traffic-recorder/recorders')
    .attr('id')
    .attr('title', {default: strings['New recorder']})
    .attr('state', {default: 'STOPPED'})
    .attr('captures', {default: function () { return new CaptureCollection([]); }})
    .attr('filter', {default: ''})
    .attr('stop_at_bytes', {default: 10737418240})
    .attr('packet_count')
    .attr('time_in_secs')
    .attr('interfaces', {default: []})
    .attr('max_packet_length_in_bytes');

Recorder.headers({
    'X-Requested-With': 'XMLHttpRequest',
    'Cache-Control': 'no-cache',
    'Accept': 'application/json'
});

/**
 * Returns a new Recorder instance from an Object (e.g. from an AJAX response body)
 * @param obj
 * @returns {Recorder}
 */
Recorder.factory = function (obj) {
    var instance = undefined,
        last_capture = undefined;

    obj.max_packet_length_in_bytes = obj.config.max_packet_length_in_bytes;
    obj.filter = obj.config.filter;
    var stop_criteria = obj.config.stop_criteria || [],
        interfaces = obj.config.interfaces || [];

    obj.captures = new CaptureCollection(obj.captures || []);
    obj.interfaces = interfaces.map(function (iface) {
        return new Interface(iface);
    });

    stop_criteria.forEach(function (criterium) {
        var attr = criterium.type,
            val = criterium.limit;
        if("size_in_bytes" === attr){
            obj['stop_at_bytes'] = val;
        }else{
            obj[attr] = val;
        }
    });

    instance = new Recorder(obj);

    last_capture = instance.last_capture();
    if (last_capture) {
        instance.bind_capture_status(last_capture);
    }

    return instance;
};

Recorder.prototype.interface = function (iface) {
    this.interfaces([iface]);
};

Recorder.prototype.toggle_state = function (fn) {
    var update = 'STOPPED' === this.state() ? this.start : this.stop;
    update.call(this, fn);
};

Recorder.prototype.start = function (fn) {
    return this.set_state('START', fn);
};

Recorder.prototype.stop = function (fn) {
    return this.set_state('STOP', fn);
};

Recorder.prototype.set_state = function (state, fn) {
    fn = fn || function () {};

    var url = this.url('state'),
        capture,
        recorder = this,
        captures;

    request.post(url)
        .use(no_cache)
        .set('Accept', 'application/json')
        .send({action: state})
        .end(function (err, res) {
            if (err) {
                return fn(new Error(err));
            }

            if (!res.ok) {
                return fn(new Error(res.status));
            }

            if (res.body) {
                // Started a new capture
                capture = new Capture(res.body);
                recorder.bind_capture_status(capture);
                captures = recorder.captures();
                captures.push(capture);
                recorder.captures(captures);
                recorder.state('INITIALIZING');
            }

            return fn(recorder);
        });
};

Recorder.prototype.stop_criteria = function () {
    var criteria = [];

    if (undefined !== this.stop_at_bytes()) {
        criteria.push({
            type: 'size_in_bytes',
            limit: this.stop_at_bytes()
        });
    }
    if (undefined !== this.packet_count()) {
        criteria.push({
            type: 'packet_count',
            limit: this.packet_count()
        });
    }
    if (undefined !== this.time_in_secs()) {
        criteria.push({
            type: 'time_in_secs',
            limit: this.time_in_secs()
        });
    }

    return criteria;
};

Recorder.prototype.last_capture = function () {
    return this.captures().last_capture();
};

Recorder.prototype.toJSON = function () {
    // Used by .save()

    return {
        title: this.title(),
        interfaces: this.interfaces(),
        filter: this.filter(),
        stop_criteria: this.stop_criteria(),
        max_packet_length_in_bytes: this.max_packet_length_in_bytes()
    };
};

/**
 * Updates recorder state when last capture changes
 *
 * @param capture Capture
 */
Recorder.prototype.bind_capture_status = function (capture) {
    var self = this;

    capture.on('change status', function handle_change(status) {
        status = capture_status_map[status];
        self.state(status);
    });
};

Recorder.primaryKey = 'id';

module.exports = Recorder;
});

require.register("./components-ixia/traffic-recorder/models/recorder-collection.js", function (exports, module) {
var emitter = require('component~emitter@1.0.1'),
    Recorder = require('./components-ixia/traffic-recorder/models/recorder.js'),
    Interface = require('./components-ixia/interface-model');

function Collection() {}
Collection.prototype = Object.create(Array.prototype);

emitter(Collection.prototype);

Collection.get = function (fn) {
    fn = fn || function () {};
    var recorders = new this(),
        map_recorders = function (err, collection) {
            if(collection){
                collection.forEach(function (recorder) {
                    recorder = Recorder.factory(recorder.attrs);
                    recorders.push(recorder, true);
                });
            }
            recorders.emit('reset', recorders);
            fn(recorders);
        };

    Recorder.all(map_recorders);
    return recorders;
};

Collection.prototype.push = function (item, silent) {
    silent = silent || false;
    Array.prototype.push.call(this, item);
    if (!silent) {
        this.emit('added', item);
    }
};

Collection.prototype.indexOf = function (item) {
    var id = item.id(),
        index = -1;

    this.map(function (current, i) {
        if (-1 === index && id === current.id()) {
            index = i;
        }
    });

    return index;
};


module.exports = Collection;
});

require.register("./components-ixia/traffic-recorder/models/capture.js", function (exports, module) {
var model = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12'),
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a'),
    emitter = require('component~emitter@1.0.1'),
    noop = function () {},
    logger = window.logger,
    Poller = require('./components-ixia/async-poller');

// Read-only
var Capture = model('Capture')
    .route('/spirent/traffic-recorder/captures')
    .attr('id')
    .attr('uri')
    .attr('title')
    .attr('recorder_id')
    .attr('recorder_uri')
    .attr('status')
    .attr('started')
    .attr('ended')
    .attr('interfaces')
    .attr('time_in_secs')
    .attr('size_in_bytes')
    .attr('file_size_in_bytes')
    .attr('packet_count')
    .attr('download_uri')
    .attr('delete_uri');

emitter(Capture.prototype);

Capture.primaryKey = 'id';

Capture.get_for_recorder = function (recorder_id, next) {
    Capture.get('?recorder_id=' + recorder_id, next);
};

Capture.prototype.download = function (next) {
    next = next || function () {};
    Capture.get(this.id() + '/data', next);
};

Capture.prototype.poll = function (success, error) {
    success = success || noop;
    error = error || noop;

    var self = this,
        error_count = 0,
        poller,
        fn = function (next) {
            request.get(self.url())
                .use(no_cache)
                .end(function update(res) {
                    if (res.error) {
                        logger.error(res.error);
                        error_count += 1;

                        if (error_count > 3) {
                            // Give up
                            return error(res.error);
                        }
                    } else {
                        self.set(res.body);
                    }

                    if ('COMPLETED' === self.status()) {
                        poller.stop();
                        return success(res, self);
                    }

                    return next();
                });
        };

    poller = new Poller(fn, 1000);
    poller.poll();
    return poller;
};

module.exports = Capture;
});

require.register("./components-ixia/traffic-recorder/models/capture-collection.js", function (exports, module) {
var emitter = require('component~emitter@1.0.1'),
    Capture = require('./components-ixia/traffic-recorder/models/capture.js'),
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a');

function sort_by_started(captures, oldest_first) {
    captures = captures.sort(function (a, b) {
        var a_started = typeof a.started === 'function' ? a.started() : a.started,
            b_started = typeof b.started === 'function' ? b.started() : b.started,
            ret;

        if (a_started === b_started) {
            return 0;
        }

        a = Date.parse(a_started);
        b = Date.parse(b_started);

        ret = a - b;
        if (!oldest_first) {
            // Reverse
            ret = -ret;
        }
        return ret;
    });

    return captures;
}

function Collection(collection) {
    if (collection instanceof Collection) {
        return collection;
    }

    collection = collection || [];

    this.items = [];

    collection = sort_by_started(collection);

    collection.forEach(function (item, i) {
        this.items[i] = new Capture(item);
    }, this);

    return this;
}

emitter(Collection.prototype);

Collection.all = function (fn, recorder_id) {
    var collection = new Collection(),
        emit = collection.emit.bind(collection);

    fn = fn || function () {};

    request.get(Capture.url() + '?recorder_id=' + recorder_id)
        .use(no_cache)
        .set('Accept', 'application/json')
        .end(function (err, res) {
            var tmp;

            if (err) {
                fn(new Error(err));
            }

            if (!res.ok) {
                fn(new Error(res.status));
            }

            tmp = new Collection(res.body);

            collection.items = tmp.items;

            emit("reset", collection, res.body);

            fn(collection);
        });

    return collection;
};

/**
 * Returns last capture or undefined
 *
 * @returns {Capture|undefined}
 */
Collection.prototype.last_capture = function () {
    // Captures are sorted (most-recent first) during instantiation (see constructor)
    return this.items[0];
};

Collection.prototype.push = function (item, silent) {
    silent = silent || false;

    var items = this.items;

    items.splice(0, 0, item);
    this.items = sort_by_started(items);

    if (!silent) {
        this.emit('added', item);
    }
};

Collection.prototype.remove = function (item, silent) {
    this.items.forEach(function (current, i) {
        if (current.id() === item.id()) {
            this.items.splice(i, 1);
        }
    }, this);

    if (!silent) {
        this.emit('removed', item);
    }
};

Collection.prototype.indexOf = function (item) {
    var id = item.id(),
        index = -1;

    this.items.map(function (current, i) {
        if (-1 === index && id === current.id()) {
            index = i;
        }
    });

    return index;
};

Collection.prototype.count = function () {
    return this.items.length;
};

/**
 * Just like Array.slice
 *
 * @param begin (zero-indexed; inclusive)
 * @param end  (zero-indexed; non-inclusive)
 * @returns Array
 */
Collection.prototype.slice = function (begin, end) {
    return this.items.slice(begin, end);
};

module.exports = Collection;
});

require.register("./components-ixia/traffic-recorder/templates/index.js", function (exports, module) {
module.exports = '<div class="traffic-recorder">\n    <div class="recorders container"></div>\n    <div>\n        <button class="add"><span>+ Add new traffic recorder</span></button>\n    </div>\n</div>';
});

require.register("./components-ixia/traffic-recorder/templates/capture-progress.js", function (exports, module) {
module.exports = '<div class="capture-progress">\n    <div class="bar">&nbsp;</div>\n</div>\n';
});

require.register("./components-ixia/traffic-recorder/templates/recorder-view.js", function (exports, module) {
module.exports = '<div class="recorder single-pane view">\n    <div><h1 class="title"></h1></div>\n    <div>\n        <div class="body">\n            <h2 class="device"></h2>\n            <ul>\n                <li class="selector"></li>\n                <li class="stop-criteria"><label>Stop after</label> <span>N/A</span></li>\n                <li class="filter"><label>Capture packets that match</label> <span>N/A</span></li>\n                <li class="truncate-packets"><label>Truncate packets at</label> <span>N/A</span></li>\n            </ul>\n        </div><div class="last-capture"></div>\n    </div>\n    <div class="footer">\n        <ul class="padding">\n            <li class="progress">\n            </li><li class="action">\n                <a class="delete" href="#">Delete</a>\n            </li><li class="action">\n                <a class="history" href="#">History</a>\n            </li><li class="action">\n                <a class="duplicate" href="#">Duplicate</a>\n            </li><li>\n                <button class="toggle button dark start"><span>Record</span></button>\n            </li>\n        </ul>\n    </div>\n</div>';
});

require.register("./components-ixia/traffic-recorder/templates/recorder-edit.js", function (exports, module) {
module.exports = '<div class="recorder single-pane edit">\n    <div><input type="text" class="title" /></div>\n    <div>\n        <div class="body">\n            <ul>\n                <li>\n                    <label>Select a port</label>\n                    <div class="selector"></div>\n                </li>\n                <li class="stop-criteria"><label>Stop after (whichever comes first)</label>\n                    <ul>\n                        <li class="time-in-secs"><label><input type="checkbox" /> Seconds</label> <input type="text" /></li>\n                        <li class="stop-at-bytes"><label><input type="checkbox" disabled /> Bytes</label> <input type="text" />(required)</li>\n                        <li class="packet-count"><label><input type="checkbox" /> Packets</label> <input type="text" /></li>\n                    </ul>\n                </li>\n                <li class="filter"><label class="for-input">Capture filter</label> <input type="text" class="with-label" /> <span  class="show">Presets</span></li>\n                <li class="truncate-packets"><label><input type="checkbox" /> Truncate packets at</label> <input type="text"/> bytes</li>\n            </ul>\n        </div>\n    </div>\n    <div class="footer">\n        <ul class="padding">\n            <li class="action">\n                <a class="delete" href="#">Delete</a>\n            </li><li>\n            </li><li>\n            </li><li>\n                <button class="toggle button dark save"><span>Save</span></button>\n            </li>\n        </ul>\n    </div>\n</div>\n';
});

require.register("./components-ixia/traffic-recorder/templates/recorder-history.js", function (exports, module) {
module.exports = '<div class="recorder single-pane history">\n    <div><h1 class="title"></h1></div>\n    <div>\n        <div class="body">\n            <h2>View history</h2>\n            <div class="loading">Loading</div>\n            <div class="error hidden">Error loading results <a href="#">Retry</a></div>\n            <ul class="captures"></ul>\n            <div class="capture-batch-operator"></div>\n            <div class="capture-paginator"></div>\n        </div>\n    </div>\n    <div class="footer">\n        <ul class="padding">\n            <li class="progress">\n            </li><li class="action">\n            </li><li class="action">\n            </li><li class="action">\n            </li><li>\n                <button class="toggle button dark done"><span>Done</span></button>\n            </li>\n        </ul>\n    </div>\n</div>';
});

require.register("./components-ixia/traffic-recorder/templates/last-capture.js", function (exports, module) {
module.exports = '<ul>\n    <li><h2>Last capture</h2></li>\n    <li class="none">No completed captures</li>\n    <li class="started"></li>\n    <li class="duration"></li>\n    <li class="size"></li>\n    <li class="packets"></li>\n    <li class="download"><a href="#">Download</a></li>\n</ul>';
});

require.register("./components-ixia/traffic-recorder/templates/historical-capture.js", function (exports, module) {
module.exports = '<li class="historical-capture">\n    <input type="checkbox" />\n    <ul>\n        <li class="none">No completed captures</li>\n        <li class="title"></li>\n        <li class="started"></li>\n        <li class="duration"></li>\n        <li class="size"></li>\n        <li class="packets"></li>\n    </ul>\n    <div class="download"><a href="#">Download</a></div>\n</li>';
});

require.register("./components-ixia/traffic-recorder/test/features.js", function (exports, module) {
//(function() {
//var Yadda = require('yadda'),
//    English = Yadda.localisation.English,
//    FeatureParser = Yadda.parsers.FeatureParser,
//    parser = new FeatureParser(English),
//    recorder = require('traffic-recorder/features/recorder.feature.js'),
//    steps = require('traffic-recorder/features/steps/recorder.js'),
//    steps = new Yadda.Yadda(steps),
//    steps = steps.yadda.bind(steps);
//
//mocha.setup('bdd');
//Yadda.plugins.mocha();
//
//feature(recorder, function (feature) {
//    scenarios(feature.scenarios, function(scenario, done) {
//        steps(scenario.steps, done);
//    });
//});
//})();
});

require.register("./components-ixia/traffic-recorder/features/recorder.feature.js", function (exports, module) {
module.exports = 'Feature: A single traffic recorder\n\n  Scenario: Initial state\n\n    Given I have no recorder\n    When I add a recorder\n    Then the default device is selected\n    And the name is "New recorder"\n    And no ports are selected\n    And the option to truncate packets is not selected\n    And none of the stop criteria are selected\n    And the capture filter is blank\n\n  Scenario: Changing the name\n\n    Given I have a new recorder\n    When I click the name\n    Then I should be able to edit the name\n\n  Scenario: Selecting a port\n\n    Given I have a new recorder\n    When I click physical port 1\n    Then physical port 1 should appear selected\n    And physical port 1 should appear in the configuration\n\n  Scenario: Attempting to select a second port (not allowed)\n\n    Given I have a recorder with physical port 1 selected\n    When I click physical port 2\n    Then only physical port 2 should appear selected\n    And only physical port 2 should appear in the configuration\n\n  Scenario: Enabling packet truncation\n\n    Given I have a new recorder\n    When I turn packet truncation on\n    Then a default value for packet size should appear in bytes\n    And an option to change packet size should exist\n    And packet truncation at the default value should appear in the configuration\n';
});

require.register("./components-ixia/traffic-recorder/features/steps/recorder.js", function (exports, module) {
var assert = require('chai').assert,
    English = require('yadda').localisation.English,
    View = require('./components-ixia/traffic-recorder/views/recorder.js'),
    recorder,
    devices = [{id: 1, name: "Default"}];

module.exports = English.library()
    .given("I have no recorder", function (next) {
        next();
    })
    .when("I add a recorder", function (next) {
        recorder = new View(devices);
        recorder.render();
        next();
    })
    .then("the default device is selected", function (next) {
        var device_name = recorder.$el.name,
            default_name = devices[0].name;

        assert.strictEqual(device_name, default_name);
        next();
    })
    .then('the name is "New recorder"')
    .then('no ports are selected')
    .then('the option to truncate packets is not selected')
    .then('none of the stop criteria are selected')
    .then('the capture filter is blank')
});

require.register("./components-ixia/netflow-settings", function (exports, module) {
/*global translate: true */

var domify = require('component~domify@1.3.1'),
    template = require('./components-ixia/netflow-settings/templates/netflow-settings.js'),
    event = require('component~event@0.1.4'),
    GlobalSettings = require('./components-ixia/netflow-settings/views/global-settings.js'),
    Interfaces = require('./components-ixia/netflow-settings/views/interfaces.js'),
    Model = require('./components-ixia/netflow-settings/models/netflow-settings.js'),
    InterfaceModel = require('./components-ixia/interface-model'),
    classes = require('component~classes@1.2.3'),
    util = require('./components-ixia/utility-functions'),
    lightbox = util.lightbox,
    task_status_url = util.getConfigSetting('get_task_status'),
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a'),
    noop = function() {},
    ixiaCRVm = window.ixiaCRVm,
    results_status_observable = window.ixiaCRVm.vmTest.vmResults.status,
    LoadingState = require('./components-ixia/loading-state');

// Extend interface model
InterfaceModel.attr('collectors', {default: []});

function NetflowSettings(model) {
    this.setModel(model);
    this.$el = domify(template);
    this.globalSettingsPane = new GlobalSettings(model);
    this.interfacesPane = undefined;
    this.ports_observable = ixiaCRVm.availableDevices()[0].ports;
    this.loading_state = new LoadingState(this.$el);
    //this.init_render = true;
    this.graber = undefined;

    this.strings = {
        "License invalid": window.translate("Your license is invalid. If you just updated, you may need a new license. Please upload a valid license or contact Spirent support at <a href='http://www.ixiacom.com' target='_blank'>www.ixiacom.com</a>."),
        "Updating": window.translate("Updating"),
        "Loading": window.translate("Loading"),
        "Exporting has not yet started": window.translate("Exporting has not yet started"),
        "Please allow approximately three minutes for exporting to begin.": window.translate("Please allow approximately three minutes for exporting to begin."),
        "Please wait for test to finish": window.translate("Please wait for test to finish"),
        "Netflow save confirmation": window.translate("Saving will interrupt any tests that are currently running.")
    };
}

NetflowSettings.factory = function (callback) {
    callback = callback || function() {};

    var view = new NetflowSettings(),
        handler = function (err, model) {
            if (err) {
                return callback(err);
            }

            view.setModel(model);
            return callback(null, view);
        };

    view.renderLoading();

    view.graber = function(){
        Model.get(undefined,handler);
    }

    view.graber();

    return view;
};

NetflowSettings.prototype.setModel = function (model) {
    if (!model) {
        return; // Short-circuit
    }

    var interfaces = [];


    // Convert interfaces object to models
    model.interfaces().forEach(function (iface) {
        interfaces.push(new InterfaceModel(iface));
    });

//    if(!this.init_render){
//        this.interfacesPane.update_interfaces(interfaces);
//        return;
//    }

    this.globalSettingsPane.setModel(model);
    this.model = model;

    this.interfacesPane = new Interfaces(interfaces, this.model.is_enabled());

};

NetflowSettings.prototype.render = function () {
    var updating = this.model.status() === 'updating',
        $global = this.$el.querySelector('.global');

    if (updating) {
        this.renderUpdating();
        return this.$el;
    }

    // Enabling Netflow re-allocates ports
    // And port re-allocation interrupts tests
    // So block UI when tests are running to avoid interrupting
    this.transitionTo(results_status_observable());
    results_status_observable.subscribe(this.transitionTo.bind(this));

    $global.querySelector('.mode .enable').checked = this.model.is_enabled();
    $global.querySelector('.mode .disable').checked = !this.model.is_enabled();

    this.globalSettingsPane.render();
    this.interfacesPane.render();

    $global.appendChild(this.globalSettingsPane.$el);
    this.$el.appendChild(this.interfacesPane.$el);

    this.bind();
    return this.$el;
};

NetflowSettings.prototype.renderUpdating = function () {
    var updating = this.strings.Updating,
        prev_html = this.$el.innerHTML,
        not_updating = function (data) {
            return data.status() !== 'updating';
        }.bind(this),
        updated = function (data) {
            if (!this.$el.parentNode || !this.$el.parentNode.contains(this.$el)) {
                // view was removed
                return;
            }

            /*global $:true */
            if ($ && $.fn && typeof $.fn.unblock === 'function') {
                this.loading_state.hide();
            } else {
                this.$el.innerHTML = prev_html;
            }
            this.model = data;
            this.interfacesPane.toggle('enabled' === this.model.status());
            this.render();
        }.bind(this);

    /*global $:true */
    if ($ && $.fn && typeof $.fn.block === 'function') {
        this.loading_state.show(updating);
    } else {
        this.$el.innerHTML = updating;
    }
    /*global $:false */

    this.pollUntil(not_updating, updated);
};

NetflowSettings.prototype.renderLoading = function () {
    var message = this.strings.Loading;
    this.loading_state.show(message);
};

NetflowSettings.prototype.blockForTesting = function () {
    var message = this.strings["Please wait for test to finish"];
    this.loading_state.show(message);
};

NetflowSettings.prototype.blockWithMessage = function (message) {
    this.loading_state.show(message);
};

NetflowSettings.prototype.unblock = function () {
    this.loading_state.hide();
};

NetflowSettings.prototype.transitionTo = function (state) {
    if ('running' === state) {
        this.blockForTesting();
    } else {
        this.unblock();
    }
};

NetflowSettings.prototype.pollUntil = function (condition, done) {
    Model.get(undefined, function (err, model) {
        if (condition(model)) {
            done(model);
        } else {
            setTimeout(this.pollUntil.bind(this, condition, done), 500);
        }
    }.bind(this));
};

NetflowSettings.prototype.renderInvalidLicense = function () {
    var message = this.strings["License invalid"],
        $message;


    /*global $:true */
    if ($ && $.fn && typeof $.fn.block === 'function') {
        this.transitionTo('license_invalid');
        var prev_defaults = $.blockUI.defaults.css;
        $.blockUI.defaults.css = {};
        $(this.$el).block({message: '<div class="lightbox-chrome">' + message + '</div>'});
        $.blockUI.defaults.css = prev_defaults;
    } else {
        $message = document.createTextNode(message);
        this.$el.appendChild($message);
    }
    /*global $:false */
};

NetflowSettings.prototype.bind = function () {
    var $enable = this.$el.querySelector('.mode .enable'),
        $disable = this.$el.querySelector('.mode .disable'),
        $save = this.$el.querySelector('.save');

    event.bind($enable, 'change', this.toggle.bind(this, true));
    event.bind($disable, 'change', this.toggle.bind(this, false));
    event.bind($save, 'click', this.validate.bind(this));

    this.model.on('saving', this.updateAllocations.bind(this));
};

NetflowSettings.prototype.validate = function (e) {
    if (e && e.preventDefault) {
        e.preventDefault();
    }

    var save = this.confirm_save.bind(this);

    this.globalSettingsPane.validate(save, noop);
};

NetflowSettings.prototype.confirm_save = function () {
    lightbox.confirmation_dialog(this,this.strings["Netflow save confirmation"],this.save)
}

NetflowSettings.prototype.save = function () {
    var poll = this.pollTask.bind(this),
        start_task_poller = function (nothing, response) {
            poll(response.body.task_id);
        },
        interfaces = [],
        offset,
        model;

    /*ignore jslint start*/
    if (typeof LightboxWorkingViewModel !== 'undefined' && typeof translate === 'function') {
    /*ignore jslint end*/
        model = new LightboxWorkingViewModel(translate("Saving"), translate('Saving...'));
        lightbox.working(model);
    }

    this.interfacesPane.models.forEach(function (iface) {
        offset = iface.physical_port() - 1;
        interfaces[offset] = iface.toJSON();
    });
    this.model.interfaces(interfaces);

    this.model.save(start_task_poller);
};

NetflowSettings.prototype.hide = function () {
    classes(this.$el).add('hidden');
};

NetflowSettings.prototype.show = function () {
    //this.syncPortsFrom();
    this.renderLoading();
    this.reload();

    classes(this.$el).remove('hidden');
};

NetflowSettings.prototype.reload = function () {
    //try to fetch a valid licence
    this.graber();
};

NetflowSettings.prototype.toggle = function (enabled) {
    enabled = enabled || false;
    this.model.toggle(enabled);
    this.globalSettingsPane.toggle(enabled);
    this.interfacesPane.toggle(enabled);
};

NetflowSettings.prototype.pollTask = function (task_id) {
    var self = this,
        url = task_status_url + '?task_id=' + task_id,
        poll = this.pollTask.bind(this, task_id),
        is_exporting = this.model.is_exporting(),
        strings = this.strings,
        show_warning = function () {
            lightbox.openAlert(strings['Exporting has not yet started'], strings['Please allow approximately three minutes for exporting to begin.']);
            lightbox.off('close', show_warning);
        },
        workingVm;

    request.get(url)
        .use(no_cache)
        .end(function (res) {
            if ('running' === res.body.status) {
                // Keep polling
                setTimeout(poll, 500);
                return;
            }

            workingVm = new LightboxWorkingViewModel(translate('Save'), translate('Saving...'));
            if (res.error) {
                // Show failure
                workingVm.status('error');
                lightbox.working(workingVm);
                return;
            }

            /*
            ports_observable().forEach(function (old_port) {
                interfaces.forEach(function (new_port) {
                    if (new_port.physical_port === old_port.id()) {
                        old_port.allocated_to(new_port.enabled ? new_port.allocated_to : 'stc');
                        old_port.available(!new_port.enabled);
                    }
                });
            });
            */
            self.syncPortsTo();

            workingVm.status('success');
            lightbox.working(workingVm);
            if (is_exporting) {
                // Warn of the ~3 min delay
                lightbox.on('close', show_warning);
            }
        });
};

//sync to global port observable
NetflowSettings.prototype.syncPortsTo = function(){
    var interfaces = this.model.interfaces(),
        ports_observable = this.ports_observable,
        netflow_enable = this.model.status();

    ports_observable().forEach(function (port_glob) {
        if(port_glob.allocated_to() === 'flowmon')
        {
            port_glob.allocated_to('');
        }
        else if (port_glob.allocated_to() === ''){
            port_glob.allocated_to(undefined);
        }
        interfaces.forEach(function (port_local) {
            if (netflow_enable === 'enabled' && port_local.physical_port === port_glob.id() && port_local.allocated_to === 'flowmon' && port_local.enabled) {
                port_glob.allocated_to('flowmon');
            }
        });
    });
}

//sync from global port observable, not currently used
NetflowSettings.prototype.syncPortsFrom = function(){
    var interfaces = this.interfacesPane.models,
        ports_observable = this.ports_observable;

    ports_observable().forEach(function (port_glob) {
        interfaces.forEach(function (port_local) {
            if (port_local.physical_port() === port_glob.id() && port_glob.allocated_to() !== 'flowmon' && port_glob.allocated_to() !== undefined) {
                port_local.allocated_to (port_glob.allocated_to() === '' ? 'flowmon' : port_glob.allocated_to());
                port_local.enabled(false);
            }
        });
    });
}

NetflowSettings.prototype.updateAllocations = function () {
    var interfaces = this.model.interfaces();

    interfaces.forEach(function (iface, i) {
        if (iface.enabled) {
            iface.allocated_to = 'flowmon';
        }
        interfaces[i] = iface;
    });
};

module.exports = NetflowSettings;
});

require.register("./components-ixia/netflow-settings/models/netflow-settings.js", function (exports, module) {
var model = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12'),
    defaults = require('segmentio~model-defaults@1.0.6');

var NetflowSettings = model('NetflowSettings')
//    .route('http://johntron.apiary.io/flowmon')
    .route('/spirent/flowmon')
    .use(defaults)
    .attr('status')
    .attr('license_status')
    .attr('protocol', {"default": []})
    .attr('active_timeout', {"default": 1800})
    .attr('inactive_timeout', {"default": 15})
    .attr('interfaces', {"default": []});

NetflowSettings.prototype.toggle = function (state) {
    state = state ? 'enabled' : 'disabled';
    this.status(state);
};

NetflowSettings.prototype.is_enabled = function () {
    return 'enabled' === this.status();
};

NetflowSettings.prototype.is_exporting = function () {
    var interfaces_enabled = false;

    this.interfaces().map(function (iface) {
        if ('flowmon' === iface.allocated_to && iface.enabled) {
            interfaces_enabled = true;
        }
    });
    return this.is_enabled() && interfaces_enabled;
};

module.exports = NetflowSettings;
});

require.register("./components-ixia/netflow-settings/templates/netflow-settings.js", function (exports, module) {
module.exports = '<form class="netflow-settings main">\n    <div>\n        <h3>NetFlow</h3>\n        <button class="save-button save">Save</button>\n    </div>\n    <div class="single-pane no-padding global">\n        <h4>Global settings</h4>\n        <ul>\n            <li class="mode">\n                <label for="netflow-on">Enable</label>\n                <input type="radio" class="enable" id="netflow-on" name="mode">\n                <label for="netflow-off">Disable</label>\n                <input type="radio" class="disable" id="netflow-off" name="mode">\n            </li>\n        </ul>\n    </div>\n    <div class="single-pane no-padding tip">\n        <h4>Need a collector?</h4>\n        <div>\n            <p>\n                FlowNBA Cloud is a Netflow collector service. Send your Netflow\n                data to FlowNBA, then configure the collector\'s monitoring and\n                anomaly detection with your browser.\n            </p>\n            <p>\n                Check out <a id="flownba" href="https://www.flownba.com/?utm_source=axon" target="_blank">FlowNBA.com</a>\n                for more information.\n            </p>\n        </div>\n    </div>\n</form>';
});

require.register("./components-ixia/netflow-settings/views/global-settings.js", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    template = require('./components-ixia/netflow-settings/templates/global-settings.js'),
    emitter = require('component~emitter@1.0.1'),
    event = require('component~event@0.1.4'),
    classes = require('component~classes@1.2.3'),
    validate = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2'),
    noop = function () {};

function GlobalSettings(model) {
    this.model = model;
    this.$el = domify(template);
    this.strings = {
        "netflow-v5": window.translate("Netflow v5"),
        "netflow-v9": window.translate("Netflow v9"),
        "ipfix": window.translate("IPFIX"),
        "Please enter a timeout in seconds": window.translate("Please enter a timeout in seconds")
    };
}

emitter(GlobalSettings.prototype);

GlobalSettings.prototype.setModel = function (model) {
    this.model = model;
};

GlobalSettings.prototype.render = function () {
    var protocols = this.model.protocol() || [],
        $active_timeout = this.$el.querySelector('#active_timeout'),
        $inactive_timeout = this.$el.querySelector('#inactive_timeout');

    this.insertProtocols(protocols);

    $active_timeout.value = this.model.active_timeout();
    $inactive_timeout.value = this.model.inactive_timeout();

    this.bind();

    this.toggle(this.model.is_enabled());

    return this.$el;
};

GlobalSettings.prototype.insertProtocols = function (protocols) {
    var $protocol = this.$el.querySelector('.protocol'),
        $option,
        strings = this.strings;

    protocols.forEach(function (protocol) {
        $option = document.createElement('option');
        $option.value = protocol.name;
        $option.innerHTML = strings[protocol.name];
        $option.selected = protocol.selected;
        if (protocol.selected) {
            // Hack to make the fancy dropdown work
            $protocol.parentNode.setAttribute('data-value', strings[protocol.name]);
        }
        $protocol.appendChild($option);

    });
};

GlobalSettings.prototype.bind = function () {
    var $protocol = this.$el.querySelector('.protocol'),
        $active_timeout = this.$el.querySelector('#active_timeout'),
        $inactive_timeout = this.$el.querySelector('#inactive_timeout');

    event.bind($protocol, 'change', this.protocolChanged.bind(this));
    event.bind($active_timeout, 'change', this.activeTimeoutChanged.bind(this));
    event.bind($inactive_timeout, 'change', this.inactiveTimeoutChanged.bind(this));
    this.bindValidator();
};

GlobalSettings.prototype.bindValidator = function () {
    this.validator = validate(this.$el)
        .on('blur')
        .field('active_timeout')
            .is('required', this.strings["Please enter a timeout in seconds"])
            .is(/^\d+$/, this.strings["Please enter a timeout in seconds"])
        .field('inactive_timeout')
            .is('required', this.strings["Please enter a timeout in seconds"])
            .is(/^\d+$/, this.strings["Please enter a timeout in seconds"]);
};

GlobalSettings.prototype.validate = function (success, fail) {
    success = success || noop;
    fail = fail || noop;

    this.validator.validate(function (err, is_valid, msg) {
        if (is_valid) {
            success();
        } else {
            fail(err);
        }
    });
};

GlobalSettings.prototype.toggle = function (show) {
    show = show === undefined ? classes(this.$el).has('hidden') : show;

    if (show) {
        classes(this.$el).remove('hidden');
    } else {
        classes(this.$el).add('hidden');
    }
};

GlobalSettings.prototype.protocolChanged = function () {
    var $protocol = this.$el.querySelector('.protocol'),
        selected_index = $protocol.selectedIndex,
        protocols = this.model.protocol(),
        protocol = protocols[selected_index],
        strings = this.strings;

    $protocol.parentNode.setAttribute('data-value', strings[protocol.name]);

    protocols.forEach(function (protocol) {
        protocol.selected = false;
    });

    protocol.selected = true;

    this.model.protocol(protocols);
};

GlobalSettings.prototype.activeTimeoutChanged = function () {
    var timeout = +this.$el.querySelector('#active_timeout').value;

    this.model.active_timeout(timeout);
};

GlobalSettings.prototype.inactiveTimeoutChanged = function () {
    var timeout = +this.$el.querySelector('#inactive_timeout').value;

    this.model.inactive_timeout(timeout);
};

module.exports = GlobalSettings;
});

require.register("./components-ixia/netflow-settings/templates/global-settings.js", function (exports, module) {
module.exports = '<ul class="global-settings">\n    <li>\n        <label>Use</label>\n        <span class="light-select2">\n            <select class="protocol"></select>\n        </span>\n    </li>\n    <li>\n        <label for="active_timeout">Active timeout</label>\n        <input type="text" name="active_timeout" id="active_timeout" /> seconds\n    </li>\n    <li>\n        <label for="inactive_timeout">Inactive timeout</label>\n        <input type="text" name="inactive_timeout" id="inactive_timeout" /> seconds\n    </li>\n</ul>';
});

require.register("./components-ixia/netflow-settings/views/interfaces.js", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    Selector = require('./components-ixia/interface-selector'),
    Settings = require('./components-ixia/netflow-settings/views/interface-settings.js'),
    template = domify(require('./components-ixia/netflow-settings/templates/interfaces.js')),
    classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4'),
    emitter = require('component~emitter@1.0.1'),
    lightbox = window.util.lightbox;

function render_interface(model, $el) {
    var classed = classes($el);

    if (model.enabled()) {
        classed.remove('streetwise');
        classed.remove('player');
        classed.add('flowmon');
    } else if (model.changed().allocated_to === 'flowmon') {
        // User stopped exporting on this port
        classed.remove('flowmon');
        classed.add('player');
    } else {
        classed.remove('flowmon');
        classed.add(model.changed().allocated_to);
    }


    if (model.available()) {
        classed.add('available');
    } else {
        classed.remove('available');
    }

    return $el;
}

function Interfaces(interfaces, visible) {
    this.models = Selector.sort(interfaces || []);
    this.visible = visible;
    this.selector = new Selector(this.models, render_interface);
    this.$el = template.cloneNode(true);
    this.views = [];
    this.strings = {
        "Select a port": window.translate("Choose the ports from which you want to generate NetFlow records. Connect each selected port to a SPAN or TAP port to enable capture of network data to generate NetFlow records."),
        "flowmon port overwrite confirmation": window.translate("Reallocating this port to Netflow will stop AxonPoint Server on this port.")
    };
}

emitter(Interfaces.prototype);

Interfaces.prototype.render = function () {
    var selector = this.selector,
        $selector = this.$el.querySelector('.selector'),
        $settings = this.$el.querySelector('.settings'),
        add = this.add.bind(this);

    selector.render();
    if (!$selector.contains(selector.$el)) {
        $selector.appendChild(selector.$el);
    }

    if (this.models.length) {
        $settings.innerHTML = '<p>' + this.strings["Select a port"] + '</p>';
    }

    this.models.forEach(function (iface, i) {
        add(iface, i);
    });

    this.bind();

    this.toggle(this.visible);

    return this.$el;
};

Interfaces.prototype.bind = function () {
    var views = this.views,
        selector = this.selector,
        select = this.select.bind(this),
        emit = this.emit.bind(this, 'changed');

    views.forEach(function (view) {
        view.on('changed', emit);
    }, this);

    selector.on('select', select);
};

Interfaces.prototype.toggle = function (visible) {
    if (visible) {
        classes(this.$el).remove('hidden');
    } else {
        classes(this.$el).add('hidden');
    }

    this.visible = visible;
};

Interfaces.prototype.add = function (iface, index) {
    var $settings = this.$el.querySelector('.settings'),
        view = new Settings(iface);

    if (isNaN(index)) {
        index = this.models.length;
    }

    view.render();
    view.hide();
    $settings.appendChild(view.$el);

    this.models[index] = iface;
    this.views[index] = view;
};

Interfaces.prototype.select = function (model) {
    var self = this,
        $message = self.$el.querySelector('.settings > p'),
        models = self.models,
        views = self.views,
        select_action = function () {
            // Hide "select a port" message
            if ($message) {
                $message.parentNode.removeChild($message);
            }

            views.forEach(function (view, i) {
                if (models[i].physical_port() === model.physical_port()) {
                    view.show();
                } else {
                    // Hide other views
                    view.hide();
                }
            }, this);
        };

    if(model.allocated_to() !== 'stc' && model.allocated_to() !== 'flowmon'){
        lightbox.confirmation_dialog(self,self.strings["flowmon port overwrite confirmation"],select_action);
        return;
    }

    select_action.call(self);
};

Interfaces.prototype.reset_interfaces = function (interfaces) {
    this.selector.unbind();
    this.selector.set_models(interfaces);
}

module.exports = Interfaces;
});

require.register("./components-ixia/netflow-settings/templates/interfaces.js", function (exports, module) {
module.exports = '<div class="interfaces transmit-receive-container single-pane box">\n    <ul>\n        <li class="selector"></li>\n        <li class="settings endpoint-container">Select an interface above</li>\n    </ul>\n</div>';
});

require.register("./components-ixia/netflow-settings/views/interface-settings.js", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    template = require('./components-ixia/netflow-settings/templates/interface/settings.js'),
    CollectorModel = require('./components-ixia/netflow-settings/models/collector.js'),
    List = require('./components-ixia/netflow-settings/views/collector-list.js'),
    classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4'),
    emitter = require('component~emitter@1.0.1');

function InterfaceSettings(model) {
    var collectors = model.collectors() || [];

    this.model = model;
    this.$el = domify(template);

    // Convert objects to Models
    collectors.forEach(function (collector, i) {
        collectors[i] = new CollectorModel(collector);
    });
    this.collectors = new List(collectors);

    this.strings = {
        "Export this interface's traffic": window.translate("Export this interface's traffic")
    };
}

emitter(InterfaceSettings.prototype);

InterfaceSettings.prototype.render = function () {
    var $checkbox = this.$el.querySelector('.export input'),
        $collectors = this.$el.querySelector('.collectors'),
        collectors = this.collectors,
        enabled = this.model.enabled();

    collectors.render();
    $collectors.appendChild(collectors.$el);
    $checkbox.checked = enabled;

    this.enable(enabled);

    this.bind();

    return this.$el;
};

InterfaceSettings.prototype.show = function () {
    classes(this.$el).remove('hidden');
};

InterfaceSettings.prototype.hide = function () {
    classes(this.$el).add('hidden');
};

InterfaceSettings.prototype.is_visible = function () {
    return !classes(this.$el).has('hidden');
};

InterfaceSettings.prototype.bind = function () {
    var $checkbox = this.$el.querySelector('.export input'),
        $add = this.$el.querySelector('.add-collector'),
        enable = this.enable.bind(this),
        changed = function (e) {
            if (e && e.preventDefault) {
                e.preventDefault();
            }

            var state = $checkbox.checked;
            enable(state);
        },
        collectors = this.collectors,
        add = function (e) {
            if (e && e.preventDefault) {
                e.preventDefault();
            }

            collectors.add();
        };

    event.bind($checkbox, 'change', changed.bind(this));
    event.bind($add, 'click', add);
};

InterfaceSettings.prototype.setInterface = function (iface) {
    this.model = iface;
};

InterfaceSettings.prototype.enable = function (enabled) {
    var $collectors = this.$el.querySelector('.collectors'),
        $add = this.$el.querySelector('.add-collector');

    this.model.enabled(enabled);

    if (enabled) {
        classes($collectors).remove('hidden');
        classes($add).remove('hidden');
    } else {
        classes($collectors).add('hidden');
        classes($add).add('hidden');
    }
};

module.exports = InterfaceSettings;
});

require.register("./components-ixia/netflow-settings/templates/interface/settings.js", function (exports, module) {
module.exports = '<ul class="form">\n    <li class="export">\n        <label><input type="checkbox"> Export this interface\'s traffic</label>\n    </li>\n    <li class="collectors"></li>\n    <li class="add-collector">\n        <button>Add collector</button>\n    </li>\n</ul>';
});

require.register("./components-ixia/netflow-settings/views/collector-list.js", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    template = require('./components-ixia/netflow-settings/templates/collector-list.js'),
    Model = require('./components-ixia/netflow-settings/models/collector.js'),
    Subview = require('./components-ixia/netflow-settings/views/collector.js'),
    event = require('component~event@0.1.4'),
    emitter = require('component~emitter@1.0.1'),
    classes = require('component~classes@1.2.3');

function CollectorList(collectors) {
    this.models = collectors || [];
    this.$collectors = [];
    this.views = [];
    this.$el = domify(template);
    this.strings = {
        'No collectors': window.translate('No collectors')
    };
}

emitter(CollectorList.prototype);

CollectorList.prototype.render = function () {
    var add = this.add.bind(this),
        $li;

    if (this.models.length) {
        this.models.forEach(add);
    } else {
        this.addEmptyMessage();
    }

    return this.$el;
};

CollectorList.prototype.add = function (model, index) {
    var $parent = this.$el,
        $li = document.createElement('li'),
        view,
        $view,
        bind_item = this.bindItem.bind(this),
        $empty_message = this.$el.querySelector('.empty-message');

    if ($empty_message) {
        this.$el.removeChild($empty_message);
    }

    if (isNaN(index)) {
        index = this.models.length;
    }

    if (model instanceof Model) {
        model.id(index); // "save" this model, so it's not discarded when editor is canceled
    } else {
        // Model was probably an Event, so create a new model
        model = new Model({});
    }

    view = new Subview(model, model.isNew());
    this.models[index] = model;
    this.$collectors[index] = $li;
    this.views[index] = view;

    $view = view.render();
    $li.appendChild($view);
    $parent.appendChild($li);

    bind_item(index, $li, view);
};

CollectorList.prototype.bindItem = function (index, $el, view, rebind) {
    var emit = this.emit.bind(this),
        remove = this.remove.bind(this),
        models = this.models;

    if (rebind) {
        view.off('mode_changed');
        view.off('saved');
        view.off('removed');
    }

    view.on('mode_changed', function () {
        // Redraw <li></li>
        $el.innerHTML = '';
        $el.appendChild(view.$el);
    });

    view.on('saved', function (model) {
        model.id(index); // "save" this model, so it's not discared when editor is canceled
        emit('changed', models);
    });

    view.on('removed', function () {
        remove(index);
        emit('changed', models);
    });
};


CollectorList.prototype.remove = function (index) {
    var $el = this.$collectors[index],
        view;

    this.$el.removeChild($el);
    this.models.splice(index, 1);
    this.$collectors.splice(index, 1);
    this.views.splice(index, 1);

    // Re-bind proceeding elements
    for (index; index < this.views.length; index += 1) {
        view = this.views[index];
        $el = this.$collectors[index];
        this.bindItem(index, $el, view, true);
    }

    if (!this.models.length) {
        this.addEmptyMessage();
    }
};

CollectorList.prototype.addEmptyMessage = function () {
    var $li = document.createElement('li');

    $li.innerHTML = this.strings['No collectors'];
    classes($li).add('italic');
    classes($li).add('empty-message');
    this.$el.appendChild($li);
};

module.exports = CollectorList;
});

require.register("./components-ixia/netflow-settings/templates/collector-list.js", function (exports, module) {
module.exports = '<ul class="collector-list"></ul>';
});

require.register("./components-ixia/netflow-settings/views/collector.js", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    view_template = require('./components-ixia/netflow-settings/templates/collector.js'),
    edit_template = require('./components-ixia/netflow-settings/templates/collector-editor.js'),
    event = require('component~event@0.1.4'),
    emitter = require('component~emitter@1.0.1'),
    validate = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2'),
    is_host = require('johntron~is-host@9f441b6f34440e715b31f06157611292e67565a5'),
    noop = function () {};

function Collector(model, editing) {
    this.model = model;
    this.editing = editing || false;
    this.$view = domify(view_template);
    this.$edit = domify(edit_template);
    this.strings = {
        "Please enter a valid host address (IPv4, IPv6, or name)": window.translate("Please enter a valid host address (IPv4, IPv6, or name)"),
        "Please enter a valid port number": window.translate("Please enter a valid port number"),
        "Port must be less than 65535": window.translate("Port must be less than 65535")
    };
}

emitter(Collector.prototype);

Collector.prototype.view = function () {
    var $el = this.$view,
        $address = $el.querySelector('.address'),
        $port = $el.querySelector('.port'),
        model = this.model;

    $address.innerHTML = model.address();
    $port.innerHTML = model.port();

    this.$el = $el;

    if (this.editing) {
        this.emit('mode_changed', 'view');
        this.editing = false;
    }

    return $el;
};

Collector.prototype.edit = function () {
    var model = this.model,
        $el = this.$edit,
        $address = $el.querySelector('[name=address]'),
        $port = $el.querySelector('[name=port]');

    $address.value = model.address();
    $port.value = model.port();

    this.$el = $el;

    if (!this.editing) {
        this.emit('mode_changed', 'edit');
        this.editing = true;
    }

    return $el;
};

Collector.prototype.save = function () {
    var model = this.model,
        $el = this.$edit,
        address = $el.querySelector('[name=address]').value,
        port = $el.querySelector('[name=port]').value;

    model.address(address);
    model.port(port);

    this.emit('saved', model);
    this.view();
};

Collector.prototype.remove = function () {
    var old = this.model;

    this.model.destroy();
    this.emit('removed', old);
};


Collector.prototype.render = function () {
    var $el;

    this.bind();

    if (this.editing) {
        $el = this.edit();
    } else {
        $el = this.view();
    }

    return $el;
};

Collector.prototype.bind = function () {
    // View-mode
    var $view = this.$view,
        $edit_trigger = $view.querySelector('.edit'),
        $delete = $view.querySelector('.delete'),

    // Edit-mode
        $edit = this.$edit,
        $cancel = $edit.querySelector('.cancel'),
        $save = $edit.querySelector('.save'),
        cancel = function () {
            if (this.model.isNew()) {
                this.remove();
            } else {
                this.view();
            }
        }.bind(this),
        save = this.save.bind(this);

    // View-mode
    event.bind($edit_trigger, 'click', this.edit.bind(this));
    event.bind($delete, 'click', this.remove.bind(this));

    // Edit-mode
    event.bind($cancel, 'click', cancel);
    event.bind($save, 'click', this.validate.bind(this, save, noop));

    this.bindValidator();
};

Collector.prototype.bindValidator = function () {
    var less_than_65535 = function (val) {
            return val < 65535;
        };

    this.validator = validate(this.$edit)
        .on('blur')
        .use(is_host)
        .field('address')
            .is('required', this.strings["Please enter a valid host address (IPv4, IPv6, or name)"])
            .is('host', this.strings["Please enter a valid host address (IPv4, IPv6, or name)"])
        .field('port')
            .is('required', this.strings["Please enter a valid port number"])
            .is(/^\d+$/, this.strings["Please enter a valid port number"])
            .is(less_than_65535, this.strings["Port must be less than 65535"]);
};

Collector.prototype.validate = function (success, fail, e) {
    if (e.preventDefault) {
        e.preventDefault();
    }

    success = success || noop;
    fail = fail || noop;

    this.validator.validate(function (err, is_valid, msg) {
        if (is_valid) {
            success();
        } else {
            fail(err);
        }
    });
};

module.exports = Collector;
});

require.register("./components-ixia/netflow-settings/models/collector.js", function (exports, module) {
var model = require('johntron~model@703274a10f27b50f3433a728c8c0c4fce556ee12'),
    defaults = require('segmentio~model-defaults@1.0.6');


var Collector = model('Collector')
    .route('/netflow-settings/collectors')
    .use(defaults)
    .attr('id')
    .attr('address', {"default": ''})
    .attr('port', {"default": '2055'});

Collector.primaryKey = 'id';

Collector.prototype.destroy = function () {
    this.model.emit('destroying', this);
    this.emit('destroying');
    this.destroyed = true;
    this.model.emit('destroy', this);
    this.emit('destroy');
};

module.exports = Collector;
});

require.register("./components-ixia/netflow-settings/templates/collector.js", function (exports, module) {
module.exports = '<div class="collector">\n    <span class="address"></span>:<span class="port"></span>\n    <div class="actions">\n        <button class="edit">edit</button>\n        <button class="delete">delete</button>\n    </div>\n</div>';
});

require.register("./components-ixia/netflow-settings/templates/collector-editor.js", function (exports, module) {
module.exports = '<div class="collector-editor">\n    <ul>\n        <li><label>Address</label> <input type="text" name="address" class="address" /></li>\n        <li><label>Port</label> <input type="text" name="port" class="port" min="1" /></li>\n        <li><button class="cancel button-cancel cancel-button">cancel</button> <button class="save">Save</button></li>\n    </ul>\n</div>';
});

require.register("./components-ixia/dashboard-view-model", function (exports, module) {
var Paginator = require('./components-ixia/paginator');

function DashboardViewModel(rootVm) {
    var self = this;
    self.rootVm = rootVm;

    self.portlets = ko.observableArray();
    self.leftPortlets = ko.observableArray();
    self.rightPortlets = ko.observableArray();

    self.enterpriseTests = ko.observableArray();
    self.rootVm.enterpriseTests.subscribe(function () {
        self.enterpriseTests(self.rootVm.enterpriseTests());
    });
    self.hostTests = ko.observableArray();
    self.rootVm.hostTests.subscribe(function () {
        self.hostTests(self.rootVm.hostTests());
    });
    self.recentNews = ko.observableArray(self.rootVm.recentNews());
    self.rootVm.recentNews.subscribe(function () {
        self.recentNews(self.rootVm.recentNews());
    });
    self.totalRecentNews = ko.observable(0);

    self.selectedTest = ko.observableArray(self.rootVm.selectedTest());
    self.rootVm.selectedTest.subscribe(function () {
        self.selectedTest(self.rootVm.selectedTest());
    });

    self.getPortlets = function () {
        self.portlets.removeAll();

        $.ajax({
            type: "GET",
            url: util.getConfigSetting("get_portlets"),
            dataType: 'json',
            success: function (data, textStatus, jqXhr) {
                var portlets = data;

                for (var i = 0; i < portlets.length; i++) {
                    var portlet = new PortletViewModel(self);
                    portlet.inflate(portlets[i]);
                    self.portlets.push(portlet);

                    if (portlets[i].default_column == '.l-portlet-column') {
                        self.leftPortlets.push(portlet);
                    } else if (portlets[i].default_column == '.r-portlet-column') {
                        self.rightPortlets.push(portlet);
                    }
                }
            }
        });

    };

    self.initializeTwitterPortlets = function () {
        $(".tweet").each(function () {
            $(this).tweet({
                username: $(this).attr('data-twitter-username'),
                join_text: "auto",
                avatar_size: 32,
                count: 5,
                template: "{avatar}{time}<br>{text}",   // [string or function] template used to construct each tweet <li> - see code for available vars
                auto_join_text_default: null,
                auto_join_text_ed: null,
                auto_join_text_ing: null,
                auto_join_text_reply: null,
                auto_join_text_url: null,
                loading_text: translate("Loading tweets...")
            });
        });
    };

    self.initializeHotPotter = function () {
        $('.get-started-image').hotspotter({ imgTopMargin: 50 });
        for (var i = 0; i < self.rootVm.availableDevices().length; i++) {
            $('#' + self.rootVm.availableDevices()[i].name()).on('click',function(e){
                var currDevice = self.rootVm.availableDevices().filter(function (device) {
                        if (e.srcElement != undefined) {
                            return device.name() === e.srcElement.id;
                        } else {
                            return device.name() === e.target.id;
                        }
                    })[0];

                window.open(currDevice.link());
            });
        }
    };

    self.getPortlets();
}

function PortletViewModel(dashboardVm) {
    var self = this;
    self.dashboardVm = dashboardVm;
    self.rootVm = dashboardVm.rootVm;

    self.id = ko.observable();
    self.name = ko.observable();
    self.contentType = ko.observable();
    self.portletContent = ko.observable();
    self.defaultColumn = ko.observable();
    self.templateId = ko.observable();
    self.selectedFilter = ko.observable();
    self.availableFilters = ko.observableArray();
    self.enterpriseTests = ko.observableArray(self.dashboardVm.enterpriseTests());
    self.dashboardVm.enterpriseTests.subscribe(function () {
        self.enterpriseTests(self.dashboardVm.enterpriseTests());
    });
    self.hostTests = ko.observableArray(self.dashboardVm.hostTests());
    self.dashboardVm.hostTests.subscribe(function () {
        self.hostTests(self.dashboardVm.hostTests());
    });
    self.recentNews = ko.observableArray(self.dashboardVm.recentNews());
    self.dashboardVm.recentNews.subscribe(function () {
        self.recentNews(self.dashboardVm.recentNews());
    });
    self.selectedTest = ko.observableArray(self.dashboardVm.selectedTest());
    self.dashboardVm.selectedTest.subscribe(function () {
        self.selectedTest(self.dashboardVm.selectedTest());
    });

    self.inflate = function (portlet) {
        self.id(portlet.id);
        self.name(portlet.name);
        self.contentType(portlet.content_type);
        self.portletContent(portlet.portlet_content);
        self.defaultColumn(portlet.default_column);
        self.templateId(portlet.div_id_name);

        self.selectedFilter('All Statuses');
    };
}

module.exports = DashboardViewModel;
});

require.register("./components-ixia/test-history-view-model", function (exports, module) {
var moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68');

function TestHistoryViewModel(dashboardVm) {
    var self = this;
    self.dashboardVm = dashboardVm;
    self.rootVm = dashboardVm.rootVm;

    self.id = ko.observable();
    self.name = ko.observable();
    self.result_id = ko.observable();
    self.test_id = ko.observable();
    self.created_by = ko.observable();
    self.progress = ko.observable();
    self.result_path = ko.observable();
    self.end_result = ko.observable();
    self.error_reason = ko.observable();
    self.date = ko.observable();

    self.dateFormatted = ko.computed(function () {
        var d = self.date();

        if (!d) {
            return '';
        }

        return moment(d).format('lll');
    });

    self.loadRecentTest = function () {
        self.rootVm.loadRecentTest(self);
    };
};

TestHistoryViewModel.typesafe = function (that) {
    if (!(that instanceof TestHistoryViewModel)) {
        throw 'This method must be executed on a TestHistoryViewModel';
    }

    return that;
};

TestHistoryViewModel.prototype.toFlatObject = function () {
    var self = TestHistoryViewModel.typesafe(this);

    var history = {
        id: self.id(),
        name: self.name(),
        result_id: self.result_id(),
        test_id: self.test_id(),
        created_by: self.created_by(),
        date: self.date(),
        progress: self.progress(),
        end_result: self.end_result(),
        result_path: self.result_path(),
        error_reason: self.error_reason()
    };

    return history;
};

TestHistoryViewModel.prototype.inflate = function (recentTest) {
    var self = TestHistoryViewModel.typesafe(this);

    self.id(recentTest.id);
    self.name(recentTest.name);
    self.result_id(recentTest.result_id);
    self.test_id(recentTest.test_id);
    self.created_by(recentTest.created_by);
    self.date(recentTest.date);
    self.progress(recentTest.progress);
    self.end_result(recentTest.end_result);
    self.result_path(recentTest.result_path);
    self.error_reason(recentTest.error_reason);
};

TestHistoryViewModel.prototype.openSaveModal = function () {
    var self = TestHistoryViewModel.typesafe(this);

    util.lightbox.open({
        url : 'html/lightbox_tmpl',
        selector : '#lightbox-save-results-template',
        cancelSelector: '.cancel-button',
        isModal: true,
        onOpenComplete: function(){
            ko.applyBindings(self, document.getElementById('lightbox-save-results'));
        }
    });
};

TestHistoryViewModel.prototype.validate = function (result, targetName) {
    var self = TestHistoryViewModel.typesafe(this);
};

TestHistoryViewModel.prototype.save = function () {
    var self = TestHistoryViewModel.typesafe(this);
};

TestHistoryViewModel.prototype.matchesSearch = function (searchString) {
    var self = TestHistoryViewModel.typesafe(this);

    var searchTerms = searchString.split(' ');

    if (searchTerms.length == 0) {
        return true;
    }

    var name = self.name().toUpperCase();

    for (var i = 0; i < searchTerms.length; i++) {
        if (searchTerms[i] == '' || searchTerms[i] == null) {
            continue;
        }

        if (name.indexOf(searchTerms[i].toUpperCase()) == -1) {
            return false;
        }
    }

    return true;
};

TestHistoryViewModel.prototype.delete = function () {
    var self = TestHistoryViewModel.typesafe(this);

    var workingVm = new LightboxWorkingViewModel(translate('Delete'), translate('Deleting...'));
    util.lightbox.close();
    util.lightbox.working(workingVm);
    $.ajax({
        type: util.getRequestMethod('delete_result'),
        url: util.getConfigSetting('delete_result'),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            workingVm.status('success');
        },
        error: function (jqXhr, textStatus, errorThrown) {
            workingVm.status('error');
        }
    });

    util.lightbox.close();
};

module.exports = TestHistoryViewModel;
});

require.register("./components-ixia/recent-news-view-model", function (exports, module) {
var moment = require('johntron~moment@3c4e06cc012a0fc6a1aed16e1c8cb86998bb4b68');

function RecentNewsViewModel(rootVm) {
    var self = this;
    self.dashboardVm = rootVm.vmDashboard;
    self.rootVm = rootVm;

    self.id = ko.observable();
    self.title = ko.observable();
    self.date = ko.observable();
    self.dateFormatted = ko.computed(function () {
        var d = self.date();
        if (!d) {
            return '';
        }

        return moment(d).format('lll');
    });
    self.link = ko.observable();
    self.description = ko.observable();
    self.priority = ko.observable();

    self.loadRecentTest = function () {
        self.rootVm.loadRecentTest(self);
    };
};

RecentNewsViewModel.typesafe = function (that) {
    if (!(that instanceof RecentNewsViewModel)) {
        throw 'This method must be executed on a RecentNewsViewModel';
    }

    return that;
};

RecentNewsViewModel.prototype.toFlatObject = function () {
    var self = RecentNewsViewModel.typesafe(this);

    var news = {
        id: self.id(),
        title: self.title(),
        description: self.description(),
        date: self.date(),
        link: self.link(),
        priority: self.priority()
    };

    return news;
};

RecentNewsViewModel.prototype.inflate = function (news) {
    var self = RecentNewsViewModel.typesafe(this);

    var thisDate = news.date+" UTC";
    thisDate = thisDate.replace(/-/g,"/");
    thisDate = new Date(thisDate).format('yyyy-MM-dd HH:mm:ss');
    thisDate = String(thisDate);

    self.id(news.id);
    self.title(news.title);
    self.date(thisDate);
    self.description(news.description);
    self.link(news.link);
    self.priority(news.priority);
};

RecentNewsViewModel.prototype.openSaveModal = function () {
    var self = RecentNewsViewModel.typesafe(this);
};

RecentNewsViewModel.prototype.save = function () {
    var self = RecentNewsViewModel.typesafe(this);

    var title = self.title();
    var workingVm = new LightboxWorkingViewModel(translate('Save'), translate('Saving...'));
    util.lightbox.close();
    util.lightbox.working(workingVm);
    var data = self.toFlatObject();
    $.ajax({
        type: util.getRequestMethod('save_news'),
        url: util.getConfigSetting('save_news'),
        data: util.formatRequestData('save_news', data),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            workingVm.status('success');
        },
        error: function (jqXhr, textStatus, errorThrown) {
            workingVm.status('error');
        }
    });

    util.lightbox.close();
};

RecentNewsViewModel.prototype.matchesSearch = function (searchString) {
    var self = RecentNewsViewModel.typesafe(this);

    var searchTerms = searchString.split(' ');

    if (searchTerms.length == 0) {
        return true;
    }

    var name = self.name().toUpperCase();

    for (var i = 0; i < searchTerms.length; i++) {
        if (searchTerms[i] == '' || searchTerms[i] == null) {
            continue;
        }

        if (name.indexOf(searchTerms[i].toUpperCase()) == -1) {
            return false;
        }
    }

    return true;
};

RecentNewsViewModel.prototype.delete = function () {
    var self = RecentNewsViewModel.typesafe(this);

    var workingVm = new LightboxWorkingViewModel(translate('Delete'), translate('Deleting...'));
    util.lightbox.close();
    util.lightbox.working(workingVm);
    $.ajax({
        type: util.getRequestMethod('delete_news'),
        url: util.getConfigSetting('delete_news'),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            workingVm.status('success');
        },
        error: function (jqXhr, textStatus, errorThrown) {
            workingVm.status('error');
        }
    });

    util.lightbox.close();
};

module.exports = RecentNewsViewModel;
});

require.register("./components-ixia/test-results-final-table-view-model", function (exports, module) {
var Paginator = require('./components-ixia/paginator'),
    clients_per_page = 50;

function TestResultsFinalTableViewModel(resultsVm) {
    var self = this;
    self.resultsVm = resultsVm;
    self.rootVm = resultsVm.rootVm;
    self.testVm = resultsVm.testVm;

    self.players = ko.observableArray();
    self.display_messages = ko.observable();
    self.status = ko.observable();

    // Strided lists of Paginator's - indexes match self.players
    self.client_paginators = [];
    self.client_pages = [];
}

TestResultsFinalTableViewModel.typesafe = function (that) {
    if (!(that instanceof TestResultsFinalTableViewModel))
        throw 'This method must be executed on a TestResultsFinalTableViewModel';
    return that;
};

TestResultsFinalTableViewModel.prototype.inflate = function(data){
    var self = TestResultsFinalTableViewModel.typesafe(this);

    var players = self.getPlayers(data);

    self.players(players);
};

TestResultsFinalTableViewModel.prototype.getPlayers = function(playersData){
    var self = TestResultsFinalTableViewModel.typesafe(this);

    var players = [],
        player;

    for (var i = 0; i < playersData.players.length; i++) {
        player = self.getPlayer(playersData.players[i]);
        players.push(player);

        if (player.clients && player.clients()) {
            self.add_paginator(i, player.clients());
        }
    }

    return players;
};

TestResultsFinalTableViewModel.prototype.add_paginator = function(player_index, clients) {
    var paginator = new Paginator(),
        pages = Math.ceil(clients.length / clients_per_page),
        pages_observable = ko.observableArray();
    paginator.pages(pages);

    this.client_paginators[player_index] = paginator;
    this.client_pages[player_index] = pages_observable;

    paginator.on('change', function (page) {
        var begin = (page - 1) * clients_per_page,
            end = begin + clients_per_page,
            clients_page = clients.slice(begin, end);

        pages_observable(clients_page);
    });

    paginator.goto(1);
};

TestResultsFinalTableViewModel.prototype.getPlayer = function(playerData){
    var self = TestResultsFinalTableViewModel.typesafe(this);
    var timingAccuracyValue = playerData.timing_accuracy ? playerData.timing_accuracy.toFixed(3) : 0;
    var timingAccuracy = timingAccuracyValue == 0
        ? translate('No Timing Accuracy Info')
        : translate('Timing Accuracy: +/- {value} ms', {
        value: Math.abs(timingAccuracyValue)
    });

    var player = {
        id: playerData.id || null,
        type: playerData.type,
        get_css_class: function () {
            if (this.type === 'player') {
                return this.type + ' player-' + this.id;
            }
            return this.type;
        },
        name: playerData.name,
        timingAccuracy: timingAccuracy,
        timeSyncAlert: playerData.has_time_sync_alert ? translate('Time Sync Alert: rollover or click icon for details') : null,
        timeSyncAlertClass: playerData.has_time_sync_alert ? 'alert' : null,
        tracks: ko.observableArray()
    };

    var tracks = self.getTracks(playerData.tracks);
    player.tracks(tracks);

    var clients = self.getClients(playerData.clients);
    if (clients.length) {
        // Multicast
        player.clients = ko.observableArray(clients);
    }

    return player;
};

TestResultsFinalTableViewModel.prototype.getTracks = function(tracksData){
    var self = TestResultsFinalTableViewModel.typesafe(this);

    var tracks = new Array();

    for (var i = 0; i < tracksData.length; i++) {
        tracks.push(self.getTrack(tracksData[i]));
    }

    return tracks;
};

TestResultsFinalTableViewModel.prototype.getClients = function(clientsData){
    var self = this,
        clients = [];

    if (!clientsData) {
        return clients;
    }

    for (var i = 0; i < clientsData.length; i++) {
        clients.push(self.getTrack(clientsData[i]));
    }

    return clients;
};

TestResultsFinalTableViewModel.prototype.getTrack = function(trackData){
    var self = TestResultsFinalTableViewModel.typesafe(this);

    var track = {
        name: trackData.name,
        cells: ko.observableArray()
    };

    var cells = self.getCells(trackData.cells, trackData.chart_lightbox);

    track.cells(cells);

    return track;
};

TestResultsFinalTableViewModel.prototype.getCells = function(cellsData, chartLightbox){
    var self = TestResultsFinalTableViewModel.typesafe(this);

    var cells = new Array();

    for (var i = 0; i < cellsData.length; i++) {
        cells.push(self.getCell(cellsData[i], chartLightbox));
    }

    return cells;
};

TestResultsFinalTableViewModel.prototype.getCell = function(cellData, chartLightbox){
    var self = TestResultsFinalTableViewModel.typesafe(this);


    var cell = new TestResultsFinalTableCell(self.testVm);
    cell.inflate(cellData, chartLightbox);

    return cell;
};

function TestResultsFinalTableCell(testVm) {
    var self = this;
    self.testVm = testVm;
    self.rootVm = testVm.rootVm;
    self.resultsVm = testVm.vmResults;

    self.name = null;
    self.value = null;
    self.dataType = null;
    self.detail = null; // e.g. "Join failed"
    self.graphData = null;
    self.classAttribute = null;
    self.hasAccuracyAlert = null;
    self.accuracyMessage = null;
    self.chartLightbox = null;
}

TestResultsFinalTableCell.typesafe = function (that) {
    if (!(that instanceof TestResultsFinalTableCell))
        throw 'This method must be executed on a TestResultsFinalTableCell';
    return that;
};

TestResultsFinalTableCell.prototype.inflate = function(cellData, chartLightbox){
    var self = TestResultsFinalTableCell.typesafe(this);

    self.name = cellData.name;
    self.value = util.commafyNumber(cellData.value);
    self.detail = cellData.detail;
    self.dataType = cellData.data_type;
    self.chartLightbox = cellData.chart_data ? chartLightbox : false;
    if (self.chartLightbox) {
        self.graphData = prepareGraphData(cellData);
    }
    self.yAxisLabel = cellData.name;
    self.hasAccuracyAlert = cellData.has_accuracy_alert;
    self.accuracyMessage = cellData.accuracy_message;

    self.classAttribute = self.hasAccuracyAlert ? self.dataType + ' accuracy-alert' : self.dataType;
    self.classAttribute += ' value';
};

TestResultsFinalTableCell.prototype.showChart = function(vm, e){
    if ($(e.target).is('img')) {
        // Don't interfere with tooltips on touch devices
        return;
    }

    var self = TestResultsFinalTableCell.typesafe(this);
    if (self.chartLightbox == false){
        return
    }

    var settings = { width: 600, height: 400, yAxisLabel: self.yAxisLabel };
    var chart = new Chart(settings);

    var chartVm = new PopinChartViewModel(self.testVm, chart, self.name, self.yAxisLabel, self.hasAccuracyAlert, self.accuracyMessage);

    util.lightbox.open({
        url : 'html/lightbox_tmpl',
        selector : '#lightbox-table-cell-chart-template',
        cancelSelector: '.cancel-button',
        onOpenComplete: function(){
            ko.applyBindings(chartVm, document.getElementById('lightbox-table-cell-chart'));
            chart.update(self.graphData);
            chart.finish();
        }
    });

};

function prepareGraphData(cellData) {
    var points;
    var chartData = cellData.chart_data;
    for (var property in chartData) {
        var value = chartData[property];
        if ($.type(value) == 'array') {
            points = value;
        }
    }

    return [{
        label: cellData.name,
        points: points
    }];
}

module.exports = TestResultsFinalTableViewModel;
});

require.register("./components-ixia/test-template-view-model", function (exports, module) {
/**
 * Saved configuration for a single test
 *
 * @param rootVm IxiaCRViewModel
 * @constructor
 */
function TestTemplateViewModel(rootVm) {
    var self = this;
    self.rootVm = rootVm;
    self.vmDashboard = rootVm.vmDashboard;

    self.id = ko.observable();
    self.name = ko.observable();
    self.bpt_name = ko.observable();
    self.type = ko.observable();
    self.description = ko.observable();
    self.duration = ko.observable();
    self.topology_image = ko.observable();
    self.topology_description = ko.observable();
    self.attack_task = ko.observable();
    self.attack_steps = ko.observable();
    self.attack_criteria = ko.observable();
    self.defense_task = ko.observable();
    self.defense_steps = ko.observable();
    self.defense_criteria = ko.observable();
    self.traffic_direction = ko.observable();
    self.test_result_id = ko.observable(null);

    //IDLE, RUNNING, STOPPED, ABORTED, FINISHED
    self.status = ko.observable("IDLE");
    self.hasResults = ko.observable(false);
    self.result_id = undefined; //this is used to tell if the template is correct for a test result which the test is created using user saved test
}

TestTemplateViewModel.typesafe = function (that) {
    if (!(that instanceof TestTemplateViewModel)) {
        throw 'This method must be executed on a TestTemplateViewModel';
    }

    return that;
};

TestTemplateViewModel.prototype.matchesSearch = function (searchString) {
    var self = TestTemplateViewModel.typesafe(this);

    var searchTerms = searchString.split(' ');

    if (searchTerms.length == 0) {
        return true;
    }

    var name = self.name().toUpperCase();

    for (var i = 0; i < searchTerms.length; i++) {
        if (searchTerms[i] == '' || searchTerms[i] == null) {
            continue;
        }

        if (name.indexOf(searchTerms[i].toUpperCase()) == -1) {
            return false;
        }
    }

    return true;
};

TestTemplateViewModel.prototype.openSaveModal = function () {
    var self = TestTemplateViewModel.typesafe(this),
        refreshDraggables = false;

    util.lightbox.open({
        url : 'html/lightbox_tmpl',
        selector : '#lightbox-save-test-alternate-template',
        cancelSelector: '.cancel-button',
        onOpenComplete: function(){
            ko.applyBindings(self, document.getElementById('lightbox-save-test-alternate'));
        },
        onClose: function(){
            if (self.name() === '') {
                refreshDraggables = true;
            }
        }
    });
};

TestTemplateViewModel.prototype.inflate = function (flatTest) {
    var self = TestTemplateViewModel.typesafe(this);

    self.id(flatTest.id);
    self.name(flatTest.name);
    self.type(flatTest.type);
    self.description(flatTest.description);
    //self.duration(flatTest.duration);
    self.topology_image(flatTest.topology_image);
    self.bpt_name(flatTest.bpt_name);
    self.topology_description(flatTest.topology_description);
    self.attack_task(flatTest.attack_task);
    self.attack_steps(flatTest.attack_steps);
    self.attack_criteria(flatTest.attack_criteria);
    self.defense_task(flatTest.defense_task);
    self.defense_steps(flatTest.defense_steps);
    self.defense_criteria(flatTest.defense_criteria);
    self.traffic_direction(flatTest.traffic_direction);

    //util.setObservableArray(self.name, flatTest.name);
    //util.setObservableArray(self.name, flatTest.name);
    //util.setObservableArray(self.namename, []);
};

TestTemplateViewModel.prototype.getNormalizedFlatObject = function (flatObject) {
    var self = ConfiguredTestViewModel.typesafe(this);

    flatObject.name = null;
    flatObject.description = null;
    flatObject.customer = null;
    flatObject.company = null;
    flatObject.location = null;
    flatObject.favorite = null;
    flatObject.tags = null;

    return flatObject;
};

TestTemplateViewModel.prototype.save = function (options) {
    var self = TestTemplateViewModel.typesafe(this);
};

TestTemplateViewModel.prototype.getRunTestData = function () {
    var self = TestTemplateViewModel.typesafe(this);
    var bpsDevice = ko.utils.arrayFirst(self.rootVm.availableDevices(), function (item) {
            return (item.name() === "BPS");
        });
    var data = {
        id: self.id(),
        name: self.name,
        bpt_name: self.bpt_name,
        host: bpsDevice.host,
        username: bpsDevice.username,
        test_result_id: self.test_result_id,
        password: bpsDevice.password
    };

    return data;
};

TestTemplateViewModel.prototype.runTest = function (options) {
    if (this instanceof TestTemplateViewModel) {
        var self = TestTemplateViewModel.typesafe(this);
    } else {
        var self = TestTemplateViewModel.typesafe(this.selectedTest());
    }

    if (self.status() == "RUNNING") {
        return; // Short-circuit
    }
    self.status("RUNNING");
    var currentConfig = self.getRunTestData();
    var formatRequestData = util.formatRequestData('run_test', currentConfig);
    self.startingTest = true;
    util.lightbox.working(new LightboxWorkingViewModel(translate("Start"), translate("Validating Test...")));
    $.ajax({
        type: util.getRequestMethod('run_test'),
        url: util.getConfigSetting('run_test'),
        data: formatRequestData,
        dataType: 'json',
        success: function(data, textStatus, jqXhr){
            self.status("FINISHED");
            if(util.lightbox.isOpen) {
                util.lightbox.close();
            }
            self.test_result_id = data['test_result_id'];
            self.startingTest = false;

            //If we have results, we should show the results table
            self.rootVm.getResultHistory({"result_id" : self.test_result_id},function(){});
        }
    }).fail(function () {
        self.status("ERROR");
        logger.error('Validation failed due to HTTP error');
        util.lightbox.error(translate("Validating test"));
        self.startingTest = false;
    });
    //self.status("RUNNING");
    if(util.lightbox.isOpen) {
        util.lightbox.close();
    }
    //util.lightbox.working(new LightboxWorkingViewModel(translate("Start"), translate("Validating Test...")));
};

TestTemplateViewModel.prototype.cancelTest = function (options) {
    if (this instanceof TestTemplateViewModel) {
        var self = TestTemplateViewModel.typesafe(this);
    } else {
        var self = TestTemplateViewModel.typesafe(this.selectedTest());
    }

    if (self.status() != "RUNNING") {
        return; // Short-circuit
    }
    if (self.test_result_id == null) {
        self.status("STOPPED");
        return;
    }
    self.status("STOPPED");
    var currentConfig = self.getRunTestData();
    var formatRequestData = util.formatRequestData('cancel_test', currentConfig);

    $.ajax({
        type: util.getRequestMethod('cancel_test'),
        url: util.getConfigSetting('cancel_test'),
        data: formatRequestData,
        dataType: 'json',
        success: function(data, textStatus, jqXhr){
            self.status("STOPPED");
            self.startingTest = false;
        }
    }).fail(function () {
        self.status("ERROR");
        logger.error('Validation failed due to HTTP error');
        util.lightbox.error(translate("Validating test"));
        self.startingTest = false;
    });
};

TestTemplateViewModel.prototype.downloadReports = function (options) {
    if (this instanceof TestTemplateViewModel) {
        var self = TestTemplateViewModel.typesafe(this);
    } else {
        var self = TestTemplateViewModel.typesafe(this.selectedTest());
    }

    var max_result_id = 0;
    var result_path = null;
    for (var i = 0; i < self.rootVm.testResultsHistory().length; i++) {
        if (self.rootVm.testResultsHistory()[i].result_id() > max_result_id) {
            if (self.rootVm.testResultsHistory()[i].end_result != 'RUNNING' && self.rootVm.testResultsHistory()[i].result_path() != '') {
                max_result_id = self.rootVm.testResultsHistory()[i].result_id();
                result_path  = self.rootVm.testResultsHistory()[i].result_path();
            }
        }
    }

//    if (result_path != null) {
//        $.ajax({
//            type: util.getRequestMethod('cancel_test'),
//            url: util.getConfigSetting('cancel_test'),
//            data: ko.toJSON({'result_path': result_path}),
//            dataType: 'json',
//            success: function(data, textStatus, jqXhr){
//            }
//        }).fail(function () {
//        });
//    }
};

TestTemplateViewModel.prototype.toFlatObject = function(){
    var self = TestTemplateViewModel.typesafe(this);
    var flatTemplate = {
        id: self.id(),
        name: self.name,
        bpt_name: self.bpt_name,
        type: self.type(),
        description: self.description(),
        topology_image: self.topology_image(),
        topology_description: self.topology_description(),
        attack_task: self.attack_task(),
        attack_steps: self.attack_steps(),
        attack_criteria: self.attack_criteria(),
        defense_task: self.defense_task(),
        defense_steps: self.defense_steps(),
        defense_criteria: self.defense_criteria(),
        traffic_direction: self.traffic_direction()
    };

    return flatTemplate;
};

TestTemplateViewModel.prototype.clone = function(){
    var self = TestTemplateViewModel.typesafe(this);

    var newTest = new TestTemplateViewModel(self.rootVm);

    newTest.id(self.id);
    newTest.name(self.id);
    newTest.bpt_name(self.bpt_name);
    newTest.type(self.id);
    newTest.description(self.id);
    //newTest.duration(self.id);
    newTest.topology_image(self.topology_image);
    newTest.topology_description(self.topology_description);
    newTest.attack_task(self.attack_task);
    newTest.attack_steps(self.attack_steps);
    newTest.attack_criteria(self.attack_criteria);
    newTest.defense_task(self.defense_task);
    newTest.defense_steps(self.defense_steps);
    newTest.defense_criteria(self.defense_criteria);
    newTest.traffic_direction(self.traffic_direction);

    return newTest;
};

module.exports = TestTemplateViewModel;
});

require.register("./components-ixia/port-view-model", function (exports, module) {
/**
 * Saved configuration for a single test
 *
 * @param rootVm IxiaCRViewModel
 * @constructor
 */
function PortViewModel(rootVm) {
    var self = this;
    self.rootVm = rootVm;

    self.id = ko.observable();
    self.device_id = ko.observable();
    self.slot = ko.observable();
    //available, reserved, selected
    self.port0 = ko.observable();
    self.port1 = ko.observable();
    self.port2 = ko.observable();
    self.port3 = ko.observable();
    self.selected = ko.observable();
    self.status = ko.observableArray();
}

PortViewModel.typesafe = function (that) {
    if (!(that instanceof PortViewModel)) {
        throw 'This method must be executed on a PortViewModel';
    }

    return that;
};

PortViewModel.prototype.save = function () {
    var self = PortViewModel.typesafe(this),
        refreshDraggables = false;

    util.lightbox.open({
        url : 'html/lightbox_tmpl',
        selector : '#lightbox-save-test-alternate-template',
        cancelSelector: '.cancel-button',
        onOpenComplete: function(){
            ko.applyBindings(self, document.getElementById('lightbox-save-test-alternate'));
        },
        onClose: function(){
            if (self.name() === '') {
                refreshDraggables = true;
            }
        }
    });
};

PortViewModel.prototype.selectedPort = function (e) {
    var self = PortViewModel.typesafe(this);
}

PortViewModel.prototype.inflate = function (flatPort) {
    var self = PortViewModel.typesafe(this);

    self.id(flatPort.id);
    self.device_id(flatPort.device_id);
    self.slot(flatPort.slot);
    self.port0(flatPort.port0);
    self.port1(flatPort.port1);
    self.port2(flatPort.port2);
    self.port3(flatPort.port3);
    self.selected(flatPort.selected);
    self.status(flatPort.status);
};

PortViewModel.prototype.getNormalizedFlatObject = function (flatObject) {
    var self = ConfiguredTestViewModel.typesafe(this);

    flatObject.device_id = null;
    flatObject.slot = null;
    flatObject.port0 = null;
    flatObject.port1 = null;
    flatObject.port2 = null;
    flatObject.port3 = null;
    flatObject.selected = null;
    flatObject.status = null;

    return flatObject;
};

PortViewModel.prototype.toFlatObject = function(){
    var self = PortViewModel.typesafe(this);
    var flatTemplate = {
        id: self.id(),
        device_id: self.device_id(),
        slot: self.slot(),
        port0: self.port0(),
        port1: self.port1(),
        port2: self.port2(),
        port3: self.port3(),
        selected: self.selected(),
        status: self.status()
    };

    return flatTemplate;
};

PortViewModel.prototype.clone = function(){
    var self = PortViewModel.typesafe(this);

    var newTest = new PortViewModel(self.rootVm);

    newTest.id(self.id);
    newTest.device_id(self.device_id);
    newTest.slot(self.slot);
    newTest.port0(self.port0);
    newTest.port1(self.port1);
    newTest.port2(self.port2);
    newTest.port3(self.port3);
    newTest.selected(self.selected);
    newTest.status(self.status);

    return newTest;
};

module.exports = PortViewModel;
});

require.register("./components-ixia/configured-test-view-model", function (exports, module) {
var emitter = require('component~emitter@1.0.1'),
    debounce = require('./components-ixia/utility-functions').debounce,
    AsyncPoller = require('./components-ixia/async-poller'),
    moment = require('johntron~moment-timezone@0f4b9df99d9f6212c2036f5ae6f74b240f289381'),
    tz = window.jstz.determine();

/**
 * Instance of test configuration - managed by TestViewModel.
 *
 * @param testVm
 * @constructor
 */
function ConfiguredTestViewModel(testVm) {
    var self = this;

    self.testVm = testVm;
    self.rootVm = testVm.rootVm;

    self.defaultDuration = 1;
    self.id = ko.observable();
    self.name = ko.observable();
    self.description = ko.observable();
    self.categories = ko.observableArray();
    self.template_name = ko.observable();
    self.spirent_test_id = ko.observable();
    self.duration = ko.observable(self.defaultDuration);
    self.formattedDuration =  ko.computed(self.computedDurationRead.bind(self));
    self.validation_results = ko.observable();
    self.validation_results_success = true;
    self.bandwidth = ko.observable();
    self.customer = ko.observable();
    self.location = ko.observable();
    self.favorite = ko.observable();
    self.working = ko.observable(false);
    self.traffic_players = ko.observableArray();
    self.tags = ko.observableArray();
    self.unqualifiedTags = ko.observable();
    self.datapoint_ids = new Array();
    self.polling = ko.observable(false);
    self.poller = ko.observable();
    self.isLoaded = ko.observable(false);
    self.isDirty = false;
    self.startState = null;
    self.startingTest = false;

    self.engine = null;
    self.module = null;
    self.isTemplate = false;
    self.isUserSave = false;
    self.recommendedTrackIds = ko.observable();
    self.diagram = null;
    self.isMulticast = undefined;
    self.multicast_settings = undefined;
    self.supplementalConfiguration = null;

    self.defaultPlaylistId = null;

    self.displayTags = ko.computed({
        read: self.displayTagsRead.bind(self),
        write: self.displayTagsWrite.bind(self)
    });
    self.preValidationResult = ko.observable();

    self.devices_status_poller = new AsyncPoller(self.getDevicesStatus.bind(self));
    self.timings_poller = new AsyncPoller(self.getTimingAccuracies.bind(self));
    self.time_sync_poller = new AsyncPoller(self.getDeviceTimeSyncCapabilities.bind(self));

    self.attributes = undefined;
    self.max_players = ko.observable(8); //hard code as 8, data bind in template
}

emitter(ConfiguredTestViewModel.prototype);

ConfiguredTestViewModel.typesafe = function (that) {
    if (!(that instanceof ConfiguredTestViewModel)) {
        throw 'This method must be executed on a ConfiguredTestViewModel';
    }

    return that;
};

ConfiguredTestViewModel.prototype.computedDurationRead = function () {
    var self = ConfiguredTestViewModel.typesafe(this);
    return translate('{value} MIN', {
        value: self.duration()
    });
};

ConfiguredTestViewModel.prototype.getTotalTrafficLabel = function () {
    var self = ConfiguredTestViewModel.typesafe(this);

    var trafficTotal = {};
    var trafficPlayers = self.traffic_players();
    for(var i = 0; i < trafficPlayers.length; i++)
        trafficPlayers[i].aggregateTraffic(trafficTotal);

    var trafficTotalLabel = '';
    for (var key in trafficTotal) {
        if (trafficTotal.hasOwnProperty(key)) {
            trafficTotalLabel += (trafficTotalLabel.length > 0 ? " - " : "") + (isNaN(trafficTotal[key]) ? "" : trafficTotal[key] + " " + key);
        }
    }
    return trafficTotalLabel;
};

// ... This should really be done in a data model, but we don't have any
ConfiguredTestViewModel.prototype.get_device_ids = function () {
    var self = this,
        ids = [],
        traffic_players = self.traffic_players(),
        unique = [];

    traffic_players.forEach(function (player) {
        ids = ids.concat(player.getDeviceIds());
    });

    // Make unique
    ids.forEach(function (id) {
        if (unique.indexOf(id) === -1) {
            unique.push(id);
        }
    });
    ids = unique;

    // Remove inactive devices
    ids = ids.filter(function (id) {
        return self.isDeviceActive(id);
    });

    return ids;
};

ConfiguredTestViewModel.prototype.isDeviceActive = function (id) {
    var self = ConfiguredTestViewModel.typesafe(this),
        existingDevice;
    existingDevice = ko.utils.arrayFirst(self.testVm.availableDevices(), function (item) {
            return (item.id() === id && item.active());
    });
    if (existingDevice) {
        return true;
    }
    return false;
};

ConfiguredTestViewModel.prototype.pollDevicesStatus = function () {
    logger.info('Polling device status');

    var self = ConfiguredTestViewModel.typesafe(this);

    if (!self.get_device_ids().length) {
        // Devices haven't been loaded
        return; // Short-circuit
    }

    self.devices_status_poller.poll();
};

ConfiguredTestViewModel.prototype.getDevicesStatus = function(callback, device_ids) {
    logger.info('Getting devices status');

    var update = this.setDevicesStatus.bind(this);

    callback = callback || function () {};
    device_ids = device_ids || this.get_device_ids(); // Get latest device ID's in case they've changed since last poll

    $.ajax({
        method: 'GET',
        url: util.getConfigSetting("devices_status"),
        data: {
            device_ids: device_ids
        },
        dataType: 'json'
    }).always(function (data, status) {
        if ('success' !== status || data.result && 'FAILURE' === data.result) {
            logger.error('Failed to get device status. Result was: ' + JSON.stringify(data, undefined, 2));
        } else {
            update(data);
        }
        callback(data, status);
    });
};

ConfiguredTestViewModel.prototype.setDevicesStatus = function (devices_data) {
    logger.info('Setting devices status', devices_data);

    var self = ConfiguredTestViewModel.typesafe(this);

    for (var i = 0; i < devices_data.length; i++) {
        var device_data = devices_data[i];
        var device = ko.utils.arrayFirst(self.testVm.availableDevices(), function (item) {
            return item.id() == device_data.id;
        });

        device.inflate(device_data);
    }
};

/**
 * Returns a list of source device IDs to destination device IDs based on
 * current test configuration.
 *
 * @returns {Array} paths
 */
ConfiguredTestViewModel.prototype.get_device_paths = function () {
    var paths = [],
        traffic_players = this.traffic_players(),
        unique = [];

    traffic_players.forEach(function (player) {
        paths = paths.concat(player.getDevicePaths());
    });

    // Make paths unique
    paths.forEach(function (path) {
        if (!unique.some(function (p) { return path.source === p.source && path.destination === p.destination; })) {
            unique.push(path);
        }
    });
    paths = unique;

    return paths;
};

// We should create timing-accuracy emitter out of the *TimingAccuracies() methods - have individual devices subscribe to updates
ConfiguredTestViewModel.prototype.pollTimingAccuracies = function () {
    logger.info('Polling timing accuracies');

    var self = ConfiguredTestViewModel.typesafe(this);

    if (!self.get_device_paths().length) {
        // Traffic players haven't been loaded
        return; // Short-circuit
    }

    self.timings_poller.poll();
};

ConfiguredTestViewModel.prototype.getTimingAccuracies = function (callback, paths) {
    logger.info('Getting timing accuracies');

    var update = this.setTimingAccuracies.bind(this);

    callback = callback || function () {};
    paths = paths || this.get_device_paths(); // Get latest paths in case they've changed since last poll

    $.ajax({
        type: "POST",
        url: util.getConfigSetting("get_timing_accuracies"),
        data: JSON.stringify({paths: paths}),
        dataType: 'json',
        contentType: 'application/json',
        processData: false
    }).always(function (data, status) {
        if ('success' !== status || data.result && 'FAILURE' === data.result) {
            logger.error('Failed to get timing accuracies. Result was: ' + JSON.stringify(data, undefined, 2));
        } else {
            update(data);
        }
        callback(data, status);
    });
};

ConfiguredTestViewModel.prototype.setTimingAccuracies = function (data) {
    logger.info('Setting timing accuracies', data);

    var players = this.traffic_players() || [],
        accuracies = data.paths;

    players.forEach(function (player) {
        player.setTimingAccuracies(accuracies);
    });
};

ConfiguredTestViewModel.prototype.pollDeviceTimeSyncCapabilities = function () {
    logger.info('Polling time sync status');

    var self = ConfiguredTestViewModel.typesafe(this);

    if (!self.get_device_ids().length) {
        // Traffic players haven't been loaded
        return; // Short-circuit
    }

    self.time_sync_poller.poll();
};

ConfiguredTestViewModel.prototype.getDeviceTimeSyncCapabilities = function (callback, device_ids) {
    logger.info('Getting time sync status');

    var update = this.setDeviceTimeSyncCapabilities.bind(this);

    callback = callback || function () {};
    device_ids = device_ids || this.get_device_ids(); // Get latest device ID's in case they've changed since last poll

    $.ajax({
        method: 'GET',
        url: util.getConfigSetting("time_sync_status"),
        data: {
            device_ids: device_ids
        },
        dataType: 'json'
    }).always(function (data, status) {
        if ('success' !== status || data.result && 'FAILURE' === data.result) {
            logger.error('Failed to get time sync status. Result was: ' + JSON.stringify(data, undefined, 2));
        } else {
            update(data);
        }
        callback(data, status);
    });
};

ConfiguredTestViewModel.prototype.setDeviceTimeSyncCapabilities = function (data) {
    logger.info('Setting time sync status', data);

    var self = ConfiguredTestViewModel.typesafe(this);

    self.rootVm.updateDeviceTimeSyncCapabilities(data);
};

/**
 * Loads configuration from an existing test
 *
 * @param testConfiguration TestTemplateViewModel
 * @param loadCompleted
 */
ConfiguredTestViewModel.prototype.loadTest = function (testConfiguration, loadCompleted) {
    var self = ConfiguredTestViewModel.typesafe(this);
    // Avoid errors by forcing Knockout to destroy bindings from previous test
    self.testVm.testConfigurationTemplateName(undefined);
    self.name(testConfiguration.name());
    self.description(testConfiguration.description());
    self.duration(testConfiguration.duration() || self.defaultDuration);
    self.bandwidth(testConfiguration.bandwidth());
    self.id(testConfiguration.id());
    self.traffic_players.removeAll();
    self.categories(testConfiguration.categories());
    self.template_name(testConfiguration.template_name());
    self.spirent_test_id(testConfiguration.spirent_test_id());

    if(testConfiguration.attributes){
        self.attributes = testConfiguration.attributes;
    }

    self.engine = testConfiguration.engine;
    self.module = testConfiguration.module;
    self.emit('changed:module', self.module)
    //self.isTemplate = testConfiguration.isTemplate();
    self.isTemplate = false;
    self.isUserSave = testConfiguration.isUserSave;
    self.recommendedTrackIds = testConfiguration.recommendedTrackIds;
    self.diagram = testConfiguration.diagram;

    self.isMulticast = testConfiguration.isMulticast;
    if (self.isMulticast) {
        if (testConfiguration.multicast_settings) {
            self.multicast_settings = testConfiguration.multicast_settings;
        }
    }

    self.supplementalConfiguration = new TestSupplementalConfigurationViewModel(self.rootVm);
    self.supplementalConfiguration.inflate(testConfiguration.supplementalConfiguration.toFlatObject());
    self.add_player_settings = testConfiguration.add_player_settings;

    self.isDirty = false;

    if (self.isUserSave === undefined
        || self.isUserSave === null) {
        self.isUserSave = false;
    }

    if (testConfiguration.isTemplate()) {
        self.id(-1);
        self.isDirty = true;
    }

    self.datapoint_ids.length = 0;

    self.datapoint_ids = testConfiguration.datapoint_ids();

    if(testConfiguration.traffic_players){
        //
    } else {
        //
    }

    self.pollDevicesStatus();
    self.pollTimingAccuracies();
    self.pollDeviceTimeSyncCapabilities();

    self.customer(testConfiguration.customer());
    self.location(testConfiguration.location());
    self.favorite(testConfiguration.favorite());

    self.tags.removeAll();
    var tags = testConfiguration.tags();
    for (var i = 0; i < tags.length; i++) {
        self.tags.push(tags[i]);
    }
    self.displayTags(tags.join());

    self.isLoaded(true);
    if(testConfiguration.result_types)
        self.result_types = testConfiguration.result_types;
    else
        self.result_types = [1];


    self.setStartState();
    //self.rootVm.getAvailableTests();

    self.updateConfig(self.startState);

    if(loadCompleted)
        loadCompleted();
    else
        self.rootVm.showTest();

    return true
};

ConfiguredTestViewModel.prototype.updateConfig = function (config) {
    var self = ConfiguredTestViewModel.typesafe(this);

    config = config || self.toFlatObject();

    $.ajax({
        type: util.getRequestMethod("config_test"),
        url: util.getConfigSetting("config_test"),
        data: util.formatRequestData("config_test", config),
        dataType: 'json',
        cache: false,
        success: function (data, textStatus, jqXhr) {
            var device;
            if (data.is_error) {
                if (data.error_type === 'DEVICE_AUTH') {
                    device = ko.utils.arrayFirst(self.rootVm.availableDevices(), function(item) {
                        return data.device_id === item.id();
                    });

                    util.lightbox.openDeviceAuthError(self, device, data.messages[0].header, data.messages[0].content);
                } else {
                    util.lightbox.openError(data.messages[0].header, data.messages[0].content);
                }
            }
        },
        error: function (jqXhr, textStatus, errorThrown) { util.logData("config_test failed: "+errorThrown); }
    });
}

ConfiguredTestViewModel.prototype.setStartState = function () {
    var self = ConfiguredTestViewModel.typesafe(this),
        trafficPlayers = self.traffic_players(),
        i;

    for (i = 0; i < trafficPlayers.length; i += 1) {
        if (!trafficPlayers[i].loaded) {
            setTimeout(self.setStartState.bind(self), 10);
            return;
        }
    }

    self.startState = self.toFlatObject();

    self.startStateLessNameAndTags = self.getNormalizedFlatObject(self.toFlatObject());
};

ConfiguredTestViewModel.prototype.getNormalizedFlatObject = function (flatObject) {
    var self = ConfiguredTestViewModel.typesafe(this);

    flatObject.name = null;
    flatObject.description = null;
    flatObject.customer = null;
    flatObject.company = null;
    flatObject.location = null;
    flatObject.favorite = null;
    flatObject.tags = null;

    return flatObject;
};

/**
 * Used to instantiate the test configuration page with an initial traffic player
 * or to add additional players.
 *
 * @param flatData {ConfiguredTestViewModel|Object} Optional
 * @param additional {Boolean} truthy when an initial player already exists
 * @return {Window.TrafficPlayerViewModel}
 */
ConfiguredTestViewModel.prototype.addTrafficPlayer = function (flatData, additional) {
    var self = ConfiguredTestViewModel.typesafe(this),
        flatData = flatData || {},
        trafficPlayer = new TrafficPlayerViewModel(self),
        supplemental_config = self.supplementalConfiguration || {},
        is_multicast = self.isMulticast;

    trafficPlayer.is_primary(!additional);

    if (is_multicast && additional) {
        // User clicked "Add another traffic player" on multicast test
        // Players added to multicast test must be unicast
        is_multicast = false;
        delete flatData.multicast_settings;
    }

    if (additional && self.add_player_settings && self.add_player_settings === 'bandwidth') {
        supplemental_config.hasSupplementalConfiguration = false;
    }

    if (supplemental_config && supplemental_config.hasSupplementalConfiguration) {
        var trafficPlayerSupplementalConfig = new TestSupplementalConfigurationViewModel(self.rootVm);
        trafficPlayerSupplementalConfig.inflate(supplemental_config.toFlatObject());
        trafficPlayer.supplementalConfiguration(trafficPlayerSupplementalConfig);
        trafficPlayer.hasSupplementalConfiguration(true);
    } else {
        trafficPlayer.hasSupplementalConfiguration(false);
    }

    trafficPlayer.inflate(flatData, self.getDefaultPlaylistId(), self.datapoint_ids, is_multicast);

    self.traffic_players.push(trafficPlayer);

    return trafficPlayer;
};

ConfiguredTestViewModel.prototype.getDefaultPlaylistId = function () {
    var self = ConfiguredTestViewModel.typesafe(this),
        tmpl;

    if (self.isMulticast) {
        return self.defaultPlaylistId;
    } else {
        tmpl = ko.utils.arrayFirst(self.rootVm.vmDashboard.hostTests(), function (item) {
            return item.template_name() === self.template_name();
        });

        if (tmpl === null) {
            return self.defaultPlaylistId;
        }
        return tmpl.playlist_ids()[0];
    }
};

ConfiguredTestViewModel.prototype.hasHTTPTrack = function () {
    var self = ConfiguredTestViewModel.typesafe(this),
        trafficPlayers = self.traffic_players();

    return trafficPlayers.some(function (player) {
        return player.hasHTTPTrack();
    });
};

ConfiguredTestViewModel.prototype.mergeTrackResultTypes = function (trackResultTypes, playerTrackResultTypes) {
    var i;

    for (i = 0; i < playerTrackResultTypes.length; i += 1) {
        if (trackResultTypes.indexOf(playerTrackResultTypes[i]) === -1) {
            trackResultTypes.push(playerTrackResultTypes[i]);
        }
    }

    return trackResultTypes;
};

ConfiguredTestViewModel.prototype.validate = function(success, result){
    var self = ConfiguredTestViewModel.typesafe(this),
        result = result || new ValidationResultsViewModel(self),
        success = success || function () {};

    if(self.traffic_players().length > 0){
        for(var i = 0; i < self.traffic_players().length; i++){
            self.traffic_players()[i].validate(result, translate("Traffic Player {number}", {
                number: i + 1
            }));
        }

        if (result.is_valid) {
            if (!result.warnings.length) {
                success();
            } else {
                // Show warnings, then try to run the test
                util.lightbox.close();
                util.lightbox.open({
                    url: 'templates/lightbox.tmpl.html',
                    selector: '#lightbox-run-test-validation-template',
                    cancelSelector: '.cancel-button',
                    isModal: false,
                    onOpenComplete: function () {
                        ko.applyBindings(result, document.getElementById('lightbox-run-test-validation'));
                    },
                    onClose: function () {
                        if (result.ignore_warning) {
                            setTimeout(function () {
                                success();
                            }, 500);
                        }
                    }
                });
            }

        } else {
            self.setValidationResults(result);
        }

    }else{
        result.addCheckResults(translate("Test Configuration Error"), false, translate("At least one traffic player is required"));
        self.setValidationResults(result);
    }
    return result;
};

ConfiguredTestViewModel.prototype.runTest = function(){
    if (this.startingTest) {
        return; // Short-circuit
    }

    var self = ConfiguredTestViewModel.typesafe(this);
    var currentConfig = self.toFlatObject();
    var normalizedCurrentConfig = self.getNormalizedFlatObject(self.toFlatObject());
    var formatRequestData = util.formatRequestData('run_test', currentConfig);
    var run_handler = function(){
        self.startingTest = true;
        util.lightbox.working(new LightboxWorkingViewModel(translate("Start"), translate("Validating Test...")));
        $.ajax({
            type: util.getRequestMethod('run_test'),
            url: util.getConfigSetting('run_test'),
            data: formatRequestData,
            dataType: 'json',
            //async: false,
            success: self.parseValidationResults.bind(self)
        }).fail(function () {
            logger.error('Validation failed due to HTTP error');
            util.lightbox.error(translate("Validating test"));
            self.startingTest = false;
        });
    };

    self.startingTest = true;
    util.lightbox.working(new LightboxWorkingViewModel(translate("Start"), translate("Validating Test...")));

    if (self.isDirty || ko.toJSON(normalizedCurrentConfig) !== ko.toJSON(self.startStateLessNameAndTags)) {
        currentConfig.is_dirty = true;
        currentConfig.id = -1;
        self.id(-1);
    }

    self.check_for_conflicts_with_upcoming(formatRequestData, run_handler);
};

ConfiguredTestViewModel.prototype.check_for_conflicts_with_upcoming = function(formatRequestData,callback) {
    var self = this;
    $.ajax({
        type: 'POST',
        url: '/ixia/check_for_conflicts_with_upcoming',
        data: formatRequestData,
        dataType: 'json'
    }).success(function(data, textStatus, jqXhr){
        if(data.conflicts_found && data.conflicts_found === true){
            self.startingTest = false;
            util.lightbox.confirmation_dialog(self,self.get_conflict_message(data),callback)
        }
        else self.parseValidationResults.call(self, data, textStatus, jqXhr);
    }).fail(function () {
        logger.error('Validation failed due to HTTP error');
        util.lightbox.error(translate("Validating test"));
        self.startingTest = false;
    });
}

ConfiguredTestViewModel.prototype.get_conflict_message = function(res) {
    if(res.device.name && res.conflicts.length > 0 && res.conflicts[0].name && res.conflicts[0].datetime && res.conflicts[0].event_info.duration){
        var device_name = res.device.name;
        if(device_name === "Local Chassis" && res.conflicts[0].event_info.attributes.type === "remote_test_run")
        {
            device_name = "Remote Chassis";
        }
        return window.translate("Starting this test will interrupt your scheduled test:<br />\"{name}\" on {devices} at {datetime} for {duration} minute(s).", {
            name: res.conflicts[0].name,
            devices: device_name,
            duration: res.conflicts[0].event_info.duration,
            datetime:  moment.tz(res.conflicts[0].datetime, 'UTC').tz(tz.name()).format('LLL')
        });
    }
    else{
        return window.translate("Starting this test will interrupt your scheduled test.");
    }
}

ConfiguredTestViewModel.prototype.parseValidationResults = function (data, textStatus, jqXhr) {
    var self = ConfiguredTestViewModel.typesafe(this);
    if (data.items !== undefined) {
        if (data.items.length > 0) {
            self.id(data.items[0].id);
        }
    }
    var validation_results = new ValidationResultsViewModel(self);
    validation_results.inflate(data);
    self.setValidationResults(validation_results);
};

ConfiguredTestViewModel.prototype.setValidationResults = function (data) {
    var self = ConfiguredTestViewModel.typesafe(this),
        $lb,
        begin_testing = function () {
            self.startingTest = false;
        },
        show_invalid = function(result) {
            $lb = document.getElementById('lightbox-run-test-validation');
            ko.applyBindings(result, $lb);
            self.startingTest = false;
        };

    if (data.is_ready && !data.is_valid) {
        throw new ConfiguredTestViewModelException('Test is ready but invalid - only valid tests can be ready');
    }

    self.validation_results(data);

    if (!data.is_ready && data.is_valid) {
        // Show message until test is ready or validation fails

        self.id(data.id);
        self.startStateLessNameAndTags = self.getNormalizedFlatObject(self.toFlatObject());
        self.isDirty = false;

        var message = translate('Validating Test Configuration...');
        if(data.messages && data.messages.length > 0)
            message = data.messages[0];
        if(message.header == "randomize"){
            var testMessages = [translate("Allocating ports..."),translate("Checking Connection..."),translate("Sending test packets..."),translate("Verifying link..."),translate("Disambiguating systems..."),translate("Generating protocols..."),translate("Visualizing data..."),translate("Initializing network...")];
            message.header = testMessages[Math.floor(Math.random()*testMessages.length)];
        }
        util.lightbox.working(new LightboxWorkingViewModel(translate('Validate'), message.header, null, message.content));

        setTimeout(self.checkTestReady.bind(self), 1000);
        return; // Short-circuit
    }

    // Test is ready or invalid
    util.lightbox.close();
    util.lightbox.open({
        url : 'html/lightbox_tmpl',
        selector : '#lightbox-run-test-validation-template',
        cancelSelector: '.cancel-button',
        isModal : data.is_valid,
        onOpenComplete: data.is_ready ? begin_testing : show_invalid.bind(self, data),
        onClose: self.cancelTest.bind(self)
    });
};

ConfiguredTestViewModel.prototype.checkTestReady = function (data, textStatus, jqXhr) {
    var self = ConfiguredTestViewModel.typesafe(this);
    $.ajax({
        type: 'GET',
        url: util.getConfigSetting('get_istestready'),
        dataType: 'json',
        cache: false,
        success: self.parseValidationResults.bind(self)
    }).fail(function () {
        util.lightbox.error(translate('Running test'));
        self.startingTest = false;
    });
};


ConfiguredTestViewModel.prototype.cancelTest = function (callback) {
    var self = ConfiguredTestViewModel.typesafe(this);
    $.ajax({
        type: util.getRequestMethod('cancel_test'),
        url: util.getConfigSetting('cancel_test'),
        dataType: 'json',
        success: function(data, textStatus, jqXhr){
            if(util.lightbox.isOpen)
                util.lightbox.close();

            self.startingTest = false;

            if ($.type(callback) == 'function') {
                callback();
            }

            //If we have results, we should show the results table
            var results = self.testVm.vmResults;
            if (results.percentComplete() > 0) {
                results.getFinalTable(results.onGotFinalTable.bind(results));
            }
        }
    }).fail(function () {
        util.lightbox.error(translate("Canceling test"))
    });
};

ConfiguredTestViewModel.prototype.toJSON = function(){
    var self = ConfiguredTestViewModel.typesafe(this);

    var jsonTest = {
        id: self.id(),
        traffic_players : new Array(),
        name : self.name(),
        duration : self.duration(),
        engine : self.engine,
        spirent_test_id: self.spirent_test_id(),
        module : self.module,
        isTemplate : self.isTemplate,
        is_user_save : self.isUserSave,
        recommended_track_ids : self.recommendedTrackIds,
        diagram: self.diagram
    };

    var traffic_players = self.traffic_players();
    for(var i = 0; i < traffic_players.length; i++)
        jsonTest.traffic_players.push(traffic_players[i].toFlatObject());

    return jsonTest;
};

ConfiguredTestViewModel.prototype.displayTagsRead = function () {
    var self = ConfiguredTestViewModel.typesafe(this);

    if (!self.unqualifiedTags()) {
        self.unqualifiedTags(self.tags().join(', '));
    }
    return util.sanitizeUnqualifiedTagGroup(self.unqualifiedTags());
};

ConfiguredTestViewModel.prototype.displayTagsWrite = function (value) {
    var self = ConfiguredTestViewModel.typesafe(this);

    if (value == null) {
        return;
    }

    var newArray = value.split(',');

    self.tags.removeAll();
    for (var i = 0; i < newArray.length; i++) {
        var trimmedValue = util.trimTag(newArray[i]);

        if (trimmedValue == '') {
            continue;
        }

        if (self.tags().indexOf(trimmedValue) == -1) {
            self.tags.push(trimmedValue);
        }
    }
    self.unqualifiedTags(util.sanitizeUnqualifiedTagGroup(value));
    self.unqualifiedTags.valueHasMutated();
};

ConfiguredTestViewModel.prototype.preValidate = function(result, targetName){
    var self = ConfiguredTestViewModel.typesafe(this);
    errors = [];

    if(util.isNullOrEmpty(self.name())){
        errors.push(translate('name'));
    }

    if(errors.length > 0){
        result.addCheckResults(translate("Test Configuration"), false, translate('Test is missing configuration for: {errors}', {
            errors: errors.join(', ')
        }));
    }

};

ConfiguredTestViewModel.prototype.save = function (obj, event) {
    var self = ConfiguredTestViewModel.typesafe(this);

    var name = self.name();
    self.unqualifiedTags(self.tags().join(', '));
    var preValidationResult = new ValidationResultsViewModel(self);
    self.preValidate(preValidationResult, name);
    self.preValidationResult(preValidationResult);
    if(!preValidationResult.is_valid){
        return;
    }

    var dataLessNameAndTags = self.getNormalizedFlatObject(self.toFlatObject());

    var start = JSON.stringify(self.startStateLessNameAndTags);
    var finish = JSON.stringify(dataLessNameAndTags);
    var testChanged = start !== finish;

    if (testChanged) {
        self.id(-1);
    }

    var name = self.name();
    var id = self.id();

    var newname = '';
    var iteration = 0;

    var foundExisting = ko.utils.arrayFirst(self.rootVm.availableTests(), function (item) {
        return name === item.name() && id !== item.id();
    });
    while (foundExisting != null) {
        newname = name + ' [' + (iteration++) + ']';

        foundExisting = ko.utils.arrayFirst(self.rootVm.availableTests(), function (item) {
            return newname == item.name();
        });
    }
    if(newname != '') {
        self.name(newname);
    }

    var data = self.toFlatObject();

    util.lightbox.close();

    var workingVm = new LightboxWorkingViewModel(translate('Save'), translate('Saving...'));
    util.lightbox.working(workingVm);
    data.is_user_save = true;
    $.ajax({
        type: util.getRequestMethod('save_axon_test'),
        url: util.getConfigSetting('save_axon_test'),
        data: util.formatRequestData('save_axon_test', data),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            if (data.result == "SUCCESS") {
                self.id(data.items[0].id);
                // We save test successfully, so current test is clean
                self.isDirty = false;
                logger.info('Updated axon user test id: ' + data.items[0].id);
                self.isUserSave = true;
                self.startState = self.toFlatObject();
                self.startStateLessNameAndTags = self.getNormalizedFlatObject(self.toFlatObject());
                var completedPollingFunction = function(){
                    util.lightbox.working(new LightboxWorkingViewModel(translate('Refreshing test list...'), translate('Refreshing test list...')));
                    util.lightbox.close();
                };
                //self.rootVm.getAvailableTests(completedPollingFunction);
                completedPollingFunction()
            } else {
                workingVm.status('error');
                logger.error({message: 'Failed to save test', data: data, textStatus: textStatus});
            }
        },
        error: function (jqXhr, textStatus, errorThrown) {
            workingVm.status('error');
            logger.error(errorThrown);
        }
    });
};

ConfiguredTestViewModel.prototype.toFlatObject = function () {
    var self = ConfiguredTestViewModel.typesafe(this),
        testConfiguration = {},
        categories = self.categories(),
        datapointIds = self.datapoint_ids,
        trafficPlayers = self.traffic_players(),
        i,
        trafficPlayer;

    testConfiguration.id = self.id();
    testConfiguration.default_player_type = self.isMulticast ? 'multicast' : 'unicast';
    testConfiguration.name = self.name();
    testConfiguration.description = self.description();
    testConfiguration.duration = self.duration();
    testConfiguration.bandwidth = self.bandwidth();
    testConfiguration.tags = util.getTags(self);
    testConfiguration.categories = [];
    testConfiguration.template_name = self.template_name();
    testConfiguration.playlist_ids = [];
    testConfiguration.datapoint_ids = [];
    testConfiguration.traffic_players = [];
    testConfiguration.favorite = self.favorite();
    testConfiguration.spirent_test_id = self.spirent_test_id();

    testConfiguration.engine = self.engine;
    testConfiguration.module = self.module;
    testConfiguration.is_template = self.isTemplate;
    testConfiguration.is_user_save = self.isUserSave;
    testConfiguration.recommended_track_ids = self.recommendedTrackIds;
    testConfiguration.diagram = self.diagram;
    testConfiguration.supplemental_configuration = self.supplementalConfiguration.toFlatObject();
    testConfiguration.add_player_settings = self.add_player_settings;

    for (i = 0; i < categories.length; i++) {
        testConfiguration.categories.push(categories[i]);
    }

    for (i = 0; i < datapointIds.length; i++) {
        testConfiguration.datapoint_ids.push(datapointIds[i]);
    }

    for (i = 0; i < trafficPlayers.length; i++) {
        trafficPlayer = trafficPlayers[i];
        testConfiguration.playlist_ids.push(trafficPlayer.playlist().id());
        testConfiguration.traffic_players.push(trafficPlayer.toFlatObject());
    }

    return testConfiguration;
};

function ConfiguredTestViewModelException(message) {
    this.name = 'ConfiguredTestViewModelException';
    this.message = message;
}
ConfiguredTestViewModelException.prototype = new Error();
ConfiguredTestViewModelException.constructor = ConfiguredTestViewModelException;

module.exports = ConfiguredTestViewModel;
});

require.register("./components-ixia/administration-view-model", function (exports, module) {
/*global ko:true, translate:true, $:true, appHistory:true, ixiaCRVm:true, TestDeviceViewModel:true, TestPlaylistViewModel:true, TestTrackViewModel:true, LightboxWorkingViewModel:true */

var noop = function () {},
    util = require('./components-ixia/utility-functions'),
    domify = require('component~domify@1.3.1'),
    event = require('component~event@0.1.4'),
    classes = require('component~classes@1.2.3'),
    validate = require('johntron~validate-form@6005cddc781064389ea0053f3f4bad47e2f1a2d2'),
    is_host = require('johntron~is-host@9f441b6f34440e715b31f06157611292e67565a5'),
    is_ip = require('johntron~is-ip-address@39a0715c025a0be4d5956e1b891682d6d0f18e18');

function AdministrationViewModel(rootVm) {
    var self = this;

    self.rootVm = rootVm;
    self.globalSettingsVm = rootVm.vmGlobalSettings;
    self.selectedTab = ko.observable();
    self.noTabSelected = ko.computed(self.calculateNoTabSelected.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.devicesTabSelected = ko.computed(self.calculateDevicesTabSelected.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.portsTabSelected = ko.computed(self.calculatePortsTabSelected.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.changePasswordTabSelected = ko.computed(self.calculateChangePasswordTabSelected.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.upgradeLocationTabSelected = ko.computed(self.calculateUpgradeLocationTabSelected.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.languageTabSelected = ko.computed(self.calculateLanguageTabSelected.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.databaseTabSelected = ko.computed(self.calculateDatabaseTabSelected.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.systemSettingsTabSelected = ko.computed(self.calculateSystemSettingsTabSelected.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.devicesTabClass = ko.computed(self.calculateDevicesTabClass.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.portTabClass = ko.computed(self.calculatePortTabClass.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.customersAndLocationsTabClass = ko.computed(self.calculateCustomersAndLocationsTabClass.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.changePasswordTabClass = ko.computed(self.calculateChangePasswordTabClass.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.upgradeLocationTabClass = ko.computed(self.calculateUpgradeLocationTabClass.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.languageTabClass = ko.computed(self.calculateLanguageTabClass.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.databaseTabClass = ko.computed(self.calculateDatabaseTabClass.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.diskTabClass = ko.computed(self.calculateDiskTabClass.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.systemSettingsTabClass = ko.computed(self.calculateSystemSettingsTabClass.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });

    self.validateOldPassword = ko.observable();
    self.validateNewPassword = ko.observable();

    self.validateUserPassword = ko.observable();
    self.validateUserPasswordVerify = ko.observable();
    self.validateUserName = ko.observable();

    self.userName = ko.observable();
    self.userFirstName = ko.observable();
    self.userLastName = ko.observable();
    self.userPassword = ko.observable();
    self.userPasswordVerify = ko.observable();

    self.upgradeFile = ko.observable();
    self.fakeUpgrade = false;
    self.fakeUpgradeStep = 0;
    self.okFunction = ko.observable();
    self.lightboxText = ko.observable();

    self.language = ko.observable(self.rootVm.language());
    self.languageDisplay = ko.observable();
    self.availableDevices = ko.observableArray(self.rootVm.availableDevices());
    self.availableDevicesSummary = ko.computed(function () {
        var length = self.availableDevices().length;
        for (var i = 0; i < self.availableDevices().length; i++) {
            if (self.availableDevices()[i].id() == 1) {
                length -= 1;
                break;
            }
        }

        return translate('Showing {number} Devices', {
            number: length
        }, 'number');
    });
    self.editDeviceVisible = ko.observable(false);
    self.deviceListVisible = ko.observable(true);
    self.currentDevice = ko.observable(new TestDeviceViewModel(self.rootVm));

    self.availablePorts = ko.observableArray(self.rootVm.availablePorts());
    self.rootVm.availablePorts.subscribe(function (ports) {
        self.applyFilters(self.rootVm.availablePorts,ko.observableArray(ports));
        self.availablePorts(ports);
    });

    self.displayCustomers = ko.computed({
        read: self.displayCustomersRead.bind(self),
        write: self.displayCustomersWrite.bind(self)
    }, self).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.displayLocations = ko.computed({
        read: self.displayLocationsRead.bind(self),
        write: self.displayLocationsWrite.bind(self)
    }, self).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.selectedCustomer = ko.observable();
    self.selectedLocation = ko.observable();
    self.filterLocations = ko.computed(function () {
        var locations = [translate('All Locations')],
            availableLocations = self.rootVm.availableLocations(),
            i;

        for (i = 0; i < availableLocations.length; i += 1) {
            locations.push(availableLocations[i]);
        }

        return locations;
    });

    self.filterCustomers = ko.computed(function () {
        var customers = [translate('All Customers')],
            availableCustomers = self.rootVm.availableCustomers(),
            i;

        for (i = 0; i < availableCustomers.length; i += 1) {
            customers.push(availableCustomers[i]);
        }

        return customers;
    });

    self.selectedTags = ko.observableArray();

    self.searchString = ko.observable();

    self.displaySelectedTags = ko.computed({
        read: self.displaySelectedTagsRead,
        write: self.displaySelectedTagsWrite
    }, self).extend({ throttle: self.rootVm.defaultThrottleDuration });

    self.rootVm.language.subscribe(function () {
        self.language(self.rootVm.language());
    });

    self.language.subscribe(function (language) {
        if (language === "en") {
            self.languageDisplay("English");
        } else if (language === "zh") {
            self.languageDisplay("中文");
        }
    });

    self.rootVm.availableDevices.subscribe(function (devices) {
        self.applyFilters(self.rootVm.availableDevices,ko.observableArray(devices));
        self.availableDevices(devices);
    });

    self.selectedCustomer.subscribe(function (value) {
        self.applyFiltersForAll();
    });

    self.selectedLocation.subscribe(function (value) {
        self.applyFiltersForAll();
    });

    self.selectedTags.subscribe(function (value) {
        self.applyFiltersForAll();
    });

    self.searchString.subscribe(function (value) {
        self.applyFiltersForAll();
    });
}

module.exports = AdministrationViewModel;

AdministrationViewModel.prototype.render = function ($parent, template) {
    this.$el = domify(template);
    $parent.appendChild(this.$el);
    this.bind();
    ko.applyBindings(this, this.$el);
};

AdministrationViewModel.prototype.bind = function () {
    var self = this,
        $check_offline = this.$el.querySelector('.check-offline');

    event.bind($check_offline, 'click', this.checkForOfflineUpdates.bind(this));
};

AdministrationViewModel.prototype.checkForOfflineUpdates = function () {
    var self = this,
        workingVm;

    util.lightbox.close();
    workingVm = new LightboxWorkingViewModel(translate('Checking for offline updates'), translate('Checking for offline updates...'));
    util.lightbox.working(workingVm);
    $.ajax({
        type: util.getRequestMethod('check_updates'),
        url: util.getConfigSetting('check_updates') + '?offline=1',
        dataType: 'json',
        timeout: false,
        success: function (data, textStatus, jqXhr) {
            if ('success' !== textStatus || 'SUCCESS' !== data.result) {
                workingVm.status('error');
                return;
            }

            if (data.updates.available_updates) {
                self.globalSettingsVm.availableUpdate(data.updates);
                self.okFunction = self.beginUpgrade;
                self.lightboxText = translate('Offline update found. Would you like to update to build {build} now?', {build: data.updates.newest_build});
                util.lightbox.open({
                    url: 'html/lightbox_tmpl',
                    selector: '#lightbox-confirmation-template',
                    cancelSelector: '.cancel-button',
                    onOpenComplete: function () {
                        ko.applyBindings(self, document.getElementById('lightbox-confirmation'));
                    }
                });
            } else {
                self.lightboxText = translate('No updates found.', {});
                util.lightbox.open({
                    url: 'html/lightbox_tmpl',
                    selector: '#lightbox-message-template',
                    cancelSelector: '.ok-button',
                    onOpenComplete: function () {
                        ko.applyBindings(self, document.getElementById('lightbox-message'));
                    }
                });

            }
        },
        error: function (jqXhr, textStatus, errorThrown) {
            workingVm.status('error');
        }
    });
};

function mark_invalid($el, message) {
    if (classes($el.parentNode).has('light-select')) {
        // $el is a fancy select box nested inside of a div, so use the parent div
        $el = $el.parentNode;
    }

    var $old = $el.parentNode.querySelectorAll('label.validator-message'),
        $message = document.createElement('label');

    // Remove old validation messages
    [].forEach.call($old, function ($el) {
        $el.parentNode.removeChild($el);
    });

    // Add new message
    classes($message).add('validator-message');
    $message.textContent = message;
    $el.parentNode.appendChild($message);

    classes($el).add('invalid');
}

AdministrationViewModel.prototype.validateGlobalSettings = function () {
    var $form = document.querySelector('#systemSettingsMain'),
        validator = validate($form).use(is_ip).use(is_host).invalid(mark_invalid),
        ip_message = window.translate("Must be an IP address"),
        host_message = window.translate("Must be an IP address or hostname"),
        success = false;

    validator.field('host')
            .is('required', window.translate('Field is required'))
            .is('ip', ip_message);
    validator.field('gateway')
            .is('ip', ip_message);

    validator.validate(function (err, is_valid, reason) {
        if (err) {
            util.lightbox.openError('', '');
            return; // short-circuit
        }

        if (!is_valid) {
            util.lightbox.openError(window.translate('Settings are invalid'), window.translate('Settings are invalid'));
            return; // short-circuit
        }

        success = true;
    }); // Looks async, but everything is synchronous

    return success;
};

AdministrationViewModel.prototype.displaySelectedTagsRead = function () {
    return this.selectedTags().join(', ');
};

AdministrationViewModel.prototype.displaySelectedTagsWrite = function (value) {
    if (!value) {
        return;
    }

    var newArray = value.split(','),
        i,
        trimmedValue;

    this.selectedTags.removeAll();
    for (i = 0; i < newArray.length; i += 1) {
        trimmedValue = newArray[i];

        if (trimmedValue !== '' && this.selectedTags().indexOf(trimmedValue) === -1) {
            this.selectedTags.push(trimmedValue);
        }
    }
};

AdministrationViewModel.prototype.applyFilters = function (sourceCollection, observableFilteredCollection) {
    var selectedCustomer = this.selectedCustomer(),
        selectedLocation = this.selectedLocation(),
        selectedTags = this.selectedTags(),
        searchString = this.searchString(),
        filteredCollection;

    if ((selectedCustomer === translate('All Customers') || selectedCustomer === undefined)
            && (selectedLocation === translate('All Locations') || selectedLocation === undefined)
            && selectedTags.length === 0
            && (searchString === undefined || searchString === '')) {
        observableFilteredCollection(sourceCollection);
        return;
    }

    filteredCollection = sourceCollection;
    filteredCollection = this.applyCustomerFilter(selectedCustomer, filteredCollection);
    filteredCollection = this.applyLocationFilter(selectedLocation, filteredCollection);
    filteredCollection = this.applyTagsFilter(selectedTags, filteredCollection);
    filteredCollection = this.applySearchFilter(searchString, filteredCollection);

    observableFilteredCollection(filteredCollection);
};

AdministrationViewModel.prototype.applyCustomerFilter = function (selectedCustomer, sourceCollection) {
    var i,
        filteredCollection = [];

    if (selectedCustomer === translate('All Customers') || selectedCustomer === undefined) {
        return sourceCollection;
    }

    if (sourceCollection.length === 0) {
        return sourceCollection;
    }

    for (i = 0; i < sourceCollection.length; i += 1) {
        if (sourceCollection[i].customer() === selectedCustomer) {
            filteredCollection.push(sourceCollection[i]);
        }
    }

    return filteredCollection;
};

AdministrationViewModel.prototype.applyLocationFilter = function (selectedLocation, sourceCollection) {
    var i,
        filteredCollection = [];

    if (selectedLocation === translate('All Locations') || selectedLocation === undefined) {
        return sourceCollection;
    }

    if (sourceCollection.length === 0) {
        return sourceCollection;
    }

    for (i = 0; i < sourceCollection.length; i += 1) {
        if (sourceCollection[i].location() === selectedLocation) {
            filteredCollection.push(sourceCollection[i]);
        }
    }

    return filteredCollection;
};

AdministrationViewModel.prototype.applyTagsFilter = function (selectedTags, sourceCollection) {
    var i,
        filteredCollection = [],
        tags,
        hasSharedTag;

    if (selectedTags.length === 0) {
        return sourceCollection;
    }

    if (sourceCollection.length === 0) {
        return sourceCollection;
    }

    for (i = 0; i < sourceCollection.length; i += 1) {
        tags = [].concat(sourceCollection[i].tags());

        hasSharedTag = util.arraysShareValue(tags, selectedTags, true);

        if (hasSharedTag) {
            filteredCollection.push(sourceCollection[i]);
        }
    }

    return filteredCollection;
};

AdministrationViewModel.prototype.applySearchFilter = function (searchString, sourceCollection) {
    var i,
        filteredCollection = [];

    if (searchString === undefined) {
        return sourceCollection;
    }

    if (sourceCollection.length === 0) {
        return sourceCollection;
    }

    for (i = 0; i < sourceCollection.length; i += 1) {
        if (sourceCollection[i].matchesSearch(searchString)) {
            filteredCollection.push(sourceCollection[i]);
        }
    }

    return filteredCollection;
};


AdministrationViewModel.prototype.applyFiltersForAll = function () {
    this.applyFilters(this.rootVm.availableDevices(), this.availableDevices);
};

AdministrationViewModel.typesafe = function (that) {
    if (!(that instanceof AdministrationViewModel)) {
        throw 'This method must be executed on a AdministrationViewModel';
    }

    return that;
};

AdministrationViewModel.prototype.matchesSearch = function (searchString) {
    var self = AdministrationViewModel.typesafe(this),
        searchTerms = searchString.split(' '),
        name,
        i;

    if (searchTerms.length === 0) {
        return true;
    }

    name = self.name().toUpperCase();

    for (i = 0; i < searchTerms.length; i += 1) {
        if (searchTerms[i] && name.indexOf(searchTerms[i].toUpperCase()) === -1) {
            return false;
        }
    }

    return true;
};

AdministrationViewModel.prototype.refreshDevices = function (callback) {
    var self = AdministrationViewModel.typesafe(this),
        deviceIds,
        i;

    callback = callback || noop;

    deviceIds = [];
    for (i = 0; i < self.rootVm.availableDevices().length; i += 1) {
        deviceIds.push(self.rootVm.availableDevices()[i].id());
    }

    self.selectTab("devices");
    callback();
};

AdministrationViewModel.prototype.selectTab = function (tabName) {
    var self = AdministrationViewModel.typesafe(this);

    if (tabName === self.selectedTab()) {
        return;
    }

    $('.administration input.shaded.search').val("").change();
    $('.administration input.shaded.search').trigger('input');

    self.selectedTab(tabName);
    appHistory.push(ixiaCRVm);

    // Keep current active tab clean
    self.clearError(tabName);
};

AdministrationViewModel.prototype.clearError = function (tabName) {
    var self = AdministrationViewModel.typesafe(this);

    if (tabName === "system backup restore") {
        // Using Bootstrap's classes and jQuery selector and DOM manipulation
        $('#backup-uploader > div.error, #backup-uploader > div.validated').remove();
    } else {
        // Handle other error clear task
    }
};

AdministrationViewModel.prototype.calculateNoTabSelected = function () {
    var self = AdministrationViewModel.typesafe(this);

    return !self.selectedTab();
};
AdministrationViewModel.prototype.calculateDevicesTabSelected = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "devices";
};
AdministrationViewModel.prototype.calculatePortsTabSelected = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "ports";
};
AdministrationViewModel.prototype.calculateChangePasswordTabSelected = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "change password";
};
AdministrationViewModel.prototype.calculateUpgradeLocationTabSelected = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "upgrade location";
};
AdministrationViewModel.prototype.calculateLanguageTabSelected = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "language";
};
AdministrationViewModel.prototype.calculateDatabaseTabSelected = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "database";
};
AdministrationViewModel.prototype.calculateSystemSettingsTabSelected = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "system settings";
};
AdministrationViewModel.prototype.calculateDevicesTabClass = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "devices" ? "devices selected" : "devices";
};
AdministrationViewModel.prototype.calculatePortTabClass = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "ports" ? "ports selected" : "ports";
};
AdministrationViewModel.prototype.calculateCustomersAndLocationsTabClass = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "customers and locations" ? "customers selected" : "customers";
};
AdministrationViewModel.prototype.calculateChangePasswordTabClass = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "change password" ? "change-password selected" : "change-password";
};
AdministrationViewModel.prototype.calculateUpgradeLocationTabClass = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "upgrade location" ? "update selected" : "update";
};
AdministrationViewModel.prototype.calculateLanguageTabClass = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "language" ? "language selected" : "language";
};
AdministrationViewModel.prototype.calculateDatabaseTabClass = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "database" ? "database selected" : "database";
};
AdministrationViewModel.prototype.calculateDiskTabClass = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "disk" ? "disk selected" : "disk";
};
AdministrationViewModel.prototype.calculateSystemSettingsTabClass = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.selectedTab() === "system settings" ? "system selected" : "system";
};

AdministrationViewModel.prototype.addAccount = function () {
    var self = AdministrationViewModel.typesafe(this);

    util.lightbox.open({
        url : 'html/lightbox_tmpl',
        selector : '#lightbox-save-account-template',
        cancelSelector: '.cancel-button',
        onOpenComplete: function(){
            ko.applyBindings(self, document.getElementById('lightbox-save-account'));
        },
        onClose: function(){
        }
    });
};

AdministrationViewModel.prototype.editDevice = function () {
    var self = AdministrationViewModel.typesafe(this);
    // ??
};

AdministrationViewModel.prototype.showDeviceList = function () {
    var self = AdministrationViewModel.typesafe(this);

    self.editDeviceVisible(false);
    self.deviceListVisible(true);
};

AdministrationViewModel.prototype.displayCustomersRead = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.rootVm.availableCustomers().join(', ');
};

AdministrationViewModel.prototype.displayCustomersWrite = function (value) {
    var self = AdministrationViewModel.typesafe(this),
        lookupArray = [],
        newArray,
        i,
        trimmedValue,
        loweredValue,
        saveData;

    if (value === undefined) {
        return;
    }

    newArray = value.split(',');

    self.rootVm.availableCustomers.removeAll();
    for (i = 0; i < newArray.length; i += 1) {
        trimmedValue = $.trim(newArray[i]);

        if (trimmedValue) {
            loweredValue = trimmedValue.toLowerCase();
            if (lookupArray.indexOf(loweredValue) === -1) {
                lookupArray.push(loweredValue);
                self.rootVm.availableCustomers.push(trimmedValue);
            }
        }
    }

    saveData = self.rootVm.availableCustomers().join(', ');
    $.ajax({
        type: util.getRequestMethod('save_customers'),
        url: util.getConfigSetting('save_customers'),
        data: util.formatRequestData('save_customers', saveData),
        dataType: 'json'
    });
};

AdministrationViewModel.prototype.displayLocationsRead = function () {
    var self = AdministrationViewModel.typesafe(this);

    return self.rootVm.availableLocations().join(', ');
};

AdministrationViewModel.prototype.displayLocationsWrite = function (value) {
    var self = AdministrationViewModel.typesafe(this),
        lookupArray = [],
        newArray,
        i,
        trimmedValue,
        loweredValue,
        saveData;

    if (!value) {
        return;
    }

    newArray = value.split(',');

    self.rootVm.availableLocations.removeAll();
    for (i = 0; i < newArray.length; i += 1) {
        trimmedValue = $.trim(newArray[i]);

        if (trimmedValue) {
            loweredValue = trimmedValue.toLowerCase();

            if (lookupArray.indexOf(loweredValue) === -1) {
                lookupArray.push(loweredValue);
                self.rootVm.availableLocations.push(trimmedValue);
            }
        }
    }

    saveData = self.rootVm.availableLocations().join(', ');

    $.ajax({
        type: util.getRequestMethod('save_locations'),
        url: util.getConfigSetting('save_locations'),
        data: util.formatRequestData('save_locations', saveData),
        dataType: 'json'
    });
};

AdministrationViewModel.prototype.showTaskStatus = function (data, taskName, taskId, completedPollingFunction, currentStatusCode, previousStatusCode, expectError) {
    var self = AdministrationViewModel.typesafe(this),
        message,
        progress,
        statusComplete = function () {
            var currentDate = new Date();
            completedPollingFunction(taskName, data);
        },
        incomplete_codes = ["404", "500", "502", "504"];

    util.lightbox.close();
    if (data.messages[0].header || data.messages[0].content) {
        message = data.messages[0];
    } else {
        message = translate('Running {task}...', {
            task: taskName.toLowerCase()
        });
    }
    if (data.messages[0].progress) {
        progress = data.messages[0].progress;
    }

    if ((incomplete_codes.indexOf(previousStatusCode) !== -1 && currentStatusCode === "200") || data.status === "complete") {
        util.lightbox.working(new LightboxWorkingViewModel(taskName, message.header, progress));

        function pollAgain(numberOfPreviousPolls) {
            util.lightbox.working(new LightboxWorkingViewModel(taskName, message.header, progress));
            $.ajax({
                type: "POST",
                url: util.getConfigSetting('get_task_status'),
                data: 'task_id=' + taskId,
                dataType: 'json',
                cache: false,
                statusCode: {
                    404: function (jqXhr, textStatus, errorThrown) {
                        setTimeout(function () {
                            self.pollTaskProgress(taskId, taskName, completedPollingFunction, "404", currentStatusCode, expectError)
                        }, 2000);
                        update_user_session();
                    },
                    500: function (jqXhr, textStatus, errorThrown) {
                        setTimeout(function () {
                            self.pollTaskProgress(taskId, taskName, completedPollingFunction, "500", currentStatusCode, expectError)
                        }, 2000);
                        update_user_session();
                    },
                    502: function (jqXhr, textStatus, errorThrown) {
                        setTimeout(function () {
                            self.pollTaskProgress(taskId, taskName, completedPollingFunction, "502", currentStatusCode, expectError)
                        }, 2000);
                        update_user_session();
                    },
                    504: function (jqXhr, textStatus, errorThrown) {
                        setTimeout(function () {
                            self.pollTaskProgress(taskId, taskName, completedPollingFunction, "504", currentStatusCode, expectError)
                        }, 2000);
                        update_user_session();
                    },
                    200: function (data) {
                        if (numberOfPreviousPolls < 15) {
                            numberOfPreviousPolls++;
                            setTimeout(function () {
                                pollAgain(numberOfPreviousPolls)
                            }, 1000);
                            update_user_session();
                        } else {
                            statusComplete();
                        }
                    }
                },
                /*success: function(data){
                 self.showTaskStatus(data, taskName, taskId, completedPollingFunction);}, 1000);
                 },*/
                error: function (jqXhr, textStatus, errorThrown) {
                    // danger: if we get *any* error, we're just assuming it's cool on account of the upgrade
                    // & keep on rolling...
                    if (jqXhr.status === 404 || jqXhr.status === 500 || jqXhr.status === 502 || jqXhr.status === 504) {
                        noop();
                    } else {
                        setTimeout(function () {
                            self.pollTaskProgress(taskId, taskName, completedPollingFunction, "500", currentStatusCode, expectError)
                        }, 2000);
                        update_user_session();
                    }
                }
            });
        }

        if (data.status === "complete") {
            statusComplete();
        } else {
            setTimeout(function () {
                pollAgain(1);
            }, 1000);
        }
    } else {
        if (!data.messages[0].is_error) {
            util.lightbox.working(new LightboxWorkingViewModel(taskName, message.header, progress));
            setTimeout(function () {
                self.pollTaskProgress(taskId, taskName, completedPollingFunction, currentStatusCode, previousStatusCode, expectError)
            }, 1000);
            update_user_session();
        } else {
            var taskStatusVm = util.lightbox.working(new LightboxWorkingViewModel(taskName, message.header, progress));
            taskStatusVm.status('error');
        }
    }
};

AdministrationViewModel.prototype.pollTaskProgress = function (taskId, taskName, completedPollingFunction, currentStatusCode, previousStatusCode, expectError) {
    var self = AdministrationViewModel.typesafe(this);
    $.ajax({
        type: "POST",
        url: util.getConfigSetting('get_task_status'),
        data: 'task_id=' + taskId,
        dataType: 'json',
        cache: false,
        statusCode: {
            404: function (jqXhr, textStatus, errorThrown) {
                setTimeout(function () {
                    self.pollTaskProgress(taskId, taskName, completedPollingFunction, "404", currentStatusCode, expectError)
                }, 2000);
            },
            500: function (jqXhr, textStatus, errorThrown) {
                setTimeout(function () {
                    self.pollTaskProgress(taskId, taskName, completedPollingFunction, "500", currentStatusCode, expectError)
                }, 2000);
            },
            502: function (jqXhr, textStatus, errorThrown) {
                setTimeout(function () {
                    self.pollTaskProgress(taskId, taskName, completedPollingFunction, "502", currentStatusCode, expectError)
                }, 2000);
            },
            504: function (jqXhr, textStatus, errorThrown) {
                setTimeout(function () {
                    self.pollTaskProgress(taskId, taskName, completedPollingFunction, "504", currentStatusCode, expectError)
                }, 2000);
            },
            200: function (data) {
                setTimeout(function () {
                    self.showTaskStatus(data, taskName, taskId, completedPollingFunction, "200", currentStatusCode, expectError)
                }, 1000);
            }
        },
        /*success: function(data){
         self.showTaskStatus(data, taskName, taskId, completedPollingFunction);}, 1000);
         },*/
        error: function (jqXhr, textStatus, errorThrown) {
            // danger: if we get *any* error, we're just assuming it's cool on account of the upgrade
            // & keep on rolling...
            if (expectError) {
                completedPollingFunction(taskName);
                return;
            } else {
                if (jqXhr.status === 404 || jqXhr.status === 500 || jqXhr.status === 502 || jqXhr.status === 504) {
                    noop();
                } else {
                    setTimeout(function () {
                        self.pollTaskProgress(taskId, taskName, completedPollingFunction, "500", currentStatusCode, null, expectError)
                    }, 2000);
                }
            }

        }
    });
};
AdministrationViewModel.prototype.beginUpgrade = function () {
    var self = AdministrationViewModel.typesafe(this);
    util.lightbox.close();
    util.lightbox.working(new LightboxWorkingViewModel(translate("Starting update"), translate("Starting update...")));
    var currentDate = new Date();

    completedPollingFunction = function (taskName) {
        util.lightbox.working(new LightboxWorkingViewModel(taskName, translate('Reloading app...')));
        setTimeout(function () {
            util.lightbox.close();
            window.location = '/logout';
        }, 2000)
    };

    $.ajax({
        url: util.getConfigSetting('upgrade_device'),
        cache: false,
        contentType: false,
        dataType: 'json',
        processData: false,
        type: util.getRequestMethod('upgrade_device'),
        success: function (data) {
            self.showTaskStatus({ "status": "running", "messages": [
                {"header": translate("Starting update"), "content": translate("Starting update")}
            ]}, translate("Update"), data.task_id, completedPollingFunction);
        }
    });
};
AdministrationViewModel.prototype.setLanguage = function () {
    var self = AdministrationViewModel.typesafe(this);
    $.post(util.getConfigSetting('set_language'), JSON.stringify({language: self.language()}), function (response, textStatus) {
        if (response.result == "SUCCESS") {
            window.location.reload();
        } else {
            util.lightbox.close();
            util.lightbox.openError(response.messages[0].header, response.messages[0].content);
            logger.info(textStatus);
            logger.info(response);
        }
    }, 'json');
};
AdministrationViewModel.prototype.rebootChassis = function () {
    var self = AdministrationViewModel.typesafe(this);
    util.lightbox.close();
    util.lightbox.working(new LightboxWorkingViewModel(translate("Rebooting Axon"), translate("Rebooting Axon...")));
    var currentDate = new Date();

    completedPollingFunction = function (taskName) {
        util.lightbox.working(new LightboxWorkingViewModel(taskName, translate('Axon rebooted.  Reloading app...')));
        setTimeout(function () {
            util.lightbox.close();
            window.location = '/logout';
        }, 2000)
    };

    $.ajax({
        url: util.getConfigSetting('reboot_cr'),
        cache: false,
        contentType: false,
        dataType: 'json',
        processData: false,
        type: util.getRequestMethod('reboot_cr'),
        success: function (data) {
            self.showTaskStatus({ "status": "running", "messages": [
                {"header": translate("Rebooting Cyber Range"), "content": translate("Rebooting Cyber Range")}
            ]}, translate("Reboot"), data.task_id, completedPollingFunction);
        }
    });
};
AdministrationViewModel.prototype.shutdownChassis = function () {
    var self = AdministrationViewModel.typesafe(this);
    util.lightbox.close();
    util.lightbox.working(new LightboxWorkingViewModel("Shutting down Cyber Range", "Shutting down Cyber Range..."));
    var currentDate = new Date();

    completedPollingFunction = function (taskName) {
        clearAllIntervals();
        util.lightbox.close();
        self.lightboxText = 'Cyber Range successfully shutdown.';
        util.lightbox.open({
            url: 'templates/lightbox.tmpl.html',
            selector: '#lightbox-message-template',
            cancelSelector: '.ok-button',
            onOpenComplete: function () {
                ko.applyBindings(self, document.getElementById('lightbox-message'));
            }
        });
    };
    // Logout system
    window.location = '/logout';

    $.ajax({
        url: util.getConfigSetting('shutdown_axon'),
        cache: false,
        contentType: false,
        dataType: 'json',
        processData: false,
        type: util.getRequestMethod('shutdown_cr'),
        success: function (data) {
            self.showTaskStatus({ "status": "running", "messages": [
                {"header": "Shutting down Cyber Range", "content": "Shutting down Cyber Range"}
            ]}, "Shutdown", data.task_id, completedPollingFunction, null, null, true);
        }
    });
};

AdministrationViewModel.prototype.changePassword = function (password) {
    var self = AdministrationViewModel.typesafe(this);
    var $oldPassword = $('#oldPassword');
    if (self.validateOldPassword() === "SUCCESS" && $oldPassword.val()) {
        if (self.validateNewPassword() === "confirmed") {
            var workingVm = new LightboxWorkingViewModel(translate('Save'), translate('Saving...'));
            util.lightbox.close();
            util.lightbox.working(workingVm);
            $.ajax({
                type: 'POST',
                url: util.getConfigSetting('set_admin_password'),
                data: '{"password": "' + $('#newPassword').val() + '"}',
                dataType: 'json',
                cache: false,
                success: function (data, textStatus, jqXhr) {
                    if (data.result === "SUCCESS") {
                        workingVm.status('success');
                        $('#newPassword, #newPasswordVerify, #oldPassword').val('');
                        self.validateNewPassword(undefined);
                        self.validateOldPassword(undefined);
                    } else {
                        workingVm.status('error');
                        $('#newPassword, #newPasswordVerify, #oldPassword').val('');
                        self.validateNewPassword(undefined);
                        self.validateOldPassword(undefined);
                    }
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    workingVm.status('error');
                }
            });
        } else {
            $('#newPassword').val('').focus();
            $('#newPasswordVerify').val('');
            self.validateNewPassword('error');
        }
    } else {
        $oldPassword.val('').focus();
        self.validateOldPassword('FAILURE');
    }
};

AdministrationViewModel.prototype.addDevice = function () {
    var self = AdministrationViewModel.typesafe(this),
        device = new TestDeviceViewModel(self.rootVm);

    device.openSaveModal();
};

AdministrationViewModel.prototype.addUser = function (password) {
    var self = AdministrationViewModel.typesafe(this);
    var data = '{"password": "' + $('#userPassword').val() + '", "username": "' + $('#userName').val() + '", "firstname": "' + $('#userFirstName').val() + '", "lastname": "' + $('#userLastName').val() + '"}';
    if (self.validateUserPassword() === "confirmed" || self.validateUserPasswordVerify() === "confirmed") {
        var workingVm = new LightboxWorkingViewModel(translate('Save'), translate('Saving...'));
        util.lightbox.close();
        util.lightbox.working(workingVm);
        $.ajax({
            type: 'POST',
            url: util.getConfigSetting('add_user'),
            data: data,
            dataType: 'json',
            cache: false,
            success: function (data, textStatus, jqXhr) {
                if (data.result === "SUCCESS") {
                    workingVm.status('success');
                    $('#userPassword, #userName, #userPasswordVerify, #userFirstName, #userLastName').val('');
                    self.validateUserPassword(undefined);
                    self.validateUserPasswordVerify(undefined);
                } else {
                    workingVm.status('error');
                    $('#userPassword, #userName, #userPasswordVerify, #userFirstName, #userLastName').val('');
                    self.validateUserPassword(undefined);
                    self.validateUserPasswordVerify(undefined);
                }
            },
            error: function (jqXhr, textStatus, errorThrown) {
                workingVm.status('error');
            }
        });
    } else {
        $('#userName').val('').focus();
        $('#userPassword, #userName, #userPasswordVerify, #userFirstName, #userLastName').val('');
        self.validateUserPassword('error');
    }
};

AdministrationViewModel.prototype.showError = function () {
    var self = AdministrationViewModel.typesafe(this);
};

AdministrationViewModel.prototype.runLightboxWarning = function (text, okFunction) {
    var self = AdministrationViewModel.typesafe(this);

    self.okFunction = function() {
        okFunction.call(self);
    };
    self.lightboxText = text;
    util.lightbox.open({
        url: 'html/lightbox_tmpl',
        selector: '#lightbox-warning-template',
        cancelSelector: '.cancel-button',
        onOpenComplete: function () {
            ko.applyBindings(self, document.getElementById('lightbox-warning'));
        }
    });
};

AdministrationViewModel.prototype.getSystemLogs = function () {
    var self = AdministrationViewModel.typesafe(this);
    util.lightbox.close();
    util.lightbox.working(new LightboxWorkingViewModel(translate("Starting log compression..."), translate("Starting log compression...")));
    $.ajax({
        url: util.getConfigSetting('get_axon_logs'),
        cache: false,
        contentType: false,
        dataType: 'json',
        processData: false,
        type: util.getRequestMethod('get_axon_logs'),
        success: function (data) {
            if (data.result === 'SUCCESS') {
                util.lightbox.close();
                window.location = data.messages[0].content.url;
            } else {
                util.lightbox.close();
                util.lightbox.openError(translate('Request failed'), (data.messages && data.messages.length > 0) ? data.messages[0].content : 'Unknown failure');
            }
        }
    });
};

function show_IP_changed_message(ip) {
    var message = window.translate("Please visit the new IP: <a href='{URL}'>{IP}</a>", {
        URL: 'https://' + ip + '/logout',
        IP: ip
    });

    util.lightbox.openMessage(message);
}

function show_DHCP_enabled_message() {
    var to_dhcp_message = window.translate("DHCP enabled. This Axon may have a new IP address.");

    util.lightbox.openMessage(to_dhcp_message);
}
});

require.register("./components-ixia/device-view-model", function (exports, module) {
module.exports = {
};
});

require.register("./components-ixia/device-collection-view-model", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    emitter = require('component~emitter@1.0.1'),
    $template = domify(require('./components-ixia/device-collection-view-model/templates/index.js')),
    events = require('component~event@0.1.4'),
    DeviceVm = require('./components-ixia/device-view-model').MultiplePortDeviceViewModel;

/**
 * Manages a collection of device view models - used on test configuration pane.
 *
 * @param testConfigVm
 * @param if_multi
 * @constructor
 */
function DeviceCollectionViewModel(testConfigVm, if_multi) {
    var self = this;
    self.testConfigVm = testConfigVm;
    self.testVm = testConfigVm.testVm;
    self.rootVm = testConfigVm.rootVm;

    self.devices = ko.observableArray([]);
    self.cached_view_models = [];

    self.$el =  undefined;

    self.trafficPlayer = null;

    self.strings = {
        "Checking port status ...": window.translate("Checking port status ..."),
        "{name} must have at least 1 client device": window.translate("{name} must have at least 1 client device")
    };

    self.if_multi = false;

    if(if_multi){
        self.if_multi = if_multi;
    }

    self.label = ko.observable(); // e.g. "Rx" - used by child devices

    self.devicekotrigger = ko.observable('');

    self.another_device_available = ko.computed(function() {
        self.devicekotrigger();
        return self.rootVm.availableDevices().length > self.devices().length ;
    });

    self.lineRate = ko.computed(function () {
        var min_rate;

        self.devices().forEach(function (device) {
            if (min_rate === undefined) {
                min_rate = device.device.lineRate();
                return; // Short-circuit
            }

            min_rate = Math.min(min_rate, device.device.lineRate());
        });

        return min_rate;
    });
}

emitter(DeviceCollectionViewModel.prototype);

DeviceCollectionViewModel.prototype.render = function () {
    var self = this,
        $devices = undefined;

    self.$el =  $template.cloneNode(true);
    $devices = self.$el.querySelector('.devices');

    self.bind();

    self.devices().forEach(function (device) {
        $devices.appendChild(device.render());

        device.show_expand_collapse();
        device.show_timing_accuracy();

        if (self.devices().length > 1) {
            device.show_delete();
        }
    });

    return self.$el;
};


DeviceCollectionViewModel.prototype.bind = function () {
    var self = this;

    ko.applyBindings(self, self.$el);

    self.devices.subscribe(self.onDevicesArrayChange.bind(self));
};

/**
 * @param result ValidationResultsViewModel
 * @param targetName context used in validation lightbox. e.g. "Tx ..."
 * @returns ValidationResultsViewModel
 */
DeviceCollectionViewModel.prototype.validate = function (result, targetName) {
    var devices = this.devices(),
        message = '';

    if (!devices.length) {
        message = window.translate("{name} must have at least 1 client device", {
            name: targetName
        });
        result.addCheckResults(message, false, message);
    }

    devices.forEach(function (device) {
        device.validate(result, targetName);
    });

    return result;
};

DeviceCollectionViewModel.prototype.add_device_handler = function () {
    var self = this,
        $devices = self.$el.querySelector('.devices'),
        deviceVm = self.add_device();

    $devices.appendChild(deviceVm.$el); // deviceVm.render() called in .add_device()
}

DeviceCollectionViewModel.prototype.add_device = function (device_data) {
    var self = this,
        deviceVm;

    if(!device_data){
        // Look for an unused device

        var existing_ids = self.devices().map(function (device) { return device.id(); });

        var unused = self.rootVm.availableDevices().filter(function (device) {
            return existing_ids.indexOf(device.id()) === -1;
        });

        if (unused.length === 0) {
            // All devices are already in the list, so don't let them add another
            return; // Short-circuit
        }

        device_data = {
            device: {id: unused[0].id()},
            endpoints: undefined
        };
    }

    if (device_data.device.id in self.cached_view_models){
        // Load from cache
        deviceVm = self.cached_view_models[device_data.device.id];
        deviceVm.restore();
    } else {
        // Create a new view model
        deviceVm = new DeviceVm(this.testConfigVm);
        deviceVm.set_label(this.label());
        deviceVm.set_devices_in_use_observable(this.devices);
        deviceVm.inflate(device_data);
    }

    deviceVm.once('changed:device', self.onDeviceChange.bind(self));
    deviceVm.once('removed', self.onDeviceRemoved.bind(self));

    self.devices.push(deviceVm);

    self.cached_view_models[deviceVm.id()] = deviceVm;

    // Render after .devices() is updated, so
    // MultiplePortDeviceViewModel.is_device_selectable() is evaluated with current list
    deviceVm.render();
    deviceVm.show_expand_collapse();
    deviceVm.show_timing_accuracy();

    if (self.devices().length > 1) {
        self.devices().forEach(function (device) {
            device.show_delete();
        });
    }

    return deviceVm;
};

DeviceCollectionViewModel.prototype.inflate = function (data) {
    var self = this,
        devices;

    data = data || {};
    devices = data.devices || [];

    if (!devices || !devices.length) {
        // Add a default device
        self.add_device();
        return;
    }

    devices.map(function (device_data) {
        self.add_device(device_data);
    });
};

DeviceCollectionViewModel.prototype.getDeviceIds = function () {
    var self = this;

    return self.devices().map(function (item) {
        return item.id();
    });
};

DeviceCollectionViewModel.prototype.setTimingAccuracies = function (accuracies) {
    var self = this;

    self.devices().forEach(function (device) {
        accuracies.some(function (accuracy) {
            // Accuracies should all use source device, so only need to check destination
            if (device.id() === accuracy.destination) {
                accuracy = Math.abs(accuracy.accuracy).toFixed(3);
                device.timingAccuracy(accuracy);
                return true;
            }
        });
    });
};

/**
 * Replace a device view-model with a new one
 * Called when user selects a new device - indirectly triggers .onDevicesArrayChange() via .add_device()
 *
 * @param device DeviceViewModel
 * @param previous MultiplePortDeviceViewModel Note the difference between first parameter's type
 */
DeviceCollectionViewModel.prototype.onDeviceChange = function(device, previous) {
    // Remove from list now, so MultiplePortDeviceViewModel.is_device_selectable is
    // evaluated with a correct list of devices
    this.devices.remove(previous);

    var device_data = {
            device: {id: device.id()},
            endpoints: undefined
        },
        deviceVm = this.add_device(device_data),
        $parent = this.$el.querySelector('.devices');

    $parent.insertBefore(deviceVm.$el, previous.$el);

    previous.off();
    $parent.removeChild(previous.$el);
};

/**
 * @param device MultiplePortDeviceViewModel
 */
DeviceCollectionViewModel.prototype.onDeviceRemoved = function(device) {
    device.off();
    this.devices.remove(device);

    if (this.devices().length === 1) {
        this.devices()[0].hide_delete();
    }

    this.$el.querySelector('.devices').removeChild(device.$el);
};

/**
 * Called when devices are added or deleted
 */
DeviceCollectionViewModel.prototype.onDevicesArrayChange = function(){
    if (this.devicekotrigger() === '') {
        this.devicekotrigger(' ');
    }
    else{
        this.devicekotrigger('');
    }

    this.emit('changed:device', null);
};

DeviceCollectionViewModel.prototype.toFlatObject = function(){
    var self = this;

    var flat_object = {};

    flat_object.devices = [];
    self.devices().forEach(function(device){
        var device_flat = device.toFlatObject();
        if(device_flat){
            flat_object.devices.push(device_flat);
        }
    });

    return flat_object;
};

DeviceCollectionViewModel.prototype.endpoints = function(){
    return this.devices().reduce(function (prev, curr) {
        var endpoints = curr.endpoints();
        curr = prev.concat(endpoints);
        return curr;
    }, []);
};

DeviceCollectionViewModel.prototype.enabled_endpoints = function () {
    return this.endpoints().filter(function (endpoint) {
        return endpoint.enabled();
    });
};

module.exports = DeviceCollectionViewModel;
});

require.register("./components-ixia/device-collection-view-model/templates/index.js", function (exports, module) {
module.exports = '<div class="device-collection">\n    <ul class="devices"></ul>\n    <button class="add-button button dark" type="button" data-bind="click: add_device_handler, enable: another_device_available">+ Add another device</button>\n</div>';
});

require.register("./components-ixia/traffic-player-view-model", function (exports, module) {
/*global ko:true, TestPlaylistViewModel:true, TestTrafficSettingViewModel:true, DatapointViewModel:true, TestSupplementalConfigurationViewModel:true */
var UnicastDelegate = require('./components-ixia/traffic-player-view-model/delegates/unicast.js'),
    MulticastDelegate = require('./components-ixia/traffic-player-view-model/delegates/multicast.js');

/**
 * Manages data for unicast and multicast traffic player views - uses delegates.
 *
 * @param testConfigVm
 * @constructor
 */
function TrafficPlayerViewModel(testConfigVm) {
    var self = this;
    self.delegate = undefined;
    self.testConfigVm = testConfigVm;
    self.testVm = testConfigVm.testVm;
    self.rootVm = testConfigVm.rootVm;
    self.primary = undefined; // Used by additional traffic players that require different settings from default player (e.g. throughput)

    self.source = ko.observable();
    self.destination = ko.observable();
    self.playlist = ko.observable();
    self.sharedConfig = ko.observable();
    self.traffic_setting = ko.observable();
    self.line_rate_subscription = undefined;

    self.timingAccuracy = ko.observable(); // Remove once we move unicast timing accuracies to Rx side so they match multicast

    self.datapoints = ko.observableArray();

    self.currentPlaylist = null;
    self.currentPlaylistEditable = false;
    self.currentPlaylistNumTracks = 0;

    self.supplementalConfiguration = ko.observable();
    self.hasSupplementalConfiguration = ko.observable(false);

    self.isExpanded = ko.observable(true);
    self.playlistIsEdit = ko.observable(false);
    self.showCollapsed = ko.computed(self.computeShowCollapsed.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.show_traffic_tip = ko.computed(function () {
        return self.get_source_endpoints().length > 1 || self.get_destination_endpoints().length > 1;
    });

    self.additionalConfigurationVisible = ko.computed(self.computeAdditionalConfigurationVisible.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.openPlaylistVisible = ko.computed(self.computeOpenPlaylistVisible.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.closePlaylistVisible = ko.computed(self.computeClosePlaylistVisible.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.trackContainerVisible = ko.computed(self.computeTrackContainerVisible.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.applicationTrackContainerVisible = ko.computed(self.computeApplicationTrackContainerVisible.bind(self)).extend({ throttle: self.rootVm.defaultThrottleDuration });
    self.playlist.subscribe(self.onPlaylistChange.bind(self));
    self.strings = {
        "[Custom]": window.translate("[Custom]")
    };
}

module.exports = TrafficPlayerViewModel;

TrafficPlayerViewModel.typesafe = function (that) {
    if (!(that instanceof TrafficPlayerViewModel)) {
        throw 'This method must be executed on a TrafficPlayerViewModel';
    }

    return that;
};

TrafficPlayerViewModel.prototype.is_primary = function (val) {
    if (val === undefined) {
        return this.primary;
    }

    this.primary = Boolean(val);
};

TrafficPlayerViewModel.prototype.inflate = function (data, default_playlist_id, datapoint_ids, is_multicast) {
    var self = TrafficPlayerViewModel.typesafe(this),
        supplementalConfig,
        i,
        datapoint;

    // Delegate unicast-/multicast-specific behavior
    self.delegate = is_multicast ? new MulticastDelegate(this) : new UnicastDelegate(this);
    self.delegate.inflate(data);

    // Traffic setting
    self.traffic_setting(new TestTrafficSettingViewModel(self.testConfigVm, self));
    if (data.traffic_settings && data.traffic_settings.length > 0) {
        self.traffic_setting().inflate(data.traffic_settings[0]);
    }

    self.line_rate_subscription = self.source().lineRate.subscribe(self.changeLineRate.bind(self));

    if (data.supplemental_configuration) {
        supplementalConfig = new TestSupplementalConfigurationViewModel(self.rootVm);
        supplementalConfig.inflate(data.supplemental_configuration);
        self.supplementalConfiguration(supplementalConfig);
        self.hasSupplementalConfiguration(true);
    }


    self.loaded = true;
};

TrafficPlayerViewModel.prototype.changeLineRate = function (rate) {
    if (this.traffic_setting() && this.traffic_setting().lineRateVm.line_speed === rate) {
        // Line rate hasn't actually changed
        return; // Short-circuit
    }

    logger.info('Line rate changed: ' + rate);

    this.traffic_setting().changeLineRate(rate);
    if (this.hasSupplementalConfiguration()) {
        this.supplementalConfiguration().changeLineRate(rate);
    }
};

TrafficPlayerViewModel.prototype.aggregateTraffic = function (trafficTotal) {
    var self = TrafficPlayerViewModel.typesafe(this),
        unit = self.traffic_setting().unit(),
        val = parseFloat(self.traffic_setting().value());

    trafficTotal[unit] = trafficTotal[unit] || 0;
    trafficTotal[unit] += val;
};

TrafficPlayerViewModel.prototype.toFlatObject = function(){
    var self = TrafficPlayerViewModel.typesafe(this);

    var flatTrafficPlayer = {
        playlist: self.playlist().toFlatObject(),
        traffic_settings: new Array(),
        datapoints: new Array()
    };

    var datapoints = self.datapoints();
    for (var i = 0; i < datapoints.length; i++) {
        flatTrafficPlayer.datapoints.push(datapoints[i].toFlatObject());
    }

    flatTrafficPlayer.traffic_settings.push(self.traffic_setting().toFlatObject());

    if (self.hasSupplementalConfiguration()) {
        flatTrafficPlayer.supplemental_configuration = self.supplementalConfiguration().toFlatObject();
    }

    flatTrafficPlayer = self.delegate.toFlatObject(flatTrafficPlayer);

    return flatTrafficPlayer;
};

TrafficPlayerViewModel.prototype.onDeviceChange = function () {
    if (this.line_rate_subscription) {
        this.line_rate_subscription.dispose();
    }
    this.line_rate_subscription = this.source().lineRate.subscribe(this.changeLineRate.bind(this));

    this.testConfigVm.pollDevicesStatus();
    this.testConfigVm.pollTimingAccuracies();
    this.testConfigVm.pollDeviceTimeSyncCapabilities();
    this.testConfigVm.updateConfig();
};

TrafficPlayerViewModel.prototype.onPlaylistChange = function (newValue) {
    var self = TrafficPlayerViewModel.typesafe(this);
    if(self.playlistIsEdit()){
        self.playlistIsEdit(false);

        var playlists = self.testConfigVm.testVm.availablePlaylists();
        for(var i = 0; i < playlists.length; i++){
            if(playlists[i].isEdit())
                playlists[i].isEdit(false);
        }
    }
};

TrafficPlayerViewModel.prototype.setTimingAccuracies = function (accuracies) {
    if (!this.delegate) {
        return; // Short-circuit
    }

    this.delegate.setTimingAccuracies(accuracies);
};

TrafficPlayerViewModel.prototype.launchTimingHelp = function () {
    var self = TrafficPlayerViewModel.typesafe(this);

    util.lightbox.open({
        url : 'html/lightbox_tmpl',
        selector : '#lightbox-timing-help-template',
        cancelSelector: '.cancel-button'
    });
};

TrafficPlayerViewModel.prototype.getPlayerLayer = function () {
    var self = TrafficPlayerViewModel.typesafe(this);

    return self.playlist().getTrackLayer();
};

TrafficPlayerViewModel.prototype.hasHTTPTrack = function () {
    var self = TrafficPlayerViewModel.typesafe(this);

    return self.playlist().hasHTTPTrack();
};

TrafficPlayerViewModel.prototype.computeOpenPlaylistVisible = function () {
    var self = TrafficPlayerViewModel.typesafe(this);

    if (self.playlist() == null) {
        return false;
    }

    return !self.playlist().isEdit() && !self.playlistIsEdit();
};

TrafficPlayerViewModel.prototype.computeClosePlaylistVisible = function () {
    var self = TrafficPlayerViewModel.typesafe(this);

    if (self.playlist() == null) {
        return false;
    }

    return self.playlist().isEdit() && self.playlistIsEdit();
};

TrafficPlayerViewModel.prototype.computeTrackContainerVisible = function () {
    var self = TrafficPlayerViewModel.typesafe(this);

    if (self.playlist() == null) {
        return false;
    }

    return self.playlist().isEdit() && self.playlistIsEdit() && self.getPlayerLayer() < 4;
};

TrafficPlayerViewModel.prototype.computeApplicationTrackContainerVisible = function () {
    var self = TrafficPlayerViewModel.typesafe(this);

    if (self.playlist() == null) {
        return false;
    }

    return self.playlist().isEdit() && self.playlistIsEdit() && self.getPlayerLayer() >= 4;
};

TrafficPlayerViewModel.prototype.computeAdditionalConfigurationVisible = function () {
    var self = TrafficPlayerViewModel.typesafe(this);

    return self.datapoints().length > 0
};

TrafficPlayerViewModel.prototype.computeShowCollapsed = function () {
    var self = TrafficPlayerViewModel.typesafe(this);

    return !self.isExpanded();
};

TrafficPlayerViewModel.prototype.portIdInUse = function (id) {
    var self = TrafficPlayerViewModel.typesafe(this);

    return self.source().selectedPort() == id
        || self.destination().selectedPort() == id;
};

TrafficPlayerViewModel.prototype.usingSameDevice = function () {
    var self = TrafficPlayerViewModel.typesafe(this);

    return self.source().device() == self.destination().device();
};

TrafficPlayerViewModel.prototype.getDeviceIds = function () {
    if (!this.delegate) {
        return [];
    }

    return this.delegate.getDeviceIds();
};

TrafficPlayerViewModel.prototype.getDevicePaths = function () {
    if (this.source() === undefined || this.destination() === undefined) {
        return [];
    }

    var source_ids = this.source().getDeviceIds(),
        destination_ids = this.destination().getDeviceIds(),
        paths = [];

    source_ids.forEach(function (source_id) {
        destination_ids.forEach(function(destination_id) {
            paths.push({
                source: source_id,
                destination: destination_id
            });
        });
    });

    return paths;
};

TrafficPlayerViewModel.prototype.removeTrack = function (playlist, track) {
    var self = TrafficPlayerViewModel.typesafe(this);
    var trackId = track.id();
    var tracks = playlist().tracks();
    for (i = 0; i < tracks.length; i++) {
        if (tracks[i]().id() == trackId) {
            playlist().tracks.splice(i, 1);
        }
    }
    if(playlist().isReadOnly && playlist().name().indexOf(self.strings["[Custom]"]) == -1){
        playlist().name(self.strings["[Custom]"] + " " + playlist().name());
        playlist().isNameChanged = true;
    }
};
TrafficPlayerViewModel.prototype.deleteTrafficPlayer = function (playerId) {
    var self = TrafficPlayerViewModel.typesafe(this),
        id = playerId(),
        newTrafficPlayers = [];

    logger.info('Deleting traffic player ' + id);

    self.testConfigVm.traffic_players().splice(id, 1);

    for (var i = 0; i < self.testConfigVm.traffic_players().length; i++) {
        newTrafficPlayers.push(self.testConfigVm.traffic_players()[i]);
    }

    self.testConfigVm.traffic_players.removeAll();
    for (var i = 0; i < newTrafficPlayers.length; i++) {
        self.testConfigVm.traffic_players.push(newTrafficPlayers[i]);
    }

    logger.info('Deleted traffic player ' + id);
};

TrafficPlayerViewModel.prototype.editPlaylist = function () {
    var self = TrafficPlayerViewModel.typesafe(this);
//    if (self.playlist().editable()) {
//        self.playlistIsEdit(true);
//        self.playlist().isEdit(true);
//        return;
//    }

    var clonedPlaylist = self.playlist().clone(self);
    self.playlist(clonedPlaylist);
    self.playlistIsEdit(true);
    self.playlist().isEdit(true);
};

TrafficPlayerViewModel.prototype.closePlaylist = function () {
    var self = TrafficPlayerViewModel.typesafe(this);
    self.playlistIsEdit(false);
    self.playlist().isEdit(false);
};

/**
 * Performs validation in (left-to-right) reading order
 *
 * @param result ValidationResultsViewModel
 * @param targetName context used in validation lightbox. e.g. "Tx ..."
 * @returns ValidationResultsViewModel
 */
TrafficPlayerViewModel.prototype.validate = function (result, targetName){
    var self = TrafficPlayerViewModel.typesafe(this);
    var isValidSrcDes = true;
    var source = self.source();
    var destination = self.destination();

    if(source != null){
        source.validate(result, translate("{name} {label}", {
            name: targetName,
            label: self.delegate.strings.source
        }));
    }else{
        result.addCheckResults(translate("Test Configuration Error"), false, translate("{name} {label} is missing", {
            name: targetName,
            label: self.delegate.strings.source
        }));
        isValidSrcDes = false;
    }

    if(self.playlist() != null){
//        if(!self.canAcceptPlaylist(self.playlist())){
//            var layers = self.playlist().getTrackLayers();
//            var message = translate('The "{playlistName}" playlist contains tracks with layer(s) {givenLayers}, but this test only supports layer(s): {acceptableLayers}. Please use a different playlist.', {
//                playlistName: self.playlist().name(),
//                givenLayers: layers.join(', '),
//                acceptableLayers: "axon.testcases.spirent.network_stress" === self.testConfigVm.module ? '1, 2' : '1, 2, 3'
//            });
//
//            result.addCheckResults(translate("Test Configuration Error"), false, message);
//        }
        self.playlist().validate(result, targetName);
    }else{
        result.addCheckResults(translate("Test Configuration Error"), false, translate("{name} is missing a Playlist", {
            name: targetName
        }));
    }

    if(self.traffic_setting() != null){
        self.traffic_setting().validate(result, targetName);
    }else{
        result.addCheckResults(translate("Test Configuration Error"), false, translate("{name} is missing its traffic settings", {
            name: targetName
        }));
    }

    var datapoints = self.datapoints();
    if(datapoints.length > 0){
        for(var i = 0; i < datapoints.length; i++)
            datapoints[i].validate(result, targetName);
    }

    if(self.supplementalConfiguration() != null){
        self.supplementalConfiguration().validate(result, targetName);
    }

    // Perform multicast-/unicast-specific validation
    self.delegate.validate(result, targetName);

    if(destination != null){
        destination.validate(result, translate("{name} {label}", {
            name: targetName,
            label: self.delegate.strings.destination
        }));
    }else{
        result.addCheckResults(translate("Test Configuration Error"), false, translate("{name} {label} is missing", {
            name: targetName,
            label: self.delegate.strings.destination
        }));
    }

    // Check if src and des use same device, port, and vlan_id
    this.validate_port_and_vlans(source, destination, result, targetName);

    return result;
};


TrafficPlayerViewModel.prototype.canAcceptPlaylist = function (playlist) {
    return this.delegate.canAcceptPlaylist(playlist);
};




TrafficPlayerViewModel.prototype.canAcceptTrack = function (track) {
    return this.delegate.canAcceptTrack(track);
};

/**
 * @param src MultiplePortDeviceViewModel
 * @param dst {MultiplePortDeviceViewModel|DeviceCollectionViewModel}
 * @param result ValidationResultsViewModel
 * @param targetName context used in validation lightbox. e.g. "Tx ..."
 * @return ValidationResultsViewModel
 */
TrafficPlayerViewModel.prototype.validate_port_and_vlans = function (src, dst, result, targetName) {
    var src_endpoints = src.enabled_endpoints(),
        message;

    dst.enabled_endpoints().some(function (dst_endpoint) {
        return src_endpoints.some(function (src_endpoint) {
            var duplicate = src_endpoint.device.id() === dst_endpoint.device.id()
                && src_endpoint.port() === dst_endpoint.port()
                && src_endpoint.vlan_id() === dst_endpoint.vlan_id();

            if (duplicate) {
                message = window.translate("{name} server and client VLAN ID must be different when choosing same port on same device ({device}, port {port}, VLAN {vlan}).", {
                    name: targetName,
                    device: src_endpoint.device.device.name(),
                    port: src_endpoint.port(),
                    vlan: src_endpoint.vlan_id()
                });

                result.addCheckResults(window.translate("Test Configuration Error"), false, message);
                return true;
            }
        });
    });

    return result;
};

TrafficPlayerViewModel.prototype.get_supported_layers = function () {
    var self = this;

    if(self.testConfigVm && self.testConfigVm.attributes && self.testConfigVm.attributes.supported_layers){
        return self.testConfigVm.attributes.supported_layers;
    }
    else{
        return [2,7];
    }
};

TrafficPlayerViewModel.prototype.get_source_endpoints = function () {
    if (!this.source()) {
        return [];
    }

    return this.source().enabled_endpoints();
};

TrafficPlayerViewModel.prototype.get_destination_endpoints = function () {
    if (!this.destination()) {
        return [];
    }

    return this.destination().enabled_endpoints();
};
});

require.register("./components-ixia/traffic-player-view-model/delegates/unicast.js", function (exports, module) {
var MultiplePortDeviceViewModel = require('./components-ixia/device-view-model').MultiplePortDeviceViewModel;

function UnicastTrafficPlayerDelegate(parent) {
    this.parent = parent;

    this.strings = {
        source: window.translate("Tx"),
        destination: window.translate("Rx")
    };
}

UnicastTrafficPlayerDelegate.prototype.inflate = function (data) {
    var parent = this.parent,
        source_data,
        destination_data,
        source = new MultiplePortDeviceViewModel(parent.testConfigVm),
        destination = new MultiplePortDeviceViewModel(parent.testConfigVm);

    // Source
    if (data.source) {
        source_data = data.source.devices ? data.source.devices[0] : data.source;
    }

    source.trafficPlayer = parent;
    source.label(this.strings.source);
    parent.source(source);
    parent.source().inflate(source_data);
    source.on('changed:device', this.onDeviceChange.bind(this, parent.source));

    // Destination
    if (data.destination) {
        destination_data = data.destination.devices ? data.destination.devices[0] : data.destination;
    }

    destination.trafficPlayer = parent;
    destination.label(this.strings.destination);
    parent.destination(destination);
    parent.destination().inflate(destination_data);
    destination.on('changed:device', this.onDeviceChange.bind(this, parent.destination));

    parent.timingAccuracy = destination.timingAccuracy; // Remove once we move unicast timing accuracies to Rx side so they match multicast
};

UnicastTrafficPlayerDelegate.prototype.toFlatObject = function (obj) {
    obj.source = {
        devices: [this.parent.source().toFlatObject()]
    };

    obj.destination = {
        devices: [this.parent.destination().toFlatObject()]
    };

    return obj;
};
UnicastTrafficPlayerDelegate.prototype.validate = function () {};

UnicastTrafficPlayerDelegate.prototype.canAcceptPlaylist = function (playlist) {
    var self = this,
        supported_layers = self.parent.get_supported_layers();

    return playlist.tracks().every(function (track) {
        var accapted_player_types;
        if (track().attributes && track().attributes.player_types) {
            accapted_player_types = track().attributes.player_types;
        } else {
            accapted_player_types = ['unicast']; //backup plan for old custom player
        }
        return supported_layers.indexOf(track().layer()) > -1 && accapted_player_types.indexOf('unicast') > -1;
    });
};

UnicastTrafficPlayerDelegate.prototype.canAcceptTrack = function (track) {
    return track.attributes.player_types.indexOf('unicast') > -1;
};

UnicastTrafficPlayerDelegate.prototype.getDeviceIds = function () {
    var ids = [],
        source = this.parent.source(),
        destination = this.parent.destination(),
        unique = [];

    if (source) {
        ids = ids.concat(source.getDeviceIds());
    }

    if (destination) {
        ids = ids.concat(destination.getDeviceIds());
    }

    ids.forEach(function (id) {
        if (unique.indexOf(id) === -1) {
            unique.push(id);
        }
    });

    return unique;
};

/**
 * Updates source the same way as DeviceCollectionViewModel.onDeviceChange()
 *
 * @param player_device_observable ko.observable TrafficPlayerViewModel.source or .destination
 * @param device TestDeviceViewModel
 */
UnicastTrafficPlayerDelegate.prototype.onDeviceChange = function (player_device_observable, device) {
    var parent = this.parent,
        view_model = new MultiplePortDeviceViewModel(parent.testConfigVm),
        data = {
            device: device.toFlatObject()
        },
        previous = player_device_observable(),
        $previous = previous.$el,
        $parent = $previous.parentNode;

    view_model.label(previous.label());
    player_device_observable(view_model);
    player_device_observable().inflate(data);

    view_model.once('changed:device', this.onDeviceChange.bind(this, player_device_observable));
    previous.off();

    // Render
    view_model.render();
    if (player_device_observable === parent.destination) {
        view_model.show_timing_accuracy();
    }

    $parent.insertBefore(view_model.$el, $previous);
    $parent.removeChild($previous);

    // Notify parent so port status, etc. is updated
    parent.onDeviceChange();
};

UnicastTrafficPlayerDelegate.prototype.setTimingAccuracies = function (accuracies) {
    var self = this,
        source = self.parent.source(),
        destination = self.parent.destination();

    if (source && destination) {
        accuracies.some(function (accuracy) {
            if (source.id() === accuracy.source && destination.id() === accuracy.destination) {
                accuracy = Math.abs(accuracy.accuracy).toFixed(3);
                destination.timingAccuracy(accuracy);
                return true;
            }
        });
    }
};

module.exports = UnicastTrafficPlayerDelegate;
});

require.register("./components-ixia/traffic-player-view-model/delegates/multicast.js", function (exports, module) {
var MultiplePortDeviceViewModel = require('./components-ixia/device-view-model').MultiplePortDeviceViewModel,
    DeviceCollectionViewModel = require('./components-ixia/device-collection-view-model');

function MulticastTrafficPlayerDelegate(parent) {
    this.parent = parent;
    this.multicast_settings = undefined;
    this.strings = {
        source: window.translate("server"),
        destination: window.translate("client(s)")
    };
}

MulticastTrafficPlayerDelegate.prototype.inflate = function (data) {
    var parent = this.parent,
        source_data,
        source = new MultiplePortDeviceViewModel(parent.testConfigVm),
        destination = new DeviceCollectionViewModel(parent.testConfigVm, true);

    if (data.source) {
        source_data = data.source.devices ? data.source.devices[0] : data.source;
    }

    /**
     * @param device_vm {MultiplePortDeviceViewModel|DeviceCollectionViewModel}
     */
    function subscribe_parent(device_vm) {
        if (!device_vm) {
            return; // Short-circuit
        }

        device_vm.on('changed:device', parent.onDeviceChange.bind(parent, parent.destination));
    }

    // Source
    source.trafficPlayer = parent;
    source.label(this.strings.source);
    parent.source(source);
    parent.source().inflate(source_data);
    source.on('changed:device', this.onDeviceChange.bind(this, parent.source));

    // Destination
    destination.label(this.strings.destination);
    destination.trafficPlayer = parent;
    parent.destination(destination);
    parent.destination().inflate(data.destination);
    parent.destination.subscribe(subscribe_parent);
    subscribe_parent(destination);
};

MulticastTrafficPlayerDelegate.prototype.toFlatObject = function (obj) {
    obj.source = {
        devices: [this.parent.source().toFlatObject()]
    };

    obj.destination = this.parent.destination().toFlatObject();

    obj.supplemental_configuration = obj.supplemental_configuration || {};
    obj.supplemental_configuration.multicast_settings = this.multicast_settings.toFlatObject();

    return obj;
};

/**
 * @param result ValidationResultsViewModel
 * @param targetName context used in validation lightbox. e.g. "Tx ..."
 * @returns ValidationResultsViewModel
 */
MulticastTrafficPlayerDelegate.prototype.validate = function (result, targetName) {
    var settingsName = window.translate('{name} multicast group settings', {
        name: targetName
    });
    this.multicast_settings.validate(result, settingsName);

    return result;
};

MulticastTrafficPlayerDelegate.prototype.canAcceptPlaylist = function (playlist) {
    var self = this,
        supported_layers = self.parent.get_supported_layers();

    return playlist.tracks().every(function (track) {
        var accapted_player_types;
        if (track().attributes && track().attributes.player_types) {
            accapted_player_types = track().attributes.player_types;
        } else {
            accapted_player_types = ['unicast']; //backup plan for old custom player
        }
        return supported_layers.indexOf(track().layer()) > -1 && accapted_player_types.indexOf('multicast') > -1;
    });
};

MulticastTrafficPlayerDelegate.prototype.canAcceptTrack = function (track) {
    return track.attributes.player_types.indexOf('multicast') > -1;
};

MulticastTrafficPlayerDelegate.prototype.getDeviceIds = function () {
    var ids = [],
        source = this.parent.source(),
        destination = this.parent.destination(),
        unique = [];

    if (source) {
        ids = ids.concat(source.getDeviceIds());
    }

    if (destination) {
        ids = ids.concat(destination.getDeviceIds());
    }

    ids.forEach(function (id) {
        if (unique.indexOf(id) === -1) {
            unique.push(id);
        }
    });

    return unique;
};

/**
 * Updates source the same way as DeviceCollectionViewModel.onDeviceChange()
 *
 * @param player_device_observable ko.observable TrafficPlayerViewModel.source
 * @param device TestDeviceViewModel
 */
MulticastTrafficPlayerDelegate.prototype.onDeviceChange = function (player_device_observable, device) {
    var parent = this.parent,
        view_model = new MultiplePortDeviceViewModel(parent.testConfigVm),
        data = {
            device: device.toFlatObject()
        },
        previous = player_device_observable(),
        $previous = previous.$el,
        $parent = $previous.parentNode;

    view_model.label(this.strings.source);
    player_device_observable(view_model);
    player_device_observable().inflate(data);

    view_model.once('changed:device', this.onDeviceChange.bind(this, player_device_observable));
    previous.off();

    // Render
    view_model.render();

    $parent.insertBefore(view_model.$el, $previous);
    $parent.removeChild($previous);

    // Notify parent so port status, etc. is updated
    parent.onDeviceChange();
};

MulticastTrafficPlayerDelegate.prototype.setTimingAccuracies = function (accuracies) {
    var source = this.parent.source(),
        destination = this.parent.destination();

    if (!source || !destination) {
        return; // Short-circuit
    }

    // Only include accuracies that use source device
    accuracies = accuracies.filter(function (accuracy) {
        return accuracy.source === source.id();
    });

    destination.setTimingAccuracies(accuracies);
};

module.exports = MulticastTrafficPlayerDelegate;
});

require.register("./components-ixia/test-device-view-model", function (exports, module) {
/**
 * CAUTION: This module's name is misleading - it's used as a model not a view model
 */

var is_host = require('johntron~is-host@9f441b6f34440e715b31f06157611292e67565a5');

/**
 * Represents a device (as a copy) in the traffic player
 *
 * @param rootVm IxiaCRViewModel
 * @constructor
 */
function TestDeviceViewModel (rootVm) {
    var self = this;
    self.rootVm = rootVm;

    self.id = ko.observable();
    self.name = ko.observable();
    self.description = ko.observable();
    self.device_type_id = ko.observable();
    self.host = ko.observable();
    self.link = ko.observable();
    self.displayNameCssId = ko.observable();
    self.username = ko.observable();
    self.password = ko.observable();
    self.validationResult = ko.observable();

    self.active = ko.observable(true);

    self.name.subscribe(function () {
        var realName = self.name();
        realName = realName.replace(/ /g,'');
        self.displayNameCssId(realName);
    });
}

module.exports = TestDeviceViewModel;

TestDeviceViewModel.typesafe = function (that) {
    if (!(that instanceof TestDeviceViewModel)) {
        throw 'This method must be executed on a TestDeviceViewModel';
    }

    return that;
};

TestDeviceViewModel.prototype.matchesSearch = function (searchString) {
    var self = TestDeviceViewModel.typesafe(this);

    var searchTerms = searchString.split(' ');

    if (searchTerms.length == 0) {
        return true;
    }

    var name = self.name().toUpperCase();

    if(name == "LOCAL CHASSIS"){
        return true;
    }

    var host = self.host().toUpperCase();
    var customer ='';
    var location ='';
    if (!self.location() == '' || !self.location() == null) {
        location = self.location().toUpperCase();
  }
    if (!self.customer() == '' || !self.customer() == null) {
        customer = self.customer().toUpperCase();
  }

    for (var i = 0; i < searchTerms.length; i++) {
        if (searchTerms[i] == '' || searchTerms[i] == null) {
            continue;
        }

        if (name.indexOf(searchTerms[i].toUpperCase()) == -1
            && host.indexOf(searchTerms[i].toUpperCase()) == -1
            && customer.indexOf(searchTerms[i].toUpperCase()) == -1
            && location.indexOf(searchTerms[i].toUpperCase()) == -1) {
            return false;
        }
    }

    return true;
};

TestDeviceViewModel.prototype.inflate = function (data) {
    var self = TestDeviceViewModel.typesafe(this);

    self.id(data.id);
    self.name(data.name);
    self.description(data.description);
    self.host(data.host);
    self.link(data.link);
    self.device_type_id(data.device_type_id);
    self.username(data.username);
    self.password(data.password);
    self.active(data.active);
};

TestDeviceViewModel.prototype.toFlatObject = function () {
    var self = TestDeviceViewModel.typesafe(this);
    var flatDevice = {
        id: self.id(),
        name: self.name(),
        description: self.description,
        device_type_id: self.device_type_id(),
        host: self.host(),
        link: self.link(),
        username: self.username(),
        password: self.password(),
        active: self.active()
    };

    return flatDevice;
};

TestDeviceViewModel.prototype.openSaveModal = function () {
    var self = TestDeviceViewModel.typesafe(this);

    util.lightbox.open({
        url : 'html/lightbox_tmpl',
        selector : '#lightbox-save-device-template',
        cancelSelector: '.cancel-button',
        onOpenComplete: function(){
            self.startState = self.toFlatObject();
            ko.applyBindings(self, document.getElementById('lightbox-save-device'));
        },
        onClose: function(){
            self.inflate(self.startState);
        }
    });
};

TestDeviceViewModel.prototype.validate = function (result, targetName) {
    var self = TestDeviceViewModel.typesafe(this),
        errors = [];

    if(util.isNullOrEmpty(self.name())){
        errors.push(translate('name'));
    }
    if(util.isNullOrEmpty(self.host())){
        errors.push(translate('host'));
    }else{
        if(!is_host.validate(self.host())){
            result.addCheckResults(translate("Device Settings"), false, translate('{host} is not a valid hostname, IPv4, or IPv6 address', {
                host: self.host()
            }));
        }
    }

    if(util.isNullOrEmpty(self.username())){
        errors.push(translate('username'));
    }

    if(util.isNullOrEmpty(self.password())){
        errors.push(translate('password'));
    }

    if(errors.length > 0) {
        result.addCheckResults(translate("Device Settings"), false, translate('{name} is missing configuration for: {errors}', {
            name: targetName ? targetName + translate(" device"): translate("Device "),
            errors: errors.join(', ')
        }));
    }


    self.rootVm.availableDevices().forEach(function(device) {
        if (self.host() === device.host() && self.id() !== device.id()) {
            result.addCheckResults(translate("Device Settings"), false, translate('A device {name} already exists for {host}', {
                name: device.name(),
                host: device.host()
            }));
        }
    });
};

TestDeviceViewModel.prototype.clone = function (source) {
    var destination = new TestDeviceViewModel(this.rootVm),
        cloned_properties = [
        ],
        cloned_observable_properties = [
            'id',
            'name',
            'description',
            'device_type_id',
            'host',
            'link',
            'username',
            'password'
        ];

    source = source || this;

    cloned_properties.forEach(function(property) {
        destination[property] = source[property];
    });

    cloned_observable_properties.forEach(function(observable) {
        destination[observable](source[observable]());
    });

    return destination;
};

TestDeviceViewModel.prototype.save = function () {
    var self = TestDeviceViewModel.typesafe(this),
        previous = self.clone(),
        validationResult,
        foundExisting,
        show_error = function(errorData){
            util.lightbox.close();
            util.lightbox.openError(errorData.messages[0].header, errorData.messages[0].content);
        };

    // Prevent duplicates
    foundExisting = ko.utils.arrayFirst(self.rootVm.availableDevices(), function (item) {
        return self.link() == item.link();
    });
    if (foundExisting && foundExisting != self) {
        show_error("Saving device failed. Perhaps this link already exists?");
    }

    util.lightbox.close();
    var workingVm = new LightboxWorkingViewModel(translate('Save'), translate('Saving...'));
    util.lightbox.working(workingVm);
    $.ajax({
        type: util.getRequestMethod('save_device'),
        url: util.getConfigSetting('save_device'),
        data: util.formatRequestData('save_device', self.toFlatObject()),
        dataType: 'json',
        success: function (data, textStatus, jqXhr) {
            if (data.result !== "SUCCESS" || undefined === data.items || undefined === data.items[0] || undefined === data.items[0].id) {
                show_error(data);
                self.name(previous.name());
                logger.error({message: 'Failed to save device', data: data, textStatus: textStatus});
                return;
            }

            self.id(data.items[0].id);

            foundExisting = ko.utils.arrayFirst(self.rootVm.availableDevices(), function (item) {
                return self.name() == item.name();
            });
            var devices = self.rootVm.availableDevices();
            if (foundExisting === null) {
                devices.push(self);
                devices = util.sort_devices(devices);
                self.rootVm.availableDevices(devices);
            } else {
                self.rootVm.availableDevices.remove(foundExisting);
                devices = self.rootVm.availableDevices();
                devices.push(self);
                devices = util.sort_devices(devices);
                self.rootVm.availableDevices(devices);
            }

            if (data.messages[0].header.toUpperCase() === "WARNING") {
                // Show user a warning
                show_error(data);
            } else {
                util.lightbox.close();
            }
        },
        error: function (jqXhr, textStatus, errorThrown) {
            self.name(previous.name());
            workingVm.status('error');
            logger.error(errorThrown);
        }
    });
};

TestDeviceViewModel.prototype.deleteDevice = function(){
	var self = TestDeviceViewModel.typesafe(this);

	util.lightbox.close();

	var workingVm = new LightboxWorkingViewModel(translate('Delete'), translate('Deleting...'));
    util.lightbox.working(workingVm);
	var id = self.id();

	var payload = {
		id : id
	};

	$.ajax({
		type : util.getRequestMethod('delete_device'),
		url : util.getConfigSetting('delete_device'),
		data : JSON.stringify(payload),
		dataType : "json",
		success: function (data, textStatus, jqXhr) {
			var message = data.messages[0];
			if(!message.is_error && message.header == "Success"){
                self.rootVm.availableDevices.remove(function(item) {
                    return item.id() === payload.id;
                })
                workingVm.status("success");
			}else{
				workingVm.status("error");
				workingVm.close(util.lightbox.close.bind(util.lightbox));
			}
        },
		error: function (jqXhr, textStatus, errorThrown) {
            workingVm.status('error');
        }
	});
};

});

require.register("./components-ixia/line-rate-message-view-model", function (exports, module) {
/*global ko:true */

/**
 * Used to show a clickable icon informing the user Axon may be unstable when
 * bandwidth is near line rate of Tx port
 */
function LineRateMessageViewModel() {
    this.source = undefined;
    this.line_speed = undefined;
    this.bandwidth = undefined;
    this.strings = {
        "Running a test at speeds near line-rate can result in unexpected or errant latency in the test results": window.translate('Running a test at speeds near line-rate can result in unexpected or errant latency in the test results. To learn more about what causes this, read <a href="https://www.ixiacom.com/support/solutions/articles/1000060929-line-rate" target="_blank">line rate latency</a>.')
    };
    this.show_icon = ko.observable(false);
    this.show_message = ko.observable(false);
    this.message = this.strings["Running a test at speeds near line-rate can result in unexpected or errant latency in the test results"];
}

LineRateMessageViewModel.prototype.update = function () {
    var max_stable_line_rate;

    if (this.line_speed && this.bandwidth) {
        max_stable_line_rate = this.line_speed * 0.995; // 99.5% of line rate
        if (this.bandwidth >= max_stable_line_rate) {
            this.show_icon(true);
            return; // Short-circuit
        }
    }

    // Hide icon and message by default
    this.show_icon(false);
    this.show_message(false);
};

/**
 * Event handler for showing/hiding line rate message tooltip
 *
 * @param data TestSupplementalConfigurationFieldViewModel|TestTrafficSettingViewModel
 * @param e MouseEvent
 * @returns {boolean}
 */
LineRateMessageViewModel.prototype.toggle = function (data, e) {
    var self = data.lineRateVm;

    if (e.target.tagName === 'A') {
        // Allow hyperlinks to be followed
        return true;
    }

    self.show_message(!self.show_message());
};

module.exports = LineRateMessageViewModel;

});

require.register("./components-ixia/info-pane", function (exports, module) {
var emitter = require('component~emitter@1.0.1'),
    util = require('./components-ixia/utility-functions'),
    classes = require('component~classes@1.2.3'),
    event = require('component~event@0.1.4'),
    Poller = require('./components-ixia/async-poller'),
    domify = require('component~domify@1.3.1'),
    template = domify(require('./components-ixia/info-pane/template.html')),
    moment = require('johntron~moment-timezone@0f4b9df99d9f6212c2036f5ae6f74b240f289381');

function InfoPane($parent, ixiaCRVm) {
    this.$parent = $parent;
    this.$el = template.cloneNode(true);
    this.reservation_status = {reserved: false};
    this.reservation_poller = new Poller(this.get_reservation_status.bind(this));
    this.rootVm  = ixiaCRVm;
    this.bind_diskmanagement();
}

emitter(InfoPane.prototype);

InfoPane.prototype.render = function () {
    var reservation = this.reservation_status,
        strings = {
            user: reservation.reserved_by,
            from: reservation.reserved_addr,
            since: moment.tz(reservation.reserved_since, 'UTC').format('LLL')
        },
        self = this,
        space_limit = 5e+9,
        show = false;

    if (!this.$parent.contains(this.$el)) {
        this.$parent.appendChild(this.$el);
    }

    // Remove old messages
    while (this.$el.firstChild) {
        this.$el.removeChild(this.$el.firstChild);
    }

    if (reservation.reserved) {
        if (reservation.is_reserved_by_me === true) {
            // Currently running a test
            var message = 'A test is currently running';
            var $msg = this.add_message(message);
            classes($msg).add('running');
        } else {
            // Another Axon is running a test
            var message = window.translate('This Axon is currently reserved by {user} from {from} since {since}.', strings);
            var $msg = this.add_message(message);
            classes($msg).add('reserved');
        }
        show = true;
    }

    if (self.rootVm.availableDiskSpace() !== undefined && self.rootVm.availableDiskSpace() <= space_limit) {
        self.show_disk_warning();
        show = true;
    }

    if (show) {
        self.show();
    } else {
        self.hide();
    }
};

InfoPane.prototype.add_message = function (str) {
    var $message = document.createElement('div');
    classes($message).add('message');
    $message.innerHTML = str;
    this.$el.appendChild($message);
    return $message;
};

InfoPane.prototype.poll_reservation_status = function () {
    this.reservation_poller.poll();
};

InfoPane.prototype.get_reservation_status = function (callback) {
    callback = callback || function () {};

    var self = this;

    function handle_response(data, error) {
        return

        if (error) {
            util.lightbox.openError(window.translate('Error'), window.translate('Unable to get reservation status.'));
            window.logger.error(error);
            self.emit('update:error', error);
            return callback(error);
        }

        self.reservation_status = data.reserved_remotely;
        self.reservation_status.reserved = self.reservation_status.reserved || false;

        self.emit('update:complete', self.reservation_status);

        if (self.reservation_status.reserved) {
            // Continue
            return callback(null, self.reservation_status);
        }

        self.reservation_poller.stop();
    }

    util.get_chassis_reservationa_status(handle_response);
};

InfoPane.prototype.bind_diskmanagement = function () {
    var self = this;

    self.rootVm.availableDiskSpace.subscribe(function (newVal) {
        self.emit('update:complete', newVal);
    });
};

InfoPane.prototype.show_disk_warning = function () {
    // disk is almost full
    var self = this,
        msg = window.translate('This Axon\'s disk space is almost full. <a href="#">Manage disk usage</a>'),
        $msg = this.add_message(msg);

    classes($msg).add('diskfull');

    function select_disk_management() {
        self.rootVm.vmAdministration.selectTab('disk');
    }

    function goto_disk_management(e) {
        e.preventDefault();
        self.rootVm.selectTab('administration', select_disk_management);
    }

    event.bind($msg.querySelector('a'), 'click', goto_disk_management);
};

InfoPane.prototype.hide = function () {
    classes(this.$el).add('collapsed');
};

InfoPane.prototype.show = function () {
    classes(this.$el).remove('collapsed');
};


module.exports = InfoPane;
});

require.define("./components-ixia/info-pane/template.html", "<div class=\"info-pane collapsed\"></div>");

require.register("./components-ixia/disk-management", function (exports, module) {
var domify = require('component~domify@1.3.1'),
    $template = domify(require('./components-ixia/disk-management/template.html')),
    classes = require('component~classes@1.2.3'),
    request = require('johntron~superagent@cbe473394b773f764bafb0aec075a285fd6ea026'),
    no_cache = require('johntron~superagent-no-cache@e81c9b82be613a9e418045bdce4699f72c804e7a'),
    humanize = require('houzhenyu1117~humanize@component'),
    Visualization = require('./components-ixia/disk-management/visualization.js'),
    lightbox = window.util.lightbox;

function DiskManagementViewModel() {
    this.$el = $template.cloneNode(true);
    this.rootVm = null;
    this.updating = ko.observable(0);

    this.space = {
        system: ko.observable(),
        backups: ko.observable(),
        diags: ko.observable(),
        captures: ko.observable(),
        free: ko.observable(),
        total: ko.observable(100)
    };

    this.visualization = new Visualization(this.$el.querySelector('.visualization'), this.space);
    this.colors = [];
    this.computed_container = {};
    this.chart_total_width = 600;
    this.strings = {
        "Delete backups confirm" : window.translate("This operation permanently deletes all backups."),
        "Delete captures confirm" : window.translate("This operation permanently deletes all captures."),
        "Delete diags confirm" : window.translate("This operation permanently deletes all diagnostic bundles.")
    };
}

DiskManagementViewModel.factory = function(rootVm) {
    var view = new DiskManagementViewModel();
    view.rootVm = rootVm;
    return view;
};

DiskManagementViewModel.prototype.render = function() {
    var self = this;

    this.visualization.render();
    self.bind();
    return this.$el;
};

DiskManagementViewModel.prototype.bind = function() {
    var self = this;

    ko.applyBindings(self, self.$el);
};

DiskManagementViewModel.prototype.inflate = function(data) {
    if(!data || !data.vm || !data.vm.usage || !data.vm.free) {
        return; // short-circuit
    }

    var self = this,
        system_space = 0,
        total_space = 0,
        user_content = ['diags', 'captures', 'backups'];

    Object.keys(data.vm.usage).forEach(function (key) {
        if (user_content.indexOf(key) !== -1) {
            self.space[key](data.vm.usage[key]);
        } else {
            system_space += data.vm.usage[key];
        }
        total_space += data.vm.usage[key];
    });

    total_space += data.vm.free;

    self.space.system(system_space);
    self.space.total(total_space);
    self.space.free(data.vm.free);

    self.visualization.inflate(self.space);
    self.colors = self.visualization.colors();

    if (self.rootVm) {
        self.rootVm.availableDiskSpace(data.vm.free);
    }
};

DiskManagementViewModel.prototype.update = function (done) {
    done = done || function () {};

    var self = this;

    self.updating(self.updating() + 1);

    request.get('/ixia/get_disk_info')
        .use(no_cache)
        .end(function (error, response) {
            var data;
            self.updating(self.updating() - 1);

            if (error || !response.ok || response.body.result === 'FAILURE') {
                return done(error || response.error.message || response.response.body.messages);
            }

            data = response.body;

            self.inflate(data);
            done();
        });
}

DiskManagementViewModel.prototype.get_chart_width = function(name) {
    var self = this;

    if(!('get_chart_width_' + name in self.computed_container)){
        self.computed_container['get_chart_width_' + name] = ko.computed(function () {
            return Math.ceil((self.space[name]()/self.space.total()) * self.chart_total_width) + 'px';
        });
    }

    return self.computed_container['get_chart_width_' + name];
}

DiskManagementViewModel.prototype.get_filesize = function(name) {
    var self = this;

    if(!('get_filesize_' + name in self.computed_container)){
        self.computed_container['get_filesize_' + name] = ko.computed(function () {
            return humanize.filesize(self.space[name]());
        });
    }

    return self.computed_container['get_filesize_' + name];
}

DiskManagementViewModel.prototype.get_percentage = function(name) {
    var self = this;

    if(!('get_percentage_' + name in self.computed_container)){
        self.computed_container['get_percentage_' + name] = ko.computed(function () {
            return (Math.floor((self.space[name]()/self.space.total()) * 10000) / 100) + '%'
        });
    }

    return self.computed_container['get_percentage_' + name];
}

DiskManagementViewModel.prototype.go_to_recorder = function() {
    var self = this;
    self.rootVm.selectedTab('recorder');
}

DiskManagementViewModel.prototype.go_to_backup = function() {
    var self = this;
    self.rootVm.vmAdministration.selectedTab('system backup restore');
}

DiskManagementViewModel.prototype.delete_all_backups = function() {
    var self = this,
        confirm_action = function() {
            self.rootVm.vmAdministration.deleteAllSystemBackups(self.update.bind(self));
        };

    lightbox.confirmation_dialog(self,this.strings["Delete backups confirm"], confirm_action);
}

DiskManagementViewModel.prototype.delete_all_captures = function() {
    var self = this,
        confirm_action = function() {
            self.updating(self.updating() + 1);
            request.del('/ixia/traffic-recorder/captures')
                .use(no_cache)
                .end(function (error, response) {
                    self.updating(self.updating() - 1);
                    self.update()
                });
        };

    lightbox.confirmation_dialog(self,this.strings["Delete captures confirm"], confirm_action);
}

DiskManagementViewModel.prototype.delete_all_diags = function() {
    var self = this,
        confirm_action = function() {
            self.updating(self.updating() + 1);
            request.del('/ixia/delete_all_diags')
                .use(no_cache)
                .end(function (error, response) {
                    self.updating(self.updating() - 1);
                    self.update()
                });
        };

    lightbox.confirmation_dialog(self,this.strings["Delete diags confirm"], confirm_action);
}

DiskManagementViewModel.prototype.show = function() {
    classes(this.$el).remove('hidden');
};

DiskManagementViewModel.prototype.hide = function() {
    classes(this.$el).add('hidden');
};

module.exports = DiskManagementViewModel;
});

require.register("./components-ixia/disk-management/visualization.js", function (exports, module) {
var classes = require('component~classes@1.2.3'),
    slicer = require('johntron~color-slicer@66cbde8b409f975015b69d4ebc5a2b65ea8461f0');

function get_scale_x(domain_max, range_max) {
    return function scale_x(value) {
        return value * range_max / domain_max;
    };
}

function DiskManagementVisualization($el, data) {
    this.$el = $el;
    classes(this.$el).add('visualization');
    this.data = {};
    this.total = 0;
    this.scale_x = function () {};
    this.inflate(data);
}

DiskManagementVisualization.prototype.inflate = function (data) {
    this.data = data;
    this.total = 0;
    Object.keys(data).forEach(function (group) {
        if (group === 'total') {
            return; // short-circuit
        }
        this.total += data[group]();
    }, this);
};

DiskManagementVisualization.prototype.colors = function () {
    var total = Object.keys(this.data).length - 1; // Ignore 'totals' attribute
    return slicer.getColors(total, 20, {bright: true});
};

DiskManagementVisualization.prototype.render = function () {
    var width = this.$el.clientWidth,
        scale_x = get_scale_x(this.total, width),
        colors = this.colors();

    // Remove old elements
    while (this.$el.firstChild) {
        this.$el.removeChild(this.$el.firstChild);
    }

    Object.keys(this.data).forEach(function (group, i) {
        if (group === 'total') {
            return; // short-circuit
        }

        var val = this.data[group](),
            $el = document.createElement('div');

        $el.style.width = scale_x(val) + 'px';
        $el.style.backgroundColor = colors[i];
        classes($el).add(group);
        this.$el.appendChild($el);
    }, this);
    return this.$el;
};

module.exports = DiskManagementVisualization;
});

require.define("./components-ixia/disk-management/template.html", "<div class=\"disk main\">\n    <div>\n        <h3>Disk Management <span class=\"updating\" data-bind=\"visible: updating() > 0\"></span></h3>\n    </div>\n    <div class=\"single-pane no-padding usage\">\n        <h4>Usage</h4>\n        <ul>\n            <li class=\"visualization\">&nbsp;</li>\n            <li><label><span class=\"legend\" data-bind=\"style: {backgroundColor: colors[0]}\"></span> System</label><span data-bind=\"text: get_filesize('system')\"></span> <span data-bind=\"text: '(' + get_percentage('system')() + ')'\"></span></li>\n            <li><label><span class=\"legend\" data-bind=\"style: {backgroundColor: colors[1]}\"></span> Backup</label><span data-bind=\"text: get_filesize('backups')\"></span> <span data-bind=\"text: '(' + get_percentage('backups')() + ')'\"></span> <a href=\"\" data-bind=\"click: delete_all_backups\">Delete all</a> | <a href=\"\" data-bind=\"click: go_to_backup\">View</a></li>\n            <li><label><span class=\"legend\" data-bind=\"style: {backgroundColor: colors[2]}\"></span> Diagnostic</label><span data-bind=\"text: get_filesize('diags')\"></span> <span data-bind=\"text: '(' + get_percentage('diags')() + ')'\"></span> <a href=\"\" data-bind=\"click: delete_all_diags\">Delete all</a></li>\n            <li><label><span class=\"legend\" data-bind=\"style: {backgroundColor: colors[3]}\"></span> Capture</label><span data-bind=\"text: get_filesize('captures')\"></span> <span data-bind=\"text: '(' + get_percentage('captures')() + ')'\"></span> <a href=\"\" data-bind=\"click: delete_all_captures\">Delete all</a> |<a href=\"\" data-bind=\"click: go_to_recorder\">View</a></li>\n            <li><label><span class=\"legend\" data-bind=\"style: {backgroundColor: colors[4]}\"></span> Free</label><span data-bind=\"text: get_filesize('free')\"></span> <span data-bind=\"text: '(' + get_percentage('free')() + ')'\"></span></li>\n        </ul>\n    </div>\n</div>");

require.register("./components-ixia/boot", function (exports, module) {
/*global $: true, LightboxWorkingViewModel: true */

var Logger = require('./components-ixia/logger'),
    log_ajax = require('./components-ixia/logger-jquery-ajax'),
    AssetManager = require('./components-ixia/asset-manager'),
    Translator = require('./components-ixia/translator'),
    DictionaryProvider = require('./components-ixia/dictionary-provider'),
    Util = require('./components-ixia/utility-functions'),
    InfoPane = require('./components-ixia/info-pane'),
    promise = require('then~promise@d0bab8d4e8a704bb71d83d48eabebacc360651c7'),
    manager = new AssetManager(),
    lightbox = Util.lightbox,
    event = require('component~event@0.1.4'),
    classes = require('component~classes@1.2.3');


function translatorInitializer(language) {
    return promise(function getTranslator(resolve) {
        DictionaryProvider(language, function (dict) {
            window.translate = new Translator(dict);
            resolve();
        });
    });
}

function openLoadingLightbox() {
    return promise(function (resolve) {
        manager.queueDownload("static/images/spinner.gif");
        manager.downloadAll(function () {
            lightbox.open({
                url: 'html/lightbox_tmpl',
                selector: '#lightbox-working-template',
                isModal: true,
                onOpenComplete: resolve
            });
        });
    });
}

function loadingLightboxOpenComplete() {
    return promise(function (resolve) {
        var model = new LightboxWorkingViewModel(translate("Loading"), translate('Loading app...'), 10);
        lightbox.working(model);
        resolve();
    });
}

function getImageUrls() {
    return promise(function (resolve, reject) {
        $.ajax({
            type: "get",
            url: "/ixia/get_images",
            dataType: 'json',
            success: resolve,
            error: function (jqXhr, textStatus, errorThrown) {
                reject(errorThrown);
            }
        });
    });
}

function queueImages(build_number, data) {
    return promise(function (resolve) {
        var model = new LightboxWorkingViewModel(translate("Loading"), translate('Loading images...'), 20),
            imageFiles = data.files,
            i,
            x,
            subfolderImages;

        lightbox.working(model);
        for (i = 0; i < imageFiles.length; i++) {
            if (imageFiles[i].directory === true) {
                subfolderImages = imageFiles[i].children;
                for (x = 0; x < subfolderImages.length; x += 1) {
                    manager.queueDownload("static/images/" + imageFiles[i].name + "/" + subfolderImages[x] + '?' + build_number);
                }
            } else {
                manager.queueDownload("static/images/" + imageFiles[i].name + '?' + build_number);
            }
        }
        manager.downloadAll(resolve);
    });
}

function loadGlobals() {
    // Load modules that will be available to plain-JS scripts (non-component)
    window.DeviceModel = require('./components-ixia/device-model');
    window.IxiaViewModel = require('./components-ixia/ixia-view-model');
    window.TestHistoryViewModel = require('./components-ixia/test-history-view-model');
    window.RecentNewsViewModel = require('./components-ixia/recent-news-view-model');
    window.DashboardViewModel = require('./components-ixia/dashboard-view-model');
    window.TestViewModel = require('./components-ixia/test-view-model');
    window.TestTemplateViewModel = require('./components-ixia/test-template-view-model');
    window.PortViewModel = require('./components-ixia/port-view-model');
    window.ConfiguredTestViewModel = require('./components-ixia/configured-test-view-model');
    window.AdministrationViewModel = require('./components-ixia/administration-view-model');
    window.TrafficPlayerViewModel = require('./components-ixia/traffic-player-view-model');
    window.TestDeviceViewModel = require('./components-ixia/test-device-view-model');
    window.LineRateMessageViewModel = require('./components-ixia/line-rate-message-view-model');
    window.TestResultsFinalTableViewModel = require('./components-ixia/test-results-final-table-view-model');
    window.InfoPane = require('./components-ixia/info-pane');
}

function loadRootViewModel(settings) {
    return promise(function (resolve) {
        var model = new LightboxWorkingViewModel(translate("Loading"), translate('Loading data...'), 30);
        lightbox.working(model);
        var root_vm = new IxiaViewModel(settings);
        root_vm.setUser('Administrator');
        root_vm.init().done(resolve.bind(this, root_vm)).fail(function(e) { window.logger.error(e + ' trace: ' + e.stack); });
        ko.applyBindings(root_vm, document.getElementById('main'));
        window.ixiaCRVm = root_vm;
    });
}

function closeLoadingLightbox(ixiaCRVm) {
    return promise(function (resolve) {
        var model = new LightboxWorkingViewModel(translate("Loading"), translate('App loaded.'), 100);
        lightbox.working(model);
        setTimeout(function () {
            Util.lightbox.close();
        }, 166); // 1/10 of a second delay.
        resolve(ixiaCRVm);
    });
}

function bindScheduler(ixiaCRVm) {
    return promise(function(resolve) {
        try {
            ixiaCRVm.selectedTab.subscribe(function(name) {
            });
            resolve(ixiaCRVm);
        } catch(e) { window.logger.error( e + ' trace: ' + e.stack().toString()); }
    });
}

function loadInfoPane(ixiaCRVm) {
    return promise(function (resolve) {
        var $parent = document.querySelector('#header'),
            pane = new InfoPane($parent, ixiaCRVm);

        pane.render();
        pane.poll_reservation_status();
        pane.on('update:complete', pane.render.bind(pane));
        return resolve(ixiaCRVm);
    });
}

module.exports = function (settings, callback) {
    var level = settings.log_level.toLowerCase(),
        logger,
        load;

    window.appHistory = {
        push : function (vm) {
            var state = vm.getState();
            if (history.pushState) {
                history.pushState(state, "CyberRange");
            }
        }
    };

    // Setup logging

    level = Logger.levels[level];
    logger = new Logger(level, settings, '/ixia/log_js.json');

    if (window) {
        window.logger = logger;
        logger.attachWindowErrorHandler();
    }

    if ($) {
        logger.use(log_ajax);
    }

    ko.setTemplateEngine(new ko.nativeTemplateEngine())

    // Load assets

    load = translatorInitializer(settings.language)
        .then(openLoadingLightbox)
        .then(loadingLightboxOpenComplete)
        .then(getImageUrls)
        .then(queueImages.bind(this, settings.build_number))
        .then(loadGlobals)
        .then(loadRootViewModel.bind(this, settings));

    load.then(closeLoadingLightbox)
        .then(loadInfoPane)
        .then(callback, function (err) {
            logger.error(err);
        })
;
};
});

require("./components-ixia/boot");
